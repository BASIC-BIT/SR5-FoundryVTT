{
  "version": 3,
  "sources": ["../node_modules/@yaireo/tagify/dist/tagify.min.js", "../node_modules/xml2js/lib/defaults.js", "../node_modules/xmlbuilder/lib/Utility.js", "../node_modules/xmlbuilder/lib/XMLDOMImplementation.js", "../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js", "../node_modules/xmlbuilder/lib/XMLDOMStringList.js", "../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js", "../node_modules/xmlbuilder/lib/NodeType.js", "../node_modules/xmlbuilder/lib/XMLAttribute.js", "../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js", "../node_modules/xmlbuilder/lib/XMLElement.js", "../node_modules/xmlbuilder/lib/XMLCharacterData.js", "../node_modules/xmlbuilder/lib/XMLCData.js", "../node_modules/xmlbuilder/lib/XMLComment.js", "../node_modules/xmlbuilder/lib/XMLDeclaration.js", "../node_modules/xmlbuilder/lib/XMLDTDAttList.js", "../node_modules/xmlbuilder/lib/XMLDTDEntity.js", "../node_modules/xmlbuilder/lib/XMLDTDElement.js", "../node_modules/xmlbuilder/lib/XMLDTDNotation.js", "../node_modules/xmlbuilder/lib/XMLDocType.js", "../node_modules/xmlbuilder/lib/XMLRaw.js", "../node_modules/xmlbuilder/lib/XMLText.js", "../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js", "../node_modules/xmlbuilder/lib/XMLDummy.js", "../node_modules/xmlbuilder/lib/XMLNodeList.js", "../node_modules/xmlbuilder/lib/DocumentPosition.js", "../node_modules/xmlbuilder/lib/XMLNode.js", "../node_modules/xmlbuilder/lib/XMLStringifier.js", "../node_modules/xmlbuilder/lib/WriterState.js", "../node_modules/xmlbuilder/lib/XMLWriterBase.js", "../node_modules/xmlbuilder/lib/XMLStringWriter.js", "../node_modules/xmlbuilder/lib/XMLDocument.js", "../node_modules/xmlbuilder/lib/XMLDocumentCB.js", "../node_modules/xmlbuilder/lib/XMLStreamWriter.js", "../node_modules/xmlbuilder/lib/index.js", "../node_modules/xml2js/lib/builder.js", "../node_modules/emitter-component/index.js", "../node_modules/stream/index.js", "../node_modules/base64-js/index.js", "../node_modules/ieee754/index.js", "../node_modules/buffer/index.js", "../node_modules/safe-buffer/index.js", "../node_modules/string_decoder/lib/string_decoder.js", "../node_modules/sax/lib/sax.js", "../node_modules/events/events.js", "../node_modules/xml2js/lib/bom.js", "../node_modules/xml2js/lib/processors.js", "../node_modules/timers/index.js", "../node_modules/xml2js/lib/parser.js", "../node_modules/xml2js/lib/xml2js.js", "../src/module/handlebars/HandlebarTemplates.ts", "../src/module/parts/PartsList.ts", "../src/module/constants.ts", "../src/module/rules/SkillRules.ts", "../src/module/actor/flows/SkillFlow.ts", "../src/module/chat.ts", "../src/module/data/DataDefaults.ts", "../src/module/data/DataWrapper.ts", "../src/module/data/SR5ItemDataWrapper.ts", "../src/module/rules/MatrixRules.ts", "../src/module/rolls/SR5Roll.ts", "../src/module/config.ts", "../src/module/item/flows/ActionFlow.ts", "../src/module/tests/TestCreator.ts", "../src/module/item/ChatData.ts", "../src/module/sockets.ts", "../src/module/item/flows/NetworkDeviceFlow.ts", "../src/module/item/prep/HostPrep.ts", "../src/module/rules/SoakRules.ts", "../src/module/rules/CombatRules.ts", "../src/module/rules/MeleeRules.ts", "../src/module/apps/dialogs/FormDialog.ts", "../src/module/apps/dialogs/DamageApplicationDialog.ts", "../src/module/actor/flows/DamageApplicationFlow.ts", "../src/module/apps/dialogs/TestDialog.ts", "../src/module/template.ts", "../src/module/rules/TestRules.ts", "../src/module/tests/SuccessTest.ts", "../src/module/tests/OpposedTest.ts", "../src/module/tests/DefenseTest.ts", "../src/module/tests/PhysicalDefenseTest.ts", "../src/module/item/flows/ActionResultFlow.ts", "../src/module/item/SR5Item.ts", "../src/module/actor/prep/functions/InitiativePrep.ts", "../src/module/actor/prep/functions/ModifiersPrep.ts", "../src/module/actor/prep/functions/AttributesPrep.ts", "../src/module/actor/prep/functions/MatrixPrep.ts", "../src/module/actor/prep/functions/ItemPrep.ts", "../src/module/actor/prep/functions/SkillsPrep.ts", "../src/module/rules/LimitRules.ts", "../src/module/actor/prep/functions/LimitsPrep.ts", "../src/module/actor/prep/functions/ConditionMonitorsPrep.ts", "../src/module/actor/prep/functions/MovementPrep.ts", "../src/module/rules/MonitorRules.ts", "../src/module/actor/prep/functions/WoundsPrep.ts", "../src/module/actor/prep/functions/NPCPrep.ts", "../src/module/actor/prep/CharacterPrep.ts", "../src/module/actor/prep/CritterPrep.ts", "../src/module/actor/prep/SpiritPrep.ts", "../src/module/actor/prep/SpritePrep.ts", "../src/module/actor/prep/VehiclePrep.ts", "../src/module/rules/modifiers/SituationModifier.ts", "../src/module/rules/modifiers/BackgroundCountModifier.ts", "../src/module/rules/modifiers/NoiseModifier.ts", "../src/module/rules/modifiers/EnvironmentalModifier.ts", "../src/module/rules/DocumentSituationModifiers.ts", "../src/module/actor/prep/ICPrep.ts", "../src/module/actor/flows/InventoryFlow.ts", "../src/module/actor/flows/ModifierFlow.ts", "../src/module/tests/AttributeOnlyTest.ts", "../src/module/rules/RecoveryRules.ts", "../src/module/actor/SR5Actor.ts", "../src/module/apps/dialogs/DeleteConfirmationDialog.ts", "../src/module/helpers.ts", "../src/module/handlebars/RollAndLabelHelpers.ts", "../src/module/handlebars/ItemLineHelpers.ts", "../src/module/handlebars/SkillLineHelpers.ts", "../src/module/handlebars/AppHelpers.ts", "../src/module/handlebars/BasicHelpers.ts", "../src/module/handlebars/ActorHelpers.ts", "../src/module/handlebars/HandlebarManager.ts", "../src/module/migrator/VersionMigration.ts", "../src/module/migrator/versions/Version0_8_0.ts", "../src/module/migrator/Migrator.ts", "../src/module/settings.ts", "../src/module/effects.ts", "../src/module/utils/sheets.ts", "../src/module/item/SR5ItemSheet.ts", "../src/module/token/SR5Token.ts", "../src/module/effect/SR5ActiveEffect.ts", "../src/module/combat/SR5Combat.ts", "../src/module/apps/gmtools/OverwatchScoreTracker.js", "../src/module/importer/importer/Constants.ts", "../src/module/importer/helper/ImportStrategy.ts", "../src/module/importer/helper/XMLStrategy.ts", "../src/module/importer/helper/JSONStrategy.ts", "../src/module/importer/helper/ImportHelper.ts", "../src/module/importer/importer/DataImporter.ts", "../src/module/importer/parser/Parser.ts", "../src/module/importer/parser/item/ItemParserBase.ts", "../src/module/importer/parser/item/TechnologyItemParserBase.ts", "../src/module/importer/parser/weapon/WeaponParserBase.ts", "../src/module/importer/parser/weapon/RangedParser.ts", "../src/module/importer/parser/weapon/MeleeParser.ts", "../src/module/importer/parser/weapon/ThrownParser.ts", "../src/module/importer/parser/ParserMap.ts", "../src/module/importer/importer/WeaponImporter.ts", "../src/module/importer/parser/armor/ArmorParserBase.ts", "../src/module/importer/importer/ArmorImporter.ts", "../src/module/importer/importer/AmmoImporter.ts", "../src/module/importer/parser/mod/ModParserBase.ts", "../src/module/importer/importer/ModImporter.ts", "../src/module/importer/parser/spell/SpellParserBase.ts", "../src/module/importer/parser/spell/CombatSpellParser.ts", "../src/module/importer/parser/spell/ManipulationSpellParser.ts", "../src/module/importer/parser/spell/IllusionSpellParser.ts", "../src/module/importer/parser/spell/DetectionSpellImporter.ts", "../src/module/importer/importer/SpellImporter.ts", "../src/module/importer/parser/quality/QualityParserBase.ts", "../src/module/importer/importer/QualityImporter.ts", "../src/module/importer/parser/complex-form/ComplexFormParserBase.ts", "../src/module/importer/importer/ComplexFormImporter.ts", "../src/module/importer/parser/ware/CyberwareParser.ts", "../src/module/importer/importer/WareImporter.ts", "../src/module/importer/parser/critter-power/CritterPowerParserBase.ts", "../src/module/importer/importer/CritterPowerImporter.ts", "../src/module/importer/importer/DeviceImporter.ts", "../src/module/importer/importer/EquipmentImporter.ts", "../src/module/importer/apps/import-form.ts", "../src/module/apps/ChangelogApplication.ts", "../src/module/apps/SituationModifiersApplication.ts", "../src/module/apps/skills/SkillEditSheet.ts", "../src/module/apps/skills/LanguageSkillEditSheet.ts", "../src/module/apps/skills/KnowledgeSkillEditSheet.ts", "../src/module/apps/dialogs/MoveInventoryDialog.ts", "../src/module/apps/characterImport/CharacterInfoUpdater.js", "../src/module/apps/characterImport/BaseParserFunctions.js", "../src/module/apps/characterImport/gearImport/BaseGearParser.ts", "../src/module/apps/characterImport/gearImport/SinParser.ts", "../src/module/apps/characterImport/gearImport/DeviceParser.ts", "../src/module/apps/characterImport/gearImport/ProgramParser.ts", "../src/module/apps/characterImport/gearImport/AmmoParser.ts", "../src/module/apps/characterImport/gearImport/ParserSelector.ts", "../src/module/apps/characterImport/gearImport/GearsParser.ts", "../src/module/apps/characterImport/ArmorParser.js", "../src/module/apps/characterImport/CyberwareParser.js", "../src/module/apps/characterImport/QualityParser.js", "../src/module/apps/characterImport/PowerParser.js", "../src/module/apps/characterImport/SpellParser.js", "../src/module/apps/characterImport/WeaponParser.js", "../src/module/apps/characterImport/LifestyleParser.js", "../src/module/apps/characterImport/ContactParser.js", "../src/module/apps/characterImport/ItemsParser.js", "../src/module/apps/characterImport/CharacterImporter.js", "../src/module/apps/chummer-import-form.js", "../src/module/actor/sheets/SR5BaseActorSheet.ts", "../src/module/actor/sheets/SR5ICActorSheet.ts", "../src/module/effect/SR5ActiveEffectConfig.ts", "../src/module/actor/sheets/SR5VehicleActorSheet.ts", "../src/module/actor/sheets/SR5CharacterSheet.ts", "../src/module/actor/sheets/SR5SpiritActorSheet.ts", "../src/module/actor/sheets/SR5SpriteActorSheet.ts", "../src/module/rules/RangedWeaponRules.ts", "../src/module/rules/FireModeRules.ts", "../src/module/tests/RangedAttackTest.ts", "../src/module/apps/dialogs/ShadowrunActorDialogs.ts", "../src/module/actor/flows/SoakFlow.ts", "../src/module/tests/PhysicalResistTest.ts", "../src/module/tests/MeleeAttackTest.ts", "../src/module/rules/SpellcastingRules.ts", "../src/module/rules/DrainRules.ts", "../src/module/tests/SpellCastingTest.ts", "../src/module/tests/DrainTest.ts", "../src/module/rules/CombatSpellRules.ts", "../src/module/tests/CombatSpellDefenseTest.ts", "../src/module/rules/ComplexFormRules.ts", "../src/module/rules/FadeRules.ts", "../src/module/tests/ComplexFormTest.ts", "../src/module/tests/NaturalRecoveryStunTest.ts", "../src/module/tests/NaturalRecoveryPhysicalTest.ts", "../src/module/tests/FadeTest.ts", "../src/module/tests/ThrownAttackTest.ts", "../src/module/tests/PilotVehicleTest.ts", "../src/module/tests/DronePerceptionTest.ts", "../src/module/tests/DroneInfiltrationTest.ts", "../src/module/tests/SupressionDefenseTest.ts", "../src/test/sr5.AttackTests.spec.ts", "../src/test/utils.ts", "../src/test/sr5.Modifiers.spec.ts", "../src/test/sr5.SR5Item.spec.ts", "../src/test/sr5.Matrix.spec.ts", "../src/test/sr5.SR5Actor.spec.ts", "../src/test/sr5.ActorDataPrep.spec.ts", "../src/test/sr5.ActiveEffect.spec.ts", "../src/test/sr5.NetworkDevices.spec.ts", "../src/test/sr5.Testing.spec.ts", "../src/test/sr5.Inventory.spec.ts", "../src/test/quench.ts", "../src/module/macros.ts", "../src/module/keybindings.ts", "../src/module/hooks.ts", "../src/module/main.ts"],
  "sourcesContent": ["/**\n * Tagify (v 4.17.6) - tags input component\n * By undefined\n * https://github.com/yairEO/tagify\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.\n */\n\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).Tagify=e()}(this,(function(){\"use strict\";function t(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,s)}return i}function e(e){for(var s=1;s<arguments.length;s++){var a=null!=arguments[s]?arguments[s]:{};s%2?t(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(t,e,i){return(e=function(t){var e=function(t,e){if(\"object\"!=typeof t||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var s=i.call(t,e||\"default\");if(\"object\"!=typeof s)return s;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===e?String:Number)(t)}(t,\"string\");return\"symbol\"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}const s=(t,e,i,s)=>(t=\"\"+t,e=\"\"+e,s&&(t=t.trim(),e=e.trim()),i?t==e:t.toLowerCase()==e.toLowerCase()),a=(t,e)=>t&&Array.isArray(t)&&t.map((t=>n(t,e)));function n(t,e){var i,s={};for(i in t)e.indexOf(i)<0&&(s[i]=t[i]);return s}function o(t){var e=document.createElement(\"div\");return t.replace(/\\&#?[0-9a-z]+;/gi,(function(t){return e.innerHTML=t,e.innerText}))}function r(t){return(new DOMParser).parseFromString(t.trim(),\"text/html\").body.firstElementChild}function l(t,e){for(e=e||\"previous\";t=t[e+\"Sibling\"];)if(3==t.nodeType)return t}function d(t){return\"string\"==typeof t?t.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/`|'/g,\"&#039;\"):t}function h(t){var e=Object.prototype.toString.call(t).split(\" \")[1].slice(0,-1);return t===Object(t)&&\"Array\"!=e&&\"Function\"!=e&&\"RegExp\"!=e&&\"HTMLUnknownElement\"!=e}function g(t,e,i){function s(t,e){for(var i in e)if(e.hasOwnProperty(i)){if(h(e[i])){h(t[i])?s(t[i],e[i]):t[i]=Object.assign({},e[i]);continue}if(Array.isArray(e[i])){t[i]=Object.assign([],e[i]);continue}t[i]=e[i]}}return t instanceof Object||(t={}),s(t,e),i&&s(t,i),t}function p(){const t=[],e={};for(let i of arguments)for(let s of i)h(s)?e[s.value]||(t.push(s),e[s.value]=1):t.includes(s)||t.push(s);return t}function c(t){return String.prototype.normalize?\"string\"==typeof t?t.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\"):void 0:t}var u=()=>/(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);function m(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)))}function v(t){return t&&t.classList&&t.classList.contains(this.settings.classNames.tag)}function f(t,e){var i=window.getSelection();return e=e||i.getRangeAt(0),\"string\"==typeof t&&(t=document.createTextNode(t)),e&&(e.deleteContents(),e.insertNode(t)),t}function T(t,e,i){return t?(e&&(t.__tagifyTagData=i?e:g({},t.__tagifyTagData||{},e)),t.__tagifyTagData):(console.warn(\"tag element doesn't exist\",t,e),e)}var w={delimiters:\",\",pattern:null,tagTextProp:\"value\",maxTags:1/0,callbacks:{},addTagOnBlur:!0,onChangeAfterBlur:!0,duplicates:!1,whitelist:[],blacklist:[],enforceWhitelist:!1,userInput:!0,keepInvalidTags:!1,createInvalidTags:!0,mixTagsAllowedAfter:/,|\\.|\\:|\\s/,mixTagsInterpolator:[\"[[\",\"]]\"],backspace:!0,skipInvalid:!1,pasteAsTags:!0,editTags:{clicks:2,keepInvalid:!0},transformTag:()=>{},trim:!0,a11y:{focusableTags:!1},mixMode:{insertAfterTag:\"\u00A0\"},autoComplete:{enabled:!0,rightKey:!1},classNames:{namespace:\"tagify\",mixMode:\"tagify--mix\",selectMode:\"tagify--select\",input:\"tagify__input\",focus:\"tagify--focus\",tagNoAnimation:\"tagify--noAnim\",tagInvalid:\"tagify--invalid\",tagNotAllowed:\"tagify--notAllowed\",scopeLoading:\"tagify--loading\",hasMaxTags:\"tagify--hasMaxTags\",hasNoTags:\"tagify--noTags\",empty:\"tagify--empty\",inputInvalid:\"tagify__input--invalid\",dropdown:\"tagify__dropdown\",dropdownWrapper:\"tagify__dropdown__wrapper\",dropdownHeader:\"tagify__dropdown__header\",dropdownFooter:\"tagify__dropdown__footer\",dropdownItem:\"tagify__dropdown__item\",dropdownItemActive:\"tagify__dropdown__item--active\",dropdownItemHidden:\"tagify__dropdown__item--hidden\",dropdownInital:\"tagify__dropdown--initial\",tag:\"tagify__tag\",tagText:\"tagify__tag-text\",tagX:\"tagify__tag__removeBtn\",tagLoading:\"tagify__tag--loading\",tagEditing:\"tagify__tag--editable\",tagFlash:\"tagify__tag--flash\",tagHide:\"tagify__tag--hide\"},dropdown:{classname:\"\",enabled:2,maxItems:10,searchKeys:[\"value\",\"searchBy\"],fuzzySearch:!0,caseSensitive:!1,accentedSearch:!0,includeSelectedTags:!1,highlightFirst:!1,closeOnSelect:!0,clearOnSelect:!0,position:\"all\",appendTarget:null},hooks:{beforeRemoveTag:()=>Promise.resolve(),beforePaste:()=>Promise.resolve(),suggestionClick:()=>Promise.resolve()}};function b(){this.dropdown={};for(let t in this._dropdown)this.dropdown[t]=\"function\"==typeof this._dropdown[t]?this._dropdown[t].bind(this):this._dropdown[t];this.dropdown.refs()}var y={refs(){this.DOM.dropdown=this.parseTemplate(\"dropdown\",[this.settings]),this.DOM.dropdown.content=this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\")},getHeaderRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\")},getFooterRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\")},getAllSuggestionsRefs(){return[...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)]},show(t){var e,i,a,n=this.settings,o=\"mix\"==n.mode&&!n.enforceWhitelist,r=!n.whitelist||!n.whitelist.length,l=\"manual\"==n.dropdown.position;if(t=void 0===t?this.state.inputText:t,!(r&&!o&&!n.templates.dropdownItemNoMatch||!1===n.dropdown.enable||this.state.isLoading||this.settings.readonly)){if(clearTimeout(this.dropdownHide__bindEventsTimeout),this.suggestedListItems=this.dropdown.filterListItems(t),t&&!this.suggestedListItems.length&&(this.trigger(\"dropdown:noMatch\",t),n.templates.dropdownItemNoMatch&&(a=n.templates.dropdownItemNoMatch.call(this,{value:t}))),!a){if(this.suggestedListItems.length)t&&o&&!this.state.editing.scope&&!s(this.suggestedListItems[0].value,t)&&this.suggestedListItems.unshift({value:t});else{if(!t||!o||this.state.editing.scope)return this.input.autocomplete.suggest.call(this),void this.dropdown.hide();this.suggestedListItems=[{value:t}]}i=\"\"+(h(e=this.suggestedListItems[0])?e.value:e),n.autoComplete&&i&&0==i.indexOf(t)&&this.input.autocomplete.suggest.call(this,e)}this.dropdown.fill(a),n.dropdown.highlightFirst&&this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(n.classNames.dropdownItemSelector)),this.state.dropdown.visible||setTimeout(this.dropdown.events.binding.bind(this)),this.state.dropdown.visible=t||!0,this.state.dropdown.query=t,this.setStateSelection(),l||setTimeout((()=>{this.dropdown.position(),this.dropdown.render()})),setTimeout((()=>{this.trigger(\"dropdown:show\",this.DOM.dropdown)}))}},hide(t){var e=this.DOM,i=e.scope,s=e.dropdown,a=\"manual\"==this.settings.dropdown.position&&!t;if(s&&document.body.contains(s)&&!a)return window.removeEventListener(\"resize\",this.dropdown.position),this.dropdown.events.binding.call(this,!1),i.setAttribute(\"aria-expanded\",!1),s.parentNode.removeChild(s),setTimeout((()=>{this.state.dropdown.visible=!1}),100),this.state.dropdown.query=this.state.ddItemData=this.state.ddItemElm=this.state.selection=null,this.state.tag&&this.state.tag.value.length&&(this.state.flaggedTags[this.state.tag.baseOffset]=this.state.tag),this.trigger(\"dropdown:hide\",s),this},toggle(t){this.dropdown[this.state.dropdown.visible&&!t?\"hide\":\"show\"]()},render(){var t,e,i,s=(t=this.DOM.dropdown,(i=t.cloneNode(!0)).style.cssText=\"position:fixed; top:-9999px; opacity:0\",document.body.appendChild(i),e=i.clientHeight,i.parentNode.removeChild(i),e),a=this.settings;return\"number\"==typeof a.dropdown.enabled&&a.dropdown.enabled>=0?(this.DOM.scope.setAttribute(\"aria-expanded\",!0),document.body.contains(this.DOM.dropdown)||(this.DOM.dropdown.classList.add(a.classNames.dropdownInital),this.dropdown.position(s),a.dropdown.appendTarget.appendChild(this.DOM.dropdown),setTimeout((()=>this.DOM.dropdown.classList.remove(a.classNames.dropdownInital)))),this):this},fill(t){t=\"string\"==typeof t?t:this.dropdown.createListHTML(t||this.suggestedListItems);var e,i=this.settings.templates.dropdownContent.call(this,t);this.DOM.dropdown.content.innerHTML=(e=i)?e.replace(/\\>[\\r\\n ]+\\</g,\"><\").replace(/(<.*?>)|\\s+/g,((t,e)=>e||\" \")):\"\"},fillHeaderFooter(){var t=this.dropdown.filterListItems(this.state.dropdown.query),e=this.parseTemplate(\"dropdownHeader\",[t]),i=this.parseTemplate(\"dropdownFooter\",[t]),s=this.dropdown.getHeaderRef(),a=this.dropdown.getFooterRef();e&&s?.parentNode.replaceChild(e,s),i&&a?.parentNode.replaceChild(i,a)},refilter(t){t=t||this.state.dropdown.query||\"\",this.suggestedListItems=this.dropdown.filterListItems(t),this.dropdown.fill(),this.suggestedListItems.length||this.dropdown.hide(),this.trigger(\"dropdown:updated\",this.DOM.dropdown)},position(t){var e=this.settings.dropdown;if(\"manual\"!=e.position){var i,s,a,n,o,r,l=this.DOM.dropdown,d=e.placeAbove,h=e.appendTarget===document.body,g=h?window.pageYOffset:e.appendTarget.scrollTop,p=document.fullscreenElement||document.webkitFullscreenElement||document.documentElement,c=p.clientHeight,u=Math.max(p.clientWidth||0,window.innerWidth||0)>480?e.position:\"all\",m=this.DOM[\"input\"==u?\"input\":\"scope\"];if(t=t||l.clientHeight,this.state.dropdown.visible){if(\"text\"==u?(a=(i=function(){const t=document.getSelection();if(t.rangeCount){const e=t.getRangeAt(0),i=e.startContainer,s=e.startOffset;let a,n;if(s>0)return n=document.createRange(),n.setStart(i,s-1),n.setEnd(i,s),a=n.getBoundingClientRect(),{left:a.right,top:a.top,bottom:a.bottom};if(i.getBoundingClientRect)return i.getBoundingClientRect()}return{left:-9999,top:-9999}}()).bottom,s=i.top,n=i.left,o=\"auto\"):(r=function(t){for(var e=0,i=0;t&&t!=p;)e+=t.offsetLeft||0,i+=t.offsetTop||0,t=t.parentNode;return{left:e,top:i}}(e.appendTarget),s=(i=m.getBoundingClientRect()).top-r.top,a=i.bottom-1-r.top,n=i.left-r.left,o=i.width+\"px\"),!h){let t=function(){for(var t=0,i=e.appendTarget.parentNode;i;)t+=i.scrollTop||0,i=i.parentNode;return t}();s+=t,a+=t}s=Math.floor(s),a=Math.ceil(a),d=void 0===d?c-i.bottom<t:d,l.style.cssText=\"left:\"+(n+window.pageXOffset)+\"px; width:\"+o+\";\"+(d?\"top: \"+(s+g)+\"px\":\"top: \"+(a+g)+\"px\"),l.setAttribute(\"placement\",d?\"top\":\"bottom\"),l.setAttribute(\"position\",u)}}},events:{binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e=this.dropdown.events.callbacks,i=this.listeners.dropdown=this.listeners.dropdown||{position:this.dropdown.position.bind(this,null),onKeyDown:e.onKeyDown.bind(this),onMouseOver:e.onMouseOver.bind(this),onMouseLeave:e.onMouseLeave.bind(this),onClick:e.onClick.bind(this),onScroll:e.onScroll.bind(this)},s=t?\"addEventListener\":\"removeEventListener\";\"manual\"!=this.settings.dropdown.position&&(document[s](\"scroll\",i.position,!0),window[s](\"resize\",i.position),window[s](\"keydown\",i.onKeyDown)),this.DOM.dropdown[s](\"mouseover\",i.onMouseOver),this.DOM.dropdown[s](\"mouseleave\",i.onMouseLeave),this.DOM.dropdown[s](\"mousedown\",i.onClick),this.DOM.dropdown.content[s](\"scroll\",i.onScroll)},callbacks:{onKeyDown(t){if(this.state.hasFocus&&!this.state.composing){var e=this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector),i=this.dropdown.getSuggestionDataByNode(e);switch(t.key){case\"ArrowDown\":case\"ArrowUp\":case\"Down\":case\"Up\":t.preventDefault();var s=this.dropdown.getAllSuggestionsRefs(),a=\"ArrowUp\"==t.key||\"Up\"==t.key;e&&(e=this.dropdown.getNextOrPrevOption(e,!a)),e&&e.matches(this.settings.classNames.dropdownItemSelector)||(e=s[a?s.length-1:0]),this.dropdown.highlightOption(e,!0);break;case\"Escape\":case\"Esc\":this.dropdown.hide();break;case\"ArrowRight\":if(this.state.actions.ArrowLeft)return;case\"Tab\":if(\"mix\"!=this.settings.mode&&e&&!this.settings.autoComplete.rightKey&&!this.state.editing){t.preventDefault();var n=this.dropdown.getMappedValue(i);return this.input.autocomplete.set.call(this,n),!1}return!0;case\"Enter\":t.preventDefault(),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{if(e)return this.dropdown.selectOption(e),e=this.dropdown.getNextOrPrevOption(e,!a),void this.dropdown.highlightOption(e);this.dropdown.hide(),\"mix\"!=this.settings.mode&&this.addTags(this.state.inputText.trim(),!0)})).catch((t=>t));break;case\"Backspace\":{if(\"mix\"==this.settings.mode||this.state.editing.scope)return;const t=this.input.raw.call(this);\"\"!=t&&8203!=t.charCodeAt(0)||(!0===this.settings.backspace?this.removeTags():\"edit\"==this.settings.backspace&&setTimeout(this.editTag.bind(this),0))}}}},onMouseOver(t){var e=t.target.closest(this.settings.classNames.dropdownItemSelector);e&&this.dropdown.highlightOption(e)},onMouseLeave(t){this.dropdown.highlightOption()},onClick(t){if(0==t.button&&t.target!=this.DOM.dropdown&&t.target!=this.DOM.dropdown.content){var e=t.target.closest(this.settings.classNames.dropdownItemSelector),i=this.dropdown.getSuggestionDataByNode(e);this.state.actions.selectOption=!0,setTimeout((()=>this.state.actions.selectOption=!1),50),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{e?this.dropdown.selectOption(e,t):this.dropdown.hide()})).catch((t=>console.warn(t)))}},onScroll(t){var e=t.target,i=e.scrollTop/(e.scrollHeight-e.parentNode.clientHeight)*100;this.trigger(\"dropdown:scroll\",{percentage:Math.round(i)})}}},getSuggestionDataByNode(t){var e=t&&t.getAttribute(\"value\");return this.suggestedListItems.find((t=>t.value==e))||null},getNextOrPrevOption(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.dropdown.getAllSuggestionsRefs(),s=i.findIndex((e=>e===t));return e?i[s+1]:i[s-1]},highlightOption(t,e){var i,s=this.settings.classNames.dropdownItemActive;if(this.state.ddItemElm&&(this.state.ddItemElm.classList.remove(s),this.state.ddItemElm.removeAttribute(\"aria-selected\")),!t)return this.state.ddItemData=null,this.state.ddItemElm=null,void this.input.autocomplete.suggest.call(this);i=this.dropdown.getSuggestionDataByNode(t),this.state.ddItemData=i,this.state.ddItemElm=t,t.classList.add(s),t.setAttribute(\"aria-selected\",!0),e&&(t.parentNode.scrollTop=t.clientHeight+t.offsetTop-t.parentNode.clientHeight),this.settings.autoComplete&&(this.input.autocomplete.suggest.call(this,i),this.dropdown.position())},selectOption(t,e){var i=this.settings.dropdown,s=i.clearOnSelect,a=i.closeOnSelect;if(!t)return this.addTags(this.state.inputText,!0),void(a&&this.dropdown.hide());e=e||{};var n=t.getAttribute(\"value\"),o=\"noMatch\"==n,r=this.suggestedListItems.find((t=>(t.value||t)==n));this.trigger(\"dropdown:select\",{data:r,elm:t,event:e}),n&&(r||o)?(this.state.editing?this.onEditTagDone(null,g({__isValid:!0},this.normalizeTags([r])[0])):this[\"mix\"==this.settings.mode?\"addMixTags\":\"addTags\"]([r||this.input.raw.call(this)],s),this.DOM.input.parentNode&&(setTimeout((()=>{this.DOM.input.focus(),this.toggleFocusClass(!0),this.setRangeAtStartEnd(!1,this.DOM.input)})),a&&setTimeout(this.dropdown.hide.bind(this)),t.addEventListener(\"transitionend\",(()=>{this.dropdown.fillHeaderFooter(),setTimeout((()=>t.remove()),100)}),{once:!0}),t.classList.add(this.settings.classNames.dropdownItemHidden))):a&&setTimeout(this.dropdown.hide.bind(this))},selectAll(t){this.suggestedListItems.length=0,this.dropdown.hide(),this.dropdown.filterListItems(\"\");var e=this.dropdown.filterListItems(\"\");return t||(e=this.state.dropdown.suggestions),this.addTags(e,!0),this},filterListItems(t,e){var i,s,a,n,o,r=this.settings,l=r.dropdown,d=(e=e||{},[]),g=[],p=r.whitelist,u=l.maxItems>=0?l.maxItems:1/0,m=l.searchKeys,v=0;if(!(t=\"select\"==r.mode&&this.value.length&&this.value[0][r.tagTextProp]==t?\"\":t)||!m.length)return d=l.includeSelectedTags?p:p.filter((t=>!this.isTagDuplicate(h(t)?t.value:t))),this.state.dropdown.suggestions=d,d.slice(0,u);function f(t,e){return e.toLowerCase().split(\" \").every((e=>t.includes(e.toLowerCase())))}for(o=l.caseSensitive?\"\"+t:(\"\"+t).toLowerCase();v<p.length;v++){let t,r;i=p[v]instanceof Object?p[v]:{value:p[v]};let u=!Object.keys(i).some((t=>m.includes(t)))?[\"value\"]:m;l.fuzzySearch&&!e.exact?(a=u.reduce(((t,e)=>t+\" \"+(i[e]||\"\")),\"\").toLowerCase().trim(),l.accentedSearch&&(a=c(a),o=c(o)),t=0==a.indexOf(o),r=a===o,s=f(a,o)):(t=!0,s=u.some((t=>{var s=\"\"+(i[t]||\"\");return l.accentedSearch&&(s=c(s),o=c(o)),l.caseSensitive||(s=s.toLowerCase()),r=s===o,e.exact?s===o:0==s.indexOf(o)}))),n=!l.includeSelectedTags&&this.isTagDuplicate(h(i)?i.value:i),s&&!n&&(r&&t?g.push(i):\"startsWith\"==l.sortby&&t?d.unshift(i):d.push(i))}return this.state.dropdown.suggestions=g.concat(d),\"function\"==typeof l.sortby?l.sortby(g.concat(d),o):g.concat(d).slice(0,u)},getMappedValue(t){var e=this.settings.dropdown.mapValueTo;return e?\"function\"==typeof e?e(t):t[e]||t.value:t.value},createListHTML(t){return g([],t).map(((t,i)=>{\"string\"!=typeof t&&\"number\"!=typeof t||(t={value:t});var s=this.dropdown.getMappedValue(t);return s=\"string\"==typeof s?d(s):s,this.settings.templates.dropdownItem.apply(this,[e(e({},t),{},{mappedValue:s}),this])})).join(\"\")}};const x=\"@yaireo/tagify/\";var O,D={empty:\"empty\",exceed:\"number of tags exceeded\",pattern:\"pattern mismatch\",duplicate:\"already exists\",notAllowed:\"not allowed\"},M={wrapper:(t,e)=>`<tags class=\"${e.classNames.namespace} ${e.mode?`${e.classNames[e.mode+\"Mode\"]}`:\"\"} ${t.className}\"\\n                    ${e.readonly?\"readonly\":\"\"}\\n                    ${e.disabled?\"disabled\":\"\"}\\n                    ${e.required?\"required\":\"\"}\\n                    ${\"select\"===e.mode?\"spellcheck='false'\":\"\"}\\n                    tabIndex=\"-1\">\\n            <span ${!e.readonly&&e.userInput?\"contenteditable\":\"\"} tabIndex=\"0\" data-placeholder=\"${e.placeholder||\"&#8203;\"}\" aria-placeholder=\"${e.placeholder||\"\"}\"\\n                class=\"${e.classNames.input}\"\\n                role=\"textbox\"\\n                aria-autocomplete=\"both\"\\n                aria-multiline=\"${\"mix\"==e.mode}\"></span>\\n                &#8203;\\n        </tags>`,tag(t,e){let i=e.settings;return`<tag title=\"${t.title||t.value}\"\\n                    contenteditable='false'\\n                    spellcheck='false'\\n                    tabIndex=\"${i.a11y.focusableTags?0:-1}\"\\n                    class=\"${i.classNames.tag} ${t.class||\"\"}\"\\n                    ${this.getAttributes(t)}>\\n            <x title='' class=\"${i.classNames.tagX}\" role='button' aria-label='remove tag'></x>\\n            <div>\\n                <span class=\"${i.classNames.tagText}\">${t[i.tagTextProp]||t.value}</span>\\n            </div>\\n        </tag>`},dropdown(t){var e=t.dropdown,i=\"manual\"==e.position,s=`${t.classNames.dropdown}`;return`<div class=\"${i?\"\":s} ${e.classname}\" role=\"listbox\" aria-labelledby=\"dropdown\">\\n                    <div data-selector='tagify-suggestions-wrapper' class=\"${t.classNames.dropdownWrapper}\"></div>\\n                </div>`},dropdownContent(t){var e=this.settings,i=this.state.dropdown.suggestions;return`\\n            ${e.templates.dropdownHeader.call(this,i)}\\n            ${t}\\n            ${e.templates.dropdownFooter.call(this,i)}\\n        `},dropdownItem(t){return`<div ${this.getAttributes(t)}\\n                    class='${this.settings.classNames.dropdownItem} ${t.class?t.class:\"\"}'\\n                    tabindex=\"0\"\\n                    role=\"option\">${t.mappedValue||t.value}</div>`},dropdownHeader(t){return`<header data-selector='tagify-suggestions-header' class=\"${this.settings.classNames.dropdownHeader}\"></header>`},dropdownFooter(t){var e=t.length-this.settings.dropdown.maxItems;return e>0?`<footer data-selector='tagify-suggestions-footer' class=\"${this.settings.classNames.dropdownFooter}\">\\n                ${e} more items. Refine your search.\\n            </footer>`:\"\"},dropdownItemNoMatch:null};var I={customBinding(){this.customEventsList.forEach((t=>{this.on(t,this.settings.callbacks[t])}))},binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e,i=this.events.callbacks,s=t?\"addEventListener\":\"removeEventListener\";if(!this.state.mainEvents||!t){for(var a in this.state.mainEvents=t,t&&!this.listeners.main&&(this.events.bindGlobal.call(this),this.settings.isJQueryPlugin&&jQuery(this.DOM.originalInput).on(\"tagify.removeAllTags\",this.removeAllTags.bind(this))),e=this.listeners.main=this.listeners.main||{focus:[\"input\",i.onFocusBlur.bind(this)],keydown:[\"input\",i.onKeydown.bind(this)],click:[\"scope\",i.onClickScope.bind(this)],dblclick:[\"scope\",i.onDoubleClickScope.bind(this)],paste:[\"input\",i.onPaste.bind(this)],drop:[\"input\",i.onDrop.bind(this)],compositionstart:[\"input\",i.onCompositionStart.bind(this)],compositionend:[\"input\",i.onCompositionEnd.bind(this)]})this.DOM[e[a][0]][s](a,e[a][1]);clearInterval(this.listeners.main.originalInputValueObserverInterval),this.listeners.main.originalInputValueObserverInterval=setInterval(i.observeOriginalInputValue.bind(this),500);var n=this.listeners.main.inputMutationObserver||new MutationObserver(i.onInputDOMChange.bind(this));n.disconnect(),\"mix\"==this.settings.mode&&n.observe(this.DOM.input,{childList:!0})}},bindGlobal(t){var e,i=this.events.callbacks,s=t?\"removeEventListener\":\"addEventListener\";if(t||!this.listeners.global)for(e of(this.listeners.global=this.listeners&&this.listeners.global||[{type:this.isIE?\"keydown\":\"input\",target:this.DOM.input,cb:i[this.isIE?\"onInputIE\":\"onInput\"].bind(this)},{type:\"keydown\",target:window,cb:i.onWindowKeyDown.bind(this)},{type:\"blur\",target:this.DOM.input,cb:i.onFocusBlur.bind(this)}],this.listeners.global))e.target[s](e.type,e.cb)},unbindGlobal(){this.events.bindGlobal.call(this,!0)},callbacks:{onFocusBlur(t){var e=this.settings,i=t.target?this.trim(t.target.textContent):\"\",s=this.value?.[0]?.[e.tagTextProp],a=t.type,n=e.dropdown.enabled>=0,o={relatedTarget:t.relatedTarget},r=this.state.actions.selectOption&&(n||!e.dropdown.closeOnSelect),l=this.state.actions.addNew&&n,d=t.relatedTarget&&v.call(this,t.relatedTarget)&&this.DOM.scope.contains(t.relatedTarget);if(\"blur\"==a){if(t.relatedTarget===this.DOM.scope)return this.dropdown.hide(),void this.DOM.input.focus();this.postUpdate(),e.onChangeAfterBlur&&this.triggerChangeEvent()}if(!r&&!l)if(this.state.hasFocus=\"focus\"==a&&+new Date,this.toggleFocusClass(this.state.hasFocus),\"mix\"!=e.mode){if(\"focus\"==a)return this.trigger(\"focus\",o),void(0!==e.dropdown.enabled&&e.userInput||this.dropdown.show(this.value.length?\"\":void 0));\"blur\"==a&&(this.trigger(\"blur\",o),this.loading(!1),\"select\"==e.mode&&(d&&(this.removeTags(),i=\"\"),s===i&&(i=\"\")),i&&!this.state.actions.selectOption&&e.addTagOnBlur&&this.addTags(i,!0)),this.DOM.input.removeAttribute(\"style\"),this.dropdown.hide()}else\"focus\"==a?this.trigger(\"focus\",o):\"blur\"==t.type&&(this.trigger(\"blur\",o),this.loading(!1),this.dropdown.hide(),this.state.dropdown.visible=void 0,this.setStateSelection())},onCompositionStart(t){this.state.composing=!0},onCompositionEnd(t){this.state.composing=!1},onWindowKeyDown(t){var e,i=document.activeElement;if(v.call(this,i)&&this.DOM.scope.contains(document.activeElement))switch(e=i.nextElementSibling,t.key){case\"Backspace\":this.settings.readonly||(this.removeTags(i),(e||this.DOM.input).focus());break;case\"Enter\":setTimeout(this.editTag.bind(this),0,i)}},onKeydown(t){var e=this.settings;if(!this.state.composing&&e.userInput){\"select\"==e.mode&&e.enforceWhitelist&&this.value.length&&\"Tab\"!=t.key&&t.preventDefault();var i=this.trim(t.target.textContent);if(this.trigger(\"keydown\",{event:t}),\"mix\"==e.mode){switch(t.key){case\"Left\":case\"ArrowLeft\":this.state.actions.ArrowLeft=!0;break;case\"Delete\":case\"Backspace\":if(this.state.editing)return;var s=document.getSelection(),a=\"Delete\"==t.key&&s.anchorOffset==(s.anchorNode.length||0),n=s.anchorNode.previousSibling,r=1==s.anchorNode.nodeType||!s.anchorOffset&&n&&1==n.nodeType&&s.anchorNode.previousSibling;o(this.DOM.input.innerHTML);var d,h,g,p=this.getTagElms();if(\"edit\"==e.backspace&&r)return d=1==s.anchorNode.nodeType?null:s.anchorNode.previousElementSibling,setTimeout(this.editTag.bind(this),0,d),void t.preventDefault();if(u()&&r instanceof Element)return g=l(r),r.hasAttribute(\"readonly\")||r.remove(),this.DOM.input.focus(),void setTimeout((()=>{this.placeCaretAfterNode(g),this.DOM.input.click()}));if(\"BR\"==s.anchorNode.nodeName)return;if((a||r)&&1==s.anchorNode.nodeType?h=0==s.anchorOffset?a?p[0]:null:p[Math.min(p.length,s.anchorOffset)-1]:a?h=s.anchorNode.nextElementSibling:r instanceof Element&&(h=r),3==s.anchorNode.nodeType&&!s.anchorNode.nodeValue&&s.anchorNode.previousElementSibling&&t.preventDefault(),(r||a)&&!e.backspace)return void t.preventDefault();if(\"Range\"!=s.type&&!s.anchorOffset&&s.anchorNode==this.DOM.input&&\"Delete\"!=t.key)return void t.preventDefault();if(\"Range\"!=s.type&&h&&h.hasAttribute(\"readonly\"))return void this.placeCaretAfterNode(l(h));clearTimeout(O),O=setTimeout((()=>{var t=document.getSelection();o(this.DOM.input.innerHTML),!a&&t.anchorNode.previousSibling,this.value=[].map.call(p,((t,e)=>{var i=T(t);if(t.parentNode||i.readonly)return i;this.trigger(\"remove\",{tag:t,index:e,data:i})})).filter((t=>t))}),20)}return!0}switch(t.key){case\"Backspace\":\"select\"==e.mode&&e.enforceWhitelist&&this.value.length?this.removeTags():this.state.dropdown.visible&&\"manual\"!=e.dropdown.position||\"\"!=t.target.textContent&&8203!=i.charCodeAt(0)||(!0===e.backspace?this.removeTags():\"edit\"==e.backspace&&setTimeout(this.editTag.bind(this),0));break;case\"Esc\":case\"Escape\":if(this.state.dropdown.visible)return;t.target.blur();break;case\"Down\":case\"ArrowDown\":this.state.dropdown.visible||this.dropdown.show();break;case\"ArrowRight\":{let t=this.state.inputSuggestion||this.state.ddItemData;if(t&&e.autoComplete.rightKey)return void this.addTags([t],!0);break}case\"Tab\":{let s=\"select\"==e.mode;if(!i||s)return!0;t.preventDefault()}case\"Enter\":if(this.state.dropdown.visible&&\"manual\"!=e.dropdown.position)return;t.preventDefault(),setTimeout((()=>{this.state.dropdown.visible||this.state.actions.selectOption||this.addTags(i,!0)}))}}},onInput(t){this.postUpdate();var e=this.settings;if(\"mix\"==e.mode)return this.events.callbacks.onMixTagsInput.call(this,t);var i=this.input.normalize.call(this),s=i.length>=e.dropdown.enabled,a={value:i,inputElm:this.DOM.input},n=this.validateTag({value:i});\"select\"==e.mode&&this.toggleScopeValidation(n),a.isValid=n,this.state.inputText!=i&&(this.input.set.call(this,i,!1),-1!=i.search(e.delimiters)?this.addTags(i)&&this.input.set.call(this):e.dropdown.enabled>=0&&this.dropdown[s?\"show\":\"hide\"](i),this.trigger(\"input\",a))},onMixTagsInput(t){var e,i,s,a,n,o,r,l,d=this.settings,h=this.value.length,p=this.getTagElms(),c=document.createDocumentFragment(),m=window.getSelection().getRangeAt(0),v=[].map.call(p,(t=>T(t).value));if(\"deleteContentBackward\"==t.inputType&&u()&&this.events.callbacks.onKeydown.call(this,{target:t.target,key:\"Backspace\"}),this.value.slice().forEach((t=>{t.readonly&&!v.includes(t.value)&&c.appendChild(this.createTagElem(t))})),c.childNodes.length&&(m.insertNode(c),this.setRangeAtStartEnd(!1,c.lastChild)),p.length!=h)return this.value=[].map.call(this.getTagElms(),(t=>T(t))),void this.update({withoutChangeEvent:!0});if(this.hasMaxTags())return!0;if(window.getSelection&&(o=window.getSelection()).rangeCount>0&&3==o.anchorNode.nodeType){if((m=o.getRangeAt(0).cloneRange()).collapse(!0),m.setStart(o.focusNode,0),s=(e=m.toString().slice(0,m.endOffset)).split(d.pattern).length-1,(i=e.match(d.pattern))&&(a=e.slice(e.lastIndexOf(i[i.length-1]))),a){if(this.state.actions.ArrowLeft=!1,this.state.tag={prefix:a.match(d.pattern)[0],value:a.replace(d.pattern,\"\")},this.state.tag.baseOffset=o.baseOffset-this.state.tag.value.length,l=this.state.tag.value.match(d.delimiters))return this.state.tag.value=this.state.tag.value.replace(d.delimiters,\"\"),this.state.tag.delimiters=l[0],this.addTags(this.state.tag.value,d.dropdown.clearOnSelect),void this.dropdown.hide();n=this.state.tag.value.length>=d.dropdown.enabled;try{r=(r=this.state.flaggedTags[this.state.tag.baseOffset]).prefix==this.state.tag.prefix&&r.value[0]==this.state.tag.value[0],this.state.flaggedTags[this.state.tag.baseOffset]&&!this.state.tag.value&&delete this.state.flaggedTags[this.state.tag.baseOffset]}catch(t){}(r||s<this.state.mixMode.matchedPatternCount)&&(n=!1)}else this.state.flaggedTags={};this.state.mixMode.matchedPatternCount=s}setTimeout((()=>{this.update({withoutChangeEvent:!0}),this.trigger(\"input\",g({},this.state.tag,{textContent:this.DOM.input.textContent})),this.state.tag&&this.dropdown[n?\"show\":\"hide\"](this.state.tag.value)}),10)},onInputIE(t){var e=this;setTimeout((function(){e.events.callbacks.onInput.call(e,t)}))},observeOriginalInputValue(){this.DOM.originalInput.parentNode||this.destroy(),this.DOM.originalInput.value!=this.DOM.originalInput.tagifyValue&&this.loadOriginalValues()},onClickScope(t){var e=this.settings,i=t.target.closest(\".\"+e.classNames.tag),s=+new Date-this.state.hasFocus;if(t.target!=this.DOM.scope){if(!t.target.classList.contains(e.classNames.tagX))return i?(this.trigger(\"click\",{tag:i,index:this.getNodeIndex(i),data:T(i),event:t}),void(1!==e.editTags&&1!==e.editTags.clicks||this.events.callbacks.onDoubleClickScope.call(this,t))):void(t.target==this.DOM.input&&(\"mix\"==e.mode&&this.fixFirefoxLastTagNoCaret(),s>500)?this.state.dropdown.visible?this.dropdown.hide():0===e.dropdown.enabled&&\"mix\"!=e.mode&&this.dropdown.show(this.value.length?\"\":void 0):\"select\"!=e.mode||0!==e.dropdown.enabled||this.state.dropdown.visible||this.dropdown.show());this.removeTags(t.target.parentNode)}else this.state.hasFocus||this.DOM.input.focus()},onPaste(t){t.preventDefault();var e,i,s=this.settings;if(\"select\"==s.mode&&s.enforceWhitelist||!s.userInput)return!1;s.readonly||(e=t.clipboardData||window.clipboardData,i=e.getData(\"Text\"),s.hooks.beforePaste(t,{tagify:this,pastedText:i,clipboardData:e}).then((e=>{void 0===e&&(e=i),e&&(this.injectAtCaret(e,window.getSelection().getRangeAt(0)),\"mix\"==this.settings.mode?this.events.callbacks.onMixTagsInput.call(this,t):this.settings.pasteAsTags?this.addTags(this.state.inputText+e,!0):this.state.inputText=e)})).catch((t=>t)))},onDrop(t){t.preventDefault()},onEditTagInput(t,e){var i=t.closest(\".\"+this.settings.classNames.tag),s=this.getNodeIndex(i),a=T(i),n=this.input.normalize.call(this,t),o={[this.settings.tagTextProp]:n,__tagId:a.__tagId},r=this.validateTag(o);this.editTagChangeDetected(g(a,o))||!0!==t.originalIsValid||(r=!0),i.classList.toggle(this.settings.classNames.tagInvalid,!0!==r),a.__isValid=r,i.title=!0===r?a.title||a.value:r,n.length>=this.settings.dropdown.enabled&&(this.state.editing&&(this.state.editing.value=n),this.dropdown.show(n)),this.trigger(\"edit:input\",{tag:i,index:s,data:g({},this.value[s],{newValue:n}),event:e})},onEditTagPaste(t,e){var i=(e.clipboardData||window.clipboardData).getData(\"Text\");e.preventDefault();var s=f(i);this.setRangeAtStartEnd(!1,s)},onEditTagFocus(t){this.state.editing={scope:t,input:t.querySelector(\"[contenteditable]\")}},onEditTagBlur(t){if(this.state.hasFocus||this.toggleFocusClass(),this.DOM.scope.contains(t)){var e,i,s=this.settings,a=t.closest(\".\"+s.classNames.tag),n=this.input.normalize.call(this,t),o=T(a),r=o.__originalData,l=this.editTagChangeDetected(o),d=this.validateTag({[s.tagTextProp]:n,__tagId:o.__tagId});if(n)if(l){if(e=this.hasMaxTags(),i=g({},r,{[s.tagTextProp]:this.trim(n),__isValid:d}),s.transformTag.call(this,i,r),!0!==(d=(!e||!0===r.__isValid)&&this.validateTag(i))){if(this.trigger(\"invalid\",{data:i,tag:a,message:d}),s.editTags.keepInvalid)return;s.keepInvalidTags?i.__isValid=d:i=r}else s.keepInvalidTags&&(delete i.title,delete i[\"aria-invalid\"],delete i.class);this.onEditTagDone(a,i)}else this.onEditTagDone(a,r);else this.onEditTagDone(a)}},onEditTagkeydown(t,e){if(!this.state.composing)switch(this.trigger(\"edit:keydown\",{event:t}),t.key){case\"Esc\":case\"Escape\":e.parentNode.replaceChild(e.__tagifyTagData.__originalHTML,e),this.state.editing=!1;case\"Enter\":case\"Tab\":t.preventDefault(),t.target.blur()}},onDoubleClickScope(t){var e,i,s=t.target.closest(\".\"+this.settings.classNames.tag),a=T(s),n=this.settings;s&&n.userInput&&!1!==a.editable&&(e=s.classList.contains(this.settings.classNames.tagEditing),i=s.hasAttribute(\"readonly\"),\"select\"==n.mode||n.readonly||e||i||!this.settings.editTags||this.editTag(s),this.toggleFocusClass(!0),this.trigger(\"dblclick\",{tag:s,index:this.getNodeIndex(s),data:T(s)}))},onInputDOMChange(t){t.forEach((t=>{t.addedNodes.forEach((t=>{if(\"<div><br></div>\"==t.outerHTML)t.replaceWith(document.createElement(\"br\"));else if(1==t.nodeType&&t.querySelector(this.settings.classNames.tagSelector)){let e=document.createTextNode(\"\");3==t.childNodes[0].nodeType&&\"BR\"!=t.previousSibling.nodeName&&(e=document.createTextNode(\"\\n\")),t.replaceWith(e,...[...t.childNodes].slice(0,-1)),this.placeCaretAfterNode(e)}else if(v.call(this,t)&&(3!=t.previousSibling?.nodeType||t.previousSibling.textContent||t.previousSibling.remove(),t.previousSibling&&\"BR\"==t.previousSibling.nodeName)){t.previousSibling.replaceWith(\"\\n\u200B\");let e=t.nextSibling,i=\"\";for(;e;)i+=e.textContent,e=e.nextSibling;i.trim()&&this.placeCaretAfterNode(t.previousSibling)}})),t.removedNodes.forEach((t=>{t&&\"BR\"==t.nodeName&&v.call(this,e)&&(this.removeTags(e),this.fixFirefoxLastTagNoCaret())}))}));var e=this.DOM.input.lastChild;e&&\"\"==e.nodeValue&&e.remove(),e&&\"BR\"==e.nodeName||this.DOM.input.appendChild(document.createElement(\"br\"))}}};function N(t,e){if(!t){console.warn(\"Tagify:\",\"input element not found\",t);const e=new Proxy(this,{get:()=>()=>e});return e}if(t.__tagify)return console.warn(\"Tagify: \",\"input element is already Tagified - Same instance is returned.\",t),t.__tagify;var i;g(this,function(t){var e=document.createTextNode(\"\");function i(t,i,s){s&&i.split(/\\s+/g).forEach((i=>e[t+\"EventListener\"].call(e,i,s)))}return{off(t,e){return i(\"remove\",t,e),this},on(t,e){return e&&\"function\"==typeof e&&i(\"add\",t,e),this},trigger(i,s,a){var n;if(a=a||{cloneData:!0},i)if(t.settings.isJQueryPlugin)\"remove\"==i&&(i=\"removeTag\"),jQuery(t.DOM.originalInput).triggerHandler(i,[s]);else{try{var o=\"object\"==typeof s?s:{value:s};if((o=a.cloneData?g({},o):o).tagify=this,s.event&&(o.event=this.cloneEvent(s.event)),s instanceof Object)for(var r in s)s[r]instanceof HTMLElement&&(o[r]=s[r]);n=new CustomEvent(i,{detail:o})}catch(t){console.warn(t)}e.dispatchEvent(n)}}}}(this)),this.isFirefox=/firefox|fxios/i.test(navigator.userAgent)&&!/seamonkey/i.test(navigator.userAgent),this.isIE=window.document.documentMode,e=e||{},this.getPersistedData=(i=e.id,t=>{let e,s=\"/\"+t;if(1==localStorage.getItem(x+i+\"/v\",1))try{e=JSON.parse(localStorage[x+i+s])}catch(t){}return e}),this.setPersistedData=(t=>t?(localStorage.setItem(x+t+\"/v\",1),(e,i)=>{let s=\"/\"+i,a=JSON.stringify(e);e&&i&&(localStorage.setItem(x+t+s,a),dispatchEvent(new Event(\"storage\")))}):()=>{})(e.id),this.clearPersistedData=(t=>e=>{const i=x+\"/\"+t+\"/\";if(e)localStorage.removeItem(i+e);else for(let t in localStorage)t.includes(i)&&localStorage.removeItem(t)})(e.id),this.applySettings(t,e),this.state={inputText:\"\",editing:!1,composing:!1,actions:{},mixMode:{},dropdown:{},flaggedTags:{}},this.value=[],this.listeners={},this.DOM={},this.build(t),b.call(this),this.getCSSVars(),this.loadOriginalValues(),this.events.customBinding.call(this),this.events.binding.call(this),t.autofocus&&this.DOM.input.focus(),t.__tagify=this}return N.prototype={_dropdown:y,helpers:{sameStr:s,removeCollectionProp:a,omit:n,isObject:h,parseHTML:r,escapeHTML:d,extend:g,concatWithoutDups:p,getUID:m,isNodeTag:v},customEventsList:[\"change\",\"add\",\"remove\",\"invalid\",\"input\",\"click\",\"keydown\",\"focus\",\"blur\",\"edit:input\",\"edit:beforeUpdate\",\"edit:updated\",\"edit:start\",\"edit:keydown\",\"dropdown:show\",\"dropdown:hide\",\"dropdown:select\",\"dropdown:updated\",\"dropdown:noMatch\",\"dropdown:scroll\"],dataProps:[\"__isValid\",\"__removed\",\"__originalData\",\"__originalHTML\",\"__tagId\"],trim(t){return this.settings.trim&&t&&\"string\"==typeof t?t.trim():t},parseHTML:r,templates:M,parseTemplate(t,e){return r((t=this.settings.templates[t]||t).apply(this,e))},set whitelist(t){const e=t&&Array.isArray(t);this.settings.whitelist=e?t:[],this.setPersistedData(e?t:[],\"whitelist\")},get whitelist(){return this.settings.whitelist},generateClassSelectors(t){for(let e in t){let i=e;Object.defineProperty(t,i+\"Selector\",{get(){return\".\"+this[i].split(\" \")[0]}})}},applySettings(t,i){w.templates=this.templates;var s=g({},w,\"mix\"==i.mode?{dropdown:{position:\"text\"}}:{}),a=this.settings=g({},s,i);if(a.disabled=t.hasAttribute(\"disabled\"),a.readonly=a.readonly||t.hasAttribute(\"readonly\"),a.placeholder=d(t.getAttribute(\"placeholder\")||a.placeholder||\"\"),a.required=t.hasAttribute(\"required\"),this.generateClassSelectors(a.classNames),void 0===a.dropdown.includeSelectedTags&&(a.dropdown.includeSelectedTags=a.duplicates),this.isIE&&(a.autoComplete=!1),[\"whitelist\",\"blacklist\"].forEach((e=>{var i=t.getAttribute(\"data-\"+e);i&&(i=i.split(a.delimiters))instanceof Array&&(a[e]=i)})),\"autoComplete\"in i&&!h(i.autoComplete)&&(a.autoComplete=w.autoComplete,a.autoComplete.enabled=i.autoComplete),\"mix\"==a.mode&&(a.pattern=a.pattern||/@/,a.autoComplete.rightKey=!0,a.delimiters=i.delimiters||null,a.tagTextProp&&!a.dropdown.searchKeys.includes(a.tagTextProp)&&a.dropdown.searchKeys.push(a.tagTextProp)),t.pattern)try{a.pattern=new RegExp(t.pattern)}catch(t){}if(a.delimiters){a._delimiters=a.delimiters;try{a.delimiters=new RegExp(this.settings.delimiters,\"g\")}catch(t){}}a.disabled&&(a.userInput=!1),this.TEXTS=e(e({},D),a.texts||{}),(\"select\"!=a.mode||i.dropdown?.enabled)&&a.userInput||(a.dropdown.enabled=0),a.dropdown.appendTarget=i.dropdown?.appendTarget||document.body;let n=this.getPersistedData(\"whitelist\");Array.isArray(n)&&(this.whitelist=Array.isArray(a.whitelist)?p(a.whitelist,n):n)},getAttributes(t){var e,i=this.getCustomAttributes(t),s=\"\";for(e in i)s+=\" \"+e+(void 0!==t[e]?`=\"${i[e]}\"`:\"\");return s},getCustomAttributes(t){if(!h(t))return\"\";var e,i={};for(e in t)\"__\"!=e.slice(0,2)&&\"class\"!=e&&t.hasOwnProperty(e)&&void 0!==t[e]&&(i[e]=d(t[e]));return i},setStateSelection(){var t=window.getSelection(),e={anchorOffset:t.anchorOffset,anchorNode:t.anchorNode,range:t.getRangeAt&&t.rangeCount&&t.getRangeAt(0)};return this.state.selection=e,e},getCSSVars(){var t=getComputedStyle(this.DOM.scope,null);var e;this.CSSVars={tagHideTransition:(t=>{let e=t.value;return\"s\"==t.unit?1e3*e:e})(function(t){if(!t)return{};var e=(t=t.trim().split(\" \")[0]).split(/\\d+/g).filter((t=>t)).pop().trim();return{value:+t.split(e).filter((t=>t))[0].trim(),unit:e}}((e=\"tag-hide-transition\",t.getPropertyValue(\"--\"+e))))}},build(t){var e=this.DOM;this.settings.mixMode.integrated?(e.originalInput=null,e.scope=t,e.input=t):(e.originalInput=t,e.originalInput_tabIndex=t.tabIndex,e.scope=this.parseTemplate(\"wrapper\",[t,this.settings]),e.input=e.scope.querySelector(this.settings.classNames.inputSelector),t.parentNode.insertBefore(e.scope,t),t.tabIndex=-1)},destroy(){this.events.unbindGlobal.call(this),this.DOM.scope.parentNode.removeChild(this.DOM.scope),this.DOM.originalInput.tabIndex=this.DOM.originalInput_tabIndex,delete this.DOM.originalInput.__tagify,this.dropdown.hide(!0),clearTimeout(this.dropdownHide__bindEventsTimeout),clearInterval(this.listeners.main.originalInputValueObserverInterval)},loadOriginalValues(t){var e,i=this.settings;if(this.state.blockChangeEvent=!0,void 0===t){const e=this.getPersistedData(\"value\");t=e&&!this.DOM.originalInput.value?e:i.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value}if(this.removeAllTags(),t)if(\"mix\"==i.mode)this.parseMixTags(t),(e=this.DOM.input.lastChild)&&\"BR\"==e.tagName||this.DOM.input.insertAdjacentHTML(\"beforeend\",\"<br>\");else{try{JSON.parse(t)instanceof Array&&(t=JSON.parse(t))}catch(t){}this.addTags(t,!0).forEach((t=>t&&t.classList.add(i.classNames.tagNoAnimation)))}else this.postUpdate();this.state.lastOriginalValueReported=i.mixMode.integrated?\"\":this.DOM.originalInput.value,this.state.blockChangeEvent=!1},cloneEvent(t){var e={};for(var i in t)\"path\"!=i&&(e[i]=t[i]);return e},loading(t){return this.state.isLoading=t,this.DOM.scope.classList[t?\"add\":\"remove\"](this.settings.classNames.scopeLoading),this},tagLoading(t,e){return t&&t.classList[e?\"add\":\"remove\"](this.settings.classNames.tagLoading),this},toggleClass(t,e){\"string\"==typeof t&&this.DOM.scope.classList.toggle(t,e)},toggleScopeValidation(t){var e=!0===t||void 0===t;!this.settings.required&&t&&t===this.TEXTS.empty&&(e=!0),this.toggleClass(this.settings.classNames.tagInvalid,!e),this.DOM.scope.title=e?\"\":t},toggleFocusClass(t){this.toggleClass(this.settings.classNames.focus,!!t)},triggerChangeEvent:function(){if(!this.settings.mixMode.integrated){var t=this.DOM.originalInput,e=this.state.lastOriginalValueReported!==t.value,i=new CustomEvent(\"change\",{bubbles:!0});e&&(this.state.lastOriginalValueReported=t.value,i.simulated=!0,t._valueTracker&&t._valueTracker.setValue(Math.random()),t.dispatchEvent(i),this.trigger(\"change\",this.state.lastOriginalValueReported),t.value=this.state.lastOriginalValueReported)}},events:I,fixFirefoxLastTagNoCaret(){},setRangeAtStartEnd(t,e){if(e){t=\"number\"==typeof t?t:!!t,e=e.lastChild||e;var i=document.getSelection();if(i.focusNode instanceof Element&&!this.DOM.input.contains(i.focusNode))return!0;try{i.rangeCount>=1&&[\"Start\",\"End\"].forEach((s=>i.getRangeAt(0)[\"set\"+s](e,t||e.length)))}catch(t){}}},placeCaretAfterNode(t){if(t&&t.parentNode){var e=t,i=window.getSelection(),s=i.getRangeAt(0);i.rangeCount&&(s.setStartAfter(e),s.collapse(!0),i.removeAllRanges(),i.addRange(s))}},insertAfterTag(t,e){if(e=e||this.settings.mixMode.insertAfterTag,t&&t.parentNode&&e)return e=\"string\"==typeof e?document.createTextNode(e):e,t.parentNode.insertBefore(e,t.nextSibling),e},editTagChangeDetected(t){var e=t.__originalData;for(var i in e)if(!this.dataProps.includes(i)&&t[i]!=e[i])return!0;return!1},getTagTextNode(t){return t.querySelector(this.settings.classNames.tagTextSelector)},setTagTextNode(t,e){this.getTagTextNode(t).innerHTML=d(e)},editTag(t,e){t=t||this.getLastTag(),e=e||{},this.dropdown.hide();var i=this.settings,s=this.getTagTextNode(t),a=this.getNodeIndex(t),n=T(t),o=this.events.callbacks,r=this,l=!0;if(s){if(!(n instanceof Object&&\"editable\"in n)||n.editable)return n=T(t,{__originalData:g({},n),__originalHTML:t.cloneNode(!0)}),T(n.__originalHTML,n.__originalData),s.setAttribute(\"contenteditable\",!0),t.classList.add(i.classNames.tagEditing),s.addEventListener(\"focus\",o.onEditTagFocus.bind(this,t)),s.addEventListener(\"blur\",(function(){setTimeout((()=>o.onEditTagBlur.call(r,r.getTagTextNode(t))))})),s.addEventListener(\"input\",o.onEditTagInput.bind(this,s)),s.addEventListener(\"paste\",o.onEditTagPaste.bind(this,s)),s.addEventListener(\"keydown\",(e=>o.onEditTagkeydown.call(this,e,t))),s.addEventListener(\"compositionstart\",o.onCompositionStart.bind(this)),s.addEventListener(\"compositionend\",o.onCompositionEnd.bind(this)),e.skipValidation||(l=this.editTagToggleValidity(t)),s.originalIsValid=l,this.trigger(\"edit:start\",{tag:t,index:a,data:n,isValid:l}),s.focus(),this.setRangeAtStartEnd(!1,s),this}else console.warn(\"Cannot find element in Tag template: .\",i.classNames.tagTextSelector)},editTagToggleValidity(t,e){var i;if(e=e||T(t))return(i=!(\"__isValid\"in e)||!0===e.__isValid)||this.removeTagsFromValue(t),this.update(),t.classList.toggle(this.settings.classNames.tagNotAllowed,!i),e.__isValid;console.warn(\"tag has no data: \",t,e)},onEditTagDone(t,e){e=e||{};var i={tag:t=t||this.state.editing.scope,index:this.getNodeIndex(t),previousData:T(t),data:e};this.trigger(\"edit:beforeUpdate\",i,{cloneData:!1}),this.state.editing=!1,delete e.__originalData,delete e.__originalHTML,t&&e[this.settings.tagTextProp]?(t=this.replaceTag(t,e),this.editTagToggleValidity(t,e),this.settings.a11y.focusableTags?t.focus():this.placeCaretAfterNode(t)):t&&this.removeTags(t),this.trigger(\"edit:updated\",i),this.dropdown.hide(),this.settings.keepInvalidTags&&this.reCheckInvalidTags()},replaceTag(t,e){e&&e.value||(e=t.__tagifyTagData),e.__isValid&&1!=e.__isValid&&g(e,this.getInvalidTagAttrs(e,e.__isValid));var i=this.createTagElem(e);return t.parentNode.replaceChild(i,t),this.updateValueByDOMTags(),i},updateValueByDOMTags(){this.value.length=0,[].forEach.call(this.getTagElms(),(t=>{t.classList.contains(this.settings.classNames.tagNotAllowed.split(\" \")[0])||this.value.push(T(t))})),this.update()},injectAtCaret(t,e){return!(e=e||this.state.selection?.range)&&t?(this.appendMixTags(t),this):(f(t,e),this.setRangeAtStartEnd(!1,t),this.updateValueByDOMTags(),this.update(),this)},input:{set(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.settings.dropdown.closeOnSelect;this.state.inputText=t,e&&(this.DOM.input.innerHTML=d(\"\"+t)),!t&&i&&this.dropdown.hide.bind(this),this.input.autocomplete.suggest.call(this),this.input.validate.call(this)},raw(){return this.DOM.input.textContent},validate(){var t=!this.state.inputText||!0===this.validateTag({value:this.state.inputText});return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid,!t),t},normalize(t){var e=t||this.DOM.input,i=[];e.childNodes.forEach((t=>3==t.nodeType&&i.push(t.nodeValue))),i=i.join(\"\\n\");try{i=i.replace(/(?:\\r\\n|\\r|\\n)/g,this.settings.delimiters.source.charAt(0))}catch(t){}return i=i.replace(/\\s/g,\" \"),this.trim(i)},autocomplete:{suggest(t){if(this.settings.autoComplete.enabled){\"string\"==typeof(t=t||{value:\"\"})&&(t={value:t});var e=this.dropdown.getMappedValue(t);if(\"number\"!=typeof e){var i=e.substr(0,this.state.inputText.length).toLowerCase(),s=e.substring(this.state.inputText.length);e&&this.state.inputText&&i==this.state.inputText.toLowerCase()?(this.DOM.input.setAttribute(\"data-suggest\",s),this.state.inputSuggestion=t):(this.DOM.input.removeAttribute(\"data-suggest\"),delete this.state.inputSuggestion)}}},set(t){var e=this.DOM.input.getAttribute(\"data-suggest\"),i=t||(e?this.state.inputText+e:null);return!!i&&(\"mix\"==this.settings.mode?this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix+i)):(this.input.set.call(this,i),this.setRangeAtStartEnd(!1,this.DOM.input)),this.input.autocomplete.suggest.call(this),this.dropdown.hide(),!0)}}},getTagIdx(t){return this.value.findIndex((e=>e.__tagId==(t||{}).__tagId))},getNodeIndex(t){var e=0;if(t)for(;t=t.previousElementSibling;)e++;return e},getTagElms(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var s=\".\"+[...this.settings.classNames.tag.split(\" \"),...e].join(\".\");return[].slice.call(this.DOM.scope.querySelectorAll(s))},getLastTag(){var t=this.DOM.scope.querySelectorAll(`${this.settings.classNames.tagSelector}:not(.${this.settings.classNames.tagHide}):not([readonly])`);return t[t.length-1]},isTagDuplicate(t,e,i){var a=0;if(\"select\"==this.settings.mode)return!1;for(let n of this.value){s(this.trim(\"\"+t),n.value,e)&&i!=n.__tagId&&a++}return a},getTagIndexByValue(t){var e=[];return this.getTagElms().forEach(((i,a)=>{s(this.trim(i.textContent),t,this.settings.dropdown.caseSensitive)&&e.push(a)})),e},getTagElmByValue(t){var e=this.getTagIndexByValue(t)[0];return this.getTagElms()[e]},flashTag(t){t&&(t.classList.add(this.settings.classNames.tagFlash),setTimeout((()=>{t.classList.remove(this.settings.classNames.tagFlash)}),100))},isTagBlacklisted(t){return t=this.trim(t.toLowerCase()),this.settings.blacklist.filter((e=>(\"\"+e).toLowerCase()==t)).length},isTagWhitelisted(t){return!!this.getWhitelistItem(t)},getWhitelistItem(t,e,i){e=e||\"value\";var a,n=this.settings;return(i=i||n.whitelist).some((i=>{var o=\"string\"==typeof i?i:i[e]||i.value;if(s(o,t,n.dropdown.caseSensitive,n.trim))return a=\"string\"==typeof i?{value:i}:i,!0})),a||\"value\"!=e||\"value\"==n.tagTextProp||(a=this.getWhitelistItem(t,n.tagTextProp,i)),a},validateTag(t){var e=this.settings,i=\"value\"in t?\"value\":e.tagTextProp,s=this.trim(t[i]+\"\");return(t[i]+\"\").trim()?e.pattern&&e.pattern instanceof RegExp&&!e.pattern.test(s)?this.TEXTS.pattern:!e.duplicates&&this.isTagDuplicate(s,e.dropdown.caseSensitive,t.__tagId)?this.TEXTS.duplicate:this.isTagBlacklisted(s)||e.enforceWhitelist&&!this.isTagWhitelisted(s)?this.TEXTS.notAllowed:!e.validate||e.validate(t):this.TEXTS.empty},getInvalidTagAttrs(t,e){return{\"aria-invalid\":!0,class:`${t.class||\"\"} ${this.settings.classNames.tagNotAllowed}`.trim(),title:e}},hasMaxTags(){return this.value.length>=this.settings.maxTags&&this.TEXTS.exceed},setReadonly(t,e){var i=this.settings;document.activeElement.blur(),i[e||\"readonly\"]=t,this.DOM.scope[(t?\"set\":\"remove\")+\"Attribute\"](e||\"readonly\",!0),this.setContentEditable(!t)},setContentEditable(t){this.settings.userInput&&(this.DOM.input.contentEditable=t,this.DOM.input.tabIndex=t?0:-1)},setDisabled(t){this.setReadonly(t,\"disabled\")},normalizeTags(t){var e=this.settings,i=e.whitelist,s=e.delimiters,a=e.mode,n=e.tagTextProp,o=[],r=!!i&&i[0]instanceof Object,l=Array.isArray(t),d=l&&t[0].value,h=t=>(t+\"\").split(s).filter((t=>t)).map((t=>({[n]:this.trim(t),value:this.trim(t)})));if(\"number\"==typeof t&&(t=t.toString()),\"string\"==typeof t){if(!t.trim())return[];t=h(t)}else l&&(t=[].concat(...t.map((t=>t.value?t:h(t)))));return r&&!d&&(t.forEach((t=>{var e=o.map((t=>t.value)),i=this.dropdown.filterListItems.call(this,t[n],{exact:!0});this.settings.duplicates||(i=i.filter((t=>!e.includes(t.value))));var s=i.length>1?this.getWhitelistItem(t[n],n,i):i[0];s&&s instanceof Object?o.push(s):\"mix\"!=a&&(null==t.value&&(t.value=t[n]),o.push(t))})),o.length&&(t=o)),t},parseMixTags(t){var e=this.settings,i=e.mixTagsInterpolator,s=e.duplicates,a=e.transformTag,n=e.enforceWhitelist,o=e.maxTags,r=e.tagTextProp,l=[];return t=t.split(i[0]).map(((t,e)=>{var d,h,g,p=t.split(i[1]),c=p[0],u=l.length==o;try{if(c==+c)throw Error;h=JSON.parse(c)}catch(t){h=this.normalizeTags(c)[0]||{value:c}}if(a.call(this,h),u||!(p.length>1)||n&&!this.isTagWhitelisted(h.value)||!s&&this.isTagDuplicate(h.value)){if(t)return e?i[0]+t:t}else h[d=h[r]?r:\"value\"]=this.trim(h[d]),g=this.createTagElem(h),l.push(h),g.classList.add(this.settings.classNames.tagNoAnimation),p[0]=g.outerHTML,this.value.push(h);return p.join(\"\")})).join(\"\"),this.DOM.input.innerHTML=t,this.DOM.input.appendChild(document.createTextNode(\"\")),this.DOM.input.normalize(),this.getTagElms().forEach(((t,e)=>T(t,l[e]))),this.update({withoutChangeEvent:!0}),t},replaceTextWithNode(t,e){if(this.state.tag||e){e=e||this.state.tag.prefix+this.state.tag.value;var i,s,a=this.state.selection||window.getSelection(),n=a.anchorNode,o=this.state.tag.delimiters?this.state.tag.delimiters.length:0;return n.splitText(a.anchorOffset-o),-1==(i=n.nodeValue.lastIndexOf(e))?!0:(s=n.splitText(i),t&&n.parentNode.replaceChild(t,s),!0)}},selectTag(t,e){var i=this.settings;if(!i.enforceWhitelist||this.isTagWhitelisted(e.value)){this.input.set.call(this,e[i.tagTextProp]||e.value,!0),this.state.actions.selectOption&&setTimeout((()=>this.setRangeAtStartEnd(!1,this.DOM.input)));var s=this.getLastTag();return s?this.replaceTag(s,e):this.appendTag(t),this.value[0]=e,this.update(),this.trigger(\"add\",{tag:t,data:e}),[t]}},addEmptyTag(t){var e=g({value:\"\"},t||{}),i=this.createTagElem(e);T(i,e),this.appendTag(i),this.editTag(i,{skipValidation:!0})},addTags(t,e,i){var s=[],a=this.settings,n=[],o=document.createDocumentFragment();if(i=i||a.skipInvalid,!t||0==t.length)return s;switch(t=this.normalizeTags(t),a.mode){case\"mix\":return this.addMixTags(t);case\"select\":e=!1,this.removeAllTags()}return this.DOM.input.removeAttribute(\"style\"),t.forEach((t=>{var e,r={},l=Object.assign({},t,{value:t.value+\"\"});if(t=Object.assign({},l),a.transformTag.call(this,t),t.__isValid=this.hasMaxTags()||this.validateTag(t),!0!==t.__isValid){if(i)return;if(g(r,this.getInvalidTagAttrs(t,t.__isValid),{__preInvalidData:l}),t.__isValid==this.TEXTS.duplicate&&this.flashTag(this.getTagElmByValue(t.value)),!a.createInvalidTags)return void n.push(t.value)}if(\"readonly\"in t&&(t.readonly?r[\"aria-readonly\"]=!0:delete t.readonly),e=this.createTagElem(t,r),s.push(e),\"select\"==a.mode)return this.selectTag(e,t);o.appendChild(e),t.__isValid&&!0===t.__isValid?(this.value.push(t),this.trigger(\"add\",{tag:e,index:this.value.length-1,data:t})):(this.trigger(\"invalid\",{data:t,index:this.value.length,tag:e,message:t.__isValid}),a.keepInvalidTags||setTimeout((()=>this.removeTags(e,!0)),1e3)),this.dropdown.position()})),this.appendTag(o),this.update(),t.length&&e&&(this.input.set.call(this,a.createInvalidTags?\"\":n.join(a._delimiters)),this.setRangeAtStartEnd(!1,this.DOM.input)),a.dropdown.enabled&&this.dropdown.refilter(),s},addMixTags(t){if((t=this.normalizeTags(t))[0].prefix||this.state.tag)return this.prefixedTextToTag(t[0]);\"string\"==typeof t&&(t=[{value:t}]);var e=document.createDocumentFragment();return t.forEach((t=>{var i=this.createTagElem(t);e.appendChild(i),this.insertAfterTag(i)})),this.appendMixTags(e),e},appendMixTags(t){var e=!!this.state.selection;e?this.injectAtCaret(t):(this.DOM.input.focus(),(e=this.setStateSelection()).range.setStart(this.DOM.input,e.range.endOffset),e.range.setEnd(this.DOM.input,e.range.endOffset),this.DOM.input.appendChild(t),this.updateValueByDOMTags(),this.update())},prefixedTextToTag(t){var e,i=this.settings,s=this.state.tag.delimiters;if(i.transformTag.call(this,t),t.prefix=t.prefix||this.state.tag?this.state.tag.prefix:(i.pattern.source||i.pattern)[0],e=this.createTagElem(t),this.replaceTextWithNode(e)||this.DOM.input.appendChild(e),setTimeout((()=>e.classList.add(this.settings.classNames.tagNoAnimation)),300),this.value.push(t),this.update(),!s){var a=this.insertAfterTag(e)||e;this.placeCaretAfterNode(a)}return this.state.tag=null,this.trigger(\"add\",g({},{tag:e},{data:t})),e},appendTag(t){var e=this.DOM,i=e.input;e.scope.insertBefore(t,i)},createTagElem(t,i){t.__tagId=m();var s,a=g({},t,e({value:d(t.value+\"\")},i));return function(t){for(var e,i=document.createNodeIterator(t,NodeFilter.SHOW_TEXT,null,!1);e=i.nextNode();)e.textContent.trim()||e.parentNode.removeChild(e)}(s=this.parseTemplate(\"tag\",[a,this])),T(s,t),s},reCheckInvalidTags(){var t=this.settings;this.getTagElms(t.classNames.tagNotAllowed).forEach(((e,i)=>{var s=T(e),a=this.hasMaxTags(),n=this.validateTag(s),o=!0===n&&!a;if(\"select\"==t.mode&&this.toggleScopeValidation(n),o)return s=s.__preInvalidData?s.__preInvalidData:{value:s.value},this.replaceTag(e,s);e.title=a||n}))},removeTags(t,e,i){var s,a=this.settings;if(t=t&&t instanceof HTMLElement?[t]:t instanceof Array?t:t?[t]:[this.getLastTag()],s=t.reduce(((t,e)=>{e&&\"string\"==typeof e&&(e=this.getTagElmByValue(e));var i=T(e);return e&&i&&!i.readonly&&t.push({node:e,idx:this.getTagIdx(i),data:T(e,{__removed:!0})}),t}),[]),i=\"number\"==typeof i?i:this.CSSVars.tagHideTransition,\"select\"==a.mode&&(i=0,this.input.set.call(this)),1==s.length&&\"select\"!=a.mode&&s[0].node.classList.contains(a.classNames.tagNotAllowed)&&(e=!0),s.length)return a.hooks.beforeRemoveTag(s,{tagify:this}).then((()=>{function t(t){t.node.parentNode&&(t.node.parentNode.removeChild(t.node),e?a.keepInvalidTags&&this.trigger(\"remove\",{tag:t.node,index:t.idx}):(this.trigger(\"remove\",{tag:t.node,index:t.idx,data:t.data}),this.dropdown.refilter(),this.dropdown.position(),this.DOM.input.normalize(),a.keepInvalidTags&&this.reCheckInvalidTags()))}i&&i>10&&1==s.length?function(e){e.node.style.width=parseFloat(window.getComputedStyle(e.node).width)+\"px\",document.body.clientTop,e.node.classList.add(a.classNames.tagHide),setTimeout(t.bind(this),i,e)}.call(this,s[0]):s.forEach(t.bind(this)),e||(this.removeTagsFromValue(s.map((t=>t.node))),this.update(),\"select\"==a.mode&&this.setContentEditable(!0))})).catch((t=>{}))},removeTagsFromDOM(){[].slice.call(this.getTagElms()).forEach((t=>t.parentNode.removeChild(t)))},removeTagsFromValue(t){(t=Array.isArray(t)?t:[t]).forEach((t=>{var e=T(t),i=this.getTagIdx(e);i>-1&&this.value.splice(i,1)}))},removeAllTags(t){t=t||{},this.value=[],\"mix\"==this.settings.mode?this.DOM.input.innerHTML=\"\":this.removeTagsFromDOM(),this.dropdown.refilter(),this.dropdown.position(),this.state.dropdown.visible&&setTimeout((()=>{this.DOM.input.focus()})),\"select\"==this.settings.mode&&(this.input.set.call(this),this.setContentEditable(!0)),this.update(t)},postUpdate(){var t=this.settings,e=t.classNames,i=\"mix\"==t.mode?t.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value.trim():this.value.length+this.input.raw.call(this).length;this.toggleClass(e.hasMaxTags,this.value.length>=t.maxTags),this.toggleClass(e.hasNoTags,!this.value.length),this.toggleClass(e.empty,!i),\"select\"==t.mode&&this.toggleScopeValidation(this.value?.[0]?.__isValid)},setOriginalInputValue(t){var e=this.DOM.originalInput;this.settings.mixMode.integrated||(e.value=t,e.tagifyValue=e.value,this.setPersistedData(t,\"value\"))},update(t){clearTimeout(this.debouncedUpdateTimeout),this.debouncedUpdateTimeout=setTimeout(function(){var e=this.getInputValue();this.setOriginalInputValue(e),this.postUpdate(),this.settings.onChangeAfterBlur&&(t||{}).withoutChangeEvent||this.state.blockChangeEvent||this.triggerChangeEvent()}.bind(this),100)},getInputValue(){var t=this.getCleanValue();return\"mix\"==this.settings.mode?this.getMixedTagsAsString(t):t.length?this.settings.originalInputValueFormat?this.settings.originalInputValueFormat(t):JSON.stringify(t):\"\"},getCleanValue(t){return a(t||this.value,this.dataProps)},getMixedTagsAsString(){var t=\"\",e=this,i=this.settings,s=i.originalInputValueFormat||JSON.stringify,a=i.mixTagsInterpolator;return function i(o){o.childNodes.forEach((o=>{if(1==o.nodeType){const r=T(o);if(\"BR\"==o.tagName&&(t+=\"\\r\\n\"),r&&v.call(e,o)){if(r.__removed)return;t+=a[0]+s(n(r,e.dataProps))+a[1]}else o.getAttribute(\"style\")||[\"B\",\"I\",\"U\"].includes(o.tagName)?t+=o.textContent:\"DIV\"!=o.tagName&&\"P\"!=o.tagName||(t+=\"\\r\\n\",i(o))}else t+=o.textContent}))}(this.DOM.input),t}},N.prototype.removeTag=N.prototype.removeTags,N}));\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      emptyTag: ''\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      preserveChildrenOrder: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      rootName: 'root',\n      xmldec: {\n        'version': '1.0',\n        'encoding': 'UTF-8',\n        'standalone': true\n      },\n      doctype: null,\n      renderOpts: {\n        'pretty': true,\n        'indent': '  ',\n        'newline': '\\n'\n      },\n      headless: false,\n      chunkSize: 10000,\n      emptyTag: '',\n      cdata: false\n    }\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function() {\n    var i, key, len, source, sources, target;\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = (function() {\n    function XMLDOMImplementation() {}\n\n    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n      return true;\n    };\n\n    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLDOMImplementation;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMErrorHandler;\n\n  module.exports = XMLDOMErrorHandler = (function() {\n    function XMLDOMErrorHandler() {}\n\n    XMLDOMErrorHandler.prototype.handleError = function(error) {\n      throw new Error(error);\n    };\n\n    return XMLDOMErrorHandler;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMStringList;\n\n  module.exports = XMLDOMStringList = (function() {\n    function XMLDOMStringList(arr) {\n      this.arr = arr || [];\n    }\n\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\n      get: function() {\n        return this.arr.length;\n      }\n    });\n\n    XMLDOMStringList.prototype.item = function(index) {\n      return this.arr[index] || null;\n    };\n\n    XMLDOMStringList.prototype.contains = function(str) {\n      return this.arr.indexOf(str) !== -1;\n    };\n\n    return XMLDOMStringList;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n\n  XMLDOMStringList = require('./XMLDOMStringList');\n\n  module.exports = XMLDOMConfiguration = (function() {\n    function XMLDOMConfiguration() {\n      var clonedSelf;\n      this.defaultParams = {\n        \"canonical-form\": false,\n        \"cdata-sections\": false,\n        \"comments\": false,\n        \"datatype-normalization\": false,\n        \"element-content-whitespace\": true,\n        \"entities\": true,\n        \"error-handler\": new XMLDOMErrorHandler(),\n        \"infoset\": true,\n        \"validate-if-schema\": false,\n        \"namespaces\": true,\n        \"namespace-declarations\": true,\n        \"normalize-characters\": false,\n        \"schema-location\": '',\n        \"schema-type\": '',\n        \"split-cdata-sections\": true,\n        \"validate\": false,\n        \"well-formed\": true\n      };\n      this.params = clonedSelf = Object.create(this.defaultParams);\n    }\n\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n\n    XMLDOMConfiguration.prototype.getParameter = function(name) {\n      if (this.params.hasOwnProperty(name)) {\n        return this.params[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n      return true;\n    };\n\n    XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n      if (value != null) {\n        return this.params[name] = value;\n      } else {\n        return delete this.params[name];\n      }\n    };\n\n    return XMLDOMConfiguration;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Element: 1,\n    Attribute: 2,\n    Text: 3,\n    CData: 4,\n    EntityReference: 5,\n    EntityDeclaration: 6,\n    ProcessingInstruction: 7,\n    Comment: 8,\n    Document: 9,\n    DocType: 10,\n    DocumentFragment: 11,\n    NotationDeclaration: 12,\n    Declaration: 201,\n    Raw: 202,\n    AttributeDeclaration: 203,\n    ElementDeclaration: 204,\n    Dummy: 205\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLNode;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLAttribute = (function() {\n    function XMLAttribute(parent, name, value) {\n      this.parent = parent;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.value = this.stringify.attValue(value);\n      this.type = NodeType.Attribute;\n      this.isId = false;\n      this.schemaTypeInfo = null;\n    }\n\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function() {\n        return true;\n      }\n    });\n\n    XMLAttribute.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLAttribute.prototype.toString = function(options) {\n      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLAttribute.prototype.debugInfo = function(name) {\n      name = name || this.name;\n      if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else {\n        return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLAttribute.prototype.isEqualNode = function(node) {\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.value !== this.value) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLAttribute;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNamedNodeMap;\n\n  module.exports = XMLNamedNodeMap = (function() {\n    function XMLNamedNodeMap(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\n      get: function() {\n        return Object.keys(this.nodes).length || 0;\n      }\n    });\n\n    XMLNamedNodeMap.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n      return this.nodes[name];\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n      var oldNode;\n      oldNode = this.nodes[node.nodeName];\n      this.nodes[node.nodeName] = node;\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n      var oldNode;\n      oldNode = this.nodes[name];\n      delete this.nodes[name];\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.item = function(index) {\n      return this.nodes[Object.keys(this.nodes)[index]] || null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLNamedNodeMap;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLElement = (function(superClass) {\n    extend(XMLElement, superClass);\n\n    function XMLElement(parent, name, attributes) {\n      var child, j, len, ref1;\n      XMLElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing element name. \" + this.debugInfo());\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.Element;\n      this.attribs = {};\n      this.schemaTypeInfo = null;\n      if (attributes != null) {\n        this.attribute(attributes);\n      }\n      if (parent.type === NodeType.Document) {\n        this.isRoot = true;\n        this.documentObject = parent;\n        parent.rootObject = this;\n        if (parent.children) {\n          ref1 = parent.children;\n          for (j = 0, len = ref1.length; j < len; j++) {\n            child = ref1[j];\n            if (child.type === NodeType.DocType) {\n              child.name = this.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    XMLElement.prototype.clone = function() {\n      var att, attName, clonedSelf, ref1;\n      clonedSelf = Object.create(this);\n      if (clonedSelf.isRoot) {\n        clonedSelf.documentObject = null;\n      }\n      clonedSelf.attribs = {};\n      ref1 = this.attribs;\n      for (attName in ref1) {\n        if (!hasProp.call(ref1, attName)) continue;\n        att = ref1[attName];\n        clonedSelf.attribs[attName] = att.clone();\n      }\n      clonedSelf.children = [];\n      this.children.forEach(function(child) {\n        var clonedChild;\n        clonedChild = child.clone();\n        clonedChild.parent = clonedSelf;\n        return clonedSelf.children.push(clonedChild);\n      });\n      return clonedSelf;\n    };\n\n    XMLElement.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLElement.prototype.removeAttribute = function(name) {\n      var attName, j, len;\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo());\n      }\n      name = getValue(name);\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          attName = name[j];\n          delete this.attribs[attName];\n        }\n      } else {\n        delete this.attribs[name];\n      }\n      return this;\n    };\n\n    XMLElement.prototype.toString = function(options) {\n      return this.options.writer.element(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLElement.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.getAttribute = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].value;\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttribute = function(name, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNode = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttributeNode = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.hasAttribute = function(name) {\n      return this.attribs.hasOwnProperty(name);\n    };\n\n    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttribute = function(name, isId) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].isId;\n      } else {\n        return isId;\n      }\n    };\n\n    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.isEqualNode = function(node) {\n      var i, j, ref1;\n      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.attribs.length !== this.attribs.length) {\n        return false;\n      }\n      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {\n        if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    return XMLElement;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLCharacterData, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLCharacterData = (function(superClass) {\n    extend(XMLCharacterData, superClass);\n\n    function XMLCharacterData(parent) {\n      XMLCharacterData.__super__.constructor.call(this, parent);\n      this.value = '';\n    }\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function() {\n        return this.value.length;\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    XMLCharacterData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCharacterData.prototype.substringData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.appendData = function(arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.insertData = function(offset, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.deleteData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.isEqualNode = function(node) {\n      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.data !== this.data) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLCharacterData;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCData, XMLCharacterData,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLCData = (function(superClass) {\n    extend(XMLCData, superClass);\n\n    function XMLCData(parent, text) {\n      XMLCData.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    XMLCData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCData.prototype.toString = function(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLCData;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLComment,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDeclaration = (function(superClass) {\n    extend(XMLDeclaration, superClass);\n\n    function XMLDeclaration(parent, version, encoding, standalone) {\n      var ref;\n      XMLDeclaration.__super__.constructor.call(this, parent);\n      if (isObject(version)) {\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    XMLDeclaration.prototype.toString = function(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDeclaration;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = (function(superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDEntity = (function(superClass) {\n    extend(XMLDTDEntity, superClass);\n\n    function XMLDTDEntity(parent, pe, name, value) {\n      XMLDTDEntity.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n      }\n      if (value == null) {\n        throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n      }\n      this.pe = !!pe;\n      this.name = this.stringify.name(name);\n      this.type = NodeType.EntityDeclaration;\n      if (!isObject(value)) {\n        this.value = this.stringify.dtdEntityValue(value);\n        this.internal = true;\n      } else {\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        if (value.pubID && !value.sysID) {\n          throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n        }\n        this.internal = false;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n        if (value.nData != null) {\n          this.nData = this.stringify.dtdNData(value.nData);\n        }\n        if (this.pe && this.nData) {\n          throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n        }\n      }\n    }\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDTDEntity.prototype.toString = function(options) {\n      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDEntity;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDElement, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDElement = (function(superClass) {\n    extend(XMLDTDElement, superClass);\n\n    function XMLDTDElement(parent, name, value) {\n      XMLDTDElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    XMLDTDElement.prototype.toString = function(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDElement;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDNotation = (function(superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.NotationDeclaration;\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    XMLDTDNotation.prototype.toString = function(options) {\n      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDNotation;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLDocType = (function(superClass) {\n    extend(XMLDocType, superClass);\n\n    function XMLDocType(parent, pubID, sysID) {\n      var child, i, len, ref, ref1, ref2;\n      XMLDocType.__super__.constructor.call(this, parent);\n      this.type = NodeType.DocType;\n      if (parent.children) {\n        ref = parent.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.Element) {\n            this.name = child.name;\n            break;\n          }\n        }\n      }\n      this.documentObject = parent;\n      if (isObject(pubID)) {\n        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n      }\n      if (sysID == null) {\n        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];\n      }\n      if (pubID != null) {\n        this.pubID = this.stringify.dtdPubID(pubID);\n      }\n      if (sysID != null) {\n        this.sysID = this.stringify.dtdSysID(sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLDocType.prototype.element = function(name, value) {\n      var child;\n      child = new XMLDTDElement(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var child;\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.entity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, false, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.pEntity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, true, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.notation = function(name, value) {\n      var child;\n      child = new XMLDTDNotation(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.toString = function(options) {\n      return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocType.prototype.ele = function(name, value) {\n      return this.element(name, value);\n    };\n\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n    };\n\n    XMLDocType.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocType.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocType.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    XMLDocType.prototype.up = function() {\n      return this.root() || this.documentObject;\n    };\n\n    XMLDocType.prototype.isEqualNode = function(node) {\n      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.name !== this.name) {\n        return false;\n      }\n      if (node.publicId !== this.publicId) {\n        return false;\n      }\n      if (node.systemId !== this.systemId) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLDocType;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLNode, XMLRaw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = (function(superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLText,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = (function(superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function(options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function(offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function(content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLProcessingInstruction = (function(superClass) {\n    extend(XMLProcessingInstruction, superClass);\n\n    function XMLProcessingInstruction(parent, target, value) {\n      XMLProcessingInstruction.__super__.constructor.call(this, parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    XMLProcessingInstruction.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLProcessingInstruction.prototype.toString = function(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLProcessingInstruction;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDummy, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDummy = (function(superClass) {\n    extend(XMLDummy, superClass);\n\n    function XMLDummy(parent) {\n      XMLDummy.__super__.constructor.call(this, parent);\n      this.type = NodeType.Dummy;\n    }\n\n    XMLDummy.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLDummy.prototype.toString = function(options) {\n      return '';\n    };\n\n    return XMLDummy;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNodeList;\n\n  module.exports = XMLNodeList = (function() {\n    function XMLNodeList(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\n      get: function() {\n        return this.nodes.length || 0;\n      }\n    });\n\n    XMLNodeList.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNodeList.prototype.item = function(index) {\n      return this.nodes[index] || null;\n    };\n\n    return XMLNodeList;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Disconnected: 1,\n    Preceding: 2,\n    Following: 4,\n    Contains: 8,\n    ContainedBy: 16,\n    ImplementationSpecific: 32\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,\n    hasProp = {}.hasOwnProperty;\n\n  ref1 = require('./Utility'), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n\n  XMLElement = null;\n\n  XMLCData = null;\n\n  XMLComment = null;\n\n  XMLDeclaration = null;\n\n  XMLDocType = null;\n\n  XMLRaw = null;\n\n  XMLText = null;\n\n  XMLProcessingInstruction = null;\n\n  XMLDummy = null;\n\n  NodeType = null;\n\n  XMLNodeList = null;\n\n  XMLNamedNodeMap = null;\n\n  DocumentPosition = null;\n\n  module.exports = XMLNode = (function() {\n    function XMLNode(parent1) {\n      this.parent = parent1;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      this.value = null;\n      this.children = [];\n      this.baseURI = null;\n      if (!XMLElement) {\n        XMLElement = require('./XMLElement');\n        XMLCData = require('./XMLCData');\n        XMLComment = require('./XMLComment');\n        XMLDeclaration = require('./XMLDeclaration');\n        XMLDocType = require('./XMLDocType');\n        XMLRaw = require('./XMLRaw');\n        XMLText = require('./XMLText');\n        XMLProcessingInstruction = require('./XMLProcessingInstruction');\n        XMLDummy = require('./XMLDummy');\n        NodeType = require('./NodeType');\n        XMLNodeList = require('./XMLNodeList');\n        XMLNamedNodeMap = require('./XMLNamedNodeMap');\n        DocumentPosition = require('./DocumentPosition');\n      }\n    }\n\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\n      get: function() {\n        return this.value;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\n      get: function() {\n        if (!this.childNodeList || !this.childNodeList.nodes) {\n          this.childNodeList = new XMLNodeList(this.children);\n        }\n        return this.childNodeList;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\n      get: function() {\n        return this.children[0] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\n      get: function() {\n        return this.children[this.children.length - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i + 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\n      get: function() {\n        return this.document() || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\n      get: function() {\n        var child, j, len, ref2, str;\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n          str = '';\n          ref2 = this.children;\n          for (j = 0, len = ref2.length; j < len; j++) {\n            child = ref2[j];\n            if (child.textContent) {\n              str += child.textContent;\n            }\n          }\n          return str;\n        } else {\n          return null;\n        }\n      },\n      set: function(value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLNode.prototype.setParent = function(parent) {\n      var child, j, len, ref2, results;\n      this.parent = parent;\n      if (parent) {\n        this.options = parent.options;\n        this.stringify = parent.stringify;\n      }\n      ref2 = this.children;\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        results.push(child.setParent(this));\n      }\n      return results;\n    };\n\n    XMLNode.prototype.element = function(name, attributes, text) {\n      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n      lastChild = null;\n      if (attributes === null && (text == null)) {\n        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];\n      }\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          item = name[j];\n          lastChild = this.element(item);\n        }\n      } else if (isFunction(name)) {\n        lastChild = this.element(name.apply());\n      } else if (isObject(name)) {\n        for (key in name) {\n          if (!hasProp.call(name, key)) continue;\n          val = name[key];\n          if (isFunction(val)) {\n            val = val.apply();\n          }\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n            lastChild = this.dummy();\n          } else if (isObject(val) && isEmpty(val)) {\n            lastChild = this.element(key);\n          } else if (!this.options.keepNullNodes && (val == null)) {\n            lastChild = this.dummy();\n          } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n            for (k = 0, len1 = val.length; k < len1; k++) {\n              item = val[k];\n              childNode = {};\n              childNode[key] = item;\n              lastChild = this.element(childNode);\n            }\n          } else if (isObject(val)) {\n            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n              lastChild = this.element(val);\n            } else {\n              lastChild = this.element(key);\n              lastChild.element(val);\n            }\n          } else {\n            lastChild = this.element(key, val);\n          }\n        }\n      } else if (!this.options.keepNullNodes && text === null) {\n        lastChild = this.dummy();\n      } else {\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n          lastChild = this.text(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n          lastChild = this.cdata(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n          lastChild = this.comment(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n          lastChild = this.raw(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n        } else {\n          lastChild = this.node(name, attributes, text);\n        }\n      }\n      if (lastChild == null) {\n        throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n      }\n      return lastChild;\n    };\n\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, newChild, refChild, removed;\n      if (name != null ? name.type : void 0) {\n        newChild = name;\n        refChild = attributes;\n        newChild.setParent(this);\n        if (refChild) {\n          i = children.indexOf(refChild);\n          removed = children.splice(i);\n          children.push(newChild);\n          Array.prototype.push.apply(children, removed);\n        } else {\n          children.push(newChild);\n        }\n        return newChild;\n      } else {\n        if (this.isRoot) {\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n        }\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        child = this.parent.element(name, attributes, text);\n        Array.prototype.push.apply(this.parent.children, removed);\n        return child;\n      }\n    };\n\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, removed;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n      }\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.element(name, attributes, text);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return child;\n    };\n\n    XMLNode.prototype.remove = function() {\n      var i, ref2;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;\n      return this.parent;\n    };\n\n    XMLNode.prototype.node = function(name, attributes, text) {\n      var child, ref2;\n      if (name != null) {\n        name = getValue(name);\n      }\n      attributes || (attributes = {});\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];\n      }\n      child = new XMLElement(this, name, attributes);\n      if (text != null) {\n        child.text(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLNode.prototype.text = function(value) {\n      var child;\n      if (isObject(value)) {\n        this.element(value);\n      }\n      child = new XMLText(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.cdata = function(value) {\n      var child;\n      child = new XMLCData(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.comment = function(value) {\n      var child;\n      child = new XMLComment(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.commentBefore = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.commentAfter = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.raw = function(value) {\n      var child;\n      child = new XMLRaw(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.dummy = function() {\n      var child;\n      child = new XMLDummy(this);\n      return child;\n    };\n\n    XMLNode.prototype.instruction = function(target, value) {\n      var insTarget, insValue, instruction, j, len;\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (j = 0, len = target.length; j < len; j++) {\n          insTarget = target[j];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        instruction = new XMLProcessingInstruction(this, target, value);\n        this.children.push(instruction);\n      }\n      return this;\n    };\n\n    XMLNode.prototype.instructionBefore = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.instructionAfter = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {\n      var doc, xmldec;\n      doc = this.document();\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n      if (doc.children.length === 0) {\n        doc.children.unshift(xmldec);\n      } else if (doc.children[0].type === NodeType.Declaration) {\n        doc.children[0] = xmldec;\n      } else {\n        doc.children.unshift(xmldec);\n      }\n      return doc.root() || doc;\n    };\n\n    XMLNode.prototype.dtd = function(pubID, sysID) {\n      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n      doc = this.document();\n      doctype = new XMLDocType(doc, pubID, sysID);\n      ref2 = doc.children;\n      for (i = j = 0, len = ref2.length; j < len; i = ++j) {\n        child = ref2[i];\n        if (child.type === NodeType.DocType) {\n          doc.children[i] = doctype;\n          return doctype;\n        }\n      }\n      ref3 = doc.children;\n      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {\n        child = ref3[i];\n        if (child.isRoot) {\n          doc.children.splice(i, 0, doctype);\n          return doctype;\n        }\n      }\n      doc.children.push(doctype);\n      return doctype;\n    };\n\n    XMLNode.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLNode.prototype.root = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node.rootObject;\n        } else if (node.isRoot) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.document = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.end = function(options) {\n      return this.document().end(options);\n    };\n\n    XMLNode.prototype.prev = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node. \" + this.debugInfo());\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLNode.prototype.next = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node. \" + this.debugInfo());\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLNode.prototype.importDocument = function(doc) {\n      var clonedRoot;\n      clonedRoot = doc.root().clone();\n      clonedRoot.parent = this;\n      clonedRoot.isRoot = false;\n      this.children.push(clonedRoot);\n      return this;\n    };\n\n    XMLNode.prototype.debugInfo = function(name) {\n      var ref2, ref3;\n      name = name || this.name;\n      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n        return \"\";\n      } else if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n        return \"node: <\" + name + \">\";\n      } else {\n        return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLNode.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLNode.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLNode.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLNode.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.u = function() {\n      return this.up();\n    };\n\n    XMLNode.prototype.importXMLBuilder = function(doc) {\n      return this.importDocument(doc);\n    };\n\n    XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.removeChild = function(oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.appendChild = function(newChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.hasChildNodes = function() {\n      return this.children.length !== 0;\n    };\n\n    XMLNode.prototype.cloneNode = function(deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.normalize = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isSupported = function(feature, version) {\n      return true;\n    };\n\n    XMLNode.prototype.hasAttributes = function() {\n      return this.attribs.length !== 0;\n    };\n\n    XMLNode.prototype.compareDocumentPosition = function(other) {\n      var ref, res;\n      ref = this;\n      if (ref === other) {\n        return 0;\n      } else if (this.document() !== other.document()) {\n        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n        if (Math.random() < 0.5) {\n          res |= DocumentPosition.Preceding;\n        } else {\n          res |= DocumentPosition.Following;\n        }\n        return res;\n      } else if (ref.isAncestor(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Preceding;\n      } else if (ref.isDescendant(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Following;\n      } else if (ref.isPreceding(other)) {\n        return DocumentPosition.Preceding;\n      } else {\n        return DocumentPosition.Following;\n      }\n    };\n\n    XMLNode.prototype.isSameNode = function(other) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isEqualNode = function(node) {\n      var i, j, ref2;\n      if (node.nodeType !== this.nodeType) {\n        return false;\n      }\n      if (node.children.length !== this.children.length) {\n        return false;\n      }\n      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {\n        if (!this.children[i].isEqualNode(node.children[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    XMLNode.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.setUserData = function(key, data, handler) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.getUserData = function(key) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.contains = function(other) {\n      if (!other) {\n        return false;\n      }\n      return other === this || this.isDescendant(other);\n    };\n\n    XMLNode.prototype.isDescendant = function(node) {\n      var child, isDescendantChild, j, len, ref2;\n      ref2 = this.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (node === child) {\n          return true;\n        }\n        isDescendantChild = child.isDescendant(node);\n        if (isDescendantChild) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    XMLNode.prototype.isAncestor = function(node) {\n      return node.isDescendant(this);\n    };\n\n    XMLNode.prototype.isPreceding = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos < thisPos;\n      }\n    };\n\n    XMLNode.prototype.isFollowing = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos > thisPos;\n      }\n    };\n\n    XMLNode.prototype.treePosition = function(node) {\n      var found, pos;\n      pos = 0;\n      found = false;\n      this.foreachTreeNode(this.document(), function(childNode) {\n        pos++;\n        if (!found && childNode === node) {\n          return found = true;\n        }\n      });\n      if (found) {\n        return pos;\n      } else {\n        return -1;\n      }\n    };\n\n    XMLNode.prototype.foreachTreeNode = function(node, func) {\n      var child, j, len, ref2, res;\n      node || (node = this.document());\n      ref2 = node.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (res = func(child)) {\n          return res;\n        } else {\n          res = this.foreachTreeNode(child, func);\n          if (res) {\n            return res;\n          }\n        }\n      }\n    };\n\n    return XMLNode;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var regex, res;\n      if (this.options.noValidation) {\n        return str;\n      }\n      regex = '';\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function(str) {\n      var regex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    None: 0,\n    OpenTag: 1,\n    InsideTag: 2,\n    CloseTag: 3\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  assign = require('./Utility').assign;\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLWriterBase = (function() {\n    function XMLWriterBase(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    XMLWriterBase.prototype.filterOptions = function(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    };\n\n    XMLWriterBase.prototype.indent = function(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    };\n\n    XMLWriterBase.prototype.endline = function(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    };\n\n    XMLWriterBase.prototype.attribute = function(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      r = ' ' + att.name + '=\"' + att.value + '\"';\n      this.closeAttribute(att, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.cdata = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.comment = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.declaration = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.docType = function(node, options, level) {\n      var child, i, len, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n      level || (level = 0);\n      prettySuppressed = false;\n      r = '';\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r += this.indent(node, options, level) + '<' + node.name;\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        r += this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        if (options.dontPrettyTextNodes) {\n          ref1 = node.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref2 = node.children;\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\n          child = ref2[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    };\n\n    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.raw = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.text = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.openNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n\n    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n\n    return XMLWriterBase;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  module.exports = XMLStringWriter = (function(superClass) {\n    extend(XMLStringWriter, superClass);\n\n    function XMLStringWriter(options) {\n      XMLStringWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStringWriter.prototype.document = function(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    };\n\n    return XMLStringWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isPlainObject = require('./Utility').isPlainObject;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  module.exports = XMLDocument = (function(superClass) {\n    extend(XMLDocument, superClass);\n\n    function XMLDocument(options) {\n      XMLDocument.__super__.constructor.call(this, null);\n      this.name = \"#document\";\n      this.type = NodeType.Document;\n      this.documentURI = null;\n      this.domConfig = new XMLDOMConfiguration();\n      options || (options = {});\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n    }\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDocument.prototype.end = function(writer) {\n      var writerOptions;\n      writerOptions = {};\n      if (!writer) {\n        writer = this.options.writer;\n      } else if (isPlainObject(writer)) {\n        writerOptions = writer;\n        writer = this.options.writer;\n      }\n      return writer.document(this, writer.filterOptions(writerOptions));\n    };\n\n    XMLDocument.prototype.toString = function(options) {\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocument.prototype.createElement = function(tagName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createDocumentFragment = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTextNode = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createComment = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createCDATASection = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttribute = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEntityReference = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.importNode = function(importedNode, deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementById = function(elementId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.adoptNode = function(source) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.normalizeDocument = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEvent = function(eventInterface) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createRange = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLDocument;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n\n  NodeType = require('./NodeType');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLElement = require('./XMLElement');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLDocumentCB = (function() {\n    function XMLDocumentCB(options, onData, onEnd) {\n      var writerOptions;\n      this.name = \"?xml\";\n      this.type = NodeType.Document;\n      options || (options = {});\n      writerOptions = {};\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      } else if (isPlainObject(options.writer)) {\n        writerOptions = options.writer;\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.writer = options.writer;\n      this.writerOptions = this.writer.filterOptions(writerOptions);\n      this.stringify = new XMLStringifier(options);\n      this.onDataCallback = onData || function() {};\n      this.onEndCallback = onEnd || function() {};\n      this.currentNode = null;\n      this.currentLevel = -1;\n      this.openTags = {};\n      this.documentStarted = false;\n      this.documentCompleted = false;\n      this.root = null;\n    }\n\n    XMLDocumentCB.prototype.createChildNode = function(node) {\n      var att, attName, attributes, child, i, len, ref1, ref2;\n      switch (node.type) {\n        case NodeType.CData:\n          this.cdata(node.value);\n          break;\n        case NodeType.Comment:\n          this.comment(node.value);\n          break;\n        case NodeType.Element:\n          attributes = {};\n          ref1 = node.attribs;\n          for (attName in ref1) {\n            if (!hasProp.call(ref1, attName)) continue;\n            att = ref1[attName];\n            attributes[attName] = att.value;\n          }\n          this.node(node.name, attributes);\n          break;\n        case NodeType.Dummy:\n          this.dummy();\n          break;\n        case NodeType.Raw:\n          this.raw(node.value);\n          break;\n        case NodeType.Text:\n          this.text(node.value);\n          break;\n        case NodeType.ProcessingInstruction:\n          this.instruction(node.target, node.value);\n          break;\n        default:\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n      }\n      ref2 = node.children;\n      for (i = 0, len = ref2.length; i < len; i++) {\n        child = ref2[i];\n        this.createChildNode(child);\n        if (child.type === NodeType.Element) {\n          this.up();\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dummy = function() {\n      return this;\n    };\n\n    XMLDocumentCB.prototype.node = function(name, attributes, text) {\n      var ref1;\n      if (name == null) {\n        throw new Error(\"Missing node name.\");\n      }\n      if (this.root && this.currentLevel === -1) {\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n      }\n      this.openCurrent();\n      name = getValue(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];\n      }\n      this.currentNode = new XMLElement(this, name, attributes);\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      if (text != null) {\n        this.text(text);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.element = function(name, attributes, text) {\n      var child, i, len, oldValidationFlag, ref1, root;\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        this.dtdElement.apply(this, arguments);\n      } else {\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n          oldValidationFlag = this.options.noValidation;\n          this.options.noValidation = true;\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\n          root.element(name);\n          this.options.noValidation = oldValidationFlag;\n          ref1 = root.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            this.createChildNode(child);\n            if (child.type === NodeType.Element) {\n              this.up();\n            }\n          }\n        } else {\n          this.node(name, attributes, text);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (!this.currentNode || this.currentNode.children) {\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.text = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLText(this, value);\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.cdata = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLCData(this, value);\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.comment = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLComment(this, value);\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.raw = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLRaw(this, value);\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.instruction = function(target, value) {\n      var i, insTarget, insValue, len, node;\n      this.openCurrent();\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (i = 0, len = target.length; i < len; i++) {\n          insTarget = target[i];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        node = new XMLProcessingInstruction(this, target, value);\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n      var node;\n      this.openCurrent();\n      if (this.documentStarted) {\n        throw new Error(\"declaration() must be the first node.\");\n      }\n      node = new XMLDeclaration(this, version, encoding, standalone);\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n      this.openCurrent();\n      if (root == null) {\n        throw new Error(\"Missing root node name.\");\n      }\n      if (this.root) {\n        throw new Error(\"dtd() must come before the root node.\");\n      }\n      this.currentNode = new XMLDocType(this, pubID, sysID);\n      this.currentNode.rootNodeName = root;\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dtdElement = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDElement(this, name, value);\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.entity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, false, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.pEntity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, true, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.notation = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDNotation(this, name, value);\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.up = function() {\n      if (this.currentLevel < 0) {\n        throw new Error(\"The document node has no parent.\");\n      }\n      if (this.currentNode) {\n        if (this.currentNode.children) {\n          this.closeNode(this.currentNode);\n        } else {\n          this.openNode(this.currentNode);\n        }\n        this.currentNode = null;\n      } else {\n        this.closeNode(this.openTags[this.currentLevel]);\n      }\n      delete this.openTags[this.currentLevel];\n      this.currentLevel--;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.end = function() {\n      while (this.currentLevel >= 0) {\n        this.up();\n      }\n      return this.onEnd();\n    };\n\n    XMLDocumentCB.prototype.openCurrent = function() {\n      if (this.currentNode) {\n        this.currentNode.children = true;\n        return this.openNode(this.currentNode);\n      }\n    };\n\n    XMLDocumentCB.prototype.openNode = function(node) {\n      var att, chunk, name, ref1;\n      if (!node.isOpen) {\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n          this.root = node;\n        }\n        chunk = '';\n        if (node.type === NodeType.Element) {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\n          ref1 = node.attribs;\n          for (name in ref1) {\n            if (!hasProp.call(ref1, name)) continue;\n            att = ref1[name];\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n          }\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\n          this.writerOptions.state = WriterState.InsideTag;\n        } else {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\n          if (node.pubID && node.sysID) {\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\n          }\n          if (node.children) {\n            chunk += ' [';\n            this.writerOptions.state = WriterState.InsideTag;\n          } else {\n            this.writerOptions.state = WriterState.CloseTag;\n            chunk += '>';\n          }\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.onData(chunk, this.currentLevel);\n        return node.isOpen = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.closeNode = function(node) {\n      var chunk;\n      if (!node.isClosed) {\n        chunk = '';\n        this.writerOptions.state = WriterState.CloseTag;\n        if (node.type === NodeType.Element) {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        } else {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.writerOptions.state = WriterState.None;\n        this.onData(chunk, this.currentLevel);\n        return node.isClosed = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.onData = function(chunk, level) {\n      this.documentStarted = true;\n      return this.onDataCallback(chunk, level + 1);\n    };\n\n    XMLDocumentCB.prototype.onEnd = function() {\n      this.documentCompleted = true;\n      return this.onEndCallback();\n    };\n\n    XMLDocumentCB.prototype.debugInfo = function(name) {\n      if (name == null) {\n        return \"\";\n      } else {\n        return \"node: <\" + name + \">\";\n      }\n    };\n\n    XMLDocumentCB.prototype.ele = function() {\n      return this.element.apply(this, arguments);\n    };\n\n    XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n      return this.doctype(root, pubID, sysID);\n    };\n\n    XMLDocumentCB.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLDocumentCB.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.att = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.a = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocumentCB.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocumentCB.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    return XMLDocumentCB;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLStreamWriter = (function(superClass) {\n    extend(XMLStreamWriter, superClass);\n\n    function XMLStreamWriter(stream, options) {\n      this.stream = stream;\n      XMLStreamWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStreamWriter.prototype.endline = function(node, options, level) {\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n        return '';\n      } else {\n        return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n      }\n    };\n\n    XMLStreamWriter.prototype.document = function(doc, options) {\n      var child, i, j, k, len, len1, ref, ref1, results;\n      ref = doc.children;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        child = ref[i];\n        child.isLastRootNode = i === doc.children.length - 1;\n      }\n      options = this.filterOptions(options);\n      ref1 = doc.children;\n      results = [];\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        child = ref1[k];\n        results.push(this.writeChildNode(child, options, 0));\n      }\n      return results;\n    };\n\n    XMLStreamWriter.prototype.attribute = function(att, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n    };\n\n    XMLStreamWriter.prototype.cdata = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.comment = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.declaration = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.docType = function(node, options, level) {\n      var child, j, len, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level));\n      this.stream.write('<!DOCTYPE ' + node.root().name);\n      if (node.pubID && node.sysID) {\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n      } else if (node.sysID) {\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n      }\n      if (node.children.length > 0) {\n        this.stream.write(' [');\n        this.stream.write(this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (j = 0, len = ref.length; j < len; j++) {\n          child = ref[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(']');\n      }\n      options.state = WriterState.CloseTag;\n      this.stream.write(options.spaceBeforeSlash + '>');\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level) + '<' + node.name);\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          this.stream.write('>');\n          options.state = WriterState.CloseTag;\n          this.stream.write('</' + node.name + '>');\n        } else {\n          options.state = WriterState.CloseTag;\n          this.stream.write(options.spaceBeforeSlash + '/>');\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        this.stream.write('>');\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        this.stream.write('</' + node.name + '>');\n      } else {\n        this.stream.write('>' + this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref1 = node.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\n      }\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.raw = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.text = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n    };\n\n    return XMLStreamWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n\n  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    doc = new XMLDocument(options);\n    root = doc.element(name);\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  module.exports.begin = function(options, onData, onEnd) {\n    var ref1;\n    if (isFunction(options)) {\n      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,\n    hasProp = {}.hasOwnProperty;\n\n  builder = require('xmlbuilder');\n\n  defaults = require('./defaults').defaults;\n\n  requiresCDATA = function(entry) {\n    return typeof entry === \"string\" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);\n  };\n\n  wrapCDATA = function(entry) {\n    return \"<![CDATA[\" + (escapeCDATA(entry)) + \"]]>\";\n  };\n\n  escapeCDATA = function(entry) {\n    return entry.replace(']]>', ']]]]><![CDATA[>');\n  };\n\n  exports.Builder = (function() {\n    function Builder(opts) {\n      var key, ref, value;\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n    }\n\n    Builder.prototype.buildObject = function(rootObj) {\n      var attrkey, charkey, render, rootElement, rootName;\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {\n        rootName = Object.keys(rootObj)[0];\n        rootObj = rootObj[rootName];\n      } else {\n        rootName = this.options.rootName;\n      }\n      render = (function(_this) {\n        return function(element, obj) {\n          var attr, child, entry, index, key, value;\n          if (typeof obj !== 'object') {\n            if (_this.options.cdata && requiresCDATA(obj)) {\n              element.raw(wrapCDATA(obj));\n            } else {\n              element.txt(obj);\n            }\n          } else if (Array.isArray(obj)) {\n            for (index in obj) {\n              if (!hasProp.call(obj, index)) continue;\n              child = obj[index];\n              for (key in child) {\n                entry = child[key];\n                element = render(element.ele(key), entry).up();\n              }\n            }\n          } else {\n            for (key in obj) {\n              if (!hasProp.call(obj, key)) continue;\n              child = obj[key];\n              if (key === attrkey) {\n                if (typeof child === \"object\") {\n                  for (attr in child) {\n                    value = child[attr];\n                    element = element.att(attr, value);\n                  }\n                }\n              } else if (key === charkey) {\n                if (_this.options.cdata && requiresCDATA(child)) {\n                  element = element.raw(wrapCDATA(child));\n                } else {\n                  element = element.txt(child);\n                }\n              } else if (Array.isArray(child)) {\n                for (index in child) {\n                  if (!hasProp.call(child, index)) continue;\n                  entry = child[index];\n                  if (typeof entry === 'string') {\n                    if (_this.options.cdata && requiresCDATA(entry)) {\n                      element = element.ele(key).raw(wrapCDATA(entry)).up();\n                    } else {\n                      element = element.ele(key, entry).up();\n                    }\n                  } else {\n                    element = render(element.ele(key), entry).up();\n                  }\n                }\n              } else if (typeof child === \"object\") {\n                element = render(element.ele(key), child).up();\n              } else {\n                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {\n                  element = element.ele(key).raw(wrapCDATA(child)).up();\n                } else {\n                  if (child == null) {\n                    child = '';\n                  }\n                  element = element.ele(key, child.toString()).up();\n                }\n              }\n            }\n          }\n          return element;\n        };\n      })(this);\n      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n        headless: this.options.headless,\n        allowSurrogateChars: this.options.allowSurrogateChars\n      });\n      return render(rootElement, rootObj).end(this.options.renderOpts);\n    };\n\n    return Builder;\n\n  })();\n\n}).call(this);\n", "\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Emitter = require('emitter');\n\nfunction Stream() {\n  Emitter.call(this);\n}\nStream.prototype = new Emitter();\nmodule.exports = Stream;\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (!this.hasListeners('error')) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.off('data', ondata);\n    dest.off('drain', ondrain);\n\n    source.off('end', onend);\n    source.off('close', onclose);\n\n    source.off('error', onerror);\n    dest.off('error', onerror);\n\n    source.off('end', cleanup);\n    source.off('close', cleanup);\n\n    dest.off('end', cleanup);\n    dest.off('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('end', cleanup);\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n}\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", ";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  exports.stripBOM = function(str) {\n    if (str[0] === '\\uFEFF') {\n      return str.substring(1);\n    } else {\n      return str;\n    }\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var prefixMatch;\n\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function(str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function(str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function(str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n    return str;\n  };\n\n  exports.parseBooleans = function(str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n    return str;\n  };\n\n}).call(this);\n", "\nexports.every = function(str) {\n  return new Every(str);\n};\n\n/*\n  Time map\n*/\n\nvar time = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000\n};\n\nfor (var key in time) {\n  if (key === 'millisecond') {\n    time.ms = time[key];\n  } else {\n    time[key.charAt(0)] = time[key];\n  }\n  time[key + 's'] = time[key];\n}\n\n\n/*\n  Every constructor\n*/\n\nfunction Every(str) {\n  this.count = 0;\n  var m = parse(str);\n  if (m) {\n    this.time = Number(m[0]) * time[m[1]];\n    this.type = m[1];\n  }\n}\n\nEvery.prototype.do = function(cb) {\n  if (this.time) {\n    this.interval = setInterval(callback, this.time);\n  }\n\n  var that = this;\n  function callback() {\n    that.count++;\n    cb.call(that);\n  }\n  return this;\n};\n\nEvery.prototype.stop = function() {\n  if (this.interval) {\n    clearInterval(this.interval);\n    delete this.interval;\n  }\n  return this;\n};\n\n\n/*\n  Convert string to milliseconds\n\n    ms, millisecond(s)?\n    s, second(s)?\n    m, minute(s)?\n    h, hour(s)?\n    d, day(s)?\n*/\nvar reg = /^\\s*(\\d+(?:\\.\\d+)?)\\s*([a-z]+)\\s*$/;\n\nfunction parse(str) {\n  var m = str.match(reg);\n  if (m && time[m[2]]) {\n    return m.slice(1);\n  }\n  return null;\n}\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var bom, defaults, events, isEmpty, processItem, processors, sax, setImmediate,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  sax = require('sax');\n\n  events = require('events');\n\n  bom = require('./bom');\n\n  processors = require('./processors');\n\n  setImmediate = require('timers').setImmediate;\n\n  defaults = require('./defaults').defaults;\n\n  isEmpty = function(thing) {\n    return typeof thing === \"object\" && (thing != null) && Object.keys(thing).length === 0;\n  };\n\n  processItem = function(processors, item, key) {\n    var i, len, process;\n    for (i = 0, len = processors.length; i < len; i++) {\n      process = processors[i];\n      item = process(item, key);\n    }\n    return item;\n  };\n\n  exports.Parser = (function(superClass) {\n    extend(Parser, superClass);\n\n    function Parser(opts) {\n      this.parseStringPromise = bind(this.parseStringPromise, this);\n      this.parseString = bind(this.parseString, this);\n      this.reset = bind(this.reset, this);\n      this.assignOrPush = bind(this.assignOrPush, this);\n      this.processAsync = bind(this.processAsync, this);\n      var key, ref, value;\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n      if (this.options.normalizeTags) {\n        if (!this.options.tagNameProcessors) {\n          this.options.tagNameProcessors = [];\n        }\n        this.options.tagNameProcessors.unshift(processors.normalize);\n      }\n      this.reset();\n    }\n\n    Parser.prototype.processAsync = function() {\n      var chunk, err;\n      try {\n        if (this.remaining.length <= this.options.chunkSize) {\n          chunk = this.remaining;\n          this.remaining = '';\n          this.saxParser = this.saxParser.write(chunk);\n          return this.saxParser.close();\n        } else {\n          chunk = this.remaining.substr(0, this.options.chunkSize);\n          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n          this.saxParser = this.saxParser.write(chunk);\n          return setImmediate(this.processAsync);\n        }\n      } catch (error1) {\n        err = error1;\n        if (!this.saxParser.errThrown) {\n          this.saxParser.errThrown = true;\n          return this.emit(err);\n        }\n      }\n    };\n\n    Parser.prototype.assignOrPush = function(obj, key, newValue) {\n      if (!(key in obj)) {\n        if (!this.options.explicitArray) {\n          return obj[key] = newValue;\n        } else {\n          return obj[key] = [newValue];\n        }\n      } else {\n        if (!(obj[key] instanceof Array)) {\n          obj[key] = [obj[key]];\n        }\n        return obj[key].push(newValue);\n      }\n    };\n\n    Parser.prototype.reset = function() {\n      var attrkey, charkey, ontext, stack;\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      this.saxParser.errThrown = false;\n      this.saxParser.onerror = (function(_this) {\n        return function(error) {\n          _this.saxParser.resume();\n          if (!_this.saxParser.errThrown) {\n            _this.saxParser.errThrown = true;\n            return _this.emit(\"error\", error);\n          }\n        };\n      })(this);\n      this.saxParser.onend = (function(_this) {\n        return function() {\n          if (!_this.saxParser.ended) {\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      this.saxParser.ended = false;\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      this.saxParser.onopentag = (function(_this) {\n        return function(node) {\n          var key, newValue, obj, processedKey, ref;\n          obj = {};\n          obj[charkey] = \"\";\n          if (!_this.options.ignoreAttrs) {\n            ref = node.attributes;\n            for (key in ref) {\n              if (!hasProp.call(ref, key)) continue;\n              if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                obj[attrkey] = {};\n              }\n              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n              if (_this.options.mergeAttrs) {\n                _this.assignOrPush(obj, processedKey, newValue);\n              } else {\n                obj[attrkey][processedKey] = newValue;\n              }\n            }\n          }\n          obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n          if (_this.options.xmlns) {\n            obj[_this.options.xmlnskey] = {\n              uri: node.uri,\n              local: node.local\n            };\n          }\n          return stack.push(obj);\n        };\n      })(this);\n      this.saxParser.onclosetag = (function(_this) {\n        return function() {\n          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n          obj = stack.pop();\n          nodeName = obj[\"#name\"];\n          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n            delete obj[\"#name\"];\n          }\n          if (obj.cdata === true) {\n            cdata = obj.cdata;\n            delete obj.cdata;\n          }\n          s = stack[stack.length - 1];\n          if (obj[charkey].match(/^\\s*$/) && !cdata) {\n            emptyStr = obj[charkey];\n            delete obj[charkey];\n          } else {\n            if (_this.options.trim) {\n              obj[charkey] = obj[charkey].trim();\n            }\n            if (_this.options.normalize) {\n              obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n            }\n            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n              obj = obj[charkey];\n            }\n          }\n          if (isEmpty(obj)) {\n            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;\n          }\n          if (_this.options.validator != null) {\n            xpath = \"/\" + ((function() {\n              var i, len, results;\n              results = [];\n              for (i = 0, len = stack.length; i < len; i++) {\n                node = stack[i];\n                results.push(node[\"#name\"]);\n              }\n              return results;\n            })()).concat(nodeName).join(\"/\");\n            (function() {\n              var err;\n              try {\n                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n              } catch (error1) {\n                err = error1;\n                return _this.emit(\"error\", err);\n              }\n            })();\n          }\n          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n            if (!_this.options.preserveChildrenOrder) {\n              node = {};\n              if (_this.options.attrkey in obj) {\n                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                delete obj[_this.options.attrkey];\n              }\n              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                node[_this.options.charkey] = obj[_this.options.charkey];\n                delete obj[_this.options.charkey];\n              }\n              if (Object.getOwnPropertyNames(obj).length > 0) {\n                node[_this.options.childkey] = obj;\n              }\n              obj = node;\n            } else if (s) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              objClone = {};\n              for (key in obj) {\n                if (!hasProp.call(obj, key)) continue;\n                objClone[key] = obj[key];\n              }\n              s[_this.options.childkey].push(objClone);\n              delete obj[\"#name\"];\n              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                obj = obj[charkey];\n              }\n            }\n          }\n          if (stack.length > 0) {\n            return _this.assignOrPush(s, nodeName, obj);\n          } else {\n            if (_this.options.explicitRoot) {\n              old = obj;\n              obj = {};\n              obj[nodeName] = old;\n            }\n            _this.resultObject = obj;\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      ontext = (function(_this) {\n        return function(text) {\n          var charChild, s;\n          s = stack[stack.length - 1];\n          if (s) {\n            s[charkey] += text;\n            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, '').trim() !== '')) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              charChild = {\n                '#name': '__text__'\n              };\n              charChild[charkey] = text;\n              if (_this.options.normalize) {\n                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n              }\n              s[_this.options.childkey].push(charChild);\n            }\n            return s;\n          }\n        };\n      })(this);\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = (function(_this) {\n        return function(text) {\n          var s;\n          s = ontext(text);\n          if (s) {\n            return s.cdata = true;\n          }\n        };\n      })(this);\n    };\n\n    Parser.prototype.parseString = function(str, cb) {\n      var err;\n      if ((cb != null) && typeof cb === \"function\") {\n        this.on(\"end\", function(result) {\n          this.reset();\n          return cb(null, result);\n        });\n        this.on(\"error\", function(err) {\n          this.reset();\n          return cb(err);\n        });\n      }\n      try {\n        str = str.toString();\n        if (str.trim() === '') {\n          this.emit(\"end\", null);\n          return true;\n        }\n        str = bom.stripBOM(str);\n        if (this.options.async) {\n          this.remaining = str;\n          setImmediate(this.processAsync);\n          return this.saxParser;\n        }\n        return this.saxParser.write(str).close();\n      } catch (error1) {\n        err = error1;\n        if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n          this.emit('error', err);\n          return this.saxParser.errThrown = true;\n        } else if (this.saxParser.ended) {\n          throw err;\n        }\n      }\n    };\n\n    Parser.prototype.parseStringPromise = function(str) {\n      return new Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.parseString(str, function(err, value) {\n            if (err) {\n              return reject(err);\n            } else {\n              return resolve(value);\n            }\n          });\n        };\n      })(this));\n    };\n\n    return Parser;\n\n  })(events);\n\n  exports.parseString = function(str, a, b) {\n    var cb, options, parser;\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n      options = {};\n    }\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n\n  exports.parseStringPromise = function(str, a) {\n    var options, parser;\n    if (typeof a === 'object') {\n      options = a;\n    }\n    parser = new exports.Parser(options);\n    return parser.parseStringPromise(str);\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, parser, processors,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  defaults = require('./defaults');\n\n  builder = require('./builder');\n\n  parser = require('./parser');\n\n  processors = require('./processors');\n\n  exports.defaults = defaults.defaults;\n\n  exports.processors = processors;\n\n  exports.ValidationError = (function(superClass) {\n    extend(ValidationError, superClass);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n\n  })(Error);\n\n  exports.Builder = builder.Builder;\n\n  exports.Parser = parser.Parser;\n\n  exports.parseString = parser.parseString;\n\n  exports.parseStringPromise = parser.parseStringPromise;\n\n}).call(this);\n", "export const preloadHandlebarsTemplates = async () => {\r\n    const templatePaths = [\r\n        // actor tabs\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/ActionsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/BioTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MagicTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MatrixTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MiscTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SocialTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SpellsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/EffectsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/CritterPowersTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/NetworkTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/InventoryTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/matrix/SpriteSkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/matrix/SpritePowersTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleSkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleMatrixTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/ic/ICActorTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/ic/ICMiscTab.html',\r\n\r\n        // uncategorized lists\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Initiative.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Movement.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ProfileImage.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/NameInput.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ActionList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ContactList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/SinAndLifestyleList.html',\r\n\r\n        // magic\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/AdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellAndAdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpiritOptions.html',\r\n\r\n        // matrix\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ProgramList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ComplexFormList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/SpritePowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/DeviceRating.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/Marks.html',\r\n\r\n        // attributes\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/AttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Limits.html',\r\n\r\n        // skills\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActiveSkillList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\r\n\r\n        // vehicle\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleStatsList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleSecondStatsList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleMovement.html',\r\n\r\n        // IC\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ic/ICStats.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ic/ICConfiguration.html',\r\n\r\n        // limited actor\r\n        'systems/shadowrun5e/dist/templates/actor-limited/character.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/spirit.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/sprite.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/vehicle.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/critter.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/Header.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCharacter.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSpirit.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscSprite.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscVehicle.html',\r\n        'systems/shadowrun5e/dist/templates/actor-limited/parts/MiscCritter.html',\r\n\r\n\r\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/action_results.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/modifier.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/critter_power.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/Damage.html',\r\n\r\n        // to wrap the bodies of tabs\r\n        'systems/shadowrun5e/dist/templates/common/TabWrapper.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\r\n\r\n        // Useful wrapper and implemented components\r\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueModifiers.html',\r\n\r\n        // useful select template for the common pattern\r\n        'systems/shadowrun5e/dist/templates/common/Select.html',\r\n\r\n        // to create the condition monitors and edge counter\r\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\r\n\r\n        // looks like a ListHeader\r\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/common/NameLineBlock.html',\r\n\r\n        // list components\r\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\r\n        'systems/shadowrun5e/dist/templates/common/List/ListEntityItem.html',\r\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html',\r\n\r\n        // dialogs\r\n        'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html',\r\n        'systems/shadowrun5e/dist/templates/apps/dialogs/parts/success-test-common.html',\r\n\r\n        // Test chat messages and their parts\r\n        'systems/shadowrun5e/dist/templates/rolls/success-test-message.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/rolled-dice.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/test-opposed-resist.html',\r\n\r\n        // Modifier management parts\r\n        'systems/shadowrun5e/dist/templates/apps/partials/modifiers-physical.hbs'\r\n    ];\r\n\r\n    return loadTemplates(templatePaths);\r\n};\r\n", "import ModList = Shadowrun.ModList;\r\nimport ModListEntry = Shadowrun.ModListEntry;\r\n\r\nexport class PartsList<TType> {\r\n    get list(): ModList<TType> {\r\n        return this._list.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this._list.length;\r\n    }\r\n\r\n    /**\r\n     * Return the sum total of the list.\r\n     *\r\n     * This can be used for numerical lists, that need the sum of all their list elements.\r\n     */\r\n    get total(): number {\r\n        let total = 0;\r\n        for (const part of this._list) {\r\n            if (typeof part.value === 'number') {\r\n                total += part.value;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Return the last element in the list.\r\n     *\r\n     * This can be used for none numerical parts lists, in which the latest value would be whatever the value is.\r\n     */\r\n    get last(): any {\r\n        return this._list[this._list.length - 1];\r\n    }\r\n\r\n    get isEmpty(): boolean {\r\n        return this.length === 0;\r\n    }\r\n\r\n    getPartValue(name: string): TType | undefined {\r\n        return this._list.find((part) => part.name === name)?.value;\r\n    }\r\n\r\n    clear(): void {\r\n        this._list.length = 0;\r\n    }\r\n\r\n    private _list: ModList<TType>;\r\n\r\n    constructor(parts?: ModList<TType>) {\r\n        let actualParts = [] as ModList<TType>;\r\n        if (parts) {\r\n            if (Array.isArray(parts)) {\r\n                actualParts = parts;\r\n            } else if (typeof parts === 'object') {\r\n                for (const [name, value] of Object.entries(parts)) {\r\n                    if (value !== null && value !== undefined) {\r\n                        // if it's a number, we are dealing with an array as an object\r\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\r\n                            actualParts.push({\r\n                                name: (value as ModListEntry<TType>).name,\r\n                                value: (value as ModListEntry<TType>).value,\r\n                            });\r\n                        } else {\r\n                            actualParts.push({\r\n                                name,\r\n                                value,\r\n                            } as ModListEntry<TType>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._list = actualParts;\r\n    }\r\n\r\n    addPart(name: string, value: TType): void {\r\n        this._list.push({\r\n            name,\r\n            value,\r\n        });\r\n    }\r\n\r\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            // if we exist and should've overwrite, return\r\n            if (!overwrite) return;\r\n\r\n            this._list.splice(index, 1);\r\n            // if we are passed undefined, remove the value\r\n            if (value === undefined || value === null) return;\r\n            // recursively go through until we no longer have a part of this name\r\n            this.addUniquePart(name, value);\r\n        } else if (value !== undefined) {\r\n            this.addPart(name, value);\r\n        } else {\r\n            console.warn('Shadowrun 5e | PartsList cant add a none-numerical modifier.', name, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all occurences of the given part modifier.\r\n     * \r\n     * @param name Search parts for this name (exactly)\r\n     * @returns true for when all parts have been removed, otherwise falls.\r\n     */\r\n    removePart(name: string): boolean {\r\n        let index = this._list.findIndex((part) => part.name === name);\r\n        let removed = false;\r\n        while (index > -1) {\r\n            removed = true;\r\n            this._list.splice(index, 1);\r\n            index = this._list.findIndex((part) => part.name === name);\r\n        }\r\n        \r\n        return removed;\r\n    }\r\n\r\n    /**\r\n     * Check if this part list contains at least one part with a matching name.\r\n     * \r\n     * @param name Needle in the part list stack\r\n     * @returns true, when a matching part is found.\r\n     */\r\n    hasPart(name: string): boolean {\r\n        return this._list.some(part => part.name === name);\r\n    }\r\n\r\n    getMessageOutput() {\r\n        return this.list;\r\n    }\r\n\r\n    static AddPart<TType>(list: ModList<TType>, name: string, value: TType): ModList<TType> {\r\n        const parts = new PartsList(list);\r\n        parts.addPart(name, value);\r\n        return parts._list;\r\n    }\r\n\r\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\r\n        const parts = new PartsList(list);\r\n        parts.addUniquePart(name, value, overwrite);\r\n        return parts._list;\r\n    }\r\n\r\n    static RemovePart<TType>(list: ModList<TType>, name: string) {\r\n        const parts = new PartsList(list);\r\n        parts.removePart(name);\r\n        return parts._list;\r\n    }\r\n\r\n    static Total(list: ModList<number>) {\r\n        const parts = new PartsList(list);\r\n        return parts.total;\r\n    }\r\n}\r\n", "/**\r\n * The constants file is a bit of a mess of stuff that doesn't change and some shadowrun specific rule values.\r\n * Everything should be reused by someplace else. Try to avoid any magic values withing your code.\r\n *\r\n * The SR object contains initial values and constants. Constants are written in ALL_CAPS_CONSTANTS and should never be\r\n * changed during runtime.\r\n * Regarding Shadowrun modifier values: If the rules define a negative modifier, declare it here as such. Don't use a positive\r\n * modifier and subtract at the place of use.\r\n *\r\n * Other than this file config.ts exists and only contains mappings between fixed names/ids and translation labels.\r\n *\r\n */\r\nexport const SYSTEM_NAME = 'shadowrun5e';\r\nexport const SYSTEM_SOCKET = `system.${SYSTEM_NAME}`;\r\nexport const FLAGS = {\r\n    ShowGlitchAnimation: 'showGlitchAnimation',\r\n    ShowTokenNameForChatOutput: 'showTokenNameInsteadOfActor',\r\n    WhisperOpposedTestsToTargetedPlayers: 'whisperOpposedTestsToTargetedPlayers',\r\n    OnlyAllowRollOnDefaultableSkills: 'onlyAllowRollOnDefaultableSkills',\r\n    ShowSkillsWithDetails: 'showSkillsWithDetails',\r\n    OnlyAutoRollNPCInCombat: 'onlyAutoRollNPCInCombat',\r\n    MessageCustomRoll: 'customRoll',\r\n    ApplyLimits: 'applyLimits',\r\n    LastRollPromptValue: 'lastRollPromptValue',\r\n    DisplayDefaultRollCard: 'displayDefaultRollCard',\r\n    CombatInitiativePass: 'combatInitiativePass',\r\n    EmbeddedItems: 'embeddedItems',\r\n    LastFireMode: 'lastFireMode',\r\n    LastSpellForce: 'lastSpellForce',\r\n    LastComplexFormLevel: 'lastComplexFormLevel',\r\n    LastFireRange: 'lastFireRange',\r\n    Attack: 'attack',\r\n    Roll: 'roll',\r\n    ActionTestData: 'actionTestData',\r\n    TargetsSceneTokenIds: 'targetsSceneTokenIds',\r\n    ChangelogShownForVersion: 'changelogShownForVersion',\r\n    Modifier: 'modifier',\r\n    DoInitPass: 'doInitPass',\r\n    DoNextRound: 'doNextRound',\r\n    addNetworkController: 'addNetworkController',\r\n    TokenHealthBars: 'tokenHealthBars',\r\n    Test: 'TestData',\r\n    HideGMOnlyChatContent: 'HideGMOnlyChatContent',\r\n    MustHaveRessourcesOnTest: 'MustConsumeRessourcesOnTest'\r\n};\r\nexport const CORE_NAME = 'core';\r\nexport const CORE_FLAGS = {\r\n    RollMode: 'rollMode'\r\n}\r\nexport const METATYPEMODIFIER = 'SR5.Character.Modifiers.NPCMetatypeAttribute';\r\n\r\nexport const LENGTH_UNIT_TO_METERS_MULTIPLIERS = {\r\n    'm': 1,\r\n    'meter': 1,\r\n    'meters': 1,\r\n    'km': 1000,\r\n    'kilometers': 1000,\r\n    'kilometer': 1000,\r\n};\r\n\r\nexport const DEFAULT_ROLL_NAME = 'Roll';\r\nexport const LENGTH_UNIT = 'm';\r\nexport const SKILL_DEFAULT_NAME = '';\r\nexport const DEFAULT_ID_LENGTH = 16;\r\n\r\n// Contain data regarding shadowrun rules, mostly whatever is stated in some table to be looked up in other places.\r\nexport const SR = {\r\n    combat: {\r\n        // Modifiers to use for the different levels / ranges for environmental modifiers.\r\n        environmental: {\r\n            range_modifiers: {\r\n                short: 0,\r\n                medium: -1,\r\n                long: -3,\r\n                extreme: -6,\r\n                // A modifier of zero will allow for users/gm to still test for targets with their own judgement.\r\n                out_of_range: 0\r\n            },\r\n            levels: {\r\n                good: 0,\r\n                light: -1,\r\n                moderate: -3,\r\n                heavy: -6,\r\n                extreme: -10,\r\n            }\r\n        },\r\n\r\n        INI_RESULT_MOD_AFTER_INI_PASS: -10,\r\n        INITIAL_INI_PASS: 1,\r\n        INITIAL_INI_ROUND: 1\r\n    },\r\n    die: {\r\n        glitch: [1],\r\n        success: [5, 6]\r\n    },\r\n    defense: {\r\n        spell: {\r\n            direct: {\r\n                mana: 'willpower',\r\n                physical: 'body'\r\n            }\r\n        }\r\n    },\r\n    attributes: {\r\n        // Use for min/max value ranges (general). This will need expanding for different metatypes, should that ever\r\n        // come to  be.\r\n        ranges: {\r\n            magic: {min: 0},\r\n            edge: {min: 0},\r\n            resonance: {min: 0},\r\n            essence: {min: 0},\r\n            body: {min: 1},\r\n            agility: {min: 1},\r\n            reaction: {min: 1},\r\n            strength: {min: 1},\r\n            willpower: {min: 1},\r\n            logic: {min: 1},\r\n            intuition: {min: 1},\r\n            charisma: {min: 1},\r\n            attack: {min: 0},\r\n            sleaze: {min: 0},\r\n            data_processing: {min: 0},\r\n            firewall: {min: 0},\r\n            host_rating: {min: 0, max: 12}\r\n        },\r\n        // Use for initial default values that aren't simply range.<>.min values.\r\n        defaults: {\r\n            essence: 6\r\n        },\r\n        // Reaction would be displayed as REA, when set to 3.\r\n        SHORT_NAME_LENGTH: 3\r\n    },\r\n    skill: {\r\n        // @PDF SR5#130\r\n        DEFAULTING_MODIFIER: -1,\r\n        SPECIALIZATION_MODIFIER: 2\r\n    },\r\n    initiatives: {\r\n        ic: {\r\n            dice: 4\r\n        },\r\n        ranges: {\r\n            base: {min: 0},\r\n            dice: {min: 0, max: 5}\r\n        }\r\n    }\r\n}\r\n", "import SkillField = Shadowrun.SkillField;\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {SR5} from \"../config\";\r\nimport {SR} from \"../constants\";\r\n\r\nexport class SkillRules {\r\n\r\n    /**\r\n     * Determing if a skills value / level makes defaulting necessary.\r\n     * \r\n     * NOTE: A skill can be altered by an effect, which will leave it's base untouched. \r\n     *       Therefore it's calculated value must be used as a level\r\n     * \r\n     * @param skill Any legacy or custom skill\r\n     * @returns true, if a roll for the given skill must default.\r\n     */\r\n    static mustDefaultToRoll(skill: SkillField): boolean {\r\n        return skill.value === 0;\r\n    }\r\n    /**\r\n     * Allow defaulting a skill role.\r\n     * @PDF SR5#130\r\n     * @param skill Check for this skills ability to be defaulted.\r\n     * @return true will allow for a SuccessTest / role to proceed.\r\n     */\r\n    static allowDefaultingRoll(skill: SkillField): boolean {\r\n        // Check for skill defaulting at the base, since modifiers or bonus can cause a positive pool, while\r\n        // still defaulting.\r\n        return skill.canDefault;\r\n    }\r\n\r\n    /**\r\n     * Allow a skill role.\r\n     * @PDF SR5#130\r\n     * @param skill Check for this skills ability to be rolled.\r\n     * @return true will allow for a SuccessTest / role to proceed.\r\n     */\r\n    static allowRoll(skill: SkillField): boolean {\r\n        return !SkillRules.mustDefaultToRoll(skill) || SkillRules.allowDefaultingRoll(skill);\r\n    }\r\n\r\n    /**\r\n     * Add the defaulting modifier part to a parts list\r\n     * @param parts Should be a PartsList involved with skills.\r\n     */\r\n    static addDefaultingPart(parts: PartsList<number>) {\r\n        parts.addUniquePart('SR5.Defaulting', SkillRules.defaultingModifier);\r\n    }\r\n\r\n    /**\r\n     * Get the level a specific skill without its attribute.\r\n     * @param skill\r\n     * @param options\r\n     * @param options.specialization If true will add the default specialization bonus onto the level.\r\n     */\r\n    static level(skill: SkillField, options = {specialization: false}): number {\r\n        if (this.mustDefaultToRoll(skill) && this.allowDefaultingRoll(skill)) {\r\n            return SkillRules.defaultingModifier;\r\n        }\r\n\r\n        // An attribute can have a NaN value if no value has been set yet. Do the skill for consistency.\r\n        const skillValue = typeof skill.value === 'number' ? skill.value : 0;\r\n        const specializationBonus = options.specialization ? SR.skill.SPECIALIZATION_MODIFIER : 0;\r\n\r\n        return skillValue + specializationBonus;\r\n    }\r\n\r\n    static get defaultingModifier(): number {\r\n        return SR.skill.DEFAULTING_MODIFIER;\r\n    }\r\n\r\n    static get SpecializationModifier(): number {\r\n        return SR.skill.SPECIALIZATION_MODIFIER;\r\n    }\r\n}", "import SkillField = Shadowrun.SkillField;\r\nimport {SkillRules} from \"../../rules/SkillRules\";\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {FLAGS, SYSTEM_NAME} from \"../../constants\";\r\n\r\nexport class SkillFlow {\r\n    /**\r\n     * Handle everything around how a skill should be defaulted\r\n     * @param skill\r\n     * @param parts\r\n     */\r\n    static handleDefaulting(skill: SkillField, parts: PartsList<number>) {\r\n        if (!SkillRules.mustDefaultToRoll(skill)) return;\r\n\r\n        if (!SkillFlow.allowDefaultingRoll(skill)) {\r\n            ui.notifications?.warn(game.i18n.localize('SR5.Warnings.SkillCantBeDefault'));\r\n            return;\r\n        }\r\n\r\n        SkillRules.addDefaultingPart(parts);\r\n    }\r\n\r\n    /**\r\n     * Check if either the system settings or skill configuration allow for a skill to be defaulted.\r\n     * @param skill\r\n     * @return true will allow a role on the skill that needs defaulting.\r\n     */\r\n    static allowDefaultingRoll(skill: SkillField): boolean {\r\n        // Check if settings allow rolls of skills that otherwise would need to be defaulted.\r\n        const allowUnimproviseable = game.settings.get(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills) === false;\r\n        if (allowUnimproviseable)\r\n            return true;\r\n\r\n        return SkillRules.allowDefaultingRoll(skill);\r\n    }\r\n\r\n    static allowRoll(skill: SkillField): boolean {\r\n        if (SkillRules.mustDefaultToRoll(skill) && SkillFlow.allowDefaultingRoll(skill)) {\r\n            return true;\r\n        }\r\n        return SkillRules.allowRoll(skill);\r\n    }\r\n\r\n    static isCustomSkill(skill: SkillField): boolean {\r\n        return skill.name !== undefined && skill.name !== '';\r\n    }\r\n\r\n    static isLegacySkill(skill: SkillField): boolean {\r\n        return !SkillFlow.isCustomSkill(skill);\r\n    }\r\n}", "import {CORE_FLAGS, CORE_NAME} from './constants';\r\n\r\n\r\n/**\r\n * The legacy chat message approach of the system uses a generic chat message to display roll and item information.\r\n *\r\n * NOTE: This approach has been deprecated in Foundry 0.8 and should be replaced with custom Roll implementation for each kind of Roll (ActionRoll, AttackRoll, OpposedRoll, ...).\r\n *\r\n * @param template The dist path to be used as a template file.\r\n * @param templateData An untyped object carrying data to display. The template should itself check for what properties are available and only renders what's given.\r\n */\r\nasync function createChatMessage(template: string, templateData): Promise<ChatMessage|null> {\r\n    const chatData = await createChatData(template, templateData);\r\n    const message = await ChatMessage.create(chatData);\r\n\r\n    if (!message) return null;\r\n\r\n    return message;\r\n}\r\n\r\n// templateData has no datatype to pipe through whatever it's given.\r\n// Clean up your data within templateData creation functions!\r\nconst createChatData = async (template: string, templateData) => {\r\n    const html = await renderTemplate(template, templateData);\r\n\r\n    const chatData = {\r\n        user: game.user?.id,\r\n        speaker: {\r\n            actor: templateData.actor?.id,\r\n            token: templateData.token?.id,\r\n            alias: game.user?.name\r\n        },\r\n        item: templateData.item,\r\n        content: html,\r\n        rollMode: game.settings.get(CORE_NAME, CORE_FLAGS.RollMode)\r\n    };\r\n\r\n    // @ts-ignore\r\n    ChatMessage.applyRollMode(chatData, chatData.rollMode);\r\n\r\n    return chatData;\r\n};\r\n\r\nexport async function createItemChatMessage(options) {\r\n    const templateData = createChatTemplateData(options);\r\n    return await createChatMessage('systems/shadowrun5e/dist/templates/rolls/item-card.html', templateData);\r\n}\r\n\r\nfunction createChatTemplateData(options) {\r\n    // field extraction is explicit to enforce visible data flow to ensure clean data.\r\n    // NOTE: As soon as clear data dynamic data flow can be established, this should be removed for a simple {...options}\r\n    let {actor, item, description, tests} = options;\r\n\r\n    const token = actor?.getToken();\r\n    const title = game.i18n.localize(\"SR5.Description\");\r\n\r\n    return {\r\n        title,\r\n        actor,\r\n        token,\r\n        item,\r\n        description,\r\n        tests\r\n    }\r\n}", "import DamageData = Shadowrun.DamageData;\r\nimport ActorArmorData = Shadowrun.ActorArmorData;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport TechnologyData = Shadowrun.TechnologyData;\r\nimport DescriptionData = Shadowrun.DescriptionData;\r\nimport EquipmentData = Shadowrun.EquipmentData;\r\nimport QualityData = Shadowrun.QualityData;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport LimitData = Shadowrun.LimitData;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport OpposedTestData = Shadowrun.OpposedTestData;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport TrackType = Shadowrun.TrackType;\r\nimport HostData = Shadowrun.HostData;\r\nimport DevicePartData = Shadowrun.DevicePartData;\r\nimport SourceEntityField = Shadowrun.SourceEntityField;\r\nimport ActionResultData = Shadowrun.ActionResultData;\r\nimport {SKILL_DEFAULT_NAME} from \"../constants\";\r\nimport DeviceData = Shadowrun.DeviceData;\r\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\r\nimport DeviceItemData = Shadowrun.DeviceItemData;\r\nimport ValueField = Shadowrun.ValueField;\r\nimport GenericValueField = Shadowrun.GenericValueField;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\n\r\n\r\n// TODO: reimplemented methods based on .damageData or use template data somehow\r\nexport class DefaultValues {\r\n    /**\r\n     *\r\n     * @param partialDamageData give partial DamageData fields to overwrite default values\r\n     */\r\n    static damageData(partialDamageData: Partial<DamageData> = {}): DamageData {\r\n        const data: DamageData = {\r\n            type: {\r\n                base: 'physical',\r\n                value: 'physical',\r\n            },\r\n            element: {\r\n                base: '',\r\n                value: '',\r\n            },\r\n            base: 0,\r\n            value: 0,\r\n            ap: {\r\n                base: 0,\r\n                value: 0,\r\n                mod: [],\r\n            },\r\n            attribute: '',\r\n            mod: [],\r\n            base_formula_operator: 'add',\r\n            source: {\r\n                actorId: '',\r\n                itemId: '',\r\n                itemType: '',\r\n                itemName: ''\r\n            }\r\n        }\r\n        return mergeObject(data, partialDamageData) as DamageData;\r\n    }\r\n\r\n    static actorArmorData(partialActorArmorData: Partial<ActorArmorData> = {}): ActorArmorData {\r\n        return mergeObject({\r\n            value: 0,\r\n            mod: [],\r\n            base: 0,\r\n            label: '',\r\n        }, partialActorArmorData) as ActorArmorData;\r\n    }\r\n\r\n    static equipmentData(partialEquipmentData: Partial<EquipmentData> = {}): EquipmentData {\r\n        return mergeObject({\r\n            description: this.descriptionData(),\r\n            technology: this.technologyData(),\r\n        }, partialEquipmentData) as EquipmentData;\r\n    }\r\n\r\n    static qualityData(partialQualityData: Partial<QualityData> = {}): QualityData {\r\n        return mergeObject({\r\n            type: '',\r\n            description: this.descriptionData(),\r\n            action: this.actionRollData(),\r\n        }, partialQualityData) as QualityData;\r\n    }\r\n\r\n    static technologyData(partialTechnologyData: Partial<TechnologyData> = {}): TechnologyData {\r\n        return mergeObject({\r\n            rating: '',\r\n            availability: '',\r\n            quantity: 1,\r\n            cost: 0,\r\n            equipped: false,\r\n            conceal: {\r\n                base: 0,\r\n                value: 0,\r\n                mod: [],\r\n            },\r\n            condition_monitor: {\r\n                label: '',\r\n                value: 0,\r\n                max: 0,\r\n            },\r\n            wireless: true,\r\n            networkController: undefined\r\n        }, partialTechnologyData) as TechnologyData;\r\n    }\r\n\r\n    static descriptionData(partialDescriptionData: Partial<DescriptionData> = {}): DescriptionData {\r\n        return mergeObject({\r\n            value: '',\r\n            chat: '',\r\n            source: ''\r\n        }, partialDescriptionData) as DescriptionData;\r\n    }\r\n\r\n    static matrixData(partialMatrixData: Partial<DevicePartData> = {}): DevicePartData {\r\n        // Remove incomplete properties for ease of use of callers.\r\n        if (partialMatrixData.category === undefined) delete partialMatrixData.category;\r\n        if (partialMatrixData.atts === undefined) delete partialMatrixData.atts;\r\n\r\n        return mergeObject({\r\n            category: \"\",\r\n            atts: {\r\n                att1: {\r\n                    value: 0,\r\n                    att: \"attack\",\r\n                    editable: true\r\n                },\r\n                att2: {\r\n                    value: 0,\r\n                    att: \"attack\",\r\n                    editable: true\r\n                },\r\n                att3: {\r\n                    value: 0,\r\n                    att: \"attack\",\r\n                    editable: true\r\n                },\r\n                att4: {\r\n                    value: 0,\r\n                    att: \"attack\",\r\n                    editable: true\r\n                }\r\n            },\r\n            networkDevices: []\r\n        }, partialMatrixData) as DevicePartData;\r\n    }\r\n\r\n    static actionRollData(partialActionRollData: Partial<ActionRollData> = {}): ActionRollData {\r\n        return mergeObject({\r\n            type: '',\r\n            category: '',\r\n            attribute: '',\r\n            attribute2: '',\r\n            skill: '',\r\n            spec: false,\r\n            mod: 0,\r\n            mod_description: '',\r\n            limit: this.limitData(),\r\n            extended: false,\r\n            damage: this.damageData(),\r\n            opposed: this.opposedTestData(),\r\n            alt_mod: 0,\r\n            dice_pool_mod: []\r\n        }, partialActionRollData) as ActionRollData;\r\n    }\r\n\r\n    static actionResultData(partialActionResultData: Partial<ActionResultData> = {}): ActionResultData {\r\n        // @ts-ignore\r\n        return mergeObject({\r\n            success: {\r\n                matrix: {\r\n                    placeMarks: false\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    static limitData(partialLimitData: Partial<LimitData> = {}): LimitData {\r\n        return mergeObject({\r\n            value: 0,\r\n            base: 0,\r\n            attribute: '',\r\n            mod: []\r\n        }, partialLimitData) as LimitData;\r\n    }\r\n\r\n    static limitField(partialLimitField: Partial<LimitField> = {}): LimitField {\r\n        return mergeObject({\r\n            value: 0,\r\n            base: 0,\r\n            attribute: '',\r\n            label: '',\r\n            hidden: false,\r\n            mod: []\r\n        }, partialLimitField) as LimitField;\r\n    }\r\n\r\n    static opposedTestData(partialOpposedTestData: Partial<OpposedTestData> = {}): OpposedTestData {\r\n        return mergeObject({\r\n            type: '',\r\n            attribute: '',\r\n            attribute2: '',\r\n            skill: '',\r\n            mod: 0,\r\n            description: ''\r\n        }, partialOpposedTestData) as OpposedTestData;\r\n    }\r\n\r\n    static skillData(partialSkillData: Partial<SkillField> = {}): SkillField {\r\n        return mergeObject({\r\n            name: SKILL_DEFAULT_NAME,\r\n            base: 0,\r\n            value: 0,\r\n            hidden: false,\r\n            canDefault: false,\r\n            label: '',\r\n            bonus: [],\r\n            specs: [],\r\n            mod: [],\r\n            attribute: ''\r\n        }, partialSkillData) as SkillField;\r\n    }\r\n\r\n    static trackData(partialTrackData: Partial<TrackType> = {}): TrackType {\r\n        return mergeObject({\r\n            value: 0,\r\n            max: 0,\r\n            label: '',\r\n            mod: [],\r\n            disabled: false,\r\n            wounds: 0\r\n        }, partialTrackData) as TrackType;\r\n    }\r\n\r\n    static hostData(partialHostData: Partial<HostData> = {}): HostData {\r\n        return mergeObject({\r\n            description: DefaultValues.descriptionData(partialHostData.description),\r\n            ...DefaultValues.matrixData({category: partialHostData.category, atts: partialHostData.atts}),\r\n            rating: 0,\r\n            ic: []\r\n        }, partialHostData) as HostData;\r\n    }\r\n\r\n    static sourceEntityData(partialSourceEntityData: Partial<SourceEntityField> = {}): SourceEntityField {\r\n        return mergeObject({\r\n            id: '',\r\n            name: '',\r\n            pack: null,\r\n            type: 'Actor',\r\n            system: partialSourceEntityData.data || undefined\r\n        }, partialSourceEntityData) as SourceEntityField;\r\n    }\r\n\r\n    static equipmentItemData(partialEquipmentItemData: Partial<EquipmentItemData> = {}): EquipmentItemData {\r\n        return  mergeObject({\r\n            name: '',\r\n            type: 'equipment',\r\n            system: {\r\n                description: DefaultValues.descriptionData(partialEquipmentItemData.data?.description || {}),\r\n                technology: DefaultValues.technologyData(partialEquipmentItemData.data?.technology || {})\r\n            }\r\n        }, partialEquipmentItemData) as EquipmentItemData;\r\n    }\r\n\r\n    static deviceItemData(partialDeviceItemData: Partial<DeviceItemData> = {}): DeviceItemData {\r\n        return mergeObject({\r\n            name: '',\r\n            type: 'device',\r\n            system: {\r\n                description: DefaultValues.descriptionData(partialDeviceItemData.data?.description || {}),\r\n                technology: DefaultValues.technologyData(partialDeviceItemData.data?.technology || {}),\r\n                ...DefaultValues.matrixData({category: partialDeviceItemData.data?.category, atts: partialDeviceItemData.data?.atts}),\r\n            }\r\n        }, partialDeviceItemData) as DeviceItemData;\r\n    }\r\n\r\n    static valueData(partialValueData: Partial<ValueField> = {}) {\r\n        return mergeObject({\r\n            base: 0,\r\n            value: 0,\r\n            temp: 0,\r\n            mod: [],\r\n            label: ''\r\n        }, partialValueData) as ValueField;\r\n    }\r\n\r\n    static genericValueData(partialGenericValueData: Partial<GenericValueField> = {}) {\r\n        return mergeObject({\r\n            base: 0,\r\n            value: 0,\r\n            temp: 0,\r\n            mod: [],\r\n            label: ''\r\n        }, partialGenericValueData) as GenericValueField;\r\n    }\r\n\r\n    static minimalActionData(partialActionData: Partial<MinimalActionData> = {}) {\r\n        return mergeObject({\r\n            attribute: '',\r\n            attribute2: '',\r\n            skill: '',\r\n            mod: 0,\r\n            armor: false,\r\n            limit: {\r\n                value: 0,\r\n                attribute: '',\r\n                mod: [],\r\n                base: 0,\r\n            }\r\n        }, partialActionData) as MinimalActionData;\r\n    }\r\n\r\n    static actionData(partialActionData: Partial<ActionRollData> = {}) {\r\n        return mergeObject({\r\n            test: \"\",\r\n            type: '',\r\n            category: '',\r\n            attribute: '',\r\n            attribute2: '',\r\n            skill: '',\r\n            spec: false,\r\n            mod: 0,\r\n            mod_description: '',\r\n            damage: DefaultValues.damageData(),\r\n            modifiers: [],\r\n            limit: {\r\n                value: 0,\r\n                attribute: '',\r\n                mod: [],\r\n                base: 0,\r\n            },\r\n            threshold: {\r\n                value: 0,\r\n                base: 0\r\n            },\r\n            extended: false,\r\n            opposed: {\r\n                type: '',\r\n                test: '',\r\n                attribute: '',\r\n                attribute2: '',\r\n                skill: '',\r\n                mod: 0,\r\n                description: '',\r\n            },\r\n            followed: {\r\n                test: '',\r\n                attribute: '',\r\n                attribute2: '',\r\n                skill: '',\r\n                mod: 0,\r\n            },\r\n            alt_mod: 0,\r\n            dice_pool_mod: []\r\n        }, partialActionData) as ActionRollData;\r\n    }\r\n\r\n    static fireModeData(partialFireModeData: Partial<FireModeData> = {}): FireModeData {\r\n        return mergeObject({\r\n            value: 0,\r\n            label: '',\r\n            defense: 0,\r\n            recoil: false,\r\n            suppression: false,\r\n            mode: 'single_shot',\r\n            action: 'simple'\r\n        }, partialFireModeData);\r\n    }\r\n}\r\n\r\n// TODO: Move these into DefaultValues implementations.\r\nexport const DataDefaults = {\r\n    grunt: {\r\n        metatype_modifiers: {\r\n            elf: {\r\n                attributes: {\r\n                    agility: +1,\r\n                    charisma: +2,\r\n                    edge: -1\r\n                }\r\n            },\r\n            ork: {\r\n                attributes: {\r\n                    body: +3,\r\n                    strength: +2,\r\n                    logic: -1,\r\n                    charisma: -1,\r\n                    edge: -1\r\n                }\r\n            },\r\n            troll: {\r\n                attributes: {\r\n                    body: +4,\r\n                    agility: -1,\r\n                    strength: +4,\r\n                    logic: -1,\r\n                    intuition: -1,\r\n                    charisma: -2,\r\n                    edge: -1,\r\n                },\r\n                general: {\r\n                    armor: +1\r\n                }\r\n            },\r\n            dwarf: {\r\n                attributes: {\r\n                    body: +2,\r\n                    reaction: -1,\r\n                    strength: +2,\r\n                    willpower: +1,\r\n                    edge: -1\r\n                }\r\n            }\r\n        }\r\n    },\r\n    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\r\n}", "export abstract class DataWrapper<DataType> {\r\n    constructor(protected data: DataType) {}\r\n}\r\n", "import { DataWrapper } from './DataWrapper';\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport ModList = Shadowrun.ModList;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport SpellData = Shadowrun.SpellData;\r\nimport TechnologyData = Shadowrun.TechnologyData;\r\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\r\nimport SpellRange = Shadowrun.SpellRange;\r\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\r\nimport ModificationItemData = Shadowrun.ModificationItemData;\r\nimport ActionResultData = Shadowrun.ActionResultData;\r\nimport AmmunitionData = Shadowrun.AmmunitionData;\r\nimport WeaponData = Shadowrun.WeaponData;\r\nimport DeviceData = Shadowrun.DeviceData;\r\nimport AmmoData = Shadowrun.AmmoData;\r\n\r\nexport class SR5ItemDataWrapper extends DataWrapper<ShadowrunItemData> {\r\n    getType() {\r\n        return this.data.type;\r\n    }\r\n    getData(): ShadowrunItemDataData {\r\n        return this.data.system as ShadowrunItemDataData;\r\n    }\r\n\r\n    isAreaOfEffect(): boolean {\r\n        return this.isGrenade() || this.isAoESpell() || this.isAoEAmmo();\r\n    }\r\n\r\n    /** Should only be used to check for actual armor item type.\r\n     * NOTE: Should you only care about a possible armor value use couldHaveArmor instead.\r\n     */\r\n    isArmor(): boolean {\r\n        return this.data.type === 'armor';\r\n    }\r\n\r\n    /** Will give an indicator if an item provides an armor value, without locking into only the Armor item type.\r\n     * NOTE: Should you only care about the armor item type use isArmor instead.\r\n     */\r\n    couldHaveArmor(): boolean {\r\n        const armor = this.getData().armor;\r\n        return this.isArmor() || armor !== undefined;\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.hasArmor() && !this.getData().armor?.mod;\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.hasArmor() && (this.getData().armor?.mod ?? false);\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.getArmorValue() > 0;\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.isThrownWeapon() && (this.getData().thrown?.blast.radius ?? 0) > 0;\r\n    }\r\n\r\n    isThrownWeapon(): boolean {\r\n        if (!this.isWeapon()) return false;\r\n        const weaponData = this.getData() as WeaponData;\r\n        return weaponData.category === 'thrown';\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.data.type === 'weapon';\r\n    }\r\n\r\n    isModification(): boolean {\r\n        return this.data.type === 'modification';\r\n    }\r\n\r\n    isWeaponModification(): boolean {\r\n        if (!this.isModification()) return false;\r\n        const modification = this.data as ModificationItemData;\r\n        return modification.system.type === 'weapon';\r\n    }\r\n\r\n    isArmorModification(): boolean {\r\n        if (!this.isModification()) return false;\r\n        const modification = this.data as ModificationItemData;\r\n        return modification.system.type === 'armor';\r\n    }\r\n\r\n    isProgram(): boolean {\r\n        return this.data.type === 'program';\r\n    }\r\n\r\n    isQuality(): boolean {\r\n        return this.data.type === 'quality';\r\n    }\r\n\r\n    isAmmo(): boolean {\r\n        return this.data.type === 'ammo';\r\n    }\r\n\r\n    isAoEAmmo(): boolean {\r\n        if (!this.isAmmo()) return false;\r\n        const ammoData = this.getData() as AmmoData;\r\n        return (ammoData.blast.radius ?? 0) > 0;\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.data.type === 'cyberware';\r\n    }\r\n\r\n    isBioware(): boolean {\r\n        return this.data.type === 'bioware';\r\n    }\r\n\r\n    isBodyware(): boolean {\r\n        return this.isCyberware() || this.isBioware();\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        if (!this.isSpell()) return false;\r\n        const spellData = this.getData() as unknown as SpellData;\r\n        return spellData.category === 'combat';\r\n    }\r\n\r\n    isDirectCombatSpell(): boolean {\r\n        if (!this.isCombatSpell()) return false;\r\n        return this.getData()?.combat?.type === 'direct';\r\n    }\r\n\r\n    isIndirectCombatSpell(): boolean {\r\n        if (!this.isCombatSpell()) return false;\r\n        return this.getData()?.combat?.type === 'indirect';\r\n    }\r\n\r\n    isManaSpell(): boolean {\r\n        if (!this.isSpell()) return false;\r\n        // Cast as partial spelldata due to conflicting .type between differing item types.\r\n        const spellData = this.getData() as Partial<SpellData>;\r\n        return spellData.type === 'mana';\r\n    }\r\n\r\n    isPhysicalSpell(): boolean {\r\n        if (!this.isSpell()) return false;\r\n        // Cast as partial spelldata due to conflicting .type between differing item types.\r\n        const spellData = this.getData() as Partial<SpellData>;\r\n        return spellData.type === 'physical';\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        if (!this.isWeapon()) return false;\r\n        const weaponData = this.getData() as WeaponData;\r\n        return weaponData.category === 'range';\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.data.type === 'spell';\r\n    }\r\n\r\n    isAoESpell(): boolean {\r\n        return this.isSpell() && this.getData().range === 'los_a';\r\n    }\r\n\r\n    isSpritePower(): boolean {\r\n        return this.data.type === 'sprite_power';\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.data.type === 'complex_form';\r\n    }\r\n\r\n    isContact(): boolean {\r\n        return this.data.type === 'contact';\r\n    }\r\n\r\n    isCritterPower(): boolean {\r\n        return this.data.type === 'critter_power';\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        if (!this.isWeapon()) return false;\r\n        const weaponData = this.getData() as WeaponData;\r\n        return weaponData.category === 'melee';\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.data.type === 'device';\r\n    }\r\n\r\n    isEquipment(): boolean {\r\n        return this.data.type === 'equipment';\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.getData().technology?.equipped || false;\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        if (!this.isDevice()) return false;\r\n        const deviceData = this.getData() as DeviceData;\r\n        return deviceData.category === 'cyberdeck';\r\n    }\r\n\r\n    isCommlink(): boolean {\r\n        if (!this.isDevice()) return false;\r\n        const deviceData = this.getData() as DeviceData;\r\n        return deviceData.category === 'commlink';\r\n    }\r\n\r\n    isMatrixAction(): boolean {\r\n        // @ts-ignore\r\n        return this.isAction() && this.getData().result.success.matrix.placeMarks;\r\n    }\r\n\r\n    isSin(): boolean {\r\n        return this.data.type === 'sin';\r\n    }\r\n\r\n    isLifestyle(): boolean {\r\n        return this.data.type === 'lifestyle';\r\n    }\r\n\r\n    getId(): string {\r\n        // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n        return this.data._id;\r\n    }\r\n\r\n    get hasSource(): boolean {\r\n        return !!this.getData().description?.source;\r\n    }\r\n\r\n    getSource(): string {\r\n        return this.getData().description?.source ?? '';\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.getData().technology?.condition_monitor ?? { value: 0, max: 0, label: '' };\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.getData().technology?.rating || 0;\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.getData()?.armor?.value ?? 0;\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        const { fire, electricity, cold, acid } = this.getData().armor || {};\r\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\r\n    }\r\n\r\n    getName(): string {\r\n        return this.data.name;\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.getData()?.essence ?? 0;\r\n    }\r\n\r\n    getAmmo(): AmmunitionData|undefined {\r\n        return this.getData().ammo;\r\n    }\r\n\r\n    getASDF() {\r\n        if (!this.isDevice()) return undefined;\r\n\r\n        // matrix attributes are set up as an object\r\n        const matrix = {\r\n            attack: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            sleaze: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            data_processing: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n            firewall: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n        };\r\n\r\n        if (this.isCyberdeck()) {\r\n            const atts = this.getData().atts;\r\n            if (atts) {\r\n                for (let [key, att] of Object.entries(atts)) {\r\n                    matrix[att.att].value = att.value;\r\n                    matrix[att.att].device_att = key;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    getQuantity(): number | undefined {\r\n        return this.getData()?.technology?.quantity || 1;\r\n    }\r\n\r\n    isAction(): boolean {\r\n        return this.data.type === 'action';\r\n    }\r\n\r\n    getAction(): ActionRollData|undefined {\r\n        return this.getData().action;\r\n    }\r\n\r\n    getActionDicePoolMod(): number | undefined {\r\n        return this.getData().action?.mod;\r\n    }\r\n\r\n    getLimitAttribute(): string | undefined {\r\n        return this.getData().action?.limit?.attribute;\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.getData().action?.skill;\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.getData().action?.attribute;\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.getData().action?.attribute2;\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.getData().action?.limit?.value;\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.getData().action?.dice_pool_mod || [];\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        if (this.getData().action?.spec) return 'SR5.Specialization';\r\n        return undefined;\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.getData().drain || 0;\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.getData().fade || 0;\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        if (!this.isRangedWeapon()) return 0;\r\n        const base = this.getData()?.range?.rc.value ?? '0';\r\n        return Number(base);\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.getData().melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getTechnology(): TechnologyData|undefined {\r\n        if (\"technology\" in this.data.system)\r\n            return this.data.system.technology;\r\n    }\r\n\r\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\r\n        if (!(\"range\" in this.data.system)) return;\r\n\r\n        if (this.data.type === 'critter_power')\r\n            return this.data.system.range as CritterPowerRange;\r\n\r\n        if (this.data.type === 'spell')\r\n            return this.data.system.range as SpellRange;\r\n\r\n        if (this.data.type === 'weapon')\r\n            return this.data.system.range as RangeWeaponData;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.getData().action?.opposed?.type === 'defense';\r\n    }\r\n\r\n    hasAmmo(): boolean {\r\n        return !!this.getAmmo();\r\n    }\r\n\r\n    getActionResult(): ActionResultData {\r\n        // @ts-ignore\r\n        return this.getData().result;\r\n    }\r\n}\r\n", "import {SR} from \"../constants\";\r\n\r\nexport class MatrixRules {\r\n    /**\r\n     * Calculate the matrix condition monitor based on SR5#228 'Matrix Damage'\r\n     *\r\n     * The result is round up as for physical and stun monitor (SR5#101), even though it's not specified for\r\n     * matrix monitors specifically.\r\n     *\r\n     * @param deviceRating The device rating of the matrix device for the condition monitor.\r\n     * @return The condition max condition monitor value\r\n     */\r\n    static getConditionMonitor(deviceRating: number): number {\r\n        deviceRating = Math.max(deviceRating, SR.attributes.ranges.host_rating.min);\r\n        return Math.ceil(8 + (deviceRating / 2));\r\n    }\r\n\r\n    /**\r\n     * Derive the IC device rating based of it's hosts rating based on SR5#247 'Intrusion Countermeasures'\r\n     *\r\n     */\r\n    static getICDeviceRating(hostRating: number): number {\r\n        return Math.max(hostRating, SR.attributes.ranges.host_rating.min);\r\n    }\r\n\r\n    /**\r\n     * Derive the IC initiative base value of it's host based on SR5#230 'Hot-SIM VR' and SR5#247 'Intrusion Countermeasures'\r\n     *\r\n     * @param hostRating A positive host rating.\r\n     */\r\n    static getICInitiativeBase(hostRating: number): number {\r\n        return Math.max(hostRating * 2, SR.attributes.ranges.host_rating.min);\r\n    }\r\n\r\n    /**\r\n     * Get the amount of initiative dice IC has based on SR5#247 'Intrusion Countermeasures'\r\n     *\r\n     */\r\n    static getICInitiativeDice(): number {\r\n        return Math.max(SR.initiatives.ic.dice, SR.initiatives.ranges.dice.min);\r\n    }\r\n\r\n    /**\r\n     * Derive the base value of any meat attribute an IC uses based on SR5#237 'Matrix actions', SR5#256 'Agents'\r\n     * and SR5#247 'Intrusion Countermeasures'\r\n     *\r\n     */\r\n    static getICMeatAttributeBase(hostRating: number): number {\r\n        return Math.max(hostRating, SR.attributes.ranges.host_rating.min);\r\n    }\r\n\r\n    /**\r\n     * Determine if the count of marks (to be placed) is allowed within the rules. SR5#240 'Hack on the Fly'\r\n     * @param marks\r\n     */\r\n    static isValidMarksCount(marks: number): boolean {\r\n        return marks >= MatrixRules.minMarksCount() && marks <= MatrixRules.maxMarksCount() && marks % 1 === 0;\r\n    }\r\n\r\n    static maxMarksCount(): number {\r\n        return 3;\r\n    }\r\n\r\n    static minMarksCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    static getValidMarksCount(marks: number): number {\r\n        marks = Math.min(marks, MatrixRules.maxMarksCount());\r\n        return Math.max(marks, MatrixRules.minMarksCount());\r\n    }\r\n\r\n    /**\r\n     * Derive a hosts attributes ratings based on it's host rating. SR5#247 'Host Attributes'\r\n     * @param hostRating\r\n     */\r\n    static hostMatrixAttributeRatings(hostRating): number[] {\r\n        return [0, 1, 2, 3].map(rating => rating + hostRating);\r\n    }\r\n}", "import {SR} from \"../constants\";\r\nimport ModList = Shadowrun.ModList;\r\n\r\n// TODO: Data for casting actor / item (uuid)\r\n// TODO: maybe copy of the action data from the casting item / actor\r\ninterface ShadowrunRollData {\r\n    limit: number\r\n    threshold: number\r\n    parts: ModList<number> // TODO: Is this useful?\r\n    explodeSixes: boolean\r\n}\r\n\r\ninterface ShadowrunChatMessageData {\r\n    title?: String\r\n    content?: String\r\n    roll?: SR5Roll\r\n}\r\n\r\n\r\n/**\r\n * Apply Shadowrun 5 rules to a FoundryVTT Roll.\r\n *\r\n * TODO: This class should create a basic Success Test template and be extended\r\n *       for further Test templates (versus, action, weapon?, spell?)\r\n *\r\n * TODO: A chat message should contain all data needed to cast resulting actions.\r\n */\r\nexport class SR5Roll extends Roll {\r\n    data: ShadowrunRollData\r\n\r\n    // toJSON(): any {\r\n    //     // TODO: Check if data includes custom ShadowrunRollData\r\n    //     const data = super.toJSON();\r\n    //     // add class Roll to the json so dice-so-nice works\r\n    //     // TODO: Check if this is still necessary.\r\n    //     // data.class = 'Roll';\r\n    //     return data;\r\n    // }\r\n\r\n    get sides(): number[] {\r\n        //@ts-ignore\r\n        // 0.7.x foundryVTT\r\n        if (this.terms) {\r\n            //@ts-ignore\r\n            return this.terms[0].results.map(result => result.result);\r\n        }\r\n\r\n        //@ts-ignore\r\n        // 0.6.x foundryVTT\r\n        return this.parts[0].rolls.map(roll => roll.roll);\r\n    }\r\n\r\n    get limit(): number {\r\n        return this.data.limit;\r\n    }\r\n\r\n    get threshold(): number {\r\n        return this.data.threshold;\r\n    }\r\n\r\n    get parts(): ModList<number> {\r\n        return this.data.parts;\r\n    }\r\n\r\n    // TODO: Not needed anymore with complex Formula of SuccessTest\r\n    get explodeSixes(): boolean {\r\n        return this.data.explodeSixes;\r\n    }\r\n\r\n    count(side: number): number {\r\n        return this.sides.reduce((counted, result) => result === side ? counted + 1 : counted,\r\n                                 0);\r\n    }\r\n\r\n    // TODO: Rework this to work with the complex formula of SuccessTest.formula (total counts all cs and cf)\r\n    get hits(): number {\r\n        return this.sides.reduce((hits, result) => SR.die.success.includes(result) ? hits + 1 : hits,\r\n                                 0);\r\n    }\r\n\r\n    get glitches(): number {\r\n        return this.sides.reduce((glitches, result) => SR.die.glitch.includes(result) ? glitches + 1 : glitches,\r\n                                 0);\r\n    }\r\n\r\n\r\n    /**\r\n     * The amount of dice going into the throw (the pool used).\r\n     * \r\n     * NOTE: this can be different from the amount of dice actually thown.\r\n     *       Use SR5Roll#diceThrown instead\r\n     */\r\n    get pool(): number {\r\n        // 0.7.x > FoundryVTT\r\n        if (this.terms) {\r\n            //@ts-ignore\r\n            return this.dice[0].number;\r\n        }\r\n\r\n        //@ts-ignore\r\n        // till 0.6.x FoundryVTT\r\n        return this.parts[0].rolls.length;\r\n    }\r\n\r\n    /**\r\n     * The amount of dice actually thrown after all dice explosions have been resolved.\r\n     */\r\n    get poolThrown(): number {\r\n        return this.dice[0].results.length;\r\n    }\r\n\r\n    get glitched(): boolean {\r\n        return this.glitches > Math.floor(this.pool / 2);\r\n    }\r\n\r\n    get total(): number {\r\n        return this.hits;\r\n    }\r\n}", "/**\r\n * Shadowrun 5 configuration for static values.\r\n *\r\n * NOTE: Do NOT import code into this file, as this might cause circular imports.\r\n */\r\n\r\nexport const SR5 = {\r\n    itemTypes: {\r\n        action: 'SR5.ItemTypes.Action',\r\n        adept_power: 'SR5.ItemTypes.AdeptPower',\r\n        ammo: 'SR5.ItemTypes.Ammo',\r\n        armor: 'SR5.ItemTypes.Armor',\r\n        bioware: 'SR5.ItemTypes.Bioware',\r\n        complex_form: 'SR5.ItemTypes.ComplexForm',\r\n        contact: 'SR5.ItemTypes.Contact',\r\n        critter_power: 'SR5.ItemTypes.CritterPower',\r\n        cyberware: 'SR5.ItemTypes.Cyberware',\r\n        device: 'SR5.ItemTypes.Device',\r\n        equipment: 'SR5.ItemTypes.Equipment',\r\n        host: 'SR5.ItemTypes.Host',\r\n        lifestyle: 'SR5.ItemTypes.Lifestyle',\r\n        modification: 'SR5.ItemTypes.Modification',\r\n        program: 'SR5.ItemTypes.Program',\r\n        quality: 'SR5.ItemTypes.Quality',\r\n        sin: 'SR5.ItemTypes.Sin',\r\n        spell: 'SR5.ItemTypes.Spell',\r\n        sprite_power: 'SR5.ItemTypes.SpritePower',\r\n        weapon: 'SR5.ItemTypes.Weapon'\r\n    },\r\n\r\n    // All available character attributes. Sorted alphabetically. :-)\r\n    attributes: {\r\n        agility: 'SR5.AttrAgility',\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        body: 'SR5.AttrBody',\r\n        charisma: 'SR5.AttrCharisma',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        edge: 'SR5.AttrEdge',\r\n        essence: 'SR5.AttrEssence',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n        intuition: 'SR5.AttrIntuition',\r\n        logic: 'SR5.AttrLogic',\r\n        magic: 'SR5.AttrMagic',\r\n        reaction: 'SR5.AttrReaction',\r\n        resonance: 'SR5.AttrResonance',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        strength: 'SR5.AttrStrength',\r\n        willpower: 'SR5.AttrWillpower',\r\n    },\r\n\r\n    /**\r\n     * All labels for all limits used across all actor and item types.\r\n     */\r\n    limits: {\r\n        physical: 'SR5.LimitPhysical',\r\n        social: 'SR5.LimitSocial',\r\n        mental: 'SR5.LimitMental',\r\n        astral: 'SR5.LimitAstral',\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n        speed: 'SR5.Vehicle.Stats.Speed',\r\n        sensor: 'SR5.Vehicle.Stats.Sensor',\r\n        handling: 'SR5.Vehicle.Stats.Handling',\r\n        magic: 'SR5.AttrMagic'\r\n    },\r\n\r\n    specialTypes: {\r\n        mundane: 'SR5.Mundane',\r\n        magic: 'SR5.Awakened',\r\n        resonance: 'SR5.Emerged',\r\n    },\r\n\r\n    damageTypes: {\r\n        physical: 'SR5.DmgTypePhysical',\r\n        stun: 'SR5.DmgTypeStun',\r\n        matrix: 'SR5.DmgTypeMatrix',\r\n    },\r\n\r\n    elementTypes: {\r\n        fire: 'SR5.ElementFire',\r\n        cold: 'SR5.ElementCold',\r\n        acid: 'SR5.ElementAcid',\r\n        electricity: 'SR5.ElementElectricity',\r\n        radiation: 'SR5.ElementRadiation',\r\n    },\r\n\r\n    spellCategories: {\r\n        combat: 'SR5.SpellCatCombat',\r\n        detection: 'SR5.SpellCatDetection',\r\n        health: 'SR5.SpellCatHealth',\r\n        illusion: 'SR5.SpellCatIllusion',\r\n        manipulation: 'SR5.SpellCatManipulation',\r\n    },\r\n\r\n    spellTypes: {\r\n        physical: 'SR5.SpellTypePhysical',\r\n        mana: 'SR5.SpellTypeMana',\r\n    },\r\n\r\n    spellRanges: {\r\n        touch: 'SR5.SpellRangeTouch',\r\n        los: 'SR5.SpellRangeLos',\r\n        los_a: 'SR5.SpellRangeLosA',\r\n    },\r\n\r\n    combatSpellTypes: {\r\n        direct: 'SR5.SpellCombatDirect',\r\n        indirect: 'SR5.SpellCombatIndirect',\r\n    },\r\n\r\n    detectionSpellTypes: {\r\n        directional: 'SR5.SpellDetectionDirectional',\r\n        psychic: 'SR5.SpellDetectionPsychic',\r\n        area: 'SR5.SpellDetectionArea',\r\n    },\r\n\r\n    illusionSpellTypes: {\r\n        obvious: 'SR5.SpellIllusionObvious',\r\n        realistic: 'SR5.SpellIllusionRealistic',\r\n    },\r\n\r\n    illusionSpellSenses: {\r\n        'single-sense': 'SR5.SpellIllusionSingleSense',\r\n        'multi-sense': 'SR5.SpellIllusionMultiSense',\r\n    },\r\n\r\n    attributeRolls: {\r\n        composure: 'SR5.RollComposure',\r\n        lift_carry: 'SR5.RollLiftCarry',\r\n        judge_intentions: 'SR5.RollJudgeIntentions',\r\n        memory: 'SR5.RollMemory',\r\n    },\r\n\r\n    matrixTargets: {\r\n        persona: 'SR5.TargetPersona',\r\n        device: 'SR5.TargetDevice',\r\n        file: 'SR5.TargetFile',\r\n        self: 'SR5.TargetSelf',\r\n        sprite: 'SR5.TargetSprite',\r\n        other: 'SR5.TargetOther',\r\n    },\r\n\r\n    durations: {\r\n        instant: 'SR5.DurationInstant',\r\n        sustained: 'SR5.DurationSustained',\r\n        permanent: 'SR5.DurationPermanent',\r\n    },\r\n\r\n    weaponCategories: {\r\n        range: 'SR5.WeaponCatRange',\r\n        melee: 'SR5.WeaponCatMelee',\r\n        thrown: 'SR5.WeaponCatThrown',\r\n    },\r\n\r\n    weaponRanges: {\r\n        short: 'SR5.WeaponRangeShort',\r\n        medium: 'SR5.WeaponRangeMedium',\r\n        long: 'SR5.WeaponRangeLong',\r\n        extreme: 'SR5.WeaponRangeExtreme',\r\n    },\r\n\r\n    qualityTypes: {\r\n        positive: 'SR5.QualityTypePositive',\r\n        negative: 'SR5.QualityTypeNegative',\r\n    },\r\n\r\n    adeptPower: {\r\n        types: {\r\n            active: 'SR5.AdeptPower.Types.Active',\r\n            passive: 'SR5.AdeptPower.Types.Passive',\r\n        },\r\n    },\r\n\r\n    deviceCategories: {\r\n        commlink: 'SR5.DeviceCatCommlink',\r\n        cyberdeck: 'SR5.DeviceCatCyberdeck',\r\n    },\r\n\r\n    cyberwareGrades: {\r\n        standard: 'SR5.CyberwareGradeStandard',\r\n        alpha: 'SR5.CyberwareGradeAlpha',\r\n        beta: 'SR5.CyberwareGradeBeta',\r\n        delta: 'SR5.CyberwareGradeDelta',\r\n        used: 'SR5.CyberwareGradeUsed',\r\n    },\r\n\r\n    knowledgeSkillCategories: {\r\n        street: 'SR5.KnowledgeSkillStreet',\r\n        academic: 'SR5.KnowledgeSkillAcademic',\r\n        professional: 'SR5.KnowledgeSkillProfessional',\r\n        interests: 'SR5.KnowledgeSkillInterests',\r\n    },\r\n\r\n    activeSkills: {\r\n        archery: 'SR5.SkillArchery',\r\n        automatics: 'SR5.SkillAutomatics',\r\n        blades: 'SR5.SkillBlades',\r\n        clubs: 'SR5.SkillClubs',\r\n        exotic_melee: 'SR5.SkillExoticMelee',\r\n        exotic_range: 'SR5.SkillExoticRange',\r\n        heavy_weapons: 'SR5.SkillHeavyWeapons',\r\n        longarms: 'SR5.SkillLongarms',\r\n        pistols: 'SR5.SkillPistols',\r\n        throwing_weapons: 'SR5.SkillThrowingWeapons',\r\n        unarmed_combat: 'SR5.SkillUnarmedCombat',\r\n        disguise: 'SR5.SkillDisguise',\r\n        diving: 'SR5.SkillDiving',\r\n        escape_artist: 'SR5.SkillEscapeArtist',\r\n        free_fall: 'SR5.SkillFreeFall',\r\n        gymnastics: 'SR5.SkillGymnastics',\r\n        palming: 'SR5.SkillPalming',\r\n        perception: 'SR5.SkillPerception',\r\n        running: 'SR5.SkillRunning',\r\n        sneaking: 'SR5.SkillSneaking',\r\n        survival: 'SR5.SkillSurvival',\r\n        swimming: 'SR5.SkillSwimming',\r\n        tracking: 'SR5.SkillTracking',\r\n        con: 'SR5.SkillCon',\r\n        etiquette: 'SR5.SkillEtiquette',\r\n        impersonation: 'SR5.SkillImpersonation',\r\n        instruction: 'SR5.SkillInstruction',\r\n        intimidation: 'SR5.SkillIntimidation',\r\n        leadership: 'SR5.SkillLeadership',\r\n        negotiation: 'SR5.SkillNegotiation',\r\n        performance: 'SR5.SkillPerformance',\r\n        alchemy: 'SR5.SkillAlchemy',\r\n        arcana: 'SR5.SkillArcana',\r\n        artificing: 'SR5.SkillArtificing',\r\n        assensing: 'SR5.SkillAssensing',\r\n        astral_combat: 'SR5.SkillAstralCombat',\r\n        banishing: 'SR5.SkillBanishing',\r\n        binding: 'SR5.SkillBinding',\r\n        counterspelling: 'SR5.SkillCounterspelling',\r\n        disenchanting: 'SR5.SkillDisenchanting',\r\n        ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\r\n        spellcasting: 'SR5.SkillSpellcasting',\r\n        summoning: 'SR5.SkillSummoning',\r\n        compiling: 'SR5.SkillCompiling',\r\n        decompiling: 'SR5.SkillDecompiling',\r\n        registering: 'SR5.SkillRegistering',\r\n        aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\r\n        automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\r\n        industrial_mechanic: 'SR5.SkillIndustrialMechanic',\r\n        nautical_mechanic: 'SR5.SkillNauticalMechanic',\r\n        animal_handling: 'SR5.SkillAnimalHandling',\r\n        armorer: 'SR5.SkillArmorer',\r\n        artisan: 'SR5.SkillArtisan',\r\n        biotechnology: 'SR5.SkillBiotechnology',\r\n        chemistry: 'SR5.SkillChemistry',\r\n        computer: 'SR5.SkillComputer',\r\n        cybercombat: 'SR5.SkillCybercombat',\r\n        cybertechnology: 'SR5.SkillCybertechnology',\r\n        demolitions: 'SR5.SkillDemolitions',\r\n        electronic_warfare: 'SR5.SkillElectronicWarfare',\r\n        first_aid: 'SR5.SkillFirstAid',\r\n        forgery: 'SR5.SkillForgery',\r\n        hacking: 'SR5.SkillHacking',\r\n        hardware: 'SR5.SkillHardware',\r\n        locksmith: 'SR5.SkillLocksmith',\r\n        medicine: 'SR5.SkillMedicine',\r\n        navigation: 'SR5.SkillNavigation',\r\n        software: 'SR5.SkillSoftware',\r\n        gunnery: 'SR5.SkillGunnery',\r\n        pilot_aerospace: 'SR5.SkillPilotAerospace',\r\n        pilot_aircraft: 'SR5.SkillPilotAircraft',\r\n        pilot_walker: 'SR5.SkillPilotWalker',\r\n        pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\r\n        pilot_water_craft: 'SR5.SkillPilotWaterCraft',\r\n        pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\r\n    },\r\n\r\n    actionTypes: {\r\n        none: 'SR5.ActionTypeNone',\r\n        free: 'SR5.ActionTypeFree',\r\n        simple: 'SR5.ActionTypeSimple',\r\n        complex: 'SR5.ActionTypeComplex',\r\n        varies: 'SR5.ActionTypeVaries',\r\n    },\r\n\r\n    // Use within action damage calculation (base <operator> attribute) => value\r\n    actionDamageFormulaOperators: {\r\n        add: '+',\r\n        subtract: '-',\r\n        multiply: '*',\r\n        divide: '/'\r\n    },\r\n\r\n    matrixAttributes: {\r\n        attack: 'SR5.MatrixAttrAttack',\r\n        sleaze: 'SR5.MatrixAttrSleaze',\r\n        data_processing: 'SR5.MatrixAttrDataProc',\r\n        firewall: 'SR5.MatrixAttrFirewall',\r\n    },\r\n\r\n    initiativeCategories: {\r\n        meatspace: 'SR5.InitCatMeatspace',\r\n        astral: 'SR5.InitCatAstral',\r\n        matrix: 'SR5.InitCatMatrix',\r\n    },\r\n\r\n    // Gear modification types. :) Not modifiers.\r\n    modificationTypes: {\r\n        weapon: 'SR5.Weapon',\r\n        armor: 'SR5.Armor',\r\n    },\r\n\r\n    mountPoints: {\r\n        barrel: 'SR5.Barrel',\r\n        under_barrel: 'SR5.UnderBarrel',\r\n        stock: 'SR5.Stock',\r\n        top: 'SR5.Top',\r\n        side: 'SR5.Side',\r\n        internal: 'SR5.Internal',\r\n    },\r\n\r\n    lifestyleTypes: {\r\n        street: 'SR5.LifestyleStreet',\r\n        squatter: 'SR5.LifestyleSquatter',\r\n        low: 'SR5.LifestyleLow',\r\n        medium: 'SR5.LifestyleMiddle',\r\n        high: 'SR5.LifestyleHigh',\r\n        luxory: 'SR5.LifestyleLuxory',\r\n        other: 'SR5.LifestyleOther',\r\n    },\r\n\r\n    kbmod: {\r\n        ITEM_DESCR: 'ctrlKey',\r\n        EDGE: 'altKey',\r\n        HIDE_DIALOG: 'shiftKey',\r\n    },\r\n\r\n    /**\r\n     * Labels for ALL actor types actor based local modifiers.\r\n     * \r\n     * All modifiers across all actor types must be included here, this is only used for display.\r\n     */\r\n    actorModifiers: {\r\n        soak: 'SR5.RollSoak',\r\n        drain: 'SR5.Drain',\r\n        armor: 'SR5.Armor',\r\n        physical_limit: 'SR5.PhysicalLimit',\r\n        social_limit: 'SR5.SocialLimit',\r\n        mental_limit: 'SR5.MentalLimit',\r\n        astral_limit: 'SR5.AstralLimit',\r\n        stun_track: 'SR5.StunTrack',\r\n        physical_track: 'SR5.PhysicalTrack',\r\n        physical_overflow_track: 'SR5.PhysicalOverflowTrack',\r\n        meat_initiative: 'SR5.MeatSpaceInit',\r\n        meat_initiative_dice: 'SR5.MeatSpaceDice',\r\n        astral_initiative: 'SR5.AstralInit',\r\n        astral_initiative_dice: 'SR5.AstralDice',\r\n        matrix_initiative: 'SR5.MatrixInit',\r\n        matrix_initiative_dice: 'SR5.MatrixDice',\r\n        matrix_track: 'SR5.MatrixTrack',\r\n        composure: 'SR5.RollComposure',\r\n        lift_carry: 'SR5.RollLiftCarry',\r\n        judge_intentions: 'SR5.RollJudgeIntentions',\r\n        memory: 'SR5.RollMemory',\r\n        walk: 'SR5.Walk',\r\n        run: 'SR5.Run',\r\n        defense: 'SR5.RollDefense',\r\n        wound_tolerance: 'SR5.WoundTolerance',\r\n        pain_tolerance_stun: 'SR5.PainToleranceStun',\r\n        pain_tolerance_physical: 'SR5.PainTolerancePhysical',\r\n        essence: 'SR5.AttrEssence',\r\n        fade: 'SR5.RollFade',\r\n        global: 'SR5.Global',\r\n    },\r\n\r\n    /**\r\n     * Modification types used for actions and general success tests, based on actors.\r\n     *\r\n     * These are meant to be used with the Modifiers and SituationModifier classes and SR5Actor.modifiers.totalFor('wounds').\r\n     *\r\n     * There are additional item based modifiers that aren't present here.\r\n     * \r\n     * NOTE: Adding a modifier type here will directly affect modifiers shown on item actions for user selection.\r\n     */\r\n    modifierTypes: {\r\n        armor: 'SR5.Armor',\r\n        composure: 'SR5.RollComposure',\r\n        defense: 'SR5.RollDefense',\r\n        drain: 'SR5.Drain',\r\n        environmental: 'SR5.ModifierTypes.Environmental',\r\n        ['environmental.light']: 'SR5.ModifierTypes.EnvironmentalLight',\r\n        ['environmental.visibility']: 'SR5.ModifierTypes.EnvironmentalVisibility',\r\n        ['environmental.wind']: 'SR5.ModifierTypes.EnvironmentalWind',\r\n        ['environmental.range']: 'SR5.ModifierTypes.EnvironmentalRange',\r\n        background_count: 'SR5.ModifierTypes.Magic',\r\n        noise: 'SR5.ModifierTypes.Matrix',\r\n        fade: 'SR5.RollFade',\r\n        global: 'SR5.Global',\r\n        judge_intentions: 'SR5.RollJudgeIntentions',\r\n        lift_carry: 'SR5.RollLiftCarry',\r\n        memory: 'SR5.RollMemory',\r\n        soak: 'SR5.RollSoak',\r\n        wounds: 'SR5.ModifierTypes.Wounds',\r\n    },\r\n\r\n    /**\r\n     * Define here what kind of active test is to be used for the different weapon categories as a main action test.\r\n     */\r\n    weaponCategoryActiveTests: {\r\n        'range': 'RangedAttackTest',\r\n        'melee': 'MeleeAttackTest',\r\n        'thrown': 'ThrownAttackTest'\r\n    },\r\n\r\n    /**\r\n     * When casting tests from these item types, use these tests as active tests\r\n     */\r\n    activeTests: {\r\n        'spell': 'SpellCastingTest',\r\n        'complex_form': 'ComplexFormTest'\r\n    },\r\n\r\n    /**\r\n     * Using different active test details should result in these opposed tests\r\n     * \r\n     * Structure: {\r\n     *  [item.type]: {[item.system.type]}: 'OpposedTest'\r\n     * }\r\n     */\r\n    opposedTests: {\r\n        'spell': {\r\n            'combat': 'CombatSpellDefenseTest'\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Using different resist tests for the oppositing depending on active tests details\r\n     *  Structure: {\r\n     *  [item.type]: {[item.system.type]}: 'OpposedTest'\r\n     * }\r\n     */\r\n    opposedResistTests: {\r\n        'spell': {\r\n            'combat': 'PhysicalResistTest'\r\n        }\r\n    },\r\n\r\n    /**\r\n     * When a test is cast an active test this defines what tests should follow that tests completion\r\n     */\r\n    followedTests: {\r\n        'SpellCastingTest': 'DrainTest'\r\n    },\r\n\r\n    // When a firemode with suppression is used, this test should defend against it.\r\n    supressionDefenseTest: 'SupressionDefenseTest',\r\n\r\n    /**\r\n     * Names of FoundryVTT packs supplied by the system to be used as action sources.\r\n     */\r\n    packNames: {\r\n        'generalActions': 'General Actions',\r\n        'matrixActions': 'Matrix Actions'\r\n    },\r\n\r\n    programTypes: {\r\n        common_program: 'SR5.CommonProgram',\r\n        hacking_program: 'SR5.HackingProgram',\r\n        agent: 'SR5.Agent',\r\n    },\r\n\r\n    spiritTypes: {\r\n        // base types\r\n        air: 'SR5.Spirit.Types.Air',\r\n        aircraft: 'SR5.Spirit.Types.Aircraft',\r\n        airwave: 'SR5.Spirit.Types.Airwave',\r\n        automotive: 'SR5.Spirit.Types.Automotive',\r\n        beasts: 'SR5.Spirit.Types.Beasts',\r\n        ceramic: 'SR5.Spirit.Types.Ceramic',\r\n        earth: 'SR5.Spirit.Types.Earth',\r\n        energy: 'SR5.Spirit.Types.Energy',\r\n        fire: 'SR5.Spirit.Types.Fire',\r\n        guardian: 'SR5.Spirit.Types.Guardian',\r\n        guidance: 'SR5.Spirit.Types.Guidance',\r\n        man: 'SR5.Spirit.Types.Man',\r\n        metal: 'SR5.Spirit.Types.Metal',\r\n        plant: 'SR5.Spirit.Types.Plant',\r\n        ship: 'SR5.Spirit.Types.Ship',\r\n        task: 'SR5.Spirit.Types.Task',\r\n        train: 'SR5.Spirit.Types.Train',\r\n        water: 'SR5.Spirit.Types.Water',\r\n\r\n        // toxic types\r\n        toxic_air: 'SR5.Spirit.Types.ToxicAir',\r\n        toxic_beasts: 'SR5.Spirit.Types.ToxicBeasts',\r\n        toxic_earth: 'SR5.Spirit.Types.ToxicEarth',\r\n        toxic_fire: 'SR5.Spirit.Types.ToxicFire',\r\n        toxic_man: 'SR5.Spirit.Types.ToxicMan',\r\n        toxic_water: 'SR5.Spirit.Types.ToxicWater',\r\n\r\n        // blood types\r\n        blood: 'SR5.Spirit.Types.Blood',\r\n\r\n        // shadow types\r\n        muse: 'SR5.Spirit.Types.Muse',\r\n        nightmare: 'SR5.Spirit.Types.Nightmare',\r\n        shade: 'SR5.Spirit.Types.Shade',\r\n        succubus: 'SR5.Spirit.Types.Succubus',\r\n        wraith: 'SR5.Spirit.Types.Wraith',\r\n\r\n        // shedim types\r\n        shedim: 'SR5.Spirit.Types.Shedim',\r\n        master_shedim: 'SR5.Spirit.Types.MasterShedim',\r\n\r\n        // insect types\r\n        caretaker: 'SR5.Spirit.Types.Caretaker',\r\n        nymph: 'SR5.Spirit.Types.Nymph',\r\n        scout: 'SR5.Spirit.Types.Scout',\r\n        soldier: 'SR5.Spirit.Types.Soldier',\r\n        worker: 'SR5.Spirit.Types.Worker',\r\n        queen: 'SR5.Spirit.Types.Queen',\r\n    },\r\n\r\n    critterPower: {\r\n        categories: {\r\n          mundane: 'SR5.CritterPower.Categories.Mundane',\r\n          paranormal: 'SR5.CritterPower.Categories.Paranormal',\r\n          free_spirit: 'SR5.CritterPower.Categories.FreeSpirit',\r\n          emergent: 'SR5.CritterPower.Categories.Emergent',\r\n          shapeshifter: 'SR5.CritterPower.Categories.Shapeshifter',\r\n          drake: 'SR5.CritterPower.Categories.Drake',\r\n          echoes: 'SR5.CritterPower.Categories.Echoes',\r\n          weakness: 'SR5.CritterPower.Categories.Weakness',\r\n          paranormal_infected: 'SR5.CritterPower.Categories.ParanormalInfected',\r\n        },\r\n        types: {\r\n            mana: 'SR5.CritterPower.Types.Mana',\r\n            physical: 'SR5.CritterPower.Types.Physical',\r\n        },\r\n        ranges: {\r\n            los: 'SR5.CritterPower.Ranges.LineOfSight',\r\n            self: 'SR5.CritterPower.Ranges.Self',\r\n            touch: 'SR5.CritterPower.Ranges.Touch',\r\n            los_a: 'SR5.CritterPower.Ranges.LineOfSightArea',\r\n            special: 'SR5.CritterPower.Ranges.Special',\r\n        },\r\n        durations: {\r\n            always: 'SR5.CritterPower.Durations.Always',\r\n            instant: 'SR5.CritterPower.Durations.Instant',\r\n            sustained: 'SR5.CritterPower.Durations.Sustained',\r\n            permanent: 'SR5.CritterPower.Durations.Permanent',\r\n            special: 'SR5.CritterPower.Durations.Special',\r\n        },\r\n    },\r\n\r\n    spriteTypes: {\r\n        courier: 'SR5.Sprite.Types.Courier',\r\n        crack: 'SR5.Sprite.Types.Crack',\r\n        data: 'SR5.Sprite.Types.Data',\r\n        fault: 'SR5.Sprite.Types.Fault',\r\n        machine: 'SR5.Sprite.Types.Machine',\r\n    },\r\n\r\n    vehicle: {\r\n        types: {\r\n            air: 'SR5.Vehicle.Types.Air',\r\n            aerospace: 'SR5.Vehicle.Types.Aerospace',\r\n            ground: 'SR5.Vehicle.Types.Ground',\r\n            water: 'SR5.Vehicle.Types.Water',\r\n            walker: 'SR5.Vehicle.Types.Walker',\r\n            exotic: 'SR5.Vehicle.Types.Exotic',\r\n        },\r\n        stats: {\r\n            handling: 'SR5.Vehicle.Stats.Handling',\r\n            off_road_handling: 'SR5.Vehicle.Stats.OffRoadHandling',\r\n            speed: 'SR5.Vehicle.Stats.Speed',\r\n            off_road_speed: 'SR5.Vehicle.Stats.OffRoadSpeed',\r\n            acceleration: 'SR5.Vehicle.Stats.Acceleration',\r\n            pilot: 'SR5.Vehicle.Stats.Pilot',\r\n            sensor: 'SR5.Vehicle.Stats.Sensor',\r\n        },\r\n        control_modes: {\r\n            manual: 'SR5.Vehicle.ControlModes.Manual',\r\n            remote: 'SR5.Vehicle.ControlModes.Remote',\r\n            rigger: 'SR5.Vehicle.ControlModes.Rigger',\r\n            autopilot: 'SR5.Vehicle.ControlModes.Autopilot',\r\n        },\r\n        environments: {\r\n            speed: 'SR5.Vehicle.Environments.Speed',\r\n            handling: 'SR5.Vehicle.Environments.Handling',\r\n        },\r\n    },\r\n\r\n    ic: {\r\n        types: {\r\n            acid: \"SR5.IC.Types.Acid\",\r\n            binder: \"SR5.IC.Types.Binder\",\r\n            black_ic: \"SR5.IC.Types.BlackIC\",\r\n            blaster: \"SR5.IC.Types.Blaster\",\r\n            crash: \"SR5.IC.Types.Crash\",\r\n            jammer: \"SR5.IC.Types.Jammer\",\r\n            killer: \"SR5.IC.Types.Killer\",\r\n            marker: \"SR5.IC.Types.Marker\",\r\n            patrol: \"SR5.IC.Types.Patrol\",\r\n            probe: \"SR5.IC.Types.Probe\",\r\n            scramble: \"SR5.IC.Types.Scramble\",\r\n            sparky: \"SR5.IC.Types.Sparky\",\r\n            tar_baby: \"SR5.IC.Types.TarBaby\",\r\n            track: \"SR5.IC.Types.Track\"\r\n        }\r\n    },\r\n\r\n    character: {\r\n        types: {\r\n            human: 'SR5.Character.Types.Human',\r\n            elf: 'SR5.Character.Types.Elf',\r\n            ork: 'SR5.Character.Types.Ork',\r\n            dwarf: 'SR5.Character.Types.Dwarf',\r\n            troll: 'SR5.Character.Types.Troll',\r\n        },\r\n    },\r\n\r\n    /**\r\n     * The available range weapon modes for to SR5#424\r\n     * \r\n     * These are the mode selectors on the weapon. The term 'fire mode' \r\n     * is only used to describe as the combination of weapon mode and action\r\n     * used, causing a specific fire mode.\r\n     * \r\n     * NOTE: This list is also used for sorting order of ranged weapon mode.\r\n     *       Alter it with care.\r\n     */\r\n    rangeWeaponMode: [\r\n        'single_shot',\r\n        'semi_auto',\r\n        'burst_fire',\r\n        'full_auto'\r\n    ],\r\n\r\n    rangeWeaponModeLabel: {\r\n        'single_shot': 'SR5.WeaponModeSingleShot',\r\n        'semi_auto': 'SR5.WeaponModeSemiAuto',\r\n        'burst_file': 'SR5.WeaponModeBurstFire',\r\n        'full_auto': 'SR5.WeaponModeFullAuto'\r\n    },\r\n\r\n    /**\r\n     * The preconfigured default Shadowrun firemodes according to SR5#180\r\n     * \r\n     * These are separate from ranged weapon modes but depend on the selected \r\n     * ranged weapon mode.\r\n     */\r\n    fireModes: [\r\n    {\r\n        label: \"SR5.WeaponModeSingleShot\",\r\n        value: 1,\r\n        recoil: false,\r\n        defense: 0,\r\n        suppression: false,\r\n        action: 'simple',\r\n        mode: 'single_shot'\r\n    },\r\n    {\r\n        label: \"SR5.WeaponModeSemiAutoShort\",\r\n        value: 1,\r\n        recoil: true,\r\n        defense: 0,\r\n        suppression: false,\r\n        action: 'simple',\r\n        mode: 'semi_auto'\r\n    },\r\n    {\r\n        label: \"SR5.WeaponModeSemiAutoBurst\",\r\n        value: 3,\r\n        recoil: true,\r\n        defense: -2,\r\n        suppression: false,\r\n        action: 'complex',\r\n        mode: 'semi_auto'\r\n    },\r\n    \r\n    {\r\n        label: \"SR5.WeaponModeBurstFire\",\r\n        value: 3,\r\n        recoil: true,\r\n        defense: -2,\r\n        suppression: false,\r\n        action: 'simple',\r\n        mode: 'burst_fire'\r\n    },\r\n    {\r\n        label: \"SR5.WeaponModeBurstFireLong\",\r\n        value: 6,\r\n        recoil: true,\r\n        defense: -5,\r\n        suppression: false,\r\n        action: 'complex',\r\n        mode: 'burst_fire',\r\n    },\r\n    {\r\n        label: \"SR5.WeaponModeFullAutoShort\",\r\n        value: 6,\r\n        recoil: true,\r\n        defense: -5,\r\n        suppression: false,\r\n        action: 'simple',\r\n        mode: 'full_auto'\r\n    },\r\n    {\r\n        label: 'SR5.WeaponModeFullAutoLong',\r\n        value: 10,\r\n        recoil: true,\r\n        defense: -9,\r\n        suppression: false,\r\n        action: 'complex',\r\n        mode: 'full_auto'\r\n    },\r\n    {\r\n        label: 'SR5.Suppressing',\r\n        value: 20,\r\n        recoil: false,\r\n        defense: 0,\r\n        suppression: true,\r\n        action: 'complex',\r\n        mode: 'full_auto'\r\n    }\r\n    ] as Shadowrun.FireModeData[]\r\n};\r\n", "/**\r\n * Handle all things related to the action template (template.json)\r\n */\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport {Helpers} from \"../../helpers\";\r\nimport FormulaOperator = Shadowrun.FormulaOperator;\r\nimport {SR5Item} from \"../SR5Item\";\r\nimport DamageSource = Shadowrun.DamageSource;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport ValueField = Shadowrun.ValueField;\r\nimport {PartsList} from \"../../parts/PartsList\";\r\n\r\nexport class ActionFlow {\r\n    /**\r\n     * Calculate action damage configuration based on flat damage field and possible dynamic attribute modification.\r\n     *\r\n     * @param damage The damage field as defined within the ActionData\r\n     * @param actor The actor to use should a dynamic calculation be needed.\r\n     * @param item\r\n     */\r\n    static calcDamage(damage: DamageData, actor?: SR5Actor, item?: SR5Item): DamageData {\r\n        // Avoid manipulation on original data, which might come from database values.\r\n        damage = duplicate(damage);\r\n\r\n        if (!actor) return damage;\r\n\r\n        if (item) {\r\n            damage.source = ActionFlow._damageSource(actor, item);\r\n        }\r\n\r\n        const attribute = actor.findAttribute(damage.attribute);\r\n        if (!attribute) return damage;\r\n\r\n        if (!damage.base_formula_operator) {\r\n            console.error(`Unsupported base damage formula operator: '${damage.base_formula_operator}' used. Falling back to 'add'.`);\r\n            damage.base_formula_operator = 'add';\r\n        }\r\n\r\n        // Avoid altering base OR value fields and raising the resulting damage on multiple function calls.\r\n        switch (damage.base_formula_operator) {\r\n            case \"add\":\r\n                PartsList.AddUniquePart(damage.mod, attribute.label, attribute.value);\r\n                break;\r\n            case \"subtract\":\r\n                PartsList.AddUniquePart(damage.mod, attribute.label, -attribute.value);\r\n                break;\r\n            case \"multiply\":\r\n                PartsList.AddUniquePart(damage.mod, 'SR5.Value', (damage.base * attribute.value) - damage.base);\r\n                break;\r\n            case \"divide\":\r\n                // Remove base from value by modifying.\r\n                PartsList.AddUniquePart(damage.mod, 'SR5.BaseValue', damage.base * -1);\r\n                // Add division result as modifier on zero.\r\n                const denominator = attribute.value === 0 ? 1 : attribute.value;\r\n                PartsList.AddUniquePart(damage.mod, 'SR5.Value', Math.floor(damage.base / denominator));\r\n                break;\r\n        }\r\n\r\n        damage.value = Helpers.calcTotal(damage, {min: 0});\r\n\r\n        return damage;\r\n    }\r\n\r\n    /**\r\n     * Damage that's caused by an item can later be used to determine how that damage should be applied\r\n     *\r\n     * @param actor The actor used to determine damage\r\n     * @param item The item from which damage's been determined from.\r\n     */\r\n    static _damageSource(actor: SR5Actor, item: SR5Item): DamageSource {\r\n        return {\r\n            actorId: actor.id || '',\r\n            itemId: item.id || '',\r\n            itemName: item.name || '',\r\n            itemType: item.type\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Does an action based damage contain any damaging content.\r\n     * \r\n     * @param damage Any DamageData taken from an template action section\r\n     * \r\n     * @returns true, when the user configured damage contains any parts.\r\n     */\r\n    static hasDamage(damage: DamageData): boolean {\r\n        if (damage.base !== 0) return true;\r\n        if (damage.attribute) return true;\r\n        if (damage.type) return true;\r\n        if (damage.element) return true;\r\n\r\n        return false;\r\n    }\r\n}", "import { ModifierFlowOptions } from './../actor/flows/ModifierFlow';\r\n/**\r\n * All things around helping with Test creation.\r\n *\r\n */\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {\r\n    SuccessTest,\r\n    SuccessTestMessageData,\r\n    TestData,\r\n    TestDocuments,\r\n    TestOptions\r\n} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {SkillRules} from \"../rules/SkillRules\";\r\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\r\nimport {SR5Roll} from \"../rolls/SR5Roll\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {OpposedTest, OpposedTestData} from \"./OpposedTest\";\r\nimport {SR5} from \"../config\";\r\nimport {SkillFlow} from \"../actor/flows/SkillFlow\";\r\nimport {ActionFlow} from \"../item/flows/ActionFlow\";\r\n\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport RollEvent = Shadowrun.RollEvent;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\n/**\r\n * Function collection to help create any kind of test implementation for different test cases (active, followup, opposed)\r\n *\r\n * see from* functions for different\r\n */\r\nexport const TestCreator = {\r\n    /**\r\n     * A helper method to create a SuccessTest from a simple pool value, without\r\n     * actor / item involvement.\r\n     *\r\n     * TODO: fromPool as a name for 'from values' doesn't quite describe the method anymore, since a pool doesn't need to be given.\r\n     * @param values\r\n     * @param actor\r\n     * @param options\r\n     */\r\n    fromPool: function(values: { pool: number, limit?: number, threshold?: number }={pool: 0, limit: 0, threshold: 0}, options?: TestOptions): SuccessTest {\r\n        const data = TestCreator._minimalTestData();\r\n        data.pool.base = values.pool;\r\n        data.threshold.base = values.threshold || 0;\r\n        data.limit.base = values.limit || 0;\r\n\r\n        // Use the registered SuccessTest implementation.\r\n        const successTestCls = TestCreator._getTestClass('SuccessTest');\r\n        return new successTestCls(data, undefined, options);\r\n    },\r\n\r\n    /**\r\n     * Create a Test from action item configuration.\r\n     *\r\n     * @param item Any item type that defines an action.\r\n     * @param actor The actor to use for the resulting SR5Roll,\r\n     *              will default to the items parent otherwise.\r\n     * @param options See SuccessTestOptions documentation.\r\n     *\r\n     * @returns Tries to create a SuccessTest from given action item or undefined if it failed.\r\n     */\r\n    fromItem: async function(item: SR5Item, actor?: SR5Actor, options?: TestOptions): Promise<any | undefined> {\r\n        //@ts-ignore Default to item parent actor, if none given.\r\n        if (!actor) actor = item.parent;\r\n        if (!(actor instanceof SR5Actor)) {\r\n            console.error(\"Shadowrun 5e | A SuccessTest can only be created with an explicit Actor or Item with an actor parent.\")\r\n            return;\r\n        }\r\n\r\n        const action = item.getAction();\r\n        if (!action) return;\r\n        // Determine what initial test type to use.\r\n        if (!action.test) {\r\n            action.test = 'SuccessTest';\r\n            console.warn(`Shadowrun 5e | An action without a defined test handler defaulted to ${'SuccessTest'}`);\r\n        }\r\n\r\n        // @ts-ignore // Check for test class registration.\r\n        if (!game.shadowrun5e.tests.hasOwnProperty(action.test)) {\r\n            console.error(`Shadowrun 5e | Test registration for test ${action.test} is missing`);\r\n            return;\r\n        }\r\n\r\n        // Any action item will return a list of values to create the test pool from.\r\n        // @ts-ignore // Get test class from registry to allow custom module tests.\r\n        const cls = TestCreator._getTestClass(action.test);\r\n        const data = await TestCreator._getTestDataFromItemAction(cls, item, actor);\r\n        const documents = {item, actor};\r\n        return new cls(data, documents, options);\r\n    },\r\n\r\n    /**\r\n     * Create a test from action data only.\r\n     *\r\n     * @param action\r\n     * @param actor\r\n     * @param options\r\n     */\r\n    fromAction: async function(action: ActionRollData, actor: SR5Actor, options?: TestOptions): Promise<SuccessTest | undefined> {\r\n        if (!action.test) {\r\n            action.test = 'SuccessTest';\r\n            console.warn(`Shadowrun 5e | An action without a defined test handler defaulted to ${'SuccessTest'}`);\r\n        }\r\n\r\n        // @ts-ignore // Check for test class registration.\r\n        if (!game.shadowrun5e.tests.hasOwnProperty(action.test)) {\r\n            console.error(`Shadowrun 5e | Test registration for test ${action.test} is missing`);\r\n            return;\r\n        }\r\n\r\n        // Any action item will return a list of values to create the test pool from.\r\n        // @ts-ignore // Get test class from registry to allow custom module tests.\r\n        const cls = TestCreator._getTestClass(action.test);\r\n        const data = await TestCreator._prepareTestDataWithAction(action, actor, TestCreator._minimalTestData());\r\n        const documents = {actor};\r\n\r\n        return new cls(data, documents, options);\r\n    },\r\n\r\n    /**\r\n     * Create a test using an Action item stored in any collection\r\n     * @param packName The package / compendium name to search for the action\r\n     * @param actionName The items name within the given packName\r\n     * @param actor The actor used to roll the test with\r\n     * @param options General TestOptions\r\n     */\r\n    fromPackAction: async function(packName: string, actionName: string, actor: SR5Actor, options?: TestOptions): Promise<SuccessTest|undefined> {\r\n        const item = await Helpers.getPackAction(packName, actionName);\r\n        if (!item) {\r\n            console.error(`Shadowrun5 | The pack ${packName} doesn't include an item ${actionName}`);\r\n            return;\r\n        }\r\n\r\n        return TestCreator.fromItem(item, actor, options);\r\n    },\r\n\r\n    /**\r\n     * Create a test implementation from a past test included within a message\r\n     * @param id\r\n     */\r\n    fromMessage: async function(id: string): Promise<SuccessTest | undefined> {\r\n        const message = game.messages?.get(id);\r\n        if (!message) {\r\n            console.error(`Shadowrun 5e | Couldn't find a message for id ${id} to create a message action`);\r\n            return;\r\n        }\r\n\r\n        // Check if message contains any test data.\r\n        const flagData = message.getFlag(SYSTEM_NAME, FLAGS.Test);\r\n        if (!flagData) return;\r\n\r\n        // Use test data to create the original test from it.\r\n        const testData = foundry.utils.duplicate(flagData) as SuccessTestMessageData;\r\n        if (!testData) {\r\n            console.error(`Shadowrun 5e | Message with id ${id} doesn't have test data in it's flags.`);\r\n            return;\r\n        }\r\n\r\n        const rolls = testData.rolls.map(roll => SR5Roll.fromData(roll as any));\r\n        const documents = {rolls};\r\n        return TestCreator.fromTestData(testData.data, documents, testData.data.options);\r\n    },\r\n\r\n    /**\r\n     * Create a test implementation for a specific action on a message.\r\n     *\r\n     * This can be an opposed test, resist or followup test.\r\n     *\r\n     * @param id The id of the to be used message.\r\n     * @param testClsName The test class name to be used with the message test data.\r\n     * @param options\r\n     */\r\n    fromMessageAction: async function(id: string, testClsName: string, options?: TestOptions): Promise<SuccessTest | undefined> {\r\n        if (!game.user) return;\r\n        \r\n        const message = game.messages?.get(id);\r\n        if (!message) {\r\n            console.error(`Shadowrun 5e | Couldn't find a message for id ${id} to create a message action`);\r\n            return;\r\n        }\r\n\r\n        // Avoid altering test in flag.\r\n        const testData = foundry.utils.duplicate(message.getFlag(SYSTEM_NAME, FLAGS.Test)) as SuccessTestMessageData;\r\n        if (!testData || !testData.data || !testData.rolls) {\r\n            console.error(`Shadowrun 5e | Message with id ${id} doesn't have valid test data in it's flags.`);\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore // TODO: Add typing by declaration merging\r\n        const testClass = TestCreator._getTestClass(testClsName);\r\n        if (!testClass) {\r\n            console.error(`Shadowrun 5e | Couldn't find a registered test implementation for ${testClsName}`);\r\n            return;\r\n        }\r\n\r\n        // Determine actors to roll test with.\r\n        // First - use selection or targets.\r\n        let actors = Helpers.userHasControlledTokens() ? \r\n            Helpers.getControlledTokenActors() :\r\n            await Helpers.getTestTargetActors(testData.data);\r\n\r\n        // Second - filter out actors current user shouldn't be able to test with.\r\n        actors = actors.filter(actor => actor.isOwner);\r\n        // Last - Fallback to player character.\r\n        if (actors.length === 0 && game.user.character) actors.push(game.user.character);\r\n\r\n        if (actors.length === 0)\r\n            ui.notifications?.warn(game.i18n.localize('SR5.Warnings.TokenSelectionNeeded'));\r\n        else \r\n            console.log('Shadowrun 5e | Casting an opposed test using these actors', actors, testData);\r\n\r\n        for (const actor of actors) {\r\n            const data = await testClass._getOpposedActionTestData(testData.data, actor, id);\r\n            if (!data) return;\r\n\r\n            const documents = {actor};\r\n            const test = new testClass(data, documents, options);\r\n\r\n            // Await test chain resolution for each actor, to avoid dialog spam.\r\n            await test.execute();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Helper method to create a SuccessTest from given data.\r\n     *\r\n     * TODO: Rework this method to restore test based on test type.\r\n     *\r\n     * @param data The TestData of some test implementation\r\n     * @param documents Documents to create test with. These don't have to match the ones originally used.\r\n     * @param options Optional test options.\r\n     */\r\n    fromTestData: function(data: TestData, documents?: TestDocuments, options?: TestOptions): SuccessTest {\r\n        const type = data.type || 'SuccessTest';\r\n        // @ts-ignore\r\n        const cls = TestCreator._getTestClass(type);\r\n        // Before used documents would be fetched during evaluation.\r\n        return new cls(data, documents, options);\r\n    },\r\n\r\n    /**\r\n     * Use any kind of opposed test to create a resist test based on that\r\n     *\r\n     * @param opposed\r\n     * @param options\r\n     */\r\n    fromOpposedTestResistTest: async function(opposed: OpposedTest, options?: TestOptions): Promise<SuccessTest | void> {\r\n        // Don't change the data's source.\r\n        const opposedData = foundry.utils.duplicate(opposed.data);\r\n\r\n        if (!opposedData?.against?.opposed?.resist?.test) return console.error(`Shadowrun 5e | Given test doesn't define an opposed resist test`, opposed);\r\n        if (!opposed.actor) return console.error(`Shadowrun 5e | A ${opposed.title} can't operate without a populated actor given`);\r\n\r\n        const resistTestCls = TestCreator._getTestClass(opposedData.against.opposed.resist.test);\r\n\r\n        // Prepare the resist test.\r\n        const data = await TestCreator._getOpposedResistTestData(resistTestCls, opposedData, opposed.actor, opposed.data.messageUuid);\r\n        const documents = {actor: opposed.actor};\r\n\r\n        // Initialize a new test of the current testing class.\r\n        return new resistTestCls(data, documents, options);\r\n    },\r\n\r\n    /**\r\n     * Create a followup test using a test.\r\n     * This can be used for drain tests on spellcasting tests or for resist tests on defense tests\r\n     *\r\n     * @param test Any SuccessTest implementation with a followup.\r\n     * @param options Optional test options.\r\n     */\r\n    fromFollowupTest: async function(test: SuccessTest, options?: TestOptions): Promise<SuccessTest  | void> {\r\n        if (!test?.data?.action?.followed?.test) return;\r\n        if (!test.item) return console.error(`Shadowrun 5e | Test doesn't have a populated item document`);\r\n        if (!test.actor) return console.error(`Shadowrun 5e | Test doesn't have a populated actor document`);\r\n\r\n        // @ts-ignore // TODO: Type merging\r\n        const testCls = TestCreator._getTestClass( test.data.action.followed.test);\r\n        if (!testCls) return console.error(`Shadowrun 5e | A ${test.constructor.name} has a unregistered follow up test configured`, this);\r\n\r\n        const data = TestCreator._minimalTestData();\r\n        data.title = testCls.title;\r\n        data.previousMessageId = test.data.messageUuid;\r\n        data.against = test.data;\r\n\r\n        const action = TestCreator._mergeMinimalActionDataInOrder(\r\n            DefaultValues.actionData({test: testCls.name}),\r\n            await testCls._getDocumentTestAction(test.item, test.actor),\r\n            testCls._getDefaultTestAction());\r\n\r\n        const testData = await testCls._prepareActionTestData(action, test.actor, data);\r\n        testData.following = test.data;\r\n\r\n        // Create the followup test based on tests documents and options.\r\n        const documents = {item: test.item, actor: test.actor};\r\n        return new testCls(testData, documents, options);\r\n    },\r\n\r\n    /*\r\n     * Prompt the user for a default SuccessTest\r\n     */\r\n    promptSuccessTest: async function() {\r\n        // Get the last used pool size for simple SuccessTestDialogs\r\n        const lastPoolValue = Number(game.user?.getFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue)) || 0;\r\n\r\n        const test = TestCreator.fromPool({pool: lastPoolValue});\r\n        await test.execute();\r\n\r\n        if (test.evaluated) {\r\n            // Store the last used pool size for the next simple SuccessTest\r\n            await game.user?.setFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue, test.pool.value);\r\n        }\r\n    },\r\n\r\n    /** Internal helpers */\r\n\r\n    /**\r\n     * Return a test class from the global registry.\r\n     *\r\n     * @param testName A Test class constructor name registered as a test.\r\n     */\r\n    _getTestClass: function(testName: string): any | undefined {\r\n        //@ts-ignore\r\n        if (!game.shadowrun5e.tests.hasOwnProperty(testName)) { //@ts-ignore\r\n            console.error(`Shadowrun 5e | Tried getting a Test Class ${testName}, which isn't registered in: `, game.shadowrun5e.tests);\r\n            return;\r\n        } //@ts-ignore\r\n        return game.shadowrun5e.tests[testName];\r\n    },\r\n\r\n    /**\r\n     * Return test data based on an items action.\r\n     *\r\n     * @param testCls\r\n     * @param item\r\n     * @param actor\r\n     */\r\n    _getTestDataFromItemAction: async function(testCls, item: SR5Item, actor: SR5Actor): Promise<TestData> {\r\n        // Prepare general data structure with labeling.\r\n        const data = TestCreator._minimalTestData();\r\n\r\n        // Get user defined action configuration.\r\n        let action = item.getAction();\r\n        if (!action || !actor) return data;\r\n\r\n        action = TestCreator._mergeMinimalActionDataInOrder(\r\n            action,\r\n            await testCls._getDocumentTestAction(item, actor),\r\n            testCls._getDefaultTestAction());\r\n\r\n        return await TestCreator._prepareTestDataWithAction(action, actor, data);\r\n    },\r\n\r\n    /**\r\n     * Prepare values as configured in an actions roll data using the given actor for dynamic parts and\r\n     * modifying the given data to create a valid SuccessTestData.\r\n     *\r\n     * @param action An action configuration.\r\n     * @param actor Any type of actor.\r\n     * @param data A SuccessTestData or any subclass implementing\r\n     */\r\n    _prepareTestDataWithAction: async function(action: ActionRollData, actor: SR5Actor, data) {\r\n        // Action values might be needed later to redo the same test.\r\n        data.action = action;\r\n\r\n        const pool = new PartsList<number>(data.pool.mod);\r\n\r\n        // Prepare pool values.\r\n        if (action.skill) {\r\n            // Grab the skill by its id (default skills), or its label (custom skills).\r\n            const skill = actor.getSkill(action.skill) ?? actor.getSkill(action.skill, {byLabel: true});\r\n\r\n            // Notify user about their sins.\r\n            if (skill && !SkillFlow.allowRoll(skill)) ui.notifications?.warn('SR5.Warnings.SkillCantBeDefault', {localize: true});\r\n\r\n            // Custom skills don't have a label, but a name.\r\n            // Legacy skill don't have a name, but have a label.\r\n            // Your mind is like this water, my friend. When it is agitated, it becomes difficult to see. But if you allow it to settle, the answer becomes clear.\r\n            if (skill) pool.addUniquePart(skill.label || skill.name, SkillRules.level(skill));\r\n            // TODO: Check if this is actual skill specialization and for a +2 config for it instead of MagicValue.\r\n            if (action.spec) pool.addUniquePart('SR5.Specialization', SkillRules.SpecializationModifier);\r\n        }\r\n        // The first attribute is either used for skill or attribute only tests.\r\n        if (action.attribute) {\r\n            const attribute = actor.getAttribute(action.attribute);\r\n            // Don't use addUniquePart as one attribute might be used twice.\r\n            if (attribute) pool.addPart(attribute.label, attribute.value);\r\n            // Apply matrix modifiers, when applicable\r\n            if (attribute && actor._isMatrixAttribute(action.attribute)) actor._addMatrixParts(pool, true);\r\n        }\r\n        // The second attribute is only used for attribute only tests.\r\n        if (!action.skill && action.attribute2) {\r\n            const attribute = actor.getAttribute(action.attribute2);\r\n            // Don't use addUniquePart as one attribute might be used twice.\r\n            if (attribute) pool.addPart(attribute.label, attribute.value);\r\n            // Apply matrix modifiers, when applicable\r\n            if (attribute && actor._isMatrixAttribute(action.attribute2)) actor._addMatrixParts(pool, true);\r\n        }\r\n        \r\n        // A general pool modifier will be used as a base value.\r\n        // NOTE: This might not be transparent to users, instead a normal .mod entry might better?\r\n        //       That might clash with general pool modifier compilation though.\r\n        if (action.mod) {\r\n            data.pool.base = Number(action.mod);\r\n        }\r\n        \r\n        // Include pool modifiers that have been collected on the action item.\r\n        // Thes can come from nested items and more.\r\n        if(action.dice_pool_mod) {\r\n            action.dice_pool_mod.forEach(mod => PartsList.AddUniquePart(data.modifiers.mod, mod.name, mod.value));\r\n        }\r\n        \r\n        // Add the armor value as a pool modifier, since 'armor' is part of the test description.\r\n        if (action.armor) {\r\n            const armor = actor.getArmor();\r\n            data.pool.mod = PartsList.AddUniquePart(data.pool.mod,'SR5.Armor', armor.value);\r\n        }\r\n\r\n        // Prepare limit values...\r\n        if (action.limit.base) {\r\n            // TODO: For easier readability this could be mapped to an item specific limit value\r\n            //       For WeaponItem this would result in 'Precision' to be shown instead of a numerical literal.\r\n            data.limit.base = Number(action.limit.base);\r\n        }\r\n        //...add limit modifiers\r\n        if (action.limit.mod) {\r\n            action.limit.mod.forEach(mod => PartsList.AddUniquePart(data.limit.mod, mod.name, mod.value));\r\n        }\r\n        //...add limit attribute value based on actor.\r\n        if (action.limit.attribute) {\r\n            // Get the limit connected to the defined attribute.\r\n            // NOTE: This might differ from the USED attribute...\r\n            const limit = actor.getLimit(action.limit.attribute);\r\n            if (limit) data.limit.mod = PartsList.AddUniquePart(data.limit.mod, limit.label, limit.value);\r\n            if (limit && actor._isMatrixAttribute(action.limit.attribute)) actor._addMatrixParts(pool, true);\r\n        }\r\n\r\n        // Prepare threshold values...\r\n        if (action.threshold.base) {\r\n            data.threshold.base = Number(action.threshold.base);\r\n        }\r\n\r\n        // Prepare general damage values...\r\n        // ...a test without damage, shouldn't contain any damage information.\r\n        if (ActionFlow.hasDamage(action.damage)) {\r\n            data.damage = foundry.utils.duplicate(action.damage);\r\n        }\r\n\r\n        // Prepare opposed and resist tests...\r\n        if (action.opposed.test) {\r\n            data.opposed = action.opposed;\r\n        }\r\n\r\n        \r\n        // Prepare action modifiers and possible applicable selections\r\n        const modifiers: {[key in ModifierTypes]?: string[]} = {};\r\n        for (const modifier of data.action.modifiers) {\r\n            // A modifier with an applicable selection is found.\r\n            if (modifier.includes('.')) {\r\n                // Assert correct action modifier segment structure.\r\n                const segments = modifier.split('.') as string[];\r\n                if (segments.length > 2) console.error('Shadowrun 5e | Action contained a partial modifier with more than two segments', modifier, data.action);\r\n\r\n                // Record the modifier catgeory with it's single applicable.\r\n                const [category, applicable] = segments;\r\n                modifiers[category] = modifiers[category] ?? [];\r\n                modifiers[category].push(applicable);\r\n\r\n            // No applicable found yet, just collect the modifier\r\n            } else {\r\n                modifiers[modifier] = modifiers[modifier] ?? [];\r\n            }\r\n        }\r\n\r\n        // Apply applicable selections and collect modifiers.\r\n        for (const [modifier, applicable] of Object.entries(modifiers)) {\r\n            // Setup the resulting modifier value.\r\n            const label = SR5.modifierTypes[modifier];\r\n            const value = await actor.modifiers.totalFor(modifier, {applicable});\r\n            data.modifiers.mod = PartsList.AddUniquePart(data.modifiers.mod, label, value);\r\n        }\r\n        \r\n\r\n        // Mark test as extended.\r\n        data.extended = action.extended;\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * An opposed resist test is related to the result of an opposed test.\r\n     *\r\n     * This can be a physical damage resist test and will be derived from configuration\r\n     * of the original test that's being opposed.\r\n     *\r\n     * @param resistTestCls\r\n     * @param opposedData The opposing test, including the original test being opposed.\r\n     * @param actor The actor doing the testing.\r\n     * @param previousMessageId The Message id of the originating opposing test.\r\n     */\r\n    _getOpposedResistTestData: async function(resistTestCls, opposedData: OpposedTestData, actor: SR5Actor, previousMessageId?: string) {\r\n        if (!opposedData.against.opposed.resist.test) {\r\n            console.error(`Shadowrun 5e | Supplied test action doesn't contain an resist test in it's opposed test configuration`, opposedData, this);\r\n            return;\r\n        }\r\n        if (!actor) {\r\n            console.error(`Shadowrun 5e | Can't resolve opposed test values due to missing actor`, resistTestCls);\r\n        }\r\n\r\n        // Prepare general data structure with labeling.\r\n        const data = TestCreator._minimalTestData();\r\n        data.previousMessageId = previousMessageId;\r\n        data.following = opposedData;\r\n        // Make sure to give NO target actors. Otherwise, user selection will be used.\r\n        data.targetActorsUuid = [];\r\n\r\n        // Setup the original item actions minimal action resist configuration as a complete item action.\r\n        let action = DefaultValues.actionData({\r\n            ...opposedData.against.opposed.resist\r\n        });\r\n        // Provide default action information.\r\n        action = TestCreator._mergeMinimalActionDataInOrder(\r\n            action,\r\n            resistTestCls._getDocumentTestAction(),\r\n            resistTestCls._getDefaultTestAction()\r\n        );\r\n\r\n        // Alter default action information with user defined information.\r\n        return await TestCreator._prepareTestDataWithAction(action, actor, data);\r\n    },\r\n\r\n    /**\r\n     * Return the minimal viable test data without test specific customization.\r\n     */\r\n    _minimalTestData: function(): any {\r\n        return {\r\n            pool: DefaultValues.valueData({label: 'SR5.DicePool'}),\r\n            limit: DefaultValues.valueData({label: 'SR5.Limit'}),\r\n            threshold: DefaultValues.valueData({label: 'SR5.Threshold'}),\r\n            damage: DefaultValues.damageData(),\r\n            modifiers: DefaultValues.valueData({label: 'SR5.Labels.Action.Modifiers'}),\r\n            values: {},\r\n            action: DefaultValues.actionData(),\r\n            opposed: {}\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Merge multiple MinimalActionData objects into one action object. This will only look at keys within a minimal action,\r\n     * not all action keys.\r\n     *\r\n     * A value of a minimal action will only overwrite the main action value if that is not set.\r\n     * \r\n     * For example:\r\n     * A: action.skill == '' will be overwritten by minimalAction.skill == 'Spellcasting'\r\n     * B: action.skill == 'ritual_spellcasting' won't be overwritten by minimalAction.skill == 'Spellcasting'\r\n     * C: action.armor == true will be overwritten by minimalAction.armor == false\r\n     *\r\n     * @param sourceAction Main action, as defined by user input.\r\n     * @param defaultActions List of partial actions, as defined by test implementions.\r\n     * @returns A copy of the main action with all minimalActions properties applied in order of arguments.\r\n     */\r\n    _mergeMinimalActionDataInOrder: function(sourceAction, ...defaultActions: Partial<MinimalActionData>[]): ActionRollData {\r\n        // This action might be taken from ItemData, causing changes to be reflected upstream.\r\n        const resultAction = foundry.utils.duplicate(sourceAction);\r\n\r\n        // Check if overwriting default \r\n        for (const defaultAction of defaultActions) {\r\n            if (Object.keys(defaultAction).length === 0) continue;\r\n\r\n            // Iterate over complete MinimalActionData to avoid tests providing other ActionRollData fields they're not\r\n            // supposed to override.\r\n            for (const key of Object.keys(DefaultValues.minimalActionData())) {\r\n                if (TestCreator._keepItemActionValue(sourceAction, defaultAction, key)) continue;\r\n\r\n                resultAction[key] = defaultAction[key];\r\n            }\r\n        }\r\n\r\n        return resultAction;\r\n    },\r\n\r\n    /**\r\n     * Should an action value be kept even if a default action defines another value?\r\n     * \r\n     * This comparison checks either a simple value against defaults OR checks values grouped as a \r\n     * logical unit (skill+attribute/2)\r\n     * \r\n     * @param action The original action data.\r\n     * @param defaultAction A partial action that may provide values to apply to the main action.\r\n     * @param key The action key to take the value from\r\n     * @returns true for when the orgiginal action value should be kept, false if it's to be overwritten.\r\n     */\r\n    _keepItemActionValue(action: ActionRollData, defaultAction: Partial<MinimalActionData>, key: string): boolean {\r\n        if (!defaultAction.hasOwnProperty(key)) return true;\r\n\r\n        // Avoid user confusion. A user might change one value of a logical value grouping (skill+attribute)\r\n        // and get a default value for the other. \r\n        // Instead check some values as a section and only use default values when not one value of that\r\n        // section has been changed by user input.\r\n        const skillSection = ['skill', 'attribute', 'attribute2', 'armor'];\r\n        if (skillSection.includes(key)) {\r\n            const noneDefault = skillSection.some(sectionKey => TestCreator._actionHasNoneDefaultValue(action, sectionKey));\r\n            return noneDefault;\r\n        }\r\n    \r\n        // Fallback to basic value checking.\r\n        return TestCreator._actionHasNoneDefaultValue(action, key);\r\n    },\r\n\r\n    /**\r\n     * Determine if the field value behind the action property 'key' is of a none-default value.\r\n     * \r\n     * This can be used to determine if a user / automated change has been made.\r\n     * \r\n     * @param action Any action configuration.\r\n     * @param key A key of action configuration within action parameter\r\n     * @returns false, when the value behind key is a default value. true, when it's a custom value.\r\n     */\r\n    _actionHasNoneDefaultValue(action: ActionRollData, key: string): boolean {\r\n        if (!action.hasOwnProperty(key)) return false;\r\n\r\n        // NOTE: A more complete comparison would take a default ActionRollData object and compare the sub-key against it.\r\n        const value = action[key];\r\n        const type = foundry.utils.getType(value);\r\n\r\n        // A value name should only be overwritten when no value has been user selected.\r\n        // This would affect .skill and .attribute like fields.\r\n        if (type === 'string') return value.length > 0;\r\n        // A list of value names should only be overwritten when not one has been user selected.\r\n        // This would affect .modifiers like fields.\r\n        if (type === 'Array') return value.length > 0;\r\n        // Booleans don't have a intrinsic default value on ActionRollData.\r\n        if (type === 'boolean' && key === 'armor') return action[key] === true; // default is false\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * A helper to define the modifier key for all sheet test interactions to cause a test to not show its dialog.\r\n     * @param event A PointerEvent by user interaction\r\n     */\r\n    shouldHideDialog(event: RollEvent|undefined): boolean {\r\n        if (!event) return false;\r\n        return event[SR5.kbmod.HIDE_DIALOG] === true;\r\n    },\r\n\r\n    /**\r\n     * A helper to define the modifier key for all sheet test interactions to cause a test to show its dialog.\r\n     * @param event A PointerEvent by user interaction\r\n     */\r\n    shouldShowDialog(event: RollEvent|undefined): boolean {\r\n        return !TestCreator.shouldHideDialog(event);\r\n    },\r\n\r\n    /**\r\n     * A helper to define the modifier key for all sheet test interactions to cause a test to not show its dialog.\r\n     * @param event A PointerEvent by user interaction\r\n     */\r\n    shouldPostItemDescription(event: RollEvent|undefined): boolean {\r\n        if (!event) return false;\r\n        return event[SR5.kbmod.ITEM_DESCR] === true;\r\n    }\r\n};", "import { Helpers } from '../helpers';\r\nimport DeviceData = Shadowrun.DeviceData;\r\nimport { SR5Item } from './SR5Item';\r\nimport AmmoData = Shadowrun.AmmoData;\r\nimport {SR5} from \"../config\";\r\n\r\n/**\r\n * ChatData returns little info boxes for each item type.\r\n * \r\n * These info boxes will be shown in a few places, most notibly the chat message but also\r\n * - actor sheets\r\n */\r\nexport const ChatData = {\r\n    action: (system, labels, props) => {\r\n        if (system.action) {\r\n            const labelStringList: string[] = [];\r\n            if (system.action.skill) {\r\n                labelStringList.push(Helpers.label(system.action.skill));\r\n                labelStringList.push(Helpers.label(system.action.attribute));\r\n            } else if (system.action.attribute2) {\r\n                labelStringList.push(Helpers.label(system.action.attribute));\r\n                labelStringList.push(Helpers.label(system.action.attribute2));\r\n            } else if (system.action.attribute) {\r\n                labelStringList.push(Helpers.label(system.action.attribute));\r\n            }\r\n            if (system.action.mod) {\r\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${system.action.mod})`);\r\n            }\r\n            if (labelStringList.length) {\r\n                labels.roll = labelStringList.join(' + ');\r\n            }\r\n\r\n            if (system.action.opposed.type) {\r\n                const { opposed } = system.action;\r\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\r\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\r\n            }\r\n\r\n            // setup action props\r\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\r\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\r\n            if (system.action.type !== '' && system.action.type !== 'varies' && system.action.type !== 'none') {\r\n                props.push(`${Helpers.label(system.action.type)} Action`);\r\n            }\r\n            if (system.action.limit) {\r\n                const { limit } = system.action;\r\n                const attribute = limit.attribute ? `${game.i18n.localize(SR5.limits[limit.attribute])}` : '';\r\n                const limitVal = limit.value ? limit.value : '';\r\n                let limitStr = '';\r\n                if (attribute) {\r\n                    limitStr += attribute;\r\n                }\r\n                if (limitVal) {\r\n                    if (attribute) {\r\n                        limitStr += ' + ';\r\n                    }\r\n                    limitStr += limitVal;\r\n                }\r\n\r\n                if (limitStr) {\r\n                    props.push(`Limit ${limitStr}`);\r\n                }\r\n            }\r\n            if (system.action.damage.type.value) {\r\n                const { damage } = system.action;\r\n                let damageString = '';\r\n                let elementString = '';\r\n                const attribute = damage.attribute ? `${game.i18n.localize(SR5.attributes[damage.attribute])} + ` : '';\r\n                if (damage.value || attribute) {\r\n                    const type = damage.type.value ? damage.type.value.toUpperCase().charAt(0) : '';\r\n                    damageString = `DV ${attribute}${damage.value}${type}`;\r\n                }\r\n                if (damage.element.value) {\r\n                    // if we have a damage value and are electric, follow the convention of (e) after\r\n                    if (damage.value) {\r\n                        if (damage.element.value === 'electricity') {\r\n                            damageString += ' (e)';\r\n                        } else {\r\n                            elementString = Helpers.label(damage.element.value);\r\n                        }\r\n                    } else {\r\n                        elementString = Helpers.label(damage.element.value);\r\n                    }\r\n                }\r\n                if (damageString) props.push(damageString);\r\n                if (elementString) props.push(elementString);\r\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\r\n            }\r\n        }\r\n    },\r\n    sin: (system, labels, props) => {\r\n        props.push(`Rating ${system.technology.rating}`);\r\n        system.licenses.forEach((license) => {\r\n            props.push(`${license.name} R${license.rtg}`);\r\n        });\r\n    },\r\n\r\n    contact: (system, labels, props) => {\r\n        props.push(system.type);\r\n        props.push(`${game.i18n.localize('SR5.Connection')} ${system.connection}`);\r\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${system.loyalty}`);\r\n        if (system.blackmail) {\r\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\r\n        }\r\n        if (system.family) {\r\n            props.push(game.i18n.localize('SR5.Family'));\r\n        }\r\n    },\r\n\r\n    lifestyle: (system, labels, props) => {\r\n        props.push(Helpers.label(system.type));\r\n        if (system.cost) props.push(`\u00A5${system.cost}`);\r\n        if (system.comforts) props.push(`Comforts ${system.comforts}`);\r\n        if (system.security) props.push(`Security ${system.security}`);\r\n        if (system.neighborhood) props.push(`Neighborhood ${system.neighborhood}`);\r\n        if (system.guests) props.push(`Guests ${system.guests}`);\r\n    },\r\n\r\n    adept_power: (system, labels, props) => {\r\n        ChatData.action(system, labels, props);\r\n        props.push(`PP ${system.pp}`);\r\n        props.push(Helpers.label(system.type));\r\n    },\r\n\r\n    armor: (system, labels, props) => {\r\n        if (system.armor) {\r\n            if (system.armor.value) props.push(`Armor ${system.armor.mod ? '+' : ''}${system.armor.value}`);\r\n            if (system.armor.acid) props.push(`Acid ${system.armor.acid}`);\r\n            if (system.armor.cold) props.push(`Cold ${system.armor.cold}`);\r\n            if (system.armor.fire) props.push(`Fire ${system.armor.fire}`);\r\n            if (system.armor.electricity) props.push(`Electricity ${system.armor.electricity}`);\r\n            if (system.armor.radiation) props.push(`Radiation ${system.armor.radiation}`);\r\n        }\r\n    },\r\n\r\n    ammo: (system, labels, props) => {\r\n        if (system.damageType) props.push(`${game.i18n.localize(\"SR5.DamageType\")} ${system.damageType}`);\r\n        if (system.damage) props.push(`${game.i18n.localize(\"SR5.DamageValue\")} ${system.damage}`);\r\n        if (system.element) props.push(`${game.i18n.localize(\"SR5.Element\")} ${system.element}`);\r\n        if (system.ap) props.push(`${game.i18n.localize(\"SR5.AP\")} ${system.ap}`);\r\n        if (system.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${system.blast.radius}m`);\r\n        if (system.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${system.blast.dropoff}/m`);\r\n    },\r\n\r\n    program: (system, labels, props) => {\r\n        props.push(game.i18n.localize(SR5.programTypes[system.type]));\r\n    },\r\n\r\n    complex_form: (system, labels, props) => {\r\n        ChatData.action(system, labels, props);\r\n        props.push(Helpers.label(system.target), Helpers.label(system.duration));\r\n        const { fade } = system;\r\n        if (fade > 0) props.push(`Fade L+${fade}`);\r\n        else if (fade < 0) props.push(`Fade L${fade}`);\r\n        else props.push('Fade L');\r\n    },\r\n\r\n    cyberware: (system, labels, props) => {\r\n        ChatData.action(system, labels, props);\r\n        ChatData.armor(system, labels, props);\r\n        if (system.essence) props.push(`Ess ${system.essence}`);\r\n    },\r\n\r\n    bioware: (system, labels, props) => {\r\n        ChatData.action(system, labels, props);\r\n        ChatData.armor(system, labels, props);\r\n        if (system.essence) props.push(`Ess ${system.essence}`);\r\n    },\r\n\r\n    device: (system: DeviceData, labels, props) => {\r\n        if (system.technology && system.technology.rating) props.push(`Rating ${system.technology.rating}`);\r\n        if (system.category === 'cyberdeck') {\r\n            for (const attN of Object.values(system.atts)) {\r\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\r\n            }\r\n        }\r\n    },\r\n\r\n    equipment: (system, labels, props) => {\r\n        if (system.technology && system.technology.rating) props.push(`Rating ${system.technology.rating}`);\r\n    },\r\n\r\n    quality: (system, labels, props) => {\r\n        ChatData.action(system, labels, props);\r\n        props.push(Helpers.label(system.type));\r\n    },\r\n\r\n    sprite_power: (system, labels, props) => {\r\n        // add action data\r\n        ChatData.action(system, labels, props);\r\n    },\r\n\r\n    critter_power: (system, labels, props) => {\r\n        // power type\r\n        props.push(game.i18n.localize(SR5.critterPower.types[system.powerType]));\r\n        // duration\r\n        props.push(game.i18n.localize(SR5.critterPower.durations[system.duration]));\r\n        // range\r\n        props.push(game.i18n.localize(SR5.critterPower.ranges[system.range]));\r\n\r\n        // add action data\r\n        ChatData.action(system, labels, props);\r\n    },\r\n\r\n    // add properties for spell data, follow order in book\r\n    spell: (system, labels, props) => {\r\n        // first category and type\r\n        props.push(Helpers.label(system.category), Helpers.label(system.type));\r\n\r\n        // add subtype tags\r\n        if (system.category === 'combat') {\r\n            props.push(Helpers.label(system.combat.type));\r\n        } else if (system.category === 'health') {\r\n        } else if (system.category === 'illusion') {\r\n            props.push(system.illusion.type);\r\n            props.push(system.illusion.sense);\r\n        } else if (system.category === 'manipulation') {\r\n            if (system.manipulation.damaging) props.push('Damaging');\r\n            if (system.manipulation.mental) props.push('Mental');\r\n            if (system.manipulation.environmental) props.push('Environmental');\r\n            if (system.manipulation.physical) props.push('Physical');\r\n        } else if (system.category === 'detection') {\r\n            props.push(system.illusion.type);\r\n            props.push(system.illusion.passive ? 'Passive' : 'Active');\r\n            if (system.illusion.extended) props.push('Extended');\r\n        }\r\n        // add range\r\n        props.push(Helpers.label(system.range));\r\n\r\n        // add action data\r\n        ChatData.action(system, labels, props);\r\n\r\n        // add duration data\r\n        props.push(Helpers.label(system.duration));\r\n\r\n        // add drain data\r\n        const { drain } = system;\r\n        if (drain > 0) props.push(`Drain F+${drain}`);\r\n        else if (drain < 0) props.push(`Drain F${drain}`);\r\n        else props.push('Drain F');\r\n\r\n        labels.roll = 'Cast';\r\n    },\r\n\r\n    weapon: (system, labels, props, item: SR5Item) => {\r\n        ChatData.action(system, labels, props);\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.includes('Limit')) {\r\n                props[i] = prop.replace('Limit', 'Accuracy');\r\n            }\r\n        }\r\n\r\n        const equippedAmmo = item.getEquippedAmmo();\r\n        if (equippedAmmo && system.ammo && system.ammo.current?.max) {\r\n            if (equippedAmmo) {\r\n                const ammoData = equippedAmmo.system as AmmoData;\r\n                const { current, spare_clips } = system.ammo;\r\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\r\n                if (ammoData.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${ammoData.blast.radius}m`);\r\n                if (ammoData.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${ammoData.blast.dropoff}/m`);\r\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\r\n            }\r\n        }\r\n\r\n        if (system.technology?.conceal?.value) {\r\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${system.technology.conceal.value}`);\r\n        }\r\n\r\n        if (system.category === 'range') {\r\n            if (system.range.rc) {\r\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${system.range.rc.value}`;\r\n                if (item?.actor) {\r\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\r\n                }\r\n                props.push(rcString);\r\n            }\r\n            if (system.range.modes) {\r\n                const newModes: string[] = [];\r\n                const { modes } = system.range;\r\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\r\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\r\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\r\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\r\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\r\n            }\r\n            if (system.range.ranges) props.push(Array.from(Object.values(system.range.ranges)).join('/'));\r\n        } else if (system.category === 'melee') {\r\n            if (system.melee.reach) {\r\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${system.melee.reach}`;\r\n                // find accuracy in props and insert ourselves after it\r\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\r\n                if (accIndex > -1) {\r\n                    props.splice(accIndex + 1, 0, reachString);\r\n                } else {\r\n                    props.push(reachString);\r\n                }\r\n            }\r\n        } else if (system.category === 'thrown') {\r\n            const { blast } = system.thrown;\r\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\r\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\r\n\r\n            if (system.thrown.ranges) {\r\n                const mult = system.thrown.ranges.attribute && item?.actor ? item.actor.system.attributes[system.thrown.ranges.attribute].value : 1;\r\n                const ranges = [system.thrown.ranges.short, system.thrown.ranges.medium, system.thrown.ranges.long, system.thrown.ranges.extreme];\r\n                props.push(ranges.map((v) => v * mult).join('/'));\r\n            }\r\n        }\r\n\r\n        const equippedMods = item.getEquippedMods();\r\n        if (equippedMods) {\r\n            equippedMods.forEach((mod) => {\r\n                props.push(`${mod.name}`);\r\n            });\r\n        }\r\n    },\r\n};\r\n", "import {FLAGS, SYSTEM_SOCKET} from \"./constants\";\r\nimport SocketMessageBody = Shadowrun.SocketMessageData;\r\n\r\n/**\r\n * Simple handling of creating and emiting socket messages\r\n * Use emit for messages meant for all users\r\n * > SocketMessage.emit(FLAGS.<yourFlag>, {yourDataField: 'yourData'})\r\n *\r\n * Use emitForGM for messages meant only for ONE gm\r\n * > SocketMessage.emitGM(FLAGS.<yourFlag>, {yourDataField: 'yourData'})\r\n */\r\nexport class SocketMessage {\r\n    static _createMessage(type, data, userId?): SocketMessageBody {\r\n        return {type, data, userId}\r\n    }\r\n\r\n    static async emit(type, data) {\r\n        if (!game.socket) return;\r\n\r\n        const message = SocketMessage._createMessage(type, data);\r\n        console.trace('Shadowrun 5e | Emiting Shadowrun5e system socket message', message);\r\n        await game.socket.emit(SYSTEM_SOCKET, message);\r\n    }\r\n\r\n    static async emitForGM(type, data) {\r\n        if (!game.socket || !game.user || !game.users) return;\r\n        if (game.user.isGM) return console.error('Active user is GM! Aborting socket message...');\r\n\r\n        const gmUser = game.users.find(user => user.isGM);\r\n        if (!gmUser) return console.error('No active GM user! One GM must be active for this action to work.');\r\n\r\n        const message = SocketMessage._createMessage(type, data, gmUser.id);\r\n        console.trace('Shadowrun 5e | Emiting Shadowrun5e system socket message', message);\r\n        await game.socket.emit(SYSTEM_SOCKET, message);\r\n    }\r\n}", "import {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {SR5Item} from \"../SR5Item\";\r\nimport {SocketMessage} from \"../../sockets\";\r\nimport {FLAGS} from \"../../constants\";\r\nimport SocketAddNetworkControllerMessageData = Shadowrun.SocketAddNetworkControllerMessageData;\r\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\r\n\r\nexport class NetworkDeviceFlow {\r\n    /**\r\n     * Abstract away Foundry uuid system to allow for further implementation changes and typing restrictions.\r\n     *\r\n     * @param target Whatever Document you want to link to.\r\n     */\r\n    static buildLink(target: SR5Item|SR5Actor|TokenDocument) {\r\n        return target.uuid;\r\n    }\r\n\r\n    /**\r\n     * Repacking FoundryVTT fromUuid without async promise to make it usable in sync functions.\r\n     *\r\n     * @param link\r\n     */\r\n    static resolveLink(link: string): SR5Item|undefined {\r\n        if (!link) return;\r\n\r\n        let parts = link.split(\".\");\r\n        let doc;\r\n\r\n        // Compendium Documents\r\n        if (parts[0] === \"Compendium\") {\r\n            parts.shift();\r\n            const [scope, packName, id] = parts.slice(0, 3);\r\n            parts = parts.slice(3);\r\n            const pack = game.packs.get(`${scope}.${packName}`);\r\n            if (!pack) return;\r\n            doc = pack.getDocument(id);\r\n        }\r\n\r\n        // World Documents\r\n        else {\r\n            const [docName, docId] = parts.slice(0, 2);\r\n            parts = parts.slice(2);\r\n            const collection = CONFIG[docName].collection.instance;\r\n            doc = collection.get(docId);\r\n        }\r\n\r\n        // Embedded Documents\r\n        while (doc && (parts.length > 1)) {\r\n            const [embeddedName, embeddedId] = parts.slice(0, 2);\r\n            doc = doc.getEmbeddedDocument(embeddedName, embeddedId);\r\n            parts = parts.slice(2);\r\n        }\r\n        return doc || null;\r\n    }\r\n\r\n    static async emitAddNetworkControllerSocketMessage(controller: SR5Item, networkDevice: SR5Item) {\r\n        const controllerLink = NetworkDeviceFlow.buildLink(controller);\r\n        const networkDeviceLink = NetworkDeviceFlow.buildLink(networkDevice);\r\n\r\n        await SocketMessage.emitForGM(FLAGS.addNetworkController, {controllerLink, networkDeviceLink});\r\n    }\r\n\r\n    /**\r\n     * Handle socket messages adding a device to the device list of netowrk\r\n     * @param message\r\n     */\r\n    static async _handleAddNetworkControllerSocketMessage(message: SocketAddNetworkControllerMessageData) {\r\n        console.log('Shadowrun 5e | Handle add network controller socket message', message);\r\n        if (!game.user?.isGM) return console.error(`Shadowrun 5e | Abort handling of message. Current user isn't a GM`, game.user);\r\n\r\n        const controller = NetworkDeviceFlow.resolveLink(message.data.controllerLink);\r\n        const device = NetworkDeviceFlow.resolveLink(message.data.networkDeviceLink);\r\n\r\n        if (!controller || !device) return console.error('Shadowrun 5e | Either the networks controller or device did not resolve.');\r\n\r\n        await NetworkDeviceFlow._handleAddDeviceToNetwork(controller, device);\r\n    }\r\n\r\n    /**\r\n     * Connect a device to a network controller.\r\n     *\r\n     * A network controller is the device managing the PAN/WAN.\r\n     * A network device is to be added to the network managed by the controller.\r\n     *\r\n     * @param controller\r\n     * @param device\r\n     */\r\n    static async addDeviceToNetwork(controller: SR5Item, device: SR5Item) {\r\n        console.log(`Shadowrun5e | Adding an the item ${device.name} to the controller ${controller.name}`, controller, device);\r\n        if (controller.id === device.id) return console.warn('Shadowrun 5e | A device cant be its own network controller');\r\n        const technologyData = device.getTechnologyData();\r\n        if (!technologyData) return ui.notifications?.error(game.i18n.localize('SR5.Errors.CanOnlyAddTechnologyItemsToANetwork'));\r\n        if (!controller.canBeNetworkController) return;\r\n\r\n        if (NetworkDeviceFlow._currentUserCanModifyDevice(controller) && NetworkDeviceFlow._currentUserCanModifyDevice(device))\r\n            await NetworkDeviceFlow._handleAddDeviceToNetwork(controller, device);\r\n        else\r\n            await NetworkDeviceFlow.emitAddNetworkControllerSocketMessage(controller, device);\r\n    }\r\n\r\n    /**\r\n     * Handle everything around adding a device to a controller, including removing it from already connected networks.\r\n     *\r\n     * Note: This method needs GM access\r\n     *\r\n     * @param controller\r\n     * @param device\r\n     */\r\n    private static async _handleAddDeviceToNetwork(controller: SR5Item, device: SR5Item): Promise<any> {\r\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(controller) && !NetworkDeviceFlow._currentUserCanModifyDevice(device)) return console.error(`User isn't owner or GM of this device`, controller);\r\n\r\n        const controllerData = controller.asDevice || controller.asHost;\r\n        if (!controllerData) return console.error(`Device isn't capable of accepting network devices`, controller);\r\n        const technologyData = device.getTechnologyData();\r\n        if (!technologyData) return console.error(`'Device can't be added to a network`);\r\n\r\n        // Remove device from a network it's already connected to.\r\n        if (technologyData.networkController) await NetworkDeviceFlow._removeDeviceFromController(device);\r\n\r\n        // Add the device to a new controller\r\n        const controllerLink = NetworkDeviceFlow.buildLink(controller);\r\n        await NetworkDeviceFlow._setControllerFromLink(device, controllerLink);\r\n\r\n        // Add the device to the list of devices of the controller.\r\n        const networkDeviceLink = NetworkDeviceFlow.buildLink(device);\r\n        const networkDevices = controllerData.system.networkDevices;\r\n        if (networkDevices.includes(networkDeviceLink)) return;\r\n\r\n        return NetworkDeviceFlow._setDevicesOnController(controller, [...networkDevices, networkDeviceLink]);\r\n    }\r\n\r\n    /**\r\n     * This method is removing a device from the controller devices list. It doesn't remove the controller reference itself.\r\n\r\n     * @param device A network device that's connected to a controller.\r\n     */\r\n    static async removeDeviceFromController(device: SR5Item|undefined) {\r\n        if (!device) return;\r\n\r\n        console.log(`Shadowrun 5e | Removing device ${device.name} from it's controller`);\r\n\r\n        await NetworkDeviceFlow._removeDeviceFromController(device);\r\n        await NetworkDeviceFlow._removeControllerFromDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Remove a single device (given as a link) from a controllers network and disconnect the device from the controller.\r\n     *\r\n     * @param controller\r\n     * @param deviceLink\r\n     */\r\n    static async removeDeviceLinkFromNetwork(controller: SR5Item, deviceLink: string) {\r\n        console.log(`Shadowrun 5e | Removing device with uuid ${deviceLink} from network`);\r\n        const controllerData = controller.asController();\r\n        const device = NetworkDeviceFlow.resolveLink(deviceLink);\r\n\r\n        // Remove an existing item from the network.\r\n        if (device) {\r\n            const technologyData = device.getTechnologyData();\r\n            if (technologyData) await NetworkDeviceFlow._removeControllerFromDevice(device);\r\n        }\r\n\r\n        // Remove the deviceLink from the controller.\r\n        if (!controllerData) return;\r\n        const deviceLinks = controllerData.system.networkDevices.filter(existingLink => existingLink !== deviceLink);\r\n        await NetworkDeviceFlow._setDevicesOnController(controller, deviceLinks);\r\n    }\r\n\r\n\r\n    /**\r\n     * Clear a controllers network, disconnecting it's devices from the controller and the controller\r\n     * from it's devices.\r\n     *\r\n     * @param controller\r\n     */\r\n    static async removeAllDevicesFromNetwork(controller: SR5Item) {\r\n        console.log(`Shadowrun 5e | Removing all devices from network ${controller.name}`);\r\n\r\n        await NetworkDeviceFlow._removeControllerFromAllDevices(controller);\r\n        await NetworkDeviceFlow._removeAllDevicesFromController(controller);\r\n    }\r\n\r\n    private static async _setControllerFromLink(device: SR5Item, controllerLink: string) {\r\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 5e | Given device cant be part of a network', device);\r\n        await device.update({'data.technology.networkController': controllerLink});\r\n    }\r\n\r\n    /**\r\n     * As part of the deleteItem FoundryVTT event this method will called by all active users, even if they lack permission.\r\n     * @param device The device to remove a connected controller from.\r\n     * @private\r\n     */\r\n    private static async _removeControllerFromDevice(device: SR5Item) {\r\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 5e | Given device cant be part of a network', device);\r\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(device)) return;\r\n        await device.update({'data.technology.networkController': ''})\r\n    }\r\n\r\n    private static async _setDevicesOnController(controller: SR5Item, deviceLinks: string[]) {\r\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 5e | Given device cant control a network', controller);\r\n        await controller.update({'data.networkDevices': deviceLinks});\r\n    }\r\n\r\n    private static async _removeAllDevicesFromController(controller: SR5Item) {\r\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 5e | Given device cant control a network', controller);\r\n        await controller.update({'data.networkDevices': []});\r\n    }\r\n\r\n    /**\r\n     * As part of the deleteItem FoundryVTT event this method will called by all active users, even if they lack permission.\r\n     * @param device The device that is to removed from the network controller.\r\n     * @private\r\n     */\r\n    private static async _removeDeviceFromController(device: SR5Item){\r\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 5e | Given device cant be part of a network', device);\r\n        const technologyData = device.getTechnologyData();\r\n        if (!technologyData) return;\r\n\r\n        // Controller might not exist anymore.\r\n        const controller = NetworkDeviceFlow.resolveLink(technologyData.networkController);\r\n        if (!controller) return;\r\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(controller)) return;\r\n\r\n        const controllerData = controller.asController();\r\n        if (!controllerData) return;\r\n\r\n        // Remove device from it's controller.\r\n        const deviceLink = NetworkDeviceFlow.buildLink(device);\r\n        const deviceLinks = controllerData.system.networkDevices.filter(existingLink => existingLink !== deviceLink);\r\n        await NetworkDeviceFlow._setDevicesOnController(controller, deviceLinks);\r\n    }\r\n\r\n    private static async _removeControllerFromAllDevices(controller: SR5Item) {\r\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 5e | Given device cant control a network', controller);\r\n        const controllerData = controller.asController();\r\n        if (!controllerData) return;\r\n\r\n        const networkDevices = controllerData.system.networkDevices;\r\n\r\n        // Remove controller from all it's connected devices.\r\n        if (networkDevices) {\r\n            const devices = networkDevices.map(deviceLink => NetworkDeviceFlow.resolveLink(deviceLink))\r\n            for (const device of devices) {\r\n                if (!device) continue;\r\n                await NetworkDeviceFlow._removeControllerFromDevice(device);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return all network devices connected to a controller.\r\n     *\r\n     *\r\n     * @param controller\r\n     */\r\n    static getNetworkDevices(controller: SR5Item): SR5Item[] {\r\n        const devices: SR5Item[] = [];\r\n        const controllerData = controller.asController();\r\n        if (!controllerData) return devices;\r\n\r\n        controllerData.system.networkDevices.forEach(link => {\r\n            const device = NetworkDeviceFlow.resolveLink(link);\r\n            if (!device) return console.warn(`Shadowrun5e | Controller ${controller.name} has a network device ${link} that doesn't exist anymore`);\r\n            devices.push(device);\r\n        });\r\n\r\n        return devices;\r\n    }\r\n\r\n    /**\r\n     * Note: This handler will be called for all active users, even if they lack permission to alter item data.\r\n     *       This can result in lingering network devices or controllers, when no GM or device owner is active.\r\n     *\r\n     * @param item This can be a network controller or device or neither.\r\n     * @param data\r\n     * @param id\r\n     */\r\n    static async handleOnDeleteItem(item: SR5Item, data: ShadowrunItemDataData, id: string) {\r\n        console.log(`Shadowrun 5e | Checking for network on deleted item ${item.name}`, item);\r\n        // A deleted controller must be removed from all it's devices.\r\n        if (item.canBeNetworkController) return await NetworkDeviceFlow._removeControllerFromAllDevices(item);\r\n        // A deleted device must be removed from it's controller.\r\n        if (item.canBeNetworkDevice) return await NetworkDeviceFlow._removeDeviceFromController(item);\r\n    }\r\n\r\n    static _currentUserCanModifyDevice(device: SR5Item): boolean {\r\n        return game.user?.isGM || device.isOwner;\r\n    }\r\n}", "import HostData = Shadowrun.HostData;\r\nimport {MatrixRules} from \"../../rules/MatrixRules\";\r\n\r\nexport function HostDataPreparation(system: HostData) {\r\n    HostPrep.setDeviceCategory(system);\r\n    HostPrep.prepareMatrixAttributes(system);\r\n}\r\n\r\n\r\nexport class HostPrep {\r\n    static setDeviceCategory(system: HostData) {\r\n        // Host matrix 'devices' are always hosts and never commlink / cyberdecks.\r\n        system.category = 'host';\r\n    }\r\n\r\n    /**\r\n     * Apply host matrix attribute rating.\r\n     * @param system\r\n     */\r\n    static prepareMatrixAttributes(system: HostData) {\r\n        const hostAttributeRatings = MatrixRules.hostMatrixAttributeRatings(system.rating);\r\n        Object.values(system.atts).forEach(attribute => {\r\n            attribute.value = hostAttributeRatings.pop();\r\n            // Disallow editing on the item sheet, since the value is derived.\r\n            attribute.editable = false;\r\n        })\r\n    }\r\n}", "import { SR5Actor } from '../actor/SR5Actor';\r\nimport { SR5 } from '../config';\r\nimport { Helpers } from '../helpers';\r\nimport { PartsList } from '../parts/PartsList';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport ActorArmorData = Shadowrun.ActorArmorData;\r\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport CharacterActorData = Shadowrun.CharacterData;\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\n/**\r\n * Soaking rules for actors\r\n */\r\nexport class SoakRules {\r\n\r\n    /**\r\n     * Determines the soak parts based on the damage and the actor type\r\n     * @param soakParts List of (potentially prefilled) soak parts\r\n     * @param actor The actor affected by the damage\r\n     * @param damageData The damage\r\n     */\r\n    static applyAllSoakParts(soakParts: PartsList<number>, actor: SR5Actor, damageData: DamageData) {\r\n        if (damageData.type.base !== 'matrix') {\r\n            SoakRules.applyPhysicalAndStunSoakParts(soakParts, actor, damageData);\r\n        } else {\r\n            SoakRules.applyMatrixSoakParts(soakParts, actor);\r\n        }\r\n    }\r\n\r\n    private static applyPhysicalAndStunSoakParts(soakParts: PartsList<number>, actor: SR5Actor, damageData: DamageData) {\r\n        // Apply special rules for direct combat spells\r\n        const damageSourceItem = Helpers.findDamageSource(damageData);\r\n        if (damageSourceItem && damageSourceItem.isDirectCombatSpell) {\r\n            return SoakRules.applyDirectCombatSpellParts(damageSourceItem.data as SpellItemData, soakParts, actor);\r\n        }\r\n\r\n        SoakRules.applyBodyAndArmorParts(soakParts, actor);\r\n\r\n        const armor = actor.getArmor();\r\n        SoakRules.applyArmorPenetration(soakParts, armor, damageData);\r\n        SoakRules.applyElementalArmor(soakParts, armor, damageData.element.base);\r\n    }\r\n\r\n    private static applyDirectCombatSpellParts(spellItem: SpellItemData, soakParts: PartsList<number>, actor: SR5Actor) {\r\n        if (spellItem.data.type === 'mana') {\r\n            SoakRules.addUniquePart(soakParts, actor.getAttribute('willpower'), SR5.attributes.willpower);\r\n        }\r\n\r\n        else {\r\n            SoakRules.addUniquePart(soakParts, actor.getAttribute('body'), SR5.attributes.body);\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private static applyBodyAndArmorParts(soakParts: PartsList<number>, actor: SR5Actor) {\r\n        const body = actor.findAttribute('body');\r\n        if (body) {\r\n            soakParts.addUniquePart(body.label || 'SR5.Body', body.value);\r\n        }\r\n\r\n        const mod = actor.getModifier('soak');\r\n        if (mod) {\r\n            soakParts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n\r\n        actor._addArmorParts(soakParts);\r\n    }\r\n\r\n    private static applyArmorPenetration(soakParts: PartsList<number>, armor: ActorArmorData, damageData: DamageData) {\r\n        const bonusArmor = armor[damageData.element.value] ?? 0;\r\n        const totalArmor = armor.value + bonusArmor;\r\n        const ap = Helpers.calcTotal(damageData.ap);\r\n\r\n        soakParts.addUniquePart('SR5.AP', Math.max(ap, -totalArmor));\r\n    }\r\n\r\n    private static applyElementalArmor(soakParts: PartsList<number>, armor: ActorArmorData, element: string) {\r\n        const bonusArmor = armor[element] ?? 0;\r\n        if (bonusArmor) {\r\n            soakParts.addUniquePart(SR5.elementTypes[element], bonusArmor);\r\n        }\r\n    }\r\n\r\n    private static applyMatrixSoakParts(soakParts: PartsList<number>, actor: SR5Actor) {\r\n        const actorData = actor.system as CharacterActorData;\r\n\r\n        // All actors have the same soak rules when they are not active in the matrix\r\n        // TODO Technomancer and Sprites special rules?\r\n        if (actorData.initiative.perception === 'matrix') {\r\n            if (actor.isVehicle()){\r\n                // Vehicles can have a matrix initiative but do not take biofeedback\r\n                SoakRules.applyRatingAndFirewallParts(actorData, soakParts);\r\n            }\r\n            else {\r\n                SoakRules.applyBiofeedbackParts(soakParts, actor, actorData);\r\n            }\r\n        }\r\n\r\n        else {\r\n            SoakRules.applyRatingAndFirewallParts(actorData, soakParts);\r\n        }\r\n    }\r\n\r\n    private static applyBiofeedbackParts(soakParts: PartsList<number>, actor: SR5Actor, actorData: CharacterActorData) {\r\n        SoakRules.addUniquePart(soakParts, actor.getAttribute('willpower'), SR5.attributes.willpower);\r\n\r\n        if (!actorData.matrix) {\r\n            return;\r\n        }\r\n\r\n        SoakRules.addUniquePart(soakParts, actorData.matrix.firewall, SR5.matrixAttributes.firewall);\r\n    }\r\n\r\n    private static applyRatingAndFirewallParts(actorData: CharacterActorData, soakParts: PartsList<number>) {\r\n        if (!actorData.matrix) {\r\n            return;\r\n        }\r\n\r\n        const deviceRating = actorData.matrix.rating;\r\n        if (deviceRating) {\r\n            soakParts.addUniquePart('SR5.Labels.ActorSheet.DeviceRating', deviceRating);\r\n        }\r\n\r\n        this.addUniquePart(soakParts, actorData.matrix.firewall, SR5.matrixAttributes.firewall);\r\n    }\r\n\r\n    private static addUniquePart(partsList: PartsList<number>, modifiableValue : ModifiableValue, label : string) {\r\n        const totalValue = Helpers.calcTotal(modifiableValue);\r\n        partsList.addUniquePart(label, totalValue);\r\n    }\r\n\r\n    /**\r\n     * Reduces the damage value based on net hits and damage data and actor special rules\r\n     *\r\n     * @remarks\r\n     * Make sure that you first call modifyDamageType before you call this method\r\n     * to determine the correct damage type (physical, stun, matrix)\r\n     *\r\n     * @param damageData The incoming damage\r\n     * @param hits The number of hits on the soak tests\r\n     * @returns The updated damage data\r\n     */\r\n    static reduceDamage(actor: SR5Actor, damageData: DamageData, hits: number): ModifiedDamageData {\r\n\r\n        // Vehicles are immune to stun damage (electricity stun damage is handled in a different place)\r\n        // Note: This also takes care of the vehicle immunity, since physical damage that does not exceed armor\r\n        // will be converted to stun damage and then reduced to 0. This does not work with drones wearing armor\r\n        // but we do not support this.\r\n        if (damageData.type.value === 'stun' && actor.isVehicle()) {\r\n            return Helpers.reduceDamageByHits(damageData, damageData.value, 'SR5.VehicleStunImmunity');\r\n        }\r\n\r\n        return Helpers.reduceDamageByHits(damageData, hits, 'SR5.SoakTest');\r\n    }\r\n\r\n    /**\r\n     * Turns physical damage to stun damage based on the damage and armor\r\n     * @param damage The incoming damage\r\n     * @param actor The actor affected by the damage\r\n     * @returns The updated damage data\r\n     */\r\n     static modifyPhysicalDamageForArmor(damage: DamageData, actor : SR5Actor): DamageData {\r\n        const updatedDamage = duplicate(damage) as DamageData;\r\n\r\n        if (damage.type.value === 'physical') {\r\n            // Physical damage is only transformed for some actors\r\n            if (!actor.isCharacter() && !actor.isSpirit() && !actor.isCritter() && !actor.isVehicle()) {\r\n                return updatedDamage;\r\n            }\r\n\r\n            const modifiedArmor = actor.getModifiedArmor(damage);\r\n            if (modifiedArmor) {\r\n                const armorWillChangeDamageType = modifiedArmor.value > damage.value;\r\n\r\n                if (armorWillChangeDamageType) {\r\n                    updatedDamage.type.value = 'stun';\r\n                }\r\n            }\r\n        }\r\n\r\n        return updatedDamage;\r\n    }\r\n\r\n    /**\r\n     * Turns matrix damage to biofeedback based on the actor state\r\n     * @param damage The incoming damage\r\n     * @param actor The actor affected by the damage\r\n     * @returns The updated damage data\r\n     */\r\n    static modifyMatrixDamageForBiofeedback(damage: DamageData, actor : SR5Actor): DamageData {\r\n        const updatedDamage = duplicate(damage) as DamageData;\r\n\r\n        if (damage.type.value === 'matrix') {\r\n            const actorData = actor.system as CharacterActorData;\r\n\r\n            // Only characters can receive biofeedback damage at the moment.\r\n            // TODO Technomancer and Sprites special rules?\r\n            if (!actor.isCharacter()) {\r\n                return updatedDamage;\r\n            }\r\n\r\n            if (actorData.initiative.perception === 'matrix') {\r\n                if (actorData.matrix.hot_sim) {\r\n                    updatedDamage.type.value = 'physical';\r\n                }\r\n                else {\r\n                    updatedDamage.type.value = 'stun';\r\n                }\r\n            }\r\n        }\r\n\r\n        return updatedDamage;\r\n    }\r\n}", "import {SR} from \"../constants\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {Helpers} from \"../helpers\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport ArmorData = Shadowrun.ArmorData;\r\nimport ValueField = Shadowrun.ValueField;\r\nimport {SoakRules} from \"./SoakRules\";\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\n\r\nexport class CombatRules {\r\n    static iniOrderCanDoAnotherPass(scores: number[]): boolean {\r\n        for (const score of scores) {\r\n            if (CombatRules.iniScoreCanDoAnotherPass(score)) return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Check if there is another initiative pass possible with the given score.\r\n     * @param score\r\n     * @return true means another initiative pass is possible\r\n     */\r\n    static iniScoreCanDoAnotherPass(score: number): boolean {\r\n        return CombatRules.reduceIniResultAfterPass(score) > 0;\r\n    }\r\n    /**\r\n     * Reduce the given initiative score according to @PDF SR5#159\r\n     * @param score This given score can't be reduced under zero.\r\n     */\r\n    static reduceIniResultAfterPass(score: number): number {\r\n        return Math.max(score + SR.combat.INI_RESULT_MOD_AFTER_INI_PASS, 0);\r\n    }\r\n\r\n    /**\r\n     * Reduce the initiative score according to the current initiative pass @PDF SR5#160.\r\n     * @param score\r\n     * @param pass The current initiative pass. Each combat round starts at the initiative pass of 1.\r\n     */\r\n    static reduceIniOnLateSpawn(score: number, pass: number): number {\r\n        // Assure valid score ranges.\r\n        // Shift initiative pass value range from min 1 to min 0 for multiplication.\r\n        pass = Math.max(pass - 1, 0);\r\n        score = Math.max(score, 0);\r\n\r\n        // Reduce the new score according to. NOTE: Modifier is negative\r\n        const reducedScore = score + pass * SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\r\n        return CombatRules.getValidInitiativeScore(reducedScore);\r\n    }\r\n\r\n    /**\r\n     * Return a valid initiative score on updates or score changes\r\n     *\r\n     * @param score The initiative score after it's been updated.\r\n     * @returns A valid initiative score\r\n     */\r\n    static getValidInitiativeScore(score: number): number {\r\n        return Math.max(score, 0);\r\n    }\r\n\r\n    /**\r\n     * Determine if an attack hits the defender based on their hits.\r\n     *\r\n     * According to combat sequence (SR5#173) part defend.\r\n     *\r\n     * @param attackerHits\r\n     * @param defenderHits\r\n     * @returns true, when the attack hits.\r\n     */\r\n    static attackHits(attackerHits: number, defenderHits: number): boolean {\r\n        return attackerHits > defenderHits;\r\n    }\r\n\r\n    /**\r\n     * Determine if an attack grazes the defender.\r\n     *\r\n     * According to combat sequence (SR5#173) part defend.\r\n     *\r\n     * @param attackerHits\r\n     * @param defenderHits\r\n     * @returns true, when the attack grazes.\r\n     */\r\n    static attackGrazes(attackerHits: number, defenderHits: number): boolean {\r\n        return attackerHits === defenderHits;\r\n    }\r\n\r\n    /**\r\n     * Determine if an attack misses the defender based on their hits.\r\n     *\r\n     * According to combat sequence (SR5#173) part defend.\r\n     *\r\n     * @param attackerHits\r\n     * @param defenderHits\r\n     * @returns true, when the attack hits.\r\n     */\r\n    static attackMisses(attackerHits: number, defenderHits: number): boolean {\r\n        return !CombatRules.attackHits(attackerHits, defenderHits);\r\n    }\r\n\r\n    /**\r\n     * Modify Damage according to combat sequence (SR5#173) part defend. Successfull attack.\r\n     *\r\n     * @param defender The active defender\r\n     * @param attackerHits The attackers hits. Should be a positive number.\r\n     * @param defenderHits The attackers hits. Should be a positive number.\r\n     * @param damage Incoming damage to be modified\r\n     * @return A new damage object for modified damage.\r\n     */\r\n    static modifyDamageAfterHit(defender: SR5Actor, attackerHits: number, defenderHits: number, damage: DamageData): DamageData {\r\n        let modified = foundry.utils.duplicate(damage);\r\n\r\n        // netHits should never be below zero...\r\n        if (attackerHits < 0) attackerHits = 0;\r\n        if (defenderHits < 0) defenderHits = 0;\r\n\r\n        // SR5#173  Step3: Defend B.\r\n        PartsList.AddUniquePart(modified.mod, 'SR5.Attacker', attackerHits);\r\n        PartsList.AddUniquePart(modified.mod, 'SR5.Defender', -defenderHits);\r\n        modified.value = Helpers.calcTotal(modified, {min: 0});\r\n\r\n        // SR5#173 Step 3: Defend B.\r\n        modified = CombatRules.modifyDamageTypeAfterHit(modified, defender);\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modify damage according to suppression defense (SR5#179). Successfull attack.\r\n     * \r\n     * In case of suppression a successfull attack just does weapon damage (base + ammunition)\r\n     * \r\n     * @param damage The incoming weapon damage of the attack, unaltered.\r\n     */\r\n    static modifyDamageAfterSupressionHit(damage: DamageData): DamageData {\r\n        return foundry.utils.duplicate(damage);\r\n    }\r\n\r\n    /**\r\n     * Modify damage according to combat sequence (SR5#173 part defend. Missing attack.\r\n     * @param damage Incoming damage to be modified\r\n     * @return A new damage object for modified damage.\r\n     */\r\n    static modifyDamageAfterMiss(damage: DamageData): DamageData {\r\n        const modifiedDamage = foundry.utils.duplicate(damage);\r\n\r\n        // Keep base and modification intact, only overwriting the result.\r\n        modifiedDamage.override = {name: 'SR5.Success', value: 0};\r\n        Helpers.calcTotal(modifiedDamage, {min: 0});\r\n\r\n        return modifiedDamage;\r\n    }\r\n\r\n    /**\r\n     * Modify damage according to combat sequence (SR5#173 part defend B). Damage resistance.\r\n     *\r\n     * @param actor The actor resisting the damage\r\n     * @param damage Incoming damage tobe modified.\r\n     * @param hits The resisting tests hits\r\n     * @return A new damage object for modified damage.\r\n     */\r\n    static modifyDamageAfterResist(actor: SR5Actor, damage: DamageData, hits: number): DamageData {\r\n        if (hits < 0) hits = 0;\r\n\r\n        // modifiedDamage.mod = PartsList.AddUniquePart(modifiedDamage.mod, 'SR5.Resist', -hits);\r\n        let {modified} = SoakRules.reduceDamage(actor, damage, hits);\r\n\r\n        Helpers.calcTotal(modified, {min: 0});\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modify amor according to combat sequence (SR5#173) part defend.\r\n     *\r\n     * @param armor An armor value to be modified.\r\n     * @param damage The damage containing the armor penetration to be applied.\r\n     * @returns A new armor value for modified armor\r\n     */\r\n    static modifyArmorAfterHit(armor: ValueField, damage: DamageData): ValueField {\r\n        const modifiedArmor = foundry.utils.duplicate(armor);\r\n\r\n        // ignore ap without effect\r\n        if (damage.ap.value <= 0) return modifiedArmor;\r\n\r\n        console.error('Check if ap is a negative value or positive value during weapon item configuration');\r\n        PartsList.AddUniquePart(modifiedArmor.mod, 'SR5.AP', damage.ap.value);\r\n        modifiedArmor.value = Helpers.calcTotal(modifiedArmor, {min: 0});\r\n\r\n        return modifiedArmor;\r\n    }\r\n\r\n    /**\r\n     * Changes the damage type based on the incoming damage type and the actor state (armor, matrix perception..)\r\n     * @param damage The incoming damage\r\n     * @param actor The actor affected by the damage\r\n     * @returns The updated damage data\r\n     */\r\n     static modifyDamageTypeAfterHit(damage: DamageData, actor : SR5Actor) : DamageData {\r\n        // Careful, order of damage conversion is very important\r\n        // Electricity stun damage is considered physical for vehicles\r\n        let updatedDamage = duplicate(damage) as DamageData;\r\n        if (actor.isVehicle() && updatedDamage.element.value === 'electricity' && updatedDamage.type.value === 'stun') {\r\n            updatedDamage.type.value = 'physical';\r\n        }\r\n\r\n        const damageSourceItem = Helpers.findDamageSource(damage);\r\n        if (damageSourceItem && damageSourceItem.isDirectCombatSpell) {\r\n            // Damage from direct combat spells is never converted\r\n            return updatedDamage;\r\n        }\r\n\r\n        updatedDamage = SoakRules.modifyPhysicalDamageForArmor(updatedDamage, actor);\r\n        return SoakRules.modifyMatrixDamageForBiofeedback(updatedDamage, actor);\r\n    }\r\n}", "export class MeleeRules {\r\n    /**\r\n     * Determine melee defense reach modifier according to Meele Attack (SR5#186)\r\n     *\r\n     * @param incomingReach The attackers reach value\r\n     * @param defendingReach The defenders reach value\r\n     */\r\n    static defenseReachModifier(incomingReach: number, defendingReach: number): number {\r\n        return defendingReach - incomingReach;\r\n    }\r\n}", "export interface FormDialogData extends Dialog.Data{\r\n\ttemplateData: object;\r\n\ttemplatePath: string;\r\n\tonAfterClose?: Function;\r\n}\r\n\r\nexport interface FormDialogOptions extends DialogOptions {\r\n    // When true, will apply dialog form element inputs to this.data.\r\n    applyFormChangesOnSubmit: boolean | null\r\n}\r\n\r\n/**\r\n * A FormDialog is the FormApplication equivalent for Dialogs.\r\n *\r\n * It will look for form elements and apply value changes to the local data property according to the name attribute\r\n * of the form element. This works the same as it does with general FoundryVTT Applications.\r\n */\r\nexport class FormDialog extends Dialog<FormDialogOptions> {\r\n    selection: object;\r\n    selectedButton: string;\r\n    form: HTMLFormElement;\r\n\r\n    _onAfterClose: Function;\r\n    _selectionPromise: Promise<object>;\r\n    _selectionResolve: Function;\r\n    _selectionReject: Function;\r\n    _templateData: object;\r\n    _templatePath: string;\r\n\r\n    constructor(data: FormDialogData, options?: FormDialogOptions) {\r\n        // @ts-ignore\r\n        super(data, options);\r\n\r\n        const {templateData, templatePath} = data;\r\n        this._templateData = templateData;\r\n        this._templatePath = templatePath;\r\n\r\n        this._onAfterClose = data.onAfterClose || this.onAfterClose;\r\n\r\n        this.selection = this._emptySelection();\r\n\r\n        this._selectionPromise = new Promise((resolve, reject) => {\r\n            this._selectionResolve = resolve;\r\n            // Reject is stored, but never used in favor of FormDialog.canceled\r\n            this._selectionReject = reject;\r\n        });\r\n    }\r\n\r\n    async close() {\r\n        await super.close();\r\n\r\n        if (this.canceled) {\r\n            // Delay resolving the dialog promise to avoid Foundry calling this.element.remove(), removing all open dialogs.\r\n            setTimeout(() => this._selectionResolve(this.selection), 250);\r\n        }\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        super.activateListeners(html);\r\n\r\n        html.on(\"change\", \"input,select,textarea\", this._onChangeInput.bind(this));\r\n    }\r\n\r\n\r\n    async submit(button) {\r\n        this.selectedButton = button.name ?? button.label;\r\n\r\n        this.applyFormData();\r\n\r\n        super.submit(button);\r\n        // @ts-ignore\r\n        await this.afterSubmit(\"jQuery\" in this.options ? this.element : this.element [0]);\r\n    }\r\n\r\n    async afterSubmit(html: JQuery) {\r\n        // Await in case of a possible async handler.\r\n        this.selection = await this._onAfterClose(html, this.selectedButton);\r\n\r\n        // Delay resolving the dialog promise to avoid Foundry calling this.element.remove(), removing all open dialogs.\r\n        setTimeout(() => this._selectionResolve(this.selection), 250);\r\n    }\r\n\r\n    /**\r\n     * Allow Foundry Sheet behaviour for dialogs with complex forms.\r\n     * @returns\r\n     */\r\n    applyFormData() {\r\n        //@ts-ignore // TODO: FormDialog class definition should override options,but doesn't.\r\n        if (!this.options.applyFormChangesOnSubmit) return;\r\n\r\n        if ( !this.form ) throw new Error(`The FormApplication subclass has no registered form element`);\r\n        const fd = new FormDataExtended(this.form, {editors: {}});\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const data = fd.object;\r\n\r\n        this._updateData(data);\r\n    }\r\n\r\n    _updateData(data) {\r\n        //@ts-ignore // TODO: FormDialog.data typing is missing\r\n        foundry.utils.mergeObject(this.data.templateData, data);\r\n    }\r\n\r\n    //@ts-ignore\r\n    getData() {\r\n        // Dialog.getData expects buttons to be set.\r\n        this.data.buttons = this.data.buttons || this.buttons;\r\n        this._amendButtonsWithName(this.data.buttons);\r\n\r\n        // Call preconfigured Dialog.getData.\r\n        const data = super.getData();\r\n\r\n        // Merge default Dialog data with whatever's been given.\r\n        return mergeObject(data, {\r\n            ...this.data,\r\n            content: ''\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dialog button object to be rendered underneath dialog content.\r\n     * Follows Dialog.data.buttons typing.\r\n     */\r\n    get buttons() {\r\n        return {}\r\n    }\r\n\r\n    /**\r\n     * Template file to render the inner dialog content with.\r\n     * Will be given FormDialog.data to render.\r\n     */\r\n    get templateContent(): string {\r\n        return '';\r\n    }\r\n\r\n    async select(): Promise<any> {\r\n        await this.render(true);\r\n\r\n        if (this._selectionPromise === undefined || this.selection === undefined) {\r\n            return this._emptySelection();\r\n        }\r\n        return await this._selectionPromise;\r\n    }\r\n\r\n    _emptySelection(): object {\r\n        return {};\r\n    }\r\n\r\n    /** Dialog has been confirmed and something has been selected.\r\n     */\r\n    get selected(): boolean {\r\n        return !this.canceled;\r\n    }\r\n\r\n    /** Dialog has been canceled and nothing has been selected.\r\n     *\r\n     * Will also report cancel if a cancel button has been defined.\r\n     */\r\n    get canceled(): boolean {\r\n        return !this.selectedButton || this.selectedButton === 'cancel';\r\n    }\r\n\r\n    /** @override */\r\n    static getButtons(): Record<string, object> {\r\n        return {};\r\n    }\r\n\r\n    /** Allow for the selected button to be addressed by its key, not it's localized label.\r\n     */\r\n    _amendButtonsWithName(buttons) {\r\n        Object.keys(buttons).forEach(name => buttons[name].name = name);\r\n    }\r\n\r\n    /**\r\n     * See FormApplication._renderInner\r\n     */\r\n    async _renderInner(data): Promise<JQuery<HTMLElement>> {\r\n        const templatePath = data.templatePath || this.templateContent;\r\n        if (templatePath)\r\n            data.content = await renderTemplate(data.templatePath || this.templateContent,\r\n                                                data.templateData || data);\r\n\r\n        const html = await super._renderInner(data);\r\n        this.form = html.filter((i, el) => el instanceof HTMLFormElement)[0] as HTMLFormElement;\r\n        if ( !this.form ) this.form = html.find(\"form\")[0];\r\n        return html;\r\n    }\r\n\r\n    /**\r\n     * Based on FormDialog.options configuration apply changes to data.\r\n     */\r\n    async _onChangeInput(event) {\r\n        const el = event.target;\r\n\r\n        if ( this.options.applyFormChangesOnSubmit ) {\r\n            this.applyFormData();\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sub dialogs should override this method for custom handling of closing dialog.\r\n     */\r\n    onAfterClose(html: JQuery<HTMLElement>) {}\r\n}", "import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\n\r\nexport class DamageApplicationDialog extends FormDialog {\r\n\r\n    constructor(actors : SR5Actor[], damage: DamageData, options?) {\r\n        const dialogData = DamageApplicationDialog.getDialogData(actors, damage);\r\n        super(dialogData, options);\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'damage-application';\r\n        // TODO: Class Dialog here is needed for dialog button styling.\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.resizable = true;\r\n        options.height = 'auto';\r\n        return options; \r\n    }\r\n\r\n    static getDialogData(actors : SR5Actor[], damage: DamageData): FormDialogData {\r\n        const title = game.i18n.localize('SR5.DamageApplication.Title');\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/apps/dialogs/damage-application.html';\r\n\r\n        // Simplify / refactor this\r\n        const actorDamage : any = actors.map(a => { return {actor:a} }) ;\r\n        const templateData = {\r\n            damage,\r\n            actorDamage,\r\n        };\r\n\r\n        const buttons = {\r\n            damage: {\r\n                label: game.i18n.localize('SR5.DamageApplication.ApplyDamage')\r\n            }\r\n        }\r\n\r\n        const onAfterClose = () => actorDamage;\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            onAfterClose,\r\n            buttons,\r\n            default: 'damage'\r\n        } as unknown as FormDialogData;\r\n    }\r\n}", "import {DamageApplicationDialog} from \"../../apps/dialogs/DamageApplicationDialog\";\r\nimport {SR5Actor} from \"../SR5Actor\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport { Helpers } from '../../helpers';\r\nimport { TestCreator } from '../../tests/TestCreator';\r\n\r\nexport class DamageApplicationFlow {\r\n\r\n    /**\r\n     * Runs the flow to apply damage to multiple actors with user interaction\r\n     * This will also take care of changing the damage type if necessary\r\n     * @param actors The actors that are affected\r\n     * @param damage The damage the actors will receive\r\n     */\r\n    async runApplyDamage(actors: SR5Actor[], damage : DamageData) {\r\n        // Show user the affected actors and the damage values\r\n        const damageApplicationDialog = await new DamageApplicationDialog(actors, damage);\r\n        await damageApplicationDialog.select();\r\n\r\n        if (damageApplicationDialog.canceled) {\r\n            return;\r\n        }\r\n\r\n        actors.forEach((actor) => {\r\n            this.applyDamageToActor(actor, damage);\r\n        });\r\n    }\r\n\r\n    /** Apply all types of damage to the actor.\r\n     *\r\n     * @param damage The damage to apply. Stun damage will be turned to physical for grunts.\r\n     */\r\n    async applyDamageToActor(actor : SR5Actor, damage: DamageData) {\r\n        if (damage.value <= 0) {\r\n            return;\r\n        }\r\n\r\n        // We change the damage type from stun to physical for grunts (they do not have a stun track)\r\n        // We are not doing this earlier in the soak flow to avoid confusing the user\r\n        damage = this.changeStunToPhysicalForGrunts(actor, damage);\r\n\r\n        // Apply damage and resulting overflow to the according track.\r\n        // The amount and type damage can value in the process.\r\n        if (damage.type.value === 'matrix') {\r\n            damage = await actor.addMatrixDamage(damage);\r\n        }\r\n\r\n        if (damage.type.value === 'stun') {\r\n            damage = await actor.addStunDamage(damage);\r\n        }\r\n\r\n        if (damage.type.value === 'physical') {\r\n            await actor.addPhysicalDamage(damage);\r\n        }\r\n\r\n        // NOTE: For stuff like healing the last wound by magic, it might also be interesting to store and give\r\n        //       an overview of each damage/wound applied to select from.\r\n        // await this.update({'data.track': this.data.data.track});\r\n        // TODO: Handle changes in actor status (death and such)\r\n    }\r\n\r\n    private changeStunToPhysicalForGrunts(actor : SR5Actor, damage: DamageData): DamageData {\r\n        const updatedDamage = duplicate(damage) as DamageData;\r\n        if (!actor.isGrunt()) {\r\n            return updatedDamage;\r\n        }\r\n\r\n        // Grunts do not have a stun track and will always receive physical damage.\r\n        if (damage.type.value === 'stun') {\r\n            updatedDamage.type.value = 'physical';\r\n        }\r\n\r\n        return updatedDamage;\r\n    }\r\n\r\n    static handleRenderChatMessage(app: ChatMessage, html, data) {\r\n        html.on('click', '.apply-damage', event => DamageApplicationFlow.chatMessageActionApplyDamage(html, event));\r\n    }\r\n\r\n    /**\r\n     * When triggered from a chat message \r\n     * @param html \r\n     * @param event \r\n     * @returns \r\n     */\r\n    static async chatMessageActionApplyDamage(html, event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        const applyDamage = $(event.currentTarget);\r\n\r\n        const value = Number(applyDamage.data('damageValue'));\r\n        const type = String(applyDamage.data('damageType')) as DamageType;\r\n        const ap = Number(applyDamage.data('damageAp'));\r\n        const element = String(applyDamage.data('damageElement')) as DamageElement;\r\n        let damage = Helpers.createDamageData(value, type, ap, element);\r\n\r\n        let actors = Helpers.getSelectedActorsOrCharacter();\r\n\r\n        // Should no selection be available try guessing.\r\n        if (actors.length === 0) {\r\n            const messageId = html.data('messageId');\r\n\r\n            const test = await TestCreator.fromMessage(messageId);\r\n            if (!test) return\r\n            await test.populateDocuments();\r\n\r\n            // If targeting is available, use that.\r\n            if (test.hasTargets) test.targets.forEach(target => actors.push(target.actor as SR5Actor));\r\n            // Otherwise apply to the actor casting the damage.\r\n            else actors.push(test.actor as SR5Actor);\r\n        }\r\n\r\n        // Abort if no actors could be collected.\r\n        if (actors.length === 0) {\r\n            ui.notifications?.warn(game.i18n.localize(\"SR5.Warnings.TokenSelectionNeeded\"));\r\n            return;\r\n        }\r\n\r\n        await new DamageApplicationFlow().runApplyDamage(actors, damage);\r\n    }\r\n}", "import {FormDialog, FormDialogData, FormDialogOptions} from \"./FormDialog\";\r\nimport {SuccessTest} from \"../../tests/SuccessTest\";\r\nimport { SuccessTestData } from './../../tests/SuccessTest';\r\nimport {SR5} from \"../../config\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\n\r\nexport interface TestDialogData extends FormDialogData {\r\n    test: SuccessTest\r\n    rollMode: string\r\n    rollModes: CONFIG.Dice.RollModes\r\n    config: typeof SR5\r\n}\r\n\r\n/**\r\n * TODO: Add TestDialog JSDoc\r\n */\r\nexport class TestDialog extends FormDialog {\r\n    data: TestDialogData\r\n\r\n    // @ts-ignore // TODO: default option value with all the values...\r\n    constructor(data, options?: FormDialogOptions = {}) {\r\n        // Allow for Sheet style form submit value handling.\r\n        options.applyFormChangesOnSubmit = true;\r\n        super(data, options);\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'test-dialog';\r\n        // TODO: Class Dialog here is needed for dialog button styling.\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.resizable = true;\r\n        options.height = 'auto';\r\n        // @ts-ignore\r\n        options.width = 'auto';\r\n        return options;\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        super.activateListeners(html);\r\n\r\n        // Handle in-dialog entity links to render the respective sheets.\r\n        html.find('.entity-link').on('click', Helpers.renderEntityLinkSheet)\r\n    }\r\n\r\n    /**\r\n     * Overwrite this method to provide an alternative template for the dialog inner content.\r\n     *\r\n     * data.templatePath work's the same and can be used as well.\r\n     */\r\n    get templateContent(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/success-test-dialog.html';\r\n    }\r\n\r\n    //@ts-ignore\r\n    getData() {\r\n        const data = super.getData() as unknown as TestDialogData;\r\n\r\n        //@ts-ignore //TODO: default to general roll mode user setting\r\n        data.rollMode = data.test.data.options?.rollMode;\r\n        data.rollModes = CONFIG.Dice.rollModes;\r\n        data.default = 'roll';\r\n\r\n        // Add in general SR5 config to allow access to general values.\r\n        data.config = SR5;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Overwrite this method to provide the dialog application title.\r\n     */\r\n    get title() {\r\n        const data = this.data as unknown as TestDialogData;\r\n        return game.i18n.localize(data.test.title);\r\n    }\r\n\r\n    /**\r\n     * Overwrite this method to provide dialog buttons.\r\n     */\r\n    get buttons() {\r\n        return {\r\n            roll: {\r\n                label: game.i18n.localize('SR5.Roll'),\r\n                icon: '<i class=\"fas fa-dice-six\"></i>'\r\n            },\r\n            cancel: {\r\n                label: game.i18n.localize('SR5.Dialogs.Common.Cancel')\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Callback for after the dialoge has closed.\r\n     * @param html\r\n     */\r\n    onAfterClose(html: JQuery<HTMLElement>): SuccessTestData {\r\n        return this.data.test.data;\r\n    }\r\n\r\n    /**\r\n     * Update ValueField data used on the template and alter automatic calculation with manual override values, where\r\n     * necessary.\r\n     *\r\n     * @param data An object with keys in Foundry UpdateData style {'key.key.key': value}\r\n     */\r\n    _updateData(data) {\r\n        // The user canceled their interaction by cancenling, don't apply form changes.\r\n        if (this.selectedButton === 'cancel') return;\r\n\r\n        // First, apply changes to ValueField style values in a way that makes sense.\r\n        Object.entries(data).forEach(([key, value]) => {\r\n            // key is expected to be relative from TestDialog.data and begin with 'test'\r\n            // @ts-ignore\r\n            const valueField = foundry.utils.getProperty(this.data, key);\r\n            if (foundry.utils.getType(valueField) !== 'Object' || !valueField.hasOwnProperty('mod')) return;\r\n\r\n            // Remove from further automatic data merging.\r\n            delete data[key]\r\n\r\n            // Don't apply an unneeded override.\r\n            if (valueField.value === value) return;\r\n\r\n            if (value === null || value === '')\r\n                delete valueField.override\r\n            else\r\n                valueField.override = {name: 'SR5.ManualOverride', value: Number(value)};\r\n        });\r\n\r\n        // Second, apply generic values.\r\n        // @ts-ignore\r\n        foundry.utils.mergeObject(this.data, data);\r\n\r\n        // Give tests opportunity to change resulting values on the fly.\r\n        this.data.test.prepareBaseValues();\r\n        this.data.test.calculateBaseValues();\r\n    }\r\n}", "import { SR5Item } from './item/SR5Item';\r\n\r\nexport default class Template extends MeasuredTemplate {\r\n    x: number;\r\n    y: number;\r\n    item?: SR5Item;\r\n    onComplete?: () => void;\r\n\r\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\r\n        if (!canvas.scene) return;\r\n        \r\n        // Cast string to const for type const string union to match.\r\n        const templateShape = 'circle' as const;\r\n\r\n        const templateData = {\r\n            t: templateShape,\r\n            user: game.user?.id,\r\n            direction: 0,\r\n            x: 0,\r\n            y: 0,\r\n            fillColor: game.user?.color,\r\n        };\r\n\r\n        // Either use blast data or default values.\r\n        const blast = item.getBlastData();\r\n        // Not all items return blast data.\r\n        templateData['distance'] = blast?.radius || 1; // Adhere to DataModel validation.\r\n        templateData['dropoff'] = blast?.dropoff || 0;\r\n\r\n        const document = new MeasuredTemplateDocument(templateData, {parent: canvas.scene});\r\n        // @ts-ignore\r\n        const template = new Template(document);\r\n        template.item = item;\r\n        template.onComplete = onComplete;\r\n        return template;\r\n    }\r\n\r\n    async drawPreview() {\r\n        if (!canvas.ready || !this.layer.preview) return;\r\n\r\n        const initialLayer = canvas.activeLayer;\r\n        if (!initialLayer) return;\r\n\r\n        await this.draw();\r\n        this.layer.activate();\r\n        this.layer.preview.addChild(this);\r\n        this.activatePreviewListeners(initialLayer);\r\n    }\r\n\r\n    activatePreviewListeners(initialLayer: CanvasLayer) {\r\n        if (!canvas.ready || !canvas.stage || !canvas.app) return;\r\n\r\n        const handlers = {};\r\n        let moveTime = 0;\r\n\r\n        // Update placement (mouse-move)\r\n        handlers['mm'] = (event) => {\r\n            event.stopPropagation();\r\n            if (!canvas.grid) return;\r\n            let now = Date.now(); // Apply a 20ms throttle\r\n            if (now - moveTime <= 20) return;\r\n            const mousePos = event.data.getLocalPosition(this.layer);\r\n            const snapped = canvas.grid.getSnappedPosition(mousePos.x, mousePos.y, 2);\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            this.document.updateSource({x: snapped.x, y: snapped.y})\r\n            // this.data.x = snapped.x;\r\n            // this.data.y = snapped.y;\r\n            this.refresh();\r\n            moveTime = now;\r\n        };\r\n\r\n        // Cancel the workflow (right-click)\r\n        handlers['rc'] = () => {\r\n            if (!canvas.ready || !this.layer.preview || !canvas.stage || !canvas.app) return;\r\n\r\n            this.layer.preview.removeChildren();\r\n            canvas.stage.off('mousemove', handlers['mm']);\r\n            canvas.stage.off('mousedown', handlers['lc']);\r\n            canvas.app.view.oncontextmenu = null;\r\n            canvas.app.view.onwheel = null;\r\n            initialLayer.activate();\r\n\r\n            if (this.onComplete) this.onComplete();\r\n        };\r\n\r\n        // Confirm the workflow (left-click)\r\n        handlers['lc'] = (event) => {\r\n            // Trigger cancel to remove event listeners.\r\n            handlers['rc'](event);\r\n            \r\n            if (!canvas.grid) return;\r\n\r\n            // Transform mouse position into grid position\r\n            const gridPos = canvas.grid.getSnappedPosition(this.x, this.y, 2);\r\n            \r\n            // Prepare measued template data.\r\n            const templateData = this.document.toObject();\r\n            templateData.x = gridPos.x;\r\n            templateData.y = gridPos.y;\r\n\r\n            // Create new document from that.\r\n            canvas.scene?.createEmbeddedDocuments('MeasuredTemplate', [templateData]);\r\n        };\r\n\r\n        // Rotate the template by 3 degree increments (mouse-wheel)\r\n        handlers['mw'] = (event) => {\r\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\r\n            event.stopPropagation();\r\n            if (!canvas.grid) return;\r\n\r\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\r\n            let snap = event.shiftKey ? delta : 5;\r\n\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            const direction = this.document.direction + snap * Math.sign(event.deltaY);\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            this.document.updateSource({direction})\r\n            this.refresh();\r\n        };\r\n\r\n        // Activate listeners\r\n        canvas.stage.on('mousemove', handlers['mm']);\r\n        canvas.stage.on('mousedown', handlers['lc']);\r\n        canvas.app.view.oncontextmenu = handlers['rc'];\r\n        canvas.app.view.onwheel = handlers['mw'];\r\n    }\r\n}\r\n", "\r\nexport const TestRules = {\r\n\r\n    /**\r\n     * The modifier value applied for each extended test iteration\r\n     */\r\n    extendedModifierValue: -1,\r\n\r\n    /**\r\n     * Calculate the modifier for the next extended test run.\r\n     *\r\n     * @param current The current extended test modifier or zero.\r\n     */\r\n    calcNextExtendedModifier: (current: number = 0): number => {\r\n        return current + TestRules.extendedModifierValue;\r\n    },\r\n\r\n    /**\r\n     * Can a test be extended using the given pool value\r\n     * @param pool The pool of the test to be extended.\r\n     * @param threshold The extended test threshold to be met\r\n     * @param extendedHits The summed up hits across all test iterations\r\n     * @returns When true, test can be extended.\r\n     */\r\n    canExtendTest: (pool: number, threshold: number, extendedHits: number): boolean => {\r\n        // An extended test without a threshold set can extend until no pool is left.\r\n        if (threshold > 0)\r\n            return extendedHits < threshold && pool > 0;\r\n\r\n        return pool > 0;\r\n    },\r\n\r\n    /**\r\n     * Has a Success Test been successful?\r\n     * @param hits Amount of hits (reduced by limit) scored on a test\r\n     * @param threshold Threshold to reach for a test. 0 should none be applied.\r\n     * @returns true, when hits vs threshold score a success\r\n     */\r\n    success:(hits: number, threshold: number): boolean => {\r\n        // Don't allow any negative values.\r\n        hits = Math.max(hits, 0);\r\n        threshold = Math.max(threshold, 0);\r\n\r\n        // Either check against meeting the threshold or simply any hits.\r\n        if (threshold > 0) return hits >= threshold;\r\n        else return hits > 0;\r\n    },\r\n\r\n    /**\r\n     * Has a Success Test glitched?\r\n     *\r\n     * @param glitches The amount of dice with glitch value\r\n     * @param pool The amount of dice used for the test as a whole\r\n     * @returns If true, the given success test values result in a glitched test\r\n     */\r\n    glitched: (glitches: number, pool: number): boolean => {\r\n        // Don't allow any negative values.\r\n        glitches = Math.max(glitches, 0);\r\n        pool = Math.max(pool, 1);\r\n\r\n        return glitches > Math.floor(pool / 2);\r\n    },\r\n\r\n    /**\r\n     * Has a Success Test glitched critically?\r\n     *\r\n     * @param success Has a test been a success?\r\n     * @param glitched Has a test been glitched?\r\n     */\r\n    criticalGlitched: (success: boolean, glitched: boolean): boolean => {\r\n        return !success && glitched;\r\n    }\r\n}", "import { DamageApplicationFlow } from './../actor/flows/DamageApplicationFlow';\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SR, SYSTEM_NAME} from \"../constants\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport {SR5Roll} from \"../rolls/SR5Roll\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {TestDialog} from \"../apps/dialogs/TestDialog\";\r\nimport {SR5} from \"../config\";\r\nimport {ActionFlow} from \"../item/flows/ActionFlow\";\r\nimport ValueField = Shadowrun.ValueField;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport OpposedTestData = Shadowrun.OpposedTestData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ActionResultData = Shadowrun.ActionResultData;\r\nimport ResultActionData = Shadowrun.ResultActionData;\r\nimport {TestCreator} from \"./TestCreator\";\r\nimport Template from \"../template\";\r\nimport {TestRules} from \"../rules/TestRules\";\r\n\r\nimport {ActionResultFlow} from \"../item/flows/ActionResultFlow\";\r\n\r\nexport interface TestDocuments {\r\n    actor?: SR5Actor\r\n    item?: SR5Item\r\n    rolls?: SR5Roll[]\r\n}\r\n\r\nexport interface TestValues {\r\n    [name: string]: ValueField | DamageData\r\n}\r\n\r\nexport interface SuccessTestValues extends TestValues {\r\n    hits: ValueField\r\n    netHits: ValueField\r\n    glitches: ValueField\r\n    extendedHits: ValueField\r\n}\r\n\r\n\r\n/**\r\n * Contain all data necessary to handle an action based test.\r\n */\r\nexport interface TestData {\r\n    title?: string\r\n    // TODO: implement typing method to apply effects to and for ations.\r\n    // TODO: Show set of test types here\r\n    type?: string\r\n\r\n    // Shadowrun 5 related test values.\r\n    // TODO: Think about moving these into general values. This would allow ActiveEffects to only target .values\r\n    pool: ValueField\r\n    threshold: ValueField\r\n    limit: ValueField\r\n\r\n    // TODO: Is this still necessary?\r\n    values: TestValues\r\n\r\n    damage: DamageData\r\n\r\n    // A list of modifier descriptions to be used for this test.\r\n    // These are designed to work with SR5Actor.getModifier()\r\n    // modifiers: Record<ModifierTypes, TestModifier>\r\n    modifiers: ValueField\r\n\r\n    // Edge related triggers\r\n    pushTheLimit: boolean\r\n    secondChance: boolean\r\n\r\n    // When true this test is an extended test\r\n    extended: boolean\r\n\r\n    // The source action this test is derived from.\r\n    action: ActionRollData\r\n\r\n    // Documents the test might has been derived from.\r\n    sourceItemUuid?: string\r\n    sourceActorUuid?: string\r\n\r\n    // Message the test has been represented with.\r\n    messageUuid?: string\r\n\r\n    // Options the test was created with.\r\n    options?: TestOptions\r\n\r\n    // Has this test been cast before\r\n    evaluated: boolean\r\n}\r\n\r\nexport interface SuccessTestData extends TestData {\r\n    opposed: OpposedTestData\r\n    values: SuccessTestValues\r\n    // Scene Token Ids marked as targets of this test.\r\n    targetActorsUuid: string[]\r\n}\r\n\r\nexport interface TestOptions {\r\n    showDialog?: boolean // Show dialog when defined as true.\r\n    showMessage?: boolean // Show message when defined as true.\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes\r\n}\r\n\r\nexport interface SuccessTestMessageData {\r\n    data: SuccessTestData,\r\n    rolls: SR5Roll[]\r\n}\r\n\r\n/**\r\n * General handling of Shadowrun 5e success tests.\r\n *\r\n * This class handles all Shadowrun 5 rules surround success tests,\r\n * except for the dice rolling itself as well the flow handling of multi roll tests.\r\n *\r\n * TODO: Check if Actor.getRollData() can be used to better implement this\r\n * TODO: Add unittesting.\r\n * TODO: Remove edge related data from options. Only use options for general test related handling, not shadowrun interal stuff.\r\n */\r\nexport class SuccessTest {\r\n    public data: SuccessTestData;\r\n    public actor: SR5Actor | undefined;\r\n    public item: SR5Item | undefined;\r\n    public rolls: SR5Roll[];\r\n\r\n    public targets: TokenDocument[];\r\n\r\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\r\n        // Store given documents to avoid later fetching.\r\n        this.actor = documents?.actor;\r\n        this.item = documents?.item;\r\n        this.rolls = documents?.rolls || [];\r\n        this.targets = [];\r\n\r\n        options = options || {}\r\n\r\n        this.data = this._prepareData(data, options);\r\n\r\n        this.calculateBaseValues();\r\n\r\n        console.log(`Shadowrun 5e | Created ${this.constructor.name} Test`, this);\r\n    }\r\n\r\n    /**\r\n     * Make sure a test has a complete data structure, even if supplied data doesn't fully provide that.\r\n     *\r\n     * Any Test should be usable simply by instantiating it with empty TestData\r\n     *\r\n     * @param data\r\n     * @param options\r\n     */\r\n    _prepareData(data, options: TestOptions) {\r\n        data.type = data.type || this.type;\r\n\r\n        // Store the current users targeted token ids for later use.\r\n        // @ts-ignore // undefined isn't allowed but excluded.\r\n        data.targetActorsUuid = data.targetActorsUuid || Helpers.getUserTargets().map(token => token.actor?.uuid).filter(uuid => !!uuid);\r\n\r\n        // Store given document uuids to be fetched during evaluation.\r\n        data.sourceActorUuid = data.sourceActorUuid || this.actor?.uuid;\r\n        data.sourceItemUuid = data.sourceItemUuid || this.item?.uuid;\r\n\r\n        // @ts-ignore // Prepare general test information.\r\n        data.title = data.title || this.constructor.label;\r\n\r\n        // @ts-ignore // In FoundryVTT core settings we shall trust.\r\n        options.rollMode = options.rollMode !== undefined ? options.rollMode : game.settings.get(CORE_NAME, CORE_FLAGS.RollMode);\r\n        options.showDialog = options.showDialog !== undefined ? options.showDialog : true;\r\n        options.showMessage = options.showMessage !== undefined ? options.showMessage : true;\r\n\r\n        // Options will be used when a test is reused further on.\r\n        data.options = options;\r\n\r\n        // Keep previous evaluation state.\r\n        data.evaluated = data.evaluated ?? false;\r\n\r\n        data.pushTheLimit = data.pushTheLimit !== undefined ? data.pushTheLimit : false;\r\n        data.secondChance = data.secondChance !== undefined ? data.secondChance : false;\r\n\r\n        // Set possible missing values.\r\n        data.pool = data.pool || DefaultValues.valueData({label: 'SR5.DicePool'});\r\n        data.threshold = data.threshold || DefaultValues.valueData({label: 'SR5.Threshold'});\r\n        data.limit = data.limit || DefaultValues.valueData({label: 'SR5.Limit'});\r\n\r\n        data.values = data.values || {};\r\n\r\n        // Prepare basic value structure to allow an opposed tests to access derived values before execution with placeholder\r\n        // active tests.\r\n        data.values.hits = data.values.hits || DefaultValues.valueData({label: \"SR5.Hits\"});\r\n        data.values.extendedHits = data.values.extendedHits || DefaultValues.valueData({label: \"SR5.ExtendedHits\"});\r\n        data.values.netHits = data.values.netHits || DefaultValues.valueData({label: \"SR5.NetHits\"});\r\n        data.values.glitches = data.values.glitches || DefaultValues.valueData({label: \"SR5.Glitches\"});\r\n\r\n        data.opposed = data.opposed || undefined;\r\n        data.modifiers = this._prepareModifiersData(data.modifiers);\r\n\r\n        data.damage = data.damage || DefaultValues.damageData();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Prepare a default modifier object.\r\n     *\r\n     * This should be used for whenever a Test doesn't modifiers specified externally.\r\n     */\r\n    _prepareModifiersData(modifiers?: ValueField) {\r\n        return modifiers || DefaultValues.valueData({label: 'SR5.Labels.Action.Modifiers'});\r\n    }\r\n\r\n    get type(): string {\r\n        return this.constructor.name;\r\n    }\r\n\r\n    get evaluated(): boolean {\r\n        return this.data.evaluated;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            data: this.data,\r\n            rolls: this.rolls\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the lowest side for a Shadowrun 5 die to count as a success\r\n     * TODO: Implement edge rules.\r\n     */\r\n    static get lowestSuccessSide(): number {\r\n        return Math.min(...SR.die.success);\r\n    }\r\n\r\n    /**\r\n     * Get the lowest side for a Shadowrun 5 die to count as a glitch.\r\n     * TODO: Implement edge rules.\r\n     */\r\n    static get lowestGlitchSide(): number {\r\n        return Math.min(...SR.die.glitch);\r\n    }\r\n\r\n    /**\r\n     * Get a possible globally defined default action set for this test class.\r\n     */\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Get a document defined action set for this test class.\r\n     *\r\n     * Subclasses can use this to provide actor or item based action configurations that aren't\r\n     * directly part of the action template.\r\n     *\r\n     * @param item The item holding the action configuration.\r\n     * @param actor The actor used for value calculation.\r\n     */\r\n    static async _getDocumentTestAction(item: SR5Item, actor: SR5Actor): Promise<Partial<MinimalActionData>> {\r\n        return {};\r\n    }\r\n\r\n    static async _prepareActionTestData(action: ActionRollData, actor: SR5Actor, data) {\r\n        return TestCreator._prepareTestDataWithAction(action, actor, data);\r\n    }\r\n\r\n    /**\r\n     * Create test data from an opposed message action.\r\n     *\r\n     * This method is meant to be overridden if this testing class supports\r\n     * testing against an opposed message action.\r\n     *\r\n     * If this test class doesn't support this opposed message actions it will\r\n     * return undefined.\r\n     *\r\n     * @param testData The original test that's opposed.\r\n     * @param actor The actor for this opposing test.\r\n     * @param previousMessageId The id this message action is sourced from.\r\n     */\r\n    static async _getOpposedActionTestData(testData, actor: SR5Actor, previousMessageId: string): Promise<SuccessTestData | undefined> {\r\n        console.error(`Shadowrun 5e | Testing Class ${this.name} doesn't support opposed message actions`);\r\n        return;\r\n    }\r\n\r\n    static get label(): string {\r\n        return `SR5.Tests.${this.name}`;\r\n    }\r\n\r\n    /**\r\n     * Determine if this test has any kind of modifier types active\r\n     */\r\n    get hasModifiers(): boolean {\r\n        return this.data.modifiers.mod.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Create the default formula for this test based on it's pool\r\n     *\r\n     * FoundryVTT documentation:\r\n     * Shadowrun5e: SR5#44\r\n     *\r\n     */\r\n    get formula(): string {\r\n        const pool = Helpers.calcTotal(this.data.pool, {min: 0});\r\n        return this.buildFormula(pool, this.hasPushTheLimit);\r\n    }\r\n\r\n    /**\r\n     * Build a Foundry Roll formula string\r\n     * \r\n     * Dice:       https://foundryvtt.com/article/dice-advanced/\r\n     * Modifiers:  https://foundryvtt.com/article/dice-modifiers/\r\n     * \r\n     * @param dice Amount of d6 to use.\r\n     * @param explode Should the d6 be exploded.\r\n     * @returns The complete formula string.\r\n     */\r\n    buildFormula(dice: number, explode: boolean): string {\r\n        // Apply dice explosion, removing the limit is done outside the roll.\r\n        const explodeFormula = explode ? 'x6' : '';\r\n        return `(${dice})d6cs>=${SuccessTest.lowestSuccessSide}${explodeFormula}`;\r\n    }\r\n\r\n    /**\r\n     * Give a representation of this success test in the common Shadowrun 5 description style.\r\n     * The code given is meant to provide information about value sources. Should a user overwrite\r\n     * these values during dialog review, keep those hidden.\r\n     *\r\n     * Automatics + Agility + 3 (3) [2 + Physical]\r\n     */\r\n    get code(): string {\r\n        // Add action dynamic value sources as labels.\r\n        let pool = this.pool.mod.filter(mod => mod.value !== 0).map(mod => `${game.i18n.localize(mod.name)} ${mod.value}`); // Dev code for pool display. This should be replaced by attribute style value calculation info popup\r\n        // let pool = this.pool.mod.map(mod => `${game.i18n.localize(mod.name)} (${mod.value})`);\r\n\r\n        // Threshold and Limit are values that can be overwritten.\r\n        let threshold = this.threshold.override\r\n            ? [game.i18n.localize(this.threshold.override.name)]\r\n            : this.threshold.mod.map(mod => game.i18n.localize(mod.name));\r\n        let limit = this.limit.override\r\n            ? [game.i18n.localize(this.limit.override.name)]\r\n            : this.limit.mod.map(mod => game.i18n.localize(mod.name));\r\n\r\n\r\n        // Add action static value modifiers as numbers.\r\n        if (this.pool.base > 0) pool.push(String(this.pool.base));\r\n        if (this.threshold.base > 0 && !this.threshold.override) threshold.push(String(this.threshold.base));\r\n        if (this.limit.base > 0 && !this.limit.override) limit.push(String(this.limit.base));\r\n\r\n        // Pool portion can be dynamic or static.\r\n        let code = pool.join(' + ').trim() || `${this.pool.value}`;\r\n\r\n        // Only add threshold / limit portions when appropriate.\r\n        if (threshold.length > 0 && this.threshold.value > 0) code = `${code} (${threshold.join(' + ').trim()})`;\r\n        if (limit.length > 0 && this.limit.value > 0) code = `${code} [${limit.join(' + ').trim()}]`;\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Determine if this test can have a human-readable shadowrun test code representation.\r\n     *\r\n     * All parts of the test code can be dynamic, any will do.\r\n     */\r\n    get hasCode(): boolean {\r\n        return this.pool.mod.length > 0 || this.threshold.mod.length > 0 || this.limit.mod.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Overwrite this method to alter the title of test dialogs and messages.\r\n     */\r\n    get title(): string {\r\n        // @ts-ignore\r\n        return `${game.i18n.localize(this.constructor.label)}`;\r\n    }\r\n\r\n    /**\r\n     * Helper method to create the main SR5Roll.\r\n     */\r\n    createRoll(): SR5Roll {\r\n        // TODO: Add typing for rolls?\r\n        // @ts-ignore\r\n        const roll = new SR5Roll(this.formula) as unknown as SR5Roll;\r\n        this.rolls.push(roll);\r\n        return roll;\r\n    }\r\n\r\n    get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/success-test-dialog.html';\r\n    }\r\n\r\n    get _chatMessageTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/success-test-message.html';\r\n    }\r\n\r\n    /**\r\n     * What TestDialog class to use for this test type?\r\n     *\r\n     * If you only need to display differing data you can also only define a different _dialogTemplate\r\n     * @override This method if you want to use a different TestDialog.\r\n     */\r\n    _createTestDialog() {\r\n        return new TestDialog({test: this, templatePath: this._dialogTemplate});\r\n    }\r\n\r\n    /**\r\n     * Supress dialog during execution\r\n     */\r\n    hideDialog() {\r\n        if (!this.data.options) this.data.options = {};\r\n        this.data.options.showDialog = false;\r\n    }\r\n\r\n    /**\r\n     * Show the dialog class for this test type and alter test according to user selection.\r\n     */\r\n    async showDialog(): Promise<boolean> {\r\n        if (!this.data.options?.showDialog) return true;\r\n\r\n        const dialog = this._createTestDialog();\r\n\r\n        const data = await dialog.select();\r\n        if (dialog.canceled) return false;\r\n\r\n        // Overwrite current test state with whatever the dialog gives.\r\n        this.data = data;\r\n        await this.saveUserSelectionAfterDialog();\r\n\r\n        // Second base value preparation will show changes due to user input.\r\n        this.prepareBaseValues();\r\n        this.calculateBaseValues();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Override this method if you want to save any document data after a user has selected values\r\n     * during user facing dialog.\r\n     */\r\n    async saveUserSelectionAfterDialog() {}\r\n\r\n    /**\r\n     * Allow sub-classes to alter the base value calculation.\r\n     * \r\n     * This can be used to dynamically alter action calculation before anything else.\r\n     */\r\n    alterBaseValues() {}\r\n\r\n    /**\r\n     * Overwrite this method if you need to alter base values.\r\n     */\r\n    prepareBaseValues() {\r\n        this.applyPushTheLimit();\r\n        this.applyPoolModifiers();\r\n    }\r\n\r\n    /**\r\n     * Handle chosen modifier types and apply them to the pool modifiers.\r\n     * \r\n     * NOTE: To keep this.pool.mod and this.modifiers.mod in sync, never remove\r\n     *       a modifier. Rather set it to zero, causing it to not be shown.\r\n     */\r\n    applyPoolModifiers() {\r\n        const pool = new PartsList(this.pool.mod);\r\n\r\n        // Remove override modifier from pool.\r\n        pool.removePart('SR5.Labels.Action.Modifiers');\r\n\r\n        // If applicable apply only override to pool. (User interaction)\r\n        if (this.data.modifiers.override) {\r\n            // Remove all modifiers and only apply override.\r\n            for (const modifier of this.data.modifiers.mod) {\r\n                pool.removePart(modifier.name);\r\n            }\r\n\r\n            pool.addUniquePart('SR5.Labels.Action.Modifiers', this.data.modifiers.override.value)\r\n            return;\r\n        }\r\n\r\n        // Otherwise apply automated modifiers to pool.\r\n        for (const modifier of this.data.modifiers.mod) {\r\n            // A modifier might have been asked for, but not given by the actor.\r\n            pool.addUniquePart(modifier.name, modifier.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate only the base test that can be calculated before the test has been evaluated.\r\n     */\r\n    calculateBaseValues() {\r\n        this.data.modifiers.value = Helpers.calcTotal(this.data.modifiers);\r\n\r\n        this.data.pool.value = Helpers.calcTotal(this.data.pool, {min: 0});\r\n        this.data.threshold.value = Helpers.calcTotal(this.data.threshold, {min: 0});\r\n        this.data.limit.value = Helpers.calcTotal(this.data.limit, {min: 0});\r\n\r\n        console.debug(`Shadowrun 5e | Calculated base values for ${this.constructor.name}`, this.data);\r\n    }\r\n\r\n    /**\r\n     * Helper method to evaluate the internal SR5Roll and SuccessTest values.\r\n     */\r\n    async evaluate(): Promise<this> {\r\n        // Evaluate all rolls.\r\n        for (const roll of this.rolls) {\r\n            // @ts-ignore // foundry-vtt-types is missing evaluated.\r\n            if (!roll._evaluated)\r\n                await roll.evaluate({async: true});\r\n        }\r\n\r\n        this.data.evaluated = true;\r\n        this.calculateDerivedValues();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allow subclasses to populate a test before execution and any other steps.\r\n     */\r\n    async populateTests() {}\r\n\r\n    /**\r\n     * Rehydrate this test with Documents, should they be missing.\r\n     * This can happen when a test is created from a ChatMessage.\r\n     */\r\n    async populateDocuments() {\r\n        // Fetch documents, when no reference has been made yet.\r\n        if (!this.actor && this.data.sourceActorUuid) {\r\n            // SR5Actor.uuid will return an actor id for linked actors but its token id for unlinked actors\r\n            const document = await fromUuid(this.data.sourceActorUuid) || undefined;\r\n            // @ts-ignore\r\n            this.actor = document instanceof TokenDocument ?\r\n                document.actor :\r\n                document as SR5Actor;\r\n        }\r\n        if (!this.item && this.data.sourceItemUuid)\r\n            this.item = await fromUuid(this.data.sourceItemUuid) as SR5Item || undefined;\r\n        if (this.targets.length === 0 && this.data.targetActorsUuid) {\r\n            this.targets = [];\r\n            for (const uuid of this.data.targetActorsUuid) {\r\n                const document = await fromUuid(uuid);\r\n                if (!document) continue;\r\n\r\n                const token = document instanceof SR5Actor ? document.getToken() : document;\r\n                if (!(token instanceof TokenDocument)) continue;\r\n\r\n                this.targets.push(token as TokenDocument);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare missing data based on tests Documents before anything else is done.\r\n     */\r\n    async prepareDocumentData() {\r\n        // Calculate damage here to have access to actor AND item used.\r\n        this.data.damage = ActionFlow.calcDamage(this.data.damage, this.actor, this.item);\r\n    }\r\n\r\n    /**\r\n     * What modifiers should be used for this test type by default.\r\n     *\r\n     * NOTE: These modifiers are routed through ModifierFlow.totalFor()\r\n     */\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds'];\r\n    }\r\n\r\n    /**\r\n     * Prepare modifiers based on connected documents.\r\n     *\r\n     * Main purpose is to populate the configured modifiers for this test based on actor / items used.\r\n     */\r\n    async prepareDocumentModifiers()  {\r\n        await this.prepareActorModifiers();\r\n        await this.prepareItemModifiers();\r\n    }\r\n\r\n    /**\r\n     * Prepare general modifiers based on the actor, as defined within the action or test implementation.\r\n     */\r\n    async prepareActorModifiers() {\r\n        if (!this.actor) return;\r\n        // Don't use default test actions when source action provides modifiers.\r\n        if (this.data.action.modifiers.length > 0) return;\r\n\r\n        for (const type of this.testModifiers) {\r\n            const {name, value} = await this.prepareActorModifier(this.actor, type);\r\n            PartsList.AddUniquePart(this.data.modifiers.mod, name, value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare a single modifier.\r\n     * \r\n     * Extend this method should you want to alter a single modifiers application.\r\n     * \r\n     * @param actor The actor to fetch modifier information for.\r\n     * @param type The modifier type to be prepared.\r\n     */\r\n    async prepareActorModifier(actor: SR5Actor, type: ModifierTypes): Promise<{name: string, value: number}> {\r\n        const value = await actor.modifiers.totalFor(type);\r\n        const name = this._getModifierTypeLabel(type);\r\n\r\n        return {name, value};\r\n    }\r\n\r\n    _getModifierTypeLabel(type: ModifierTypes): string {\r\n        return SR5.modifierTypes[type];\r\n    }\r\n\r\n    /**\r\n     * Allow subclasses to alter test modifiers based on the item used for casting.\r\n     */\r\n    async prepareItemModifiers() {}\r\n\r\n    /**\r\n     * Calculate the total of all values.\r\n     */\r\n    calculateDerivedValues() {\r\n        // Calculate all derived / static values. Order is important.\r\n        this.data.values.hits = this.calculateHits();\r\n        this.data.values.extendedHits = this.calculateExtendedHits();\r\n        this.data.values.netHits = this.calculateNetHits();\r\n        this.data.values.glitches = this.calculateGlitches();\r\n\r\n        console.debug(`Shadowrun 5e | Calculated derived values for ${this.constructor.name}`, this.data);\r\n    }\r\n\r\n    /**\r\n     * Helper to get the pool value for this success test.\r\n     */\r\n    get pool(): ValueField {\r\n        return this.data.pool;\r\n    }\r\n\r\n    /**\r\n     * Helper to get the total limit value for this success test.\r\n     */\r\n    get limit(): ValueField {\r\n        return this.data.limit;\r\n    }\r\n\r\n    /**\r\n     * Helper to determine if this success test uses a limit.\r\n     *\r\n     * NOTE: Limits will NEVER apply when the ApplyLimit setting is set accordingly.\r\n     */\r\n    get hasLimit(): boolean {\r\n        const applyLimit = game.settings.get(SYSTEM_NAME, FLAGS.ApplyLimits) as boolean;\r\n        return applyLimit && !this.hasPushTheLimit && this.limit.value > 0;\r\n    }\r\n\r\n    /**\r\n     * Helper to determine if the hits have been lowered by the limit.\r\n     *\r\n     * This will compare actual roll hits, without applied limit.\r\n     */\r\n    get hasReducedHits(): boolean {\r\n        return this.hits.value > this.limit.value;\r\n    }\r\n\r\n    /**\r\n     * Helper to get the total threshold value for this success test.\r\n     */\r\n    get threshold(): ValueField {\r\n        return this.data.threshold;\r\n    }\r\n\r\n    /**\r\n     * Helper to determine if this success test uses a threshold.\r\n     */\r\n    get hasThreshold(): boolean {\r\n        return this.threshold.value > 0;\r\n    }\r\n\r\n    /**\r\n     * Helper to get the net hits value for this success test with a possible threshold.\r\n     */\r\n    calculateNetHits(): ValueField {\r\n        // An extended test will use summed up extended hit, while a normal test will use its own hits.\r\n        const hits = this.extended ? this.extendedHits : this.hits;\r\n\r\n        // Maybe lower hits by threshold to get the actual net hits.\r\n        const base = this.hasThreshold ?\r\n            Math.max(hits.value - this.threshold.value, 0) :\r\n            hits.value;\r\n\r\n        // Calculate a ValueField for standardisation.\r\n        const netHits = DefaultValues.valueData({\r\n            label: \"SR5.NetHits\",\r\n            base\r\n        });\r\n        netHits.value = Helpers.calcTotal(netHits, {min: 0});\r\n\r\n        return netHits;\r\n    }\r\n\r\n    get netHits(): ValueField {\r\n        return this.data.values.netHits;\r\n    }\r\n\r\n    /**\r\n     * Helper to get the hits value for this success test with a possible limit.\r\n     */\r\n    calculateHits(): ValueField {\r\n        const rollHits = this.rolls.reduce((hits, roll) => hits + roll.hits, 0);\r\n        const hits = DefaultValues.valueData({\r\n            label: \"SR5.Hits\",\r\n            base: this.hasLimit ?\r\n                Math.min(this.limit.value, rollHits) :\r\n                rollHits\r\n        });\r\n        hits.value = Helpers.calcTotal(hits, {min: 0});\r\n\r\n        return hits;\r\n    }\r\n\r\n    get hits(): ValueField {\r\n        return this.data.values.hits;\r\n    }\r\n\r\n    get extendedHits(): ValueField {\r\n        // Return a default value field, for when no extended hits have been derived yet (or ever).\r\n        return this.data.values.extendedHits || DefaultValues.valueData({label: 'SR5.ExtendedHits'});\r\n    }\r\n\r\n    /**\r\n     * Helper to get the glitches values for this success test.\r\n     */\r\n    calculateGlitches(): ValueField {\r\n        const rollGlitches = this.rolls.reduce((glitches, roll) => glitches + roll.glitches, 0);\r\n        const glitches = DefaultValues.valueData({\r\n            label: \"SR5.Glitches\",\r\n            base: rollGlitches\r\n        })\r\n        glitches.value = Helpers.calcTotal(glitches, {min: 0});\r\n\r\n        return glitches;\r\n    }\r\n\r\n    /**\r\n     * Gather hits across multiple extended test executions.\r\n     */\r\n    calculateExtendedHits(): ValueField {\r\n        if (!this.extended) return DefaultValues.valueData({label: 'SR5.ExtendedHits'});\r\n\r\n        const extendedHits = this.extendedHits;\r\n        extendedHits.mod = PartsList.AddPart(extendedHits.mod, 'SR5.Hits', this.hits.value);\r\n\r\n        Helpers.calcTotal(extendedHits, {min: 0});\r\n\r\n        return extendedHits;\r\n    }\r\n\r\n    /**\r\n     * Helper to check if this test is currently being extended.\r\n     */\r\n    get extended(): boolean {\r\n        return this.canBeExtended && this.data.extended;\r\n    }\r\n\r\n    /**\r\n     * Can this test type be extended or not?\r\n     *\r\n     * If false, will hide extended dialog settings.\r\n     */\r\n    get canBeExtended(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get glitches(): ValueField {\r\n        return this.data.values.glitches;\r\n    }\r\n\r\n    /**\r\n     * Helper to check if the current test state is glitched.\r\n     */\r\n    get glitched(): boolean {\r\n        return TestRules.glitched(this.glitches.value, this.pool.value);\r\n    }\r\n\r\n    /**\r\n     * Helper to check if the current test state is critically glitched.\r\n     */\r\n    get criticalGlitched(): boolean {\r\n        return TestRules.criticalGlitched(this.success, this.glitched);\r\n    }\r\n\r\n    /**\r\n     * Check if the current test state is successful.\r\n     * \r\n     * @returns true on a successful test\r\n     */\r\n    get success(): boolean {\r\n        // Extended tests use the sum of all extended hits.\r\n        const hits = this.extended ? this.extendedHits : this.hits;\r\n        return TestRules.success(hits.value, this.threshold.value);\r\n    }\r\n\r\n    /**\r\n     * Check if the current test state is unsuccessful.\r\n     * \r\n     * @returns true on a failed test\r\n     */\r\n    get failure(): boolean {\r\n        // Allow extended tests without a threshold and avoid 'failure' confusion.\r\n        if (this.extended && this.threshold.value === 0) return true;\r\n        // When extendedHits have been collected, check against threshold.\r\n        if (this.extendedHits.value > 0 && this.threshold.value > 0) return this.extendedHits.value < this.threshold.value;\r\n        // Otherwise fall back to 'whatever is not a success.\r\n        return !this.success;\r\n    }\r\n\r\n    /**\r\n     * Use this method for subclasses which can't reasonably be successful.\r\n     */\r\n    get canSucceed(): boolean {\r\n        // Not extended tests can succeed normally.\r\n        if (!this.extended) return true;\r\n\r\n        // Extended tests can only succeed when a threshold is set.\r\n        return this.extended && this.hasThreshold;\r\n    }\r\n\r\n    /**\r\n     * Use this method for subclasses which can't reasonably fail.\r\n     */\r\n    get canFail(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * While a test might be successfull with a zero threshold, it's\r\n     * unclear if it's meant to be a sucsess.\r\n     * \r\n     * Tests that don't know their threshold, either by GM secrecy or\r\n     * following opposed tests not yet thrown, shouldn't show user\r\n     * their successful.\r\n     */\r\n    get showSuccessLabel(): boolean {\r\n        return this.success && this.hasThreshold;\r\n    }\r\n\r\n    /**\r\n     * How to call a successful test of this type.\r\n     */\r\n    get successLabel(): string {\r\n        return 'SR5.Success';\r\n    }\r\n\r\n    /**\r\n     * How to call a failed test of this type.\r\n     */\r\n    get failureLabel(): string {\r\n        if (this.extended) return 'SR5.Results';\r\n        return 'SR5.Failure';\r\n    }\r\n\r\n    /**\r\n     * Helper to check if opposing tests exist for this test.\r\n     */\r\n    get opposed(): boolean {\r\n        return !!this.data.opposed && this.data.opposed.test !== '';\r\n    }\r\n\r\n    /**\r\n     * Determine if this test is opposing another test.\r\n     */\r\n    get opposing(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Helper to get an items action result information.\r\n     */\r\n    get results(): ActionResultData|undefined {\r\n        if (!this.item) return;\r\n        return this.item.getActionResult();\r\n    }\r\n\r\n    /**\r\n     * Determine if this test has any targets selected using FoundryVTT targeting.\r\n     */\r\n    get hasTargets(): boolean {\r\n        return this.targets.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Has this test been derived from an action?\r\n     *\r\n     * This can either be from an items action or a pre-configured action.\r\n     */\r\n    get hasAction(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return !foundry.utils.isEmpty(this.data.action);\r\n    }\r\n\r\n    /**\r\n     * TODO: This method results in an ugly description.\r\n     *\r\n     */\r\n    get description(): string {\r\n        const poolPart = this.pool.value;\r\n        const thresholdPart = this.hasThreshold ? `(${this.threshold.value})` : '';\r\n        const limitPart = this.hasLimit ? `[${this.limit.value}]` : '';\r\n        return `${poolPart} ${thresholdPart} ${limitPart}`\r\n    }\r\n\r\n    get hasPushTheLimit(): boolean {\r\n        return this.data.pushTheLimit;\r\n    }\r\n\r\n    get hasSecondChance(): boolean {\r\n        return this.data.secondChance;\r\n    }\r\n\r\n    /**\r\n     * Determine if this test can use second chance rules.\r\n     * \r\n     * Use this property to check if a existing test can use this edge rule.\r\n     * \r\n     * SR5#56.\r\n     */\r\n    get canSecondChance(): boolean {\r\n        if (!this.evaluated) {\r\n            console.error('Shadowrun5e | Second chance edge rules should not be appliable on initial cast');\r\n            return false;\r\n        }\r\n        // According to rules, second chance can't be used on glitched tests.\r\n        if (this.glitched) {\r\n            ui.notifications?.warn('SR5.Warnings.CantSecondChanceAGlitch', {localize: true});\r\n            return false;\r\n        }\r\n\r\n        if (this.hasPushTheLimit || this.hasSecondChance) {\r\n            ui.notifications?.warn('SR5.Warnings.CantSpendMulitplePointsOfEdge', {localize: true});\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determine if this test can use push the limit rules\r\n     * \r\n     * Use this property to check if a existing test can use this edge rule.\r\n     * \r\n     * SR5#56.\r\n     */\r\n    get canPushTheLimit(): boolean {\r\n        if (this.hasPushTheLimit || this.hasSecondChance) {\r\n            ui.notifications?.warn('SR5.Warnings.CantSpendMulitplePointsOfEdge', {localize: true});\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle Edge rule 'push the limit', either adding edge before or after casting\r\n     * and exploding sixes for either all dice or only edge dice.\r\n     * \r\n     * Check edge rules on SR5#56.\r\n     * \r\n     * If called without push the limit, all modifiers for it will be removed.\r\n     */\r\n    applyPushTheLimit() {\r\n        if (!this.actor) return;\r\n\r\n        const parts = new PartsList(this.pool.mod);\r\n\r\n        // During the lifetime of a test (dialog/recasting) the user might want to remove push the limit again.\r\n        if (!this.hasPushTheLimit) {\r\n            parts.removePart('SR5.PushTheLimit');\r\n            return;\r\n        }\r\n        \r\n        // Edge will be applied differently for when the test has been already been cast or not.\r\n        // Exploding dice will be handled during normal roll creation.\r\n        const edge = this.actor.getEdge().value;\r\n        parts.addUniquePart('SR5.PushTheLimit', edge, true);\r\n\r\n        // Before casting edge will be part of the whole dice pool and that pool will explode.\r\n        if (!this.evaluated) return;\r\n        \r\n        // After casting use a separate roll, as only those will be rolled again and explode.\r\n        const explodeDice = true;\r\n        const formula = this.buildFormula(edge, explodeDice);\r\n        const roll = new SR5Roll(formula);\r\n        this.rolls.push(roll);\r\n    }\r\n\r\n    /**\r\n     * Handle Edge rules for 'second chance'.\r\n     * \r\n     * If called without second chance, all modifiers for it will be removed.\r\n     */\r\n    applySecondChance() {\r\n        if (!this.actor) return;\r\n\r\n        const parts = new PartsList(this.pool.mod);\r\n\r\n        // During test lifetime (dialog/recasting) the user might want to remove second chance again.\r\n        if (!this.hasSecondChance) {\r\n            parts.removePart('SR5.SecondChance');\r\n            return;\r\n        }\r\n\r\n        // Since only ONE edge can be spent on a test, last roll will either be a\r\n        // - the original dice pool\r\n        // - an extending dice pool\r\n        const lastRoll = this.rolls[this.rolls.length - 1];\r\n        const dice = lastRoll.poolThrown - lastRoll.hits;\r\n        if (dice <= 0) {\r\n            ui.notifications?.warn('SR5.Warnings.CantSecondChanceWithoutNoneHits', {localize: true});\r\n            return this;\r\n        }\r\n\r\n        // Apply second chance modifiers.\r\n        // Overwrite existing, as only ONE edge per test is allowed, therefore stacking is not possible.\r\n        parts.addUniquePart('SR5.SecondChance', dice, true);\r\n\r\n        // Add new dice as fully separate Roll.\r\n        const formula = `${dice}d6`;\r\n        const roll = new SR5Roll(formula);\r\n        this.rolls.push(roll);\r\n    }\r\n\r\n    /**\r\n     * Make sure ALL ressources needed are available.\r\n     * \r\n     * This is checked before any ressources are consumed.\r\n     * \r\n     * @returns true when enough ressources are available to consume\r\n     */\r\n    canConsumeDocumentRessources(): boolean {\r\n        // No actor present? Nothing to consume...\r\n        if (!this.actor) return true;\r\n        \r\n        // Edge consumption.\r\n        if (this.hasPushTheLimit || this.hasSecondChance) {      \r\n            if (this.actor.getEdge().uses <= 0) {\r\n                ui.notifications?.error(game.i18n.localize('SR5.MissingRessource.Edge'));\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle resulting resource consumption caused by this test.\r\n     * \r\n     * @return true when the ressources could be consumed in appropriate ammounts.\r\n     */\r\n    async consumeDocumentRessources(): Promise<boolean> {\r\n        if (!this.actor) return true;\r\n\r\n        // Edge consumption.\r\n        if (this.hasPushTheLimit || this.hasSecondChance) {            \r\n            await this.actor.useEdge();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Consume ressources according to whats configured for this world.\r\n     \r\n    * @returns true when the test can process\r\n     */\r\n    async consumeDocumentRessoucesWhenNeeded(): Promise<boolean> {\r\n        const mustHaveRessouces = game.settings.get(SYSTEM_NAME, FLAGS.MustHaveRessourcesOnTest);\r\n        // Make sure to nest canConsume to avoid unneccessary warnings.\r\n        if (mustHaveRessouces) {\r\n            if (!this.canConsumeDocumentRessources()) return false;\r\n        }\r\n\r\n        return await this.consumeDocumentRessources();\r\n    }\r\n\r\n    /**\r\n     * Executing a test will start all behaviours necessary to:\r\n     * - Calculate its values\r\n     * - Show and handle a user facing test dialog\r\n     * - Render and show a resulting test message\r\n     * - Evaluate all it's roles and consumption of items used\r\n     * - Trigger resulting methods for all results, including success and failure\r\n     *\r\n     * Implementing classes should seek to change out methods used here, or within those methods, to alter test\r\n     * behaviour to their needs.\r\n     *\r\n     * When execute methods promise resolves this test and its chain is completed.\r\n     *\r\n     * NOTE: Currently none of these methods trigger Foundry hooks.\r\n     */\r\n    async execute(): Promise<this> {\r\n        await this.populateTests();\r\n        await this.populateDocuments();\r\n        await this.prepareDocumentModifiers();\r\n        await this.prepareDocumentData();\r\n\r\n        this.alterBaseValues();\r\n\r\n        // Initial base value preparation will show default result without any user input.\r\n        this.prepareBaseValues();\r\n        this.calculateBaseValues();\r\n\r\n        // Allow user to change details.\r\n        const userConsented = await this.showDialog();\r\n        if (!userConsented) return this;\r\n\r\n        // Check if actor has all needed resources to even test.\r\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\r\n        if (!actorConsumedResources) return this;\r\n\r\n        this.createRoll();\r\n\r\n        await this.evaluate();\r\n        await this.processResults();\r\n        await this.toMessage();\r\n        await this.afterTestComplete();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Handle Edge rule 'second chance' within this test according to SR5#56\r\n     */\r\n     async executeWithSecondChance(): Promise<this> {\r\n        console.debug(`Shadowrun 5e | ${this.constructor.name} will apply second chance rules`);\r\n\r\n        if (!this.data.sourceActorUuid) {\r\n            ui.notifications?.warn('SR5.Warnings.EdgeRulesCantBeAppliedOnTestsWithoutAnActor', {localize: true});\r\n            return this;\r\n        };\r\n        if (!this.canSecondChance)  return this;\r\n\r\n        // Fetch documents.\r\n        await this.populateDocuments();\r\n\r\n        //  Trigger edge consumption.\r\n        this.data.secondChance = true;\r\n        this.applySecondChance();\r\n\r\n        // Can't use normal #execute as not all general testing flow are needed.        \r\n        this.calculateBaseValues();\r\n\r\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\r\n        if (!actorConsumedResources) return this;\r\n        \r\n        // Remove second chance to avoid edge consumption on any kind of re-rolls.\r\n        this.data.secondChance = false;\r\n\r\n        await this.evaluate();\r\n        await this.processResults();\r\n        await this.toMessage();\r\n        await this.afterTestComplete();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    async executeWithPushTheLimit(): Promise<this> {\r\n        console.debug(`Shadowrun 5e | ${this.constructor.name} will push the limit rules`);\r\n\r\n        if (!this.data.sourceActorUuid) {\r\n            ui.notifications?.warn('SR5.Warnings.EdgeRulesCantBeAppliedOnTestsWithoutAnActor', {localize: true});\r\n            return this;\r\n        };\r\n        if (!this.canPushTheLimit) return this;\r\n\r\n        // Fetch documents.\r\n        await this.populateDocuments();\r\n\r\n        this.data.pushTheLimit = true;\r\n        this.applyPushTheLimit();\r\n\r\n        // Can't use normal #execute as not all general testing flow are needed.        \r\n        this.calculateBaseValues();\r\n\r\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\r\n        if (!actorConsumedResources) return this;\r\n\r\n        // Keep push the limit active, to have remove limit during derived value calcution.\r\n        await this.evaluate();\r\n        await this.processResults();\r\n\r\n        // Remove push the limit to avoid edge consumption on any kind of re-rolls.\r\n        this.data.pushTheLimit = false;\r\n\r\n        await this.toMessage();\r\n        await this.afterTestComplete();\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Allow subclasses to override behaviour after a test has finished.\r\n     *\r\n     * This can be used to alter values after a test is over.\r\n     */\r\n    async processResults() {\r\n        if (this.success) {\r\n            await this.processSuccess();\r\n        } else {\r\n            await this.processFailure();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allow subclasses to override behaviour after a successful test result.\r\n     *\r\n     * This can be used to alter values after a test succeeded.\r\n     * @override\r\n     */\r\n    async processSuccess() {}\r\n\r\n    /**\r\n     * Allow subclasses to override behaviour after a failure test result\r\n     *\r\n     * This can be used to alter values after a test failed.\r\n     * @override\r\n     */\r\n    async processFailure() {}\r\n\r\n    /**\r\n     * Allow subclasses to override behaviour after a test is fully done. This will be called after processResults\r\n     * and allows for additional processes to be triggered that don't affect this test itself.\r\n     *\r\n     * This can be used to trigger other processes like followup tests or saving values.\r\n     */\r\n    async afterTestComplete() {\r\n        console.debug(`Shadowrun5e | Test ${this.constructor.name} completed.`, this);\r\n\r\n        if (this.success) {\r\n            await this.afterSuccess();\r\n        } else {\r\n            await this.afterFailure();\r\n        }\r\n\r\n        await this.executeFollowUpTest();\r\n\r\n        if (this.extended) {\r\n            await this.executeAsExtended();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allow subclasses to override followup behavior after a successful test result\r\n     * @override\r\n     */\r\n    async afterSuccess()  {}\r\n\r\n    /**\r\n     * Allow subclasses to override followup behavior after a failed test result\r\n     * @override\r\n     */\r\n    async afterFailure() {}\r\n\r\n    /**\r\n     * Depending on the action configuration execute a followup test.\r\n     */\r\n    async executeFollowUpTest() {\r\n        const test = await TestCreator.fromFollowupTest(this, this.data.options);\r\n        if (!test) return;\r\n        await test.execute();\r\n    }\r\n\r\n    /**\r\n     * Should this test be an extended test, re-execute it until it can't be anymore.\r\n     */\r\n    async executeAsExtended() {\r\n        if (!this.canBeExtended) return;\r\n\r\n        const data = foundry.utils.duplicate(this.data);\r\n    \r\n        // No extension possible, if test type / class is unknown.\r\n        if (!data.type) return;\r\n\r\n        // Apply the extended modifier according the current iteration\r\n        const pool = new PartsList(data.pool.mod);\r\n\r\n        const currentModifierValue = pool.getPartValue('SR5.ExtendedTest') || 0;\r\n        const nextModifierValue = TestRules.calcNextExtendedModifier(currentModifierValue);\r\n\r\n        // A pool could be overriden or not.\r\n        if (data.pool.override) {\r\n            data.pool.override.value = Math.max(data.pool.override.value - 1, 0);\r\n        } else {\r\n            pool.addUniquePart('SR5.ExtendedTest', nextModifierValue);\r\n        }\r\n\r\n        Helpers.calcTotal(data.pool, {min: 0});\r\n\r\n        if (!TestRules.canExtendTest(data.pool.value, this.threshold.value, this.extendedHits.value)) {\r\n            return ui.notifications?.warn('SR5.Warnings.CantExtendTestFurther', {localize: true});\r\n        }\r\n\r\n        // Fetch original tests docments.\r\n        await this.populateDocuments();\r\n\r\n        // Create a new test instance of the same type.\r\n        const testCls = TestCreator._getTestClass(data.type);\r\n        if (!testCls) return;\r\n        // The new test will be incomplete.\r\n        data.evaluated = false;\r\n        const test = new testCls(data, {actor: this.actor, item: this.item}, this.data.options);\r\n\r\n        // Remove previous edge usage.\r\n        test.data.pushTheLimit = false;\r\n        test.applyPushTheLimit();\r\n        test.data.secondChance = false;\r\n        test.applySecondChance();\r\n\r\n        // Mark test as extended to get iterative execution.\r\n        if (!test.extended) {\r\n            test.data.extended = true;\r\n            test.calculateExtendedHits();\r\n        }\r\n\r\n        await test.execute();\r\n    }\r\n\r\n    /**\r\n     * DiceSoNice must be implemented locally to avoid showing dice on gmOnlyContent throws while also using\r\n     * FoundryVTT ChatMessage of type roll for their content visibility behaviour.\r\n     * \r\n     * https://gitlab.com/riccisi/foundryvtt-dice-so-nice/-/wikis/Integration\r\n     */\r\n    async rollDiceSoNice() {\r\n        // @ts-ignore\r\n        if (!game.dice3d || !game.user || !game.users) return;\r\n\r\n        console.debug('Shadowrun5e | Initiating DiceSoNice throw');\r\n\r\n        // Only roll the last dice rolled.\r\n        // This necessary when a test has been recast with second chance, and should only the re-rolled dice instead\r\n        // of all.\r\n        const roll = this.rolls[this.rolls.length - 1];\r\n\r\n        // Limit users to show dice to...\r\n        let whisper: User[]|null = null;\r\n        // ...for gmOnlyContent check permissions\r\n        if (this._applyGmOnlyContent && this.actor) {\r\n            // @ts-ignore\r\n            whisper = game.users.filter(user => this.actor?.testUserPermission(user, 'OWNER'));\r\n        }\r\n        // ...for rollMode include GM when GM roll\r\n        if (this.data.options?.rollMode === 'gmroll' || this.data.options?.rollMode === \"blindroll\") {\r\n            whisper = whisper || [];\r\n            whisper = [...game.users.filter(user => user.isGM), ...whisper];\r\n        }\r\n\r\n        // Don't show dice to a user casting blind.\r\n        const blind = this.data.options?.rollMode === 'blindroll';\r\n        const synchronize = this.data.options?.rollMode === 'publicroll';\r\n\r\n        // @ts-ignore\r\n        game.dice3d.showForRoll(roll, game.user, synchronize, whisper, blind, this.data.messageUuid);\r\n    }\r\n\r\n    /**\r\n     * Post this success test as a message to the chat log.\r\n     */\r\n    async toMessage(): Promise<ChatMessage | undefined> {\r\n        if (!this.data.options?.showMessage) return;\r\n\r\n        // Prepare message content.\r\n        const templateData = this._prepareMessageTemplateData();\r\n        const content = await renderTemplate(this._chatMessageTemplate, templateData);\r\n        // Prepare the actual message.\r\n        const messageData = this._prepareMessageData(content);\r\n        const options = {rollMode: this._rollMode};\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const message = await ChatMessage.create(messageData, options);\r\n\r\n        if (!message) return;\r\n\r\n        // Store message id for future use.\r\n        this.data.messageUuid = message.uuid;\r\n\r\n        await this.rollDiceSoNice();\r\n\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Prepare chat message content data for this success test card.\r\n     *\r\n     * @returns Chat Message template data.\r\n     *\r\n     * TODO: Add template data typing.\r\n     */\r\n    _prepareMessageTemplateData() {\r\n        // Either get the linked token by collection or synthetic actor.\r\n        // Unlinked collection actors will return multiple tokens and can't be resolved to a token.\r\n        const linkedTokens = this.actor?.getActiveTokens(true) || [];\r\n        const token = linkedTokens.length >= 1 ? linkedTokens[0] : undefined;\r\n\r\n        return {\r\n            title: this.data.title,\r\n            test: this,\r\n            // Note: While ChatData uses ids, this uses full documents.\r\n            speaker: {\r\n                actor: this.actor,\r\n                token: token\r\n            },\r\n            item: this.item,\r\n            opposedActions: this._prepareOpposedActionsTemplateData(),\r\n            resultActions: this._prepareResultActionsTemplateData(),\r\n            previewTemplate: this._canPlaceBlastTemplate,\r\n            showDescription: this._canShowDescription,\r\n            description: this.item?.getChatData() || '',\r\n            // Some message segments are only meant for the gm, when the gm is the one creating the message.\r\n            // When this test doesn't use an actor, don't worry about hiding anything.\r\n            applyGmOnlyContent: this._applyGmOnlyContent\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicate if this test can be used to show the item description.\r\n     */\r\n    get _canShowDescription(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Indicate if this test can be used to place a blast template using the shown chat message.\r\n     *\r\n     * This is indicated by the source items ability to cause an area of effect blast and which kind\r\n     * of test is used.\r\n     */\r\n    get _canPlaceBlastTemplate(): boolean {\r\n        return this.item?.hasBlastTemplate || false;\r\n    }\r\n\r\n    /**\r\n     * This test should hide information / rolls / dice for when cast by the GM.\r\n     */\r\n    get _applyGmOnlyContent(): boolean {\r\n        // Enable GM only content only when the global setting is set.\r\n        const enableFeature = game.settings.get(SYSTEM_NAME, FLAGS.HideGMOnlyChatContent) as boolean;\r\n\r\n        return enableFeature && !!game.user && game.user.isGM && !!this.actor;\r\n    }\r\n\r\n    /**\r\n     * This class should be used for the opposing test implementation.\r\n     */\r\n    get _opposedTestClass(): any|undefined {\r\n        if (!this.data.opposed || !this.data.opposed.test) return;\r\n        return TestCreator._getTestClass(this.data.opposed.test);\r\n    }\r\n\r\n    /**\r\n     * Prepare opposed test action buttons.\r\n     *\r\n     * Currently, one opposed action is supported, however the template\r\n     * is prepared to support multiple action buttons.\r\n     */\r\n    _prepareOpposedActionsTemplateData() {\r\n        const testCls = this._opposedTestClass;\r\n        // No opposing test configured. Nothing to build.\r\n        if (!testCls) return [];\r\n\r\n        const action = {\r\n            // Store the test implementation registration name.\r\n            test: testCls.name,\r\n            label: testCls.label\r\n        };\r\n\r\n        // Show the flat dice pool modifier on the chat action.\r\n        if (this.data.opposed.mod) {\r\n            action.label += ` ${this.data.opposed.mod}`;\r\n        }\r\n\r\n        return [action]\r\n    }\r\n\r\n    /**\r\n     * Prepare result action buttons\r\n     */\r\n    _prepareResultActionsTemplateData(): ResultActionData[] {\r\n        const actions: ResultActionData[] = [];\r\n        const actionResultData = this.results;\r\n        if (!actionResultData) return actions;\r\n\r\n        if (actionResultData.success.matrix.placeMarks) {\r\n            actions.push({\r\n                action: 'placeMarks',\r\n                label: 'SR5.PlaceMarks',\r\n                value: ''\r\n            });\r\n        }\r\n\r\n        return actions;\r\n    }\r\n\r\n    /**\r\n     * What ChatMessage rollMode is this test supposed to use?\r\n     */\r\n    get _rollMode(): string {\r\n        return this.data.options?.rollMode as string ?? game.settings.get('core', 'rollmode');\r\n    }\r\n\r\n    /**\r\n     * Prepare chat message data for this success test card.\r\n     *\r\n     * @param content Pre rendered template content.\r\n     */\r\n    _prepareMessageData(content: string) {\r\n        // Either get the linked token by collection or synthetic actor.\r\n        // Unlinked collection actors will return multiple tokens and can't be resolved to a token.\r\n        const linkedTokens = this.actor?.getActiveTokens(true) || [];\r\n        const token = linkedTokens.length === 1 ? linkedTokens[0].id : undefined;\r\n\r\n        const actor = this.actor?.id;\r\n        const alias = game.user?.name;\r\n\r\n        const formula = `0d6`;\r\n        const roll = new SR5Roll(formula);\r\n        // evaluation is necessary for Roll DataModel validation.\r\n        roll.evaluate({async: false});\r\n        \r\n        const messageData = {\r\n            user: game.user?.id,\r\n            // Use type roll, for Foundry built in content visibility.\r\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\r\n            speaker: {\r\n                actor,\r\n                alias,\r\n                token\r\n            },\r\n            roll,\r\n            content,\r\n            // Manually build flag data to give renderChatMessage hook flag access.\r\n            // This test data is needed for all subsequent testing based on this chat messages.\r\n            flags: {\r\n                [SYSTEM_NAME]: {[FLAGS.Test]: this.toJSON()},\r\n                'core.canPopout': true\r\n            },\r\n            sound: CONFIG.sounds.dice,            \r\n        }\r\n\r\n        // Instead of manually applying whisper ids, let Foundry do it.\r\n        // @ts-ignore TODO: Types Provide propper SuccessTestData and SuccessTestOptions\r\n        ChatMessage.applyRollMode(messageData, this._rollMode);\r\n\r\n        return messageData;\r\n    }\r\n\r\n    /**\r\n     * Register listeners for ChatMessage html created by a SuccessTest.\r\n     *\r\n     * This listener needs to be registered to the 'renderChatMessage' FoundryVTT hook.\r\n     *\r\n     * @param message\r\n     * @param html\r\n     * @param data\r\n     */\r\n    static async chatMessageListeners(message: ChatMessage, html, data) {\r\n        html.find('.show-roll').on('click', this._chatToggleCardRolls);\r\n        html.find('.show-description').on('click', this._chatToggleCardDescription);\r\n        html.find('.chat-document-link').on('click', Helpers.renderEntityLinkSheet);\r\n        html.find('.place-template').on('click', this._placeItemBlastZoneTemplate);\r\n        html.find('.result-action').on('click', this._castResultAction);\r\n        html.find('.chat-select-link').on('click', this._selectSceneToken);\r\n        html.find('.test-action').on('click', this._castTestAction);\r\n\r\n        DamageApplicationFlow.handleRenderChatMessage(message, html, data);\r\n\r\n        await this._showGmOnlyContent(message, html, data)\r\n    }\r\n\r\n    static async _showGmOnlyContent(message: ChatMessage, html, data) {\r\n        const test = await TestCreator.fromMessage(message.id as string);\r\n        if (!test) return;\r\n        await test.populateDocuments();\r\n\r\n        // SuccessTest doesn't NEED an actor, if one is cast that way: show gm-only-content\r\n        if (!test.actor || !game.user) {\r\n            html.find('.gm-only-content').removeClass('gm-only-content');\r\n        }\r\n        else if (game.user.isGM || game.user.isTrusted || test.actor?.isOwner) {\r\n            html.find('.gm-only-content').removeClass('gm-only-content');\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Select a Token on the current scene based on the link id.\r\n     * @params event Any user PointerEvent\r\n    */\r\n    static async _selectSceneToken(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (!game || !game.ready || !canvas || !canvas.ready) return;\r\n\r\n        const selectLink = $(event.currentTarget);\r\n        const tokenId = selectLink.data('tokenId');\r\n        const token = canvas.tokens?.get(tokenId);\r\n\r\n        if (token && token instanceof Token) {\r\n            token.control();\r\n        } else {\r\n            ui.notifications?.warn(game.i18n.localize('SR5.NoSelectableToken'))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cast a item action from a chat message.\r\n     * \r\n     * @param event Any pointer event\r\n     */\r\n    static async _castTestAction(event) {\r\n        event.preventDefault();\r\n\r\n        const showDialog = !TestCreator.shouldHideDialog(event);\r\n        const element = $(event.currentTarget);\r\n        // Grab item uuid or fallback to empty string for foundry\r\n        const uuid = element.data('uuid') ?? '';\r\n        const item = await fromUuid(uuid) as SR5Item;\r\n\r\n        if (!item) return console.error('Shadowrun 5e | Item doesnt exist for uuid', uuid);\r\n\r\n        item.castAction(event);\r\n    }\r\n\r\n    static async chatLogListeners(chatLog: ChatLog, html, data) {\r\n        // setup chat listener messages for each message as some need the message context instead of chatlog context.\r\n        html.find('.chat-message').each(async (index, element) => {\r\n            element = $(element);\r\n            const id = element.data('messageId');\r\n            const message = game.messages?.get(id);\r\n            if (!message) return;\r\n\r\n            await this.chatMessageListeners(message, element, message.toObject())\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Items with an area of effect will allow users to place a measuring template matching the items blast values.\r\n     *\r\n     * @param event A PointerEvent triggered from anywhere within the chat-card\r\n     */\r\n    static async _placeItemBlastZoneTemplate(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // Get test data from message.\r\n        const element = $(event.currentTarget);\r\n        const card = element.closest('.chat-message');\r\n        const messageId = card.data('messageId');\r\n        const test = await TestCreator.fromMessage(messageId);\r\n        if (!test) return;\r\n\r\n        // Get item used in test\r\n        await test.populateDocuments();\r\n\r\n        // Place template based on last used spell force for the item.\r\n        if (!test.item) return;\r\n        const template = Template.fromItem(test.item);\r\n        if (!template) return;\r\n        await template.drawPreview();\r\n    }\r\n\r\n    /**\r\n     * Foundry ChatMessage context options (right click) used for all test types.\r\n     * @param html\r\n     * @param options\r\n     */\r\n    static chatMessageContextOptions(html, options) {\r\n        const pushTheLimit = async (li) => {\r\n            const messageId = li.data().messageId;\r\n            const test = await TestCreator.fromMessage(messageId);\r\n            if (!test) return console.error('Shadowrun 5e | Could not restore test from message');\r\n\r\n            await test.executeWithPushTheLimit();\r\n        }\r\n        \r\n        const secondChance = async (li) => {\r\n            const messageId = li.data().messageId;\r\n            const test = await TestCreator.fromMessage(messageId);\r\n            if (!test) return console.error('Shadowrun 5e | Could not restore test from message');\r\n\r\n            await test.executeWithSecondChance();\r\n        };\r\n\r\n        const extendTest = async (li) => {\r\n            const messageId = li.data().messageId;\r\n            const test = await TestCreator.fromMessage(messageId);\r\n            if (!test) return console.error('Shadowrun 5e | Could not restore test from message');\r\n\r\n            // @ts-ignore\r\n            if (!test.canBeExtended) {\r\n                return ui.notifications?.warn('SR5.Warnings.CantExtendTest', {localize: true});\r\n            }\r\n\r\n            await test.executeAsExtended();\r\n        };\r\n\r\n        // Keep Foundry delete option at the context menus bottom.\r\n        const deleteOption = options.pop();\r\n\r\n        options.push({\r\n            name: game.i18n.localize('SR5.PushTheLimit'),\r\n            callback: pushTheLimit,\r\n            condition: true,\r\n            icon: '<i class=\"fas fa-meteor\"></i>'\r\n        })\r\n        \r\n        options.push({\r\n            name: game.i18n.localize('SR5.SecondChance'),\r\n            callback: secondChance,\r\n            condition: true,\r\n            icon: '<i class=\"fas fa-meteor\"></i>'\r\n        });\r\n\r\n        options.push({\r\n            name: game.i18n.localize('SR5.Extend'),\r\n            callback: extendTest,\r\n            condition: true,\r\n            icon: '<i class=\"fas fa-clock\"></i>'\r\n        })\r\n\r\n        // Reinsert Foundry delete option last.\r\n        options.push(deleteOption);\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * By default, roll results are hidden in a chat card.\r\n     *\r\n     * This will hide / show them, when called with a card event.\r\n     *\r\n     * @param event Called from within a card html element.\r\n     */\r\n    static async _chatToggleCardRolls(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        const card = $(event.currentTarget).closest('.chat-card');\r\n        const element = card.find('.dice-rolls');\r\n        if (element.is(':visible')) element.slideUp(200);\r\n        else element.slideDown(200);\r\n    }\r\n\r\n    /**\r\n     * By default, item descriptions are hidden in a chat card.\r\n     *\r\n     * This will hide / show them, when called with a card event.\r\n     * @param event A PointerEvent triggered anywhere from within a chat-card\r\n     */\r\n    static async _chatToggleCardDescription(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        const card = $(event.currentTarget).closest('.chat-card');\r\n        const element = card.find('.card-description');\r\n        if (element.is(':visible')) element.slideUp(200);\r\n        else element.slideDown(200);\r\n    }\r\n\r\n    /**\r\n     * A test message initiated an action for a test result, extract information from message and execute action.\r\n     *\r\n     * @param event A PointerEvent by user-interaction\r\n     */\r\n    static async _castResultAction(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        const element = $(event.currentTarget)\r\n        const resultAction = element.data('action');\r\n\r\n        const messageId = element.closest('.chat-message').data('messageId');\r\n        const test = await TestCreator.fromMessage(messageId);\r\n        \r\n        if (!test) return console.error(`Shadowrun5e | Couldn't find both a result action ('${resultAction}') and extract test from message ('${messageId}')`);\r\n        \r\n        await test.populateDocuments();\r\n        await ActionResultFlow.executeResult(resultAction, test);\r\n    }\r\n}\r\n", "import {SuccessTest, SuccessTestData, SuccessTestValues, TestData, TestDocuments, TestOptions} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {TestCreator} from \"./TestCreator\";\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\n\r\nexport interface OpposedTestValues extends SuccessTestValues {\r\n}\r\n\r\nexport interface OpposedTestData extends\r\n    TestData,\r\n    // Remove unnecessary data points.\r\n    Omit<SuccessTestData, 'opposed'>,\r\n    Omit<SuccessTestData, 'targetTokensUuid'> {\r\n\r\n    // The message id of the opposed test.\r\n    previousMessageId: string\r\n    values: OpposedTestValues\r\n    against: SuccessTestData\r\n}\r\n/**\r\n * An opposed test results from a normal success test as an opposed action.\r\n */\r\nexport class OpposedTest extends SuccessTest {\r\n    public data: OpposedTestData;\r\n    public against: SuccessTest;\r\n\r\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\r\n        super(data, documents, options);\r\n\r\n        // Use the supplied original active test to create a reference.\r\n        // If nothing was given create a default placeholder\r\n        // @ts-ignore // Feed original / active test data into the class originally used for ease of access.\r\n        const AgainstCls = data.against ? TestCreator._getTestClass(data.against.type) : SuccessTest;\r\n        this.against = new AgainstCls(data.against || {});\r\n    }\r\n\r\n    _prepareData(data, options?): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        // TODO: this isn't needed if opposed is always taken from data.action.opposed\r\n        delete data.opposed;\r\n        delete data.targetActorsUuid;\r\n\r\n        return data;\r\n    }\r\n\r\n    async populateDocuments() {\r\n        await super.populateDocuments();\r\n        await this.against.populateDocuments();\r\n    }\r\n\r\n    static async _getOpposedActionTestData(againstData: SuccessTestData, actor, previousMessageId: string): Promise<OpposedTestData | undefined> {\r\n        if (!againstData.opposed) {\r\n            console.error(`Shadowrun 5e | Supplied test data doesn't contain an opposed action`, againstData, this);\r\n            return;\r\n        }\r\n        // @ts-ignore // TODO: Typing expects a boolean, though OpposedTestData defines it as string. Odd.\r\n        if (againstData.opposed.type !== '') {\r\n            console.warn(`Shadowrun 5e | Supplied test defines a opposed test type ${againstData.opposed.type} but only type '' is supported`, this);\r\n        }\r\n        if (!actor) {\r\n            console.error(`Shadowrun 5e | Can't resolve opposed test values due to missing actor`, this);\r\n            return;\r\n        }\r\n\r\n        // Prepare testing data.\r\n        const data = {\r\n            // While not visible, when there is a description set, use it.\r\n            title: againstData.opposed.description || undefined,\r\n\r\n            previousMessageId,\r\n\r\n            pool: DefaultValues.valueData({label: 'SR5.DicePool'}),\r\n            limit: DefaultValues.valueData({label: 'SR5.Limit'}),\r\n            threshold: DefaultValues.valueData({label: 'SR5.Threshold'}),\r\n            values: {},\r\n\r\n            sourceItemUuid: againstData.sourceItemUuid,\r\n            against: againstData\r\n        }\r\n\r\n        // An opposing test will oppose net hits of the original / success test.\r\n        // Register these as a threshold, which will trigger success/failure status\r\n        // and calculate netHits accordingly.\r\n        data.threshold.base = againstData.values.netHits.value;\r\n\r\n        // Casting an opposed action doesn't give as complete ActionData from the original.\r\n        // Therefore we must create an empty dummy action.\r\n        let action = DefaultValues.actionData();\r\n\r\n        // Allow the OpposedTest to overwrite action data using its class default action.\r\n        action = TestCreator._mergeMinimalActionDataInOrder(action,\r\n            // Use action data from the original action at first.\r\n            againstData.opposed,\r\n            // Overwrite with the OpposedTest class default action, if any.\r\n            this._getDefaultTestAction()\r\n        );\r\n\r\n        // Allow the OpposedTest to overwrite action data dynamically based on item data.\r\n        if (againstData.sourceItemUuid) {\r\n            const item = await fromUuid(againstData.sourceItemUuid) as SR5Item;\r\n            if (item) {\r\n                const itemAction = await this._getDocumentTestAction(item, actor);\r\n                action = TestCreator._mergeMinimalActionDataInOrder(action, itemAction);\r\n            }\r\n        }\r\n\r\n        return await this._prepareActionTestData(action, actor, data);\r\n    }\r\n\r\n    /**\r\n     * Overwrite SuccessTest#opposed behavior as an OpposedTest can't have another opposed test.\r\n     */\r\n    get opposed() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Overwrite SuccessTest#opposing behavior as an OpposedTest is opposing another test.\r\n     */\r\n    get opposing() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Opposed tests shouldn't show item description from the active tests source item.\r\n     */\r\n    get _canShowDescription(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Opposed tests can't cause any blast template.\r\n     */\r\n    get _canPlaceBlastTemplate(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Apply opposed test modifiers based on the item implementation\r\n     */\r\n    async prepareItemModifiers() {\r\n        if (!this.item) return;\r\n\r\n        // NOTE: This is a legacy method for applying item data based modifiers, but it will do.\r\n        const opposedMod = this.item.getOpposedTestMod();\r\n\r\n        // Do not simply concat list to avoid double applying an otherwise unique test modifier.\r\n        for (const modifier of opposedMod.list) {\r\n            PartsList.AddUniquePart(this.data.modifiers.mod, modifier.name, modifier.value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Using a message action cast an opposed test to that messages active test.\r\n     *\r\n     * @param event A PointerEvent by user interaction to trigger the test action.\r\n     */\r\n    static async _castOpposedAction(event) {\r\n        event.preventDefault();\r\n\r\n        const button = $(event.currentTarget);\r\n        const card = button.closest('.chat-message');\r\n\r\n        // Collect information needed to create the opposed action test.\r\n        const messageId = card.data('messageId');\r\n        const opposedActionTest = button.data('action');\r\n\r\n        const showDialog = !TestCreator.shouldHideDialog(event);\r\n        await TestCreator.fromMessageAction(messageId, opposedActionTest, {showDialog});\r\n    }\r\n\r\n    static async chatMessageListeners(message: ChatMessage, html, data) {\r\n        html.find('.opposed-action').on('click', OpposedTest._castOpposedAction);\r\n    }\r\n}", "import {OpposedTest, OpposedTestData} from \"./OpposedTest\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {SoakFlow} from \"../actor/flows/SoakFlow\";\r\n\r\n\r\nexport interface DefenseTestData extends OpposedTestData {\r\n    // Damage value of the attack\r\n    incomingDamage: DamageData\r\n    // Modified damage value of the attack after this defense (success or failure)\r\n    modifiedDamage: DamageData\r\n\r\n    // Should this defense test cause an initiative modifier to be applied, use this value\r\n    // It's also used for display in chat.\r\n    iniMod: number|undefined\r\n}\r\n\r\n\r\n/**\r\n * A semi abstract class to be used by other classes as a common extension interface.\r\n *\r\n * Handle general damage data as well as general defense rules.\r\n */\r\nexport class DefenseTest extends OpposedTest {\r\n    data: DefenseTestData\r\n\r\n    _prepareData(data, options?) {\r\n        data = super._prepareData(data, options);\r\n\r\n        const damage = data.against ? data.against.damage : DefaultValues.damageData();\r\n\r\n        data.incomingDamage = foundry.utils.duplicate(damage);\r\n        data.modifiedDamage = foundry.utils.duplicate(damage);\r\n\r\n        return data;\r\n    }\r\n\r\n    get _chatMessageTemplate() {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/defense-test-message.html'\r\n    }\r\n\r\n    get successLabel() {\r\n        return 'SR5.AttackDodged';\r\n    }\r\n\r\n    get failureLabel() {\r\n        return 'SR5.AttackHits';\r\n    }\r\n\r\n    /**\r\n     * This test has changed the initiative score of its caster.\r\n     */\r\n    get hasChangedInitiative(): boolean {\r\n        return this.data.iniMod !== undefined;\r\n    }\r\n\r\n    get initiativeModifier(): number {\r\n        return this.data.iniMod || 0;\r\n    }\r\n}", "import {PartsList} from \"../parts/PartsList\";\r\nimport {CombatRules} from \"../rules/CombatRules\";\r\nimport {MeleeRules} from \"../rules/MeleeRules\";\r\nimport {MeleeAttackData} from \"./MeleeAttackTest\";\r\nimport {TestCreator} from \"./TestCreator\";\r\nimport {DefenseTest, DefenseTestData} from \"./DefenseTest\";\r\nimport { SR5Combat } from \"../combat/SR5Combat\";\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\n\r\nexport interface PhysicalDefenseTestData extends DefenseTestData {\r\n    // Dialog input for cover modifier\r\n    cover: number\r\n    // Dialog input for active defense modifier\r\n    activeDefense: string\r\n    activeDefenses: Record<string, { label: string, value: number|undefined, initMod: number, weapon?: string }>\r\n    // Melee weapon reach modification.\r\n    isMeleeAttack: boolean\r\n    defenseReach: number\r\n}\r\n\r\n\r\nexport class PhysicalDefenseTest extends DefenseTest {\r\n    public data: PhysicalDefenseTestData;\r\n\r\n    _prepareData(data, options?): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.cover = 0;\r\n        data.activeDefense = '';\r\n        data.activeDefenses = {};\r\n        data.isMeleeAttack = false;\r\n        data.defenseReach = 0;\r\n\r\n        return data;\r\n    }\r\n\r\n    get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/physical-defense-test-dialog.html';\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            'attribute': 'reaction',\r\n            'attribute2': 'intuition'\r\n        };\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds', 'defense'];\r\n    }\r\n\r\n    async prepareDocumentData() {\r\n        this.prepareActiveDefense();\r\n        this.prepareMeleeReach();\r\n        await super.prepareDocumentData();\r\n    }\r\n\r\n    prepareActiveDefense() {\r\n        if (!this.actor) return;\r\n        const actor = this.actor;\r\n\r\n        // Default active defenses.\r\n        this.data.activeDefenses = {\r\n            full_defense: {\r\n                label: 'SR5.FullDefense',\r\n                value: actor.getFullDefenseAttribute()?.value,\r\n                initMod: -10,\r\n            },\r\n            dodge: {\r\n                label: 'SR5.Dodge',\r\n                value: actor.findActiveSkill('gymnastics')?.value,\r\n                initMod: -5,\r\n            },\r\n            block: {\r\n                label: 'SR5.Block',\r\n                value: actor.findActiveSkill('unarmed_combat')?.value,\r\n                initMod: -5,\r\n            }\r\n        };\r\n\r\n        // Collect weapon based defense options.\r\n        // NOTE: This would be way better if the current weapon (this.item) would be used.\r\n        const equippedMeleeWeapons = actor.getEquippedWeapons().filter((weapon) => weapon.isMeleeWeapon);\r\n        equippedMeleeWeapons.forEach((weapon) => {\r\n            this.data.activeDefenses[`parry-${weapon.name}`] = {\r\n                label: 'SR5.Parry',\r\n                weapon: weapon.name || '',\r\n                value: actor.findActiveSkill(weapon.getActionSkill())?.value,\r\n                initMod: -5,\r\n            };\r\n        });\r\n    }\r\n\r\n    prepareMeleeReach() {\r\n        if (!this.against.item) return;\r\n        this.data.isMeleeAttack = this.against.item.isMeleeWeapon;\r\n        if (!this.data.isMeleeAttack) return;\r\n\r\n        if (!this.actor) return;\r\n\r\n        // Take the highest equipped melee reach to defend with...\r\n        // NOTE: ... this should be a choice of the player\r\n        // TODO: This is a legacy selection approach as there wasn't a way to access to used item in the original attack test.\r\n        //       Instead this might be replaced with a direct reference with this.against.item.data.defenseReach?\r\n        const equippedMeleeWeapons = this.actor.getEquippedWeapons().filter((weapon) => weapon.isMeleeWeapon);\r\n        equippedMeleeWeapons.forEach(weapon => {\r\n            this.data.defenseReach = Math.max(this.data.defenseReach, weapon.getReach());\r\n        });\r\n\r\n        const attackData = this.against.data as MeleeAttackData;\r\n        const incomingReach = attackData.reach || 0;\r\n        const defenseReach = this.data.defenseReach;\r\n        this.data.defenseReach = MeleeRules.defenseReachModifier(incomingReach, defenseReach);\r\n    }\r\n\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n        this.applyIniModFromActiveDefense();\r\n    }\r\n\r\n    applyPoolModifiers() {\r\n        this.applyPoolCoverModifier();\r\n        this.applyPoolActiveDefenseModifier();\r\n        this.applyPoolMeleeReachModifier();\r\n        this.applyPoolRangedFireModModifier();\r\n        super.applyPoolModifiers();\r\n    }\r\n\r\n    applyPoolCoverModifier() {\r\n        // Cast dialog selection to number, when necessary.\r\n        this.data.cover = foundry.utils.getType(this.data.cover) === 'string' ?\r\n            Number(this.data.cover) :\r\n            this.data.cover;\r\n\r\n        // Apply zero modifier also, to sync pool.mod and modifiers.mod\r\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR5.Cover', this.data.cover);\r\n    }\r\n\r\n    applyPoolActiveDefenseModifier() {\r\n        const defense = this.data.activeDefenses[this.data.activeDefense] || {label: 'SR5.ActiveDefense', value: 0, init: 0};\r\n\r\n        // Apply zero modifier also, to sync pool.mod and modifiers.mod\r\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR5.ActiveDefense', defense.value);\r\n    }\r\n\r\n    applyPoolMeleeReachModifier() {\r\n        if (!this.data.isMeleeAttack) return;\r\n\r\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR5.WeaponReach', this.data.defenseReach);\r\n    }\r\n\r\n    /**\r\n     * When defending against a ranged attack, see if any fire mode defense modifiers must be applied\r\n     */\r\n    applyPoolRangedFireModModifier() {\r\n        if (!this.against.item) return;\r\n        if (!this.against.item.isRangedWeapon) return;\r\n\r\n        const fireMode = this.against.item.getLastFireMode();\r\n\r\n        if (!fireMode.defense) return;\r\n\r\n        PartsList.AddUniquePart(this.data.modifiers.mod, fireMode.label, Number(fireMode.defense));\r\n    }\r\n\r\n    get success() {\r\n        return CombatRules.attackMisses(this.against.hits.value, this.hits.value);\r\n    }\r\n\r\n    get failure() {\r\n        return CombatRules.attackHits(this.against.hits.value, this.hits.value)\r\n    }\r\n\r\n    async processSuccess() {\r\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterMiss(this.data.incomingDamage);\r\n\r\n        await super.processSuccess();\r\n    }\r\n\r\n    async processFailure() {\r\n        if (!this.actor) return;\r\n\r\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterHit(this.actor, this.against.hits.value, this.hits.value, this.data.incomingDamage);\r\n\r\n        await super.processFailure();\r\n    }\r\n\r\n    async afterFailure() {\r\n        const test = await TestCreator.fromOpposedTestResistTest(this, this.data.options);\r\n        if (!test) return;\r\n        await test.execute();\r\n    }\r\n\r\n    canConsumeDocumentRessources() {\r\n        // Check if the actor is in active combat situation and has enough initiative score left.\r\n        if (this.actor && this.data.iniMod && game.combat) {\r\n            const combat: SR5Combat = game.combat as unknown as SR5Combat;\r\n            const combatant = combat.getActorCombatant(this.actor);\r\n            if (combatant && combatant.initiative + this.data.iniMod < 0) {\r\n                ui.notifications?.warn('SR5.MissingRessource.Initiative', {localize: true});\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return super.canConsumeDocumentRessources();\r\n    }\r\n\r\n    /**\r\n     * Should an active defense be selected apply the initiative modifier to the defenders combat initiative.\r\n     */\r\n    applyIniModFromActiveDefense() {\r\n        if (!this.actor) return;\r\n        if (!this.data.activeDefense) return;\r\n\r\n        const activeDefense = this.data.activeDefenses[this.data.activeDefense];\r\n        if (!activeDefense) return;\r\n\r\n        // Use DefenseTest general iniMod behaviour.\r\n        this.data.iniMod = activeDefense.initMod;\r\n    }\r\n\r\n    _prepareResultActionsTemplateData() {\r\n        const actions = super._prepareResultActionsTemplateData();\r\n\r\n        // Don't add an action if no active defense was selected.\r\n        if (!this.data.activeDefense) return actions;\r\n\r\n        const activeDefense = this.data.activeDefenses[this.data.activeDefense];\r\n        if (!activeDefense) return actions;\r\n\r\n        actions.push({\r\n            action: 'modifyCombatantInit',\r\n            label: 'SR5.Initiative',\r\n            value: String(activeDefense.initMod)\r\n        });\r\n\r\n        return actions;\r\n    }\r\n}", "import {MatrixRules} from \"../../rules/MatrixRules\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {SuccessTest} from \"../../tests/SuccessTest\";\r\nimport { PhysicalDefenseTest } from \"../../tests/PhysicalDefenseTest\";\r\nimport ResultActions = Shadowrun.ResultActions;\r\n\r\n\r\n/**\r\n * Whenever any action or test implementation can cause a result that needs\r\n * to be manually applied, use this handler\r\n */\r\nexport class ActionResultFlow {\r\n    /**\r\n         * The handleres registered for specific result action.\r\n         * \r\n         * @returns A Map mapping action name to function handler\r\n         */\r\n    static get _handlersResultAction(): Map<ResultActions, Function> {\r\n        const handlers = new Map();\r\n        handlers.set('placeMarks', () => ui.notifications?.error('Placing marks currently isnt suported. Sorry!'));\r\n        handlers.set('modifyCombatantInit', ActionResultFlow._castInitModifierAction);\r\n\r\n        return handlers;\r\n    }\r\n\r\n    /**\r\n     * Handle execution of any action result action. :)\r\n     *\r\n     * NOTE: This is a horrible system and likely to be replaced someday...\r\n     *\r\n     * @param resultAction The action descriptor based on SuccessTest#_prepareResultActionsTemplateData.\r\n     * @param test The SuccessTest subclass the action has been emitted from.\r\n     */\r\n    static async executeResult(resultAction: ResultActions, test: SuccessTest) {\r\n        const handler = ActionResultFlow._handlersResultAction.get(resultAction);\r\n\r\n        if (!handler) \r\n            return console.error(`Shadowrun 5e | Action result ${resultAction} has not handler registered`);\r\n\r\n        await handler(test);\r\n\r\n    }\r\n    /**\r\n     * Matrix Marks are placed on either actors (persona, ic) or items (device, host, technology).\r\n     */\r\n    static async placeMatrixMarks(active: SR5Actor, targets: Token[], marks: number) {\r\n        if (!MatrixRules.isValidMarksCount(marks)) {\r\n            return ui.notifications?.warn(game.i18n.localize(\"SR5.Warnings.InvalidMarksCount\"));\r\n        }\r\n\r\n        for (const target of targets) {\r\n            await active.setMarks(target, marks);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Modify the actors combatant according the test defined initiative modifier.\r\n     * \r\n     * @param test The test instance causing the initiave modification\r\n     */\r\n     static async _castInitModifierAction(test: PhysicalDefenseTest) {\r\n        if (!(test instanceof PhysicalDefenseTest)) return;\r\n        \r\n        if (!test.data.iniMod) return;\r\n        await test.actor?.changeCombatInitiative(test.data.iniMod);\r\n    }\r\n}", "import { SkillFlow } from \"../actor/flows/SkillFlow\";\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { createItemChatMessage } from '../chat';\r\nimport { DEFAULT_ROLL_NAME, FLAGS, SYSTEM_NAME } from '../constants';\r\nimport { DefaultValues } from \"../data/DataDefaults\";\r\nimport { SR5ItemDataWrapper } from '../data/SR5ItemDataWrapper';\r\nimport { Helpers } from '../helpers';\r\nimport { PartsList } from '../parts/PartsList';\r\nimport { MatrixRules } from \"../rules/MatrixRules\";\r\nimport { TestCreator } from \"../tests/TestCreator\";\r\nimport { ChatData } from './ChatData';\r\nimport { NetworkDeviceFlow } from \"./flows/NetworkDeviceFlow\";\r\nimport { HostDataPreparation } from \"./prep/HostPrep\";\r\nimport ModList = Shadowrun.ModList;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport SpellForceData = Shadowrun.SpellForceData;\r\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\r\nimport FireRangeData = Shadowrun.FireRangeData;\r\nimport BlastData = Shadowrun.BlastData;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport SpellData = Shadowrun.SpellData;\r\nimport WeaponData = Shadowrun.WeaponData;\r\nimport AmmoData = Shadowrun.AmmoData;\r\nimport TechnologyData = Shadowrun.TechnologyData;\r\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\r\nimport SpellRange = Shadowrun.SpellRange;\r\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\nimport ActionItemData = Shadowrun.ActionItemData;\r\nimport AdeptPowerItemData = Shadowrun.AdeptPowerItemData;\r\nimport AmmoItemData = Shadowrun.AmmoItemData;\r\nimport ArmorItemData = Shadowrun.ArmorItemData;\r\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\r\nimport ContactItemData = Shadowrun.ContactItemData;\r\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\r\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\r\nimport DeviceItemData = Shadowrun.DeviceItemData;\r\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\r\nimport LifestyleItemData = Shadowrun.LifestyleItemData;\r\nimport ModificationItemData = Shadowrun.ModificationItemData;\r\nimport ProgramItemData = Shadowrun.ProgramItemData;\r\nimport QualityItemData = Shadowrun.QualityItemData;\r\nimport SinItemData = Shadowrun.SinItemData;\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\nimport SpritePowerItemData = Shadowrun.SpritePowerItemData;\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\nimport HostItemData = Shadowrun.HostItemData;\r\nimport ActionResultData = Shadowrun.ActionResultData;\r\nimport ActionTestLabel = Shadowrun.ActionTestLabel;\r\nimport MatrixMarks = Shadowrun.MatrixMarks;\r\nimport MarkedDocument = Shadowrun.MarkedDocument;\r\nimport RollEvent = Shadowrun.RollEvent;\r\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\r\n\r\n/**\r\n * WARN: I don't know why, but removing the usage of ActionResultFlow from SR5Item\r\n * causes esbuild (I assume) to re-order import dependencies resulting in vastly different orders of exceution within transpiled bundle.js code, \r\n * resulting OpposedTest not finding SuccessTest (undefined) when extending it.\r\n * \r\n * ... I'd love to remove this, or even just comment it, but tree-shaking will do it's job.\r\n * \r\n * Should you read this: Try it anyway and open any actor sheet. If it's not broken, the build issue must've been fixed somehow.\r\n * \r\n * An esbuild update might fix this, but caused other issues at the time... Didn't fix it with esbuild@0.15.14 (20.11.2022)\r\n */\r\nimport { ActionResultFlow } from './flows/ActionResultFlow';\r\nimport { DocumentModificationOptions } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/document.mjs\";\r\nActionResultFlow; // DON'T TOUCH!\r\n\r\n/**\r\n * Implementation of Shadowrun5e items (owned, unowned and embedded).\r\n *\r\n *       tamIf here: The current legacy embedded items approach has been cleaned up a bit but is still causing some issues\r\n *       with typing and ease of use.\r\n *\r\n *       SR5Item.items currently overwrites foundries internal DocumentCollection mechanism of embedded documents. Partially\r\n *       due to legacy reasons and since Foundry 0.8 SR5Item.update can't be used for embedded items in items anymore.\r\n *\r\n *        At the moment this means, that this.actor can actually be an SR5Actor as well as an SR5Item, depending on who\r\n *       'owns' the embedded item as they are created using Item.createOwned during the embedded item prep phase.\r\n *\r\n *       For this reason SR5Item.actorOwner has been introduced to allow access to the actual owning actor, no matter\r\n *       how deep embedded into other items an item is.\r\n *\r\n *       Be wary of SR5Item.actor for this reason!\r\n */\r\nexport class SR5Item extends Item {\r\n    // Item.items isn't the Foundry default ItemCollection but is overwritten within prepareNestedItems\r\n    // to allow for embedded items in items in actors.\r\n    items: SR5Item[];\r\n\r\n    // Item Sheet labels for quick info on an item dropdown.\r\n    labels: {} = {};\r\n\r\n    // Add v10 type helper\r\n    system: ShadowrunItemDataData; // TODO: foundry-vtt-types v10\r\n\r\n\r\n    /**\r\n     * Return the owner of this item, which can either be\r\n     * - an actor instance (Foundry default)\r\n     * - an item instance (shadowrun custom) for embedded items\r\n     *\r\n     * If you need the actual actor owner, no matter how deep into item embedding, this current item is use SR5item.actorOwner\r\n     */\r\n    get actor(): SR5Actor {\r\n        return super.actor as unknown as SR5Actor;\r\n    }\r\n\r\n    /**\r\n     * Helper property to get an actual actor for an owned or embedded item. You'll need this for when you work with\r\n     * embeddedItems, as they have their .actor property set to the item they're embedded into.\r\n     *\r\n     * NOTE: This helper is necessary since we have setup embedded items with an item owner, due to the current embedding\r\n     *       workflow using item.update.isOwned condition within Item.update (foundry Item) to NOT trigger a global item\r\n     *       update within the ItemCollection but instead have this.actor.updateEmbeddedEntities actually trigger SR5Item.updateEmbeddedEntities\r\n     */\r\n    get actorOwner(): SR5Actor | undefined {\r\n        // An unowned item won't have an actor.\r\n        if (!this.actor) return;\r\n        // An owned item will have an actor.\r\n        if (this.actor instanceof SR5Actor) return this.actor;\r\n        // An embedded item will have an item as an actor, which might have an actor owner.\r\n        // NOTE: This is very likely wrong and should be fixed during embedded item prep / creation. this.actor will only\r\n        //       check what is set in the items options.actor during it's construction.\r\n        //@ts-ignore\r\n        return this.actor.actorOwner;\r\n    }\r\n\r\n    private get wrapper(): SR5ItemDataWrapper {\r\n        // we need to cast here to unknown first to make ts happy\r\n        return new SR5ItemDataWrapper(this as unknown as ShadowrunItemData);\r\n    }\r\n\r\n    // Flag Functions\r\n    getLastFireMode(): FireModeData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireMode) as FireModeData || DefaultValues.fireModeData();\r\n    }\r\n    async setLastFireMode(fireMode: FireModeData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireMode, fireMode);\r\n    }\r\n    getLastSpellForce(): SpellForceData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastSpellForce) as SpellForceData|| { value: 0 };\r\n    }\r\n    async setLastSpellForce(force: SpellForceData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastSpellForce, force);\r\n    }\r\n    getLastComplexFormLevel(): ComplexFormLevelData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel) as ComplexFormLevelData || { value: 0 };\r\n    }\r\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel, level);\r\n    }\r\n    getLastFireRangeMod(): FireRangeData {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireRange) as FireRangeData || { value: 0 };\r\n    }\r\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\r\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireRange, environmentalMod);\r\n    }\r\n\r\n    /**\r\n     * Return an Array of the Embedded Item Data\r\n     */\r\n    getNestedItems(): any[] {\r\n        let items = this.getFlag(SYSTEM_NAME, FLAGS.EmbeddedItems) as any[];\r\n\r\n        items = items ? items : [];\r\n\r\n        // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\r\n        if (items && !Array.isArray(items)) {\r\n            items = Helpers.convertIndexedObjectToArray(items);\r\n        }\r\n\r\n        // Manually map wrongly converted array fields...\r\n        items = items.map(item => {\r\n            if (item.effects && !Array.isArray(item.effects)) {\r\n                item.effects = Helpers.convertIndexedObjectToArray(item.effects);\r\n            }\r\n            // TODO: foundry-vtt-types v10 - TODO: Move into migration...\r\n            // if (item.data) {\r\n            //     item.system = item.system || {};\r\n            //     mergeObject(item.system, item.data);\r\n            //     item.system = item.data;\r\n            //     delete item.data;\r\n            // }\r\n            return item;\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    /**\r\n     * Set the embedded item data\r\n     * @param items\r\n     */\r\n    async setNestedItems(items: any[]) {\r\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\r\n        // await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\r\n        await this.setFlag(SYSTEM_NAME, FLAGS.EmbeddedItems, items);\r\n    }\r\n\r\n    async clearNestedItems() {\r\n        await this.unsetFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\r\n    }\r\n\r\n    get hasOpposedRoll(): boolean {\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return !!action.opposed.test;\r\n    }\r\n\r\n    get hasRoll(): boolean {\r\n        const action = this.getAction();\r\n        return !!(action && action.type !== '' && (action.skill || action.attribute || action.attribute2 || action.dice_pool_mod));\r\n    }\r\n\r\n    /**\r\n     * Determine if a blast area should be placed using FoundryVTT area templates.\r\n     */\r\n    get hasBlastTemplate(): boolean {\r\n        return this.isAreaOfEffect;\r\n    }\r\n\r\n    /**\r\n     * PREPARE DATA CANNOT PULL FROM this.actor at ALL\r\n     * - as of foundry v0.7.4, actor data isn't prepared by the time we prepare items\r\n     * - this caused issues with Actions that have a Limit or Damage attribute and so those were moved\r\n     */\r\n    prepareData() {\r\n        super.prepareData();\r\n        this.prepareNestedItems();\r\n\r\n        // Description labels might have changed since last data prep.\r\n        this.labels = {};\r\n\r\n        if (this.type === 'sin') {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            if (typeof this.system.licenses === 'object') {\r\n                //@ts-ignore // taMiF: This seems to be a hacky solution to some internal or Foundry issue with reading\r\n                //                      a object/HashMap when an array/iterable was expected\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                this.system.licenses = Object.values(this.system.licenses);\r\n            }\r\n        }\r\n        const equippedMods = this.getEquippedMods();\r\n        const equippedAmmo = this.getEquippedAmmo();\r\n\r\n        const technology = this.getTechnologyData();\r\n        if (technology) {\r\n            // taMiF: This migration code could be needed for items imported from an older compendium?\r\n            if (technology.condition_monitor === undefined) {\r\n                technology.condition_monitor = { value: 0, max: 0, label: '' };\r\n            }\r\n            // Rating might be a string.\r\n            const rating = typeof technology.rating === 'string' ? 0 : technology.rating;\r\n            technology.condition_monitor.max = 8 + Math.ceil(rating / 2);\r\n\r\n            // Calculate conceal data.\r\n            if (!technology.conceal) technology.conceal = {base: 0, value: 0, mod: []};\r\n\r\n            const concealParts = new PartsList<number>();\r\n            equippedMods.forEach((modificiation) => {\r\n                if (modificiation.system.conceal  && modificiation.system.conceal > 0) {\r\n                    concealParts.addUniquePart(modificiation.name as string, modificiation.system.conceal);\r\n                }\r\n            });\r\n\r\n            technology.conceal.mod = concealParts.list;\r\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\r\n        }\r\n\r\n        const action = this.getAction();\r\n        if (action) {\r\n            action.alt_mod = 0;\r\n            action.limit.mod = [];\r\n            action.damage.mod = [];\r\n            action.damage.ap.mod = [];\r\n            action.dice_pool_mod = [];\r\n\r\n            // @ts-ignore\r\n            // Due to faulty template value items without a set operator will have a operator literal instead since 0.7.10.\r\n            if (action.damage.base_formula_operator === '+') {\r\n                action.damage.base_formula_operator = 'add';\r\n            }\r\n\r\n            // Item.prepareData is called once (first) with an empty SR5Actor instance without .data and once (second) with .data.\r\n            if (this.actor?.system) {\r\n                action.damage.source = {\r\n                    actorId: this.actor.id as string,\r\n                    itemId: this.id as string,\r\n                    itemName: this.name as string,\r\n                    itemType: this.type\r\n                };\r\n            }\r\n\r\n            // handle overrides from mods\r\n            const limitParts = new PartsList(action.limit.mod);\r\n            const dpParts = new PartsList(action.dice_pool_mod);\r\n            equippedMods.forEach((mod) => {\r\n                const modification = mod.asModification();\r\n                if (!modification) return;\r\n\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                if (modification.system.accuracy) limitParts.addUniquePart(mod.name as string, modification.system.accuracy);\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                if (modification.system.dice_pool) dpParts.addUniquePart(mod.name as string, modification.system.dice_pool);\r\n                \r\n            });\r\n\r\n            if (equippedAmmo) {\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                const ammoData = equippedAmmo.system as AmmoData;\r\n                // add mods to damage from ammo\r\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name as string, ammoData.damage);\r\n                // add mods to ap from ammo\r\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name as string, ammoData.ap);\r\n\r\n                if (ammoData.accuracy) limitParts.addUniquePart(equippedAmmo.name as string, ammoData.accuracy);\r\n\r\n                // override element\r\n                if (ammoData.element) {\r\n                    action.damage.element.value = ammoData.element;\r\n                } else {\r\n                    action.damage.element.value = action.damage.element.base;\r\n                }\r\n\r\n                // override damage type\r\n                if (ammoData.damageType) {\r\n                    action.damage.type.value = ammoData.damageType;\r\n                } else {\r\n                    action.damage.type.value = action.damage.type.base;\r\n                }\r\n            } else {\r\n                // set value if we don't have item overrides\r\n                action.damage.element.value = action.damage.element.base;\r\n                action.damage.type.value = action.damage.type.base;\r\n            }\r\n\r\n            // once all damage mods have been accounted for, sum base and mod to value\r\n            action.damage.value = Helpers.calcTotal(action.damage);\r\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\r\n\r\n            action.limit.value = Helpers.calcTotal(action.limit);\r\n        }\r\n\r\n        const range = this.getWeaponRange();\r\n        if (range) {\r\n            if (range.rc) {\r\n                const rangeParts = new PartsList();\r\n                equippedMods.forEach((mod) => {\r\n                    //@ts-ignore // TypeScript doesn't like this.system Item.Data<DataType> possibly being all the things.\r\n                    //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                    if (mod.system.rc) rangeParts.addUniquePart(mod.name, mod.system.rc);\r\n                    // handle overrides from ammo\r\n                });\r\n                //@ts-ignore // TypeScript doesn't like this.system Item.Data<DataType> possibly being all the things.\r\n                range.rc.mod = rangeParts.list;\r\n                //@ts-ignore // TypeScript doesn't like this.system Item.Data<DataType> possibly being all the things.\r\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\r\n            }\r\n        }\r\n\r\n        const adeptPower = this.asAdeptPower();\r\n        if (adeptPower) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            adeptPower.system.type = adeptPower.system.action.type ? 'active' : 'passive';\r\n        }\r\n\r\n        // Switch item data preparation between types...\r\n        // ... this is ongoing work to clean up SR5item.prepareData\r\n        switch (this.type) {\r\n            case 'host':\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                HostDataPreparation(this.system);\r\n        }\r\n    }\r\n\r\n    async postItemCard() {\r\n        const options = {\r\n            actor: this.actor,\r\n            description: this.getChatData(),\r\n            item: this,\r\n            previewTemplate: this.hasBlastTemplate,\r\n            tests: this.getActionTests()\r\n        };\r\n        return await createItemChatMessage(options);\r\n    }\r\n\r\n    /**\r\n     * Cast the action of this item as a Test.\r\n     *\r\n     * @param event A PointerEvent by user interaction.\r\n     */\r\n    async castAction(event?: RollEvent) {\r\n        // Only show the item's description by user intention or by lack of testability.\r\n        const dontRollTest = TestCreator.shouldPostItemDescription(event) || !this.hasRoll;\r\n        if (dontRollTest) return await this.postItemCard();\r\n\r\n        if (!this.actor) return;\r\n\r\n        const showDialog = !TestCreator.shouldHideDialog(event);\r\n        const test = await TestCreator.fromItem(this, this.actor, {showDialog});\r\n        if (!test) return;\r\n        await test.execute();\r\n}\r\n\r\n    /**\r\n     * Create display only information for this item. Used on sheets, chat messages and more.\r\n     * Both actor and item sheets.\r\n     * \r\n     * The original naming leans on the dnd5e systems use of it for chat messages.\r\n     * NOTE: This is very legacy, difficult to read and should be improved upon.\r\n     * \r\n     * @param htmlOptions \r\n     * @returns \r\n     */\r\n    getChatData(htmlOptions={}) {\r\n        const system = duplicate(this.system);\r\n        const { labels } = this;\r\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\r\n        //              that's not actually defined in any SR5Item typing.\r\n        if (!system.description) system.description = {chat: '', source: '', value: ''};\r\n        // TextEditor.enrichHTML will return null as a string, making later handling difficult.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!system.description.value) system.description.value = '';\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        system.description.value = TextEditor.enrichHTML(system.description.value, {...htmlOptions, async: false});\r\n\r\n        const props = [];\r\n        // Add additional chat data fields depending on item type.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        const chatDataForItemType = ChatData[this.type];\r\n        if (chatDataForItemType) chatDataForItemType(duplicate(system), labels, props, this);\r\n\r\n        //@ts-ignore // This is a hacky monkey patch solution to add a property to the item data\r\n        //              that's not actually defined in any SR5Item typing.\r\n        system.properties = props.filter((p) => !!p);\r\n\r\n        return system;\r\n    }\r\n\r\n    getActionTestName(): string {\r\n        const testName = this.getRollName();\r\n        return testName ? testName :  game.i18n.localize('SR5.Action');\r\n    }\r\n\r\n    /**\r\n     * Any item implementation can define a set of modifiers to be applied when used within an opposed test.\r\n     *\r\n     * NOTE: This is a legacy method of applied modifiers to opposed tests but works fine for now.\r\n     */\r\n    getOpposedTestMod(): PartsList<number> {\r\n        const parts = new PartsList<number>();\r\n\r\n        if (this.hasOpposedTest()) {\r\n            if (this.isAreaOfEffect) {\r\n                parts.addUniquePart('SR5.Aoe', -2);\r\n            }\r\n        }\r\n\r\n        return parts;\r\n    }\r\n\r\n    getBlastData(actionTestData?: any): BlastData | undefined {\r\n        if (this.isSpell && this.isAreaOfEffect) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            const system = this.system as SpellData;\r\n\r\n            // By default spell distance is equal to it's Force.\r\n            let distance = this.getLastSpellForce().value;\r\n\r\n            // Except for predefined user test selection.\r\n            if (actionTestData?.spell) {\r\n                distance = actionTestData.spell.force;\r\n            }\r\n\r\n            // Extended spells have a longer range.\r\n            if (system.extended) distance *= 10;\r\n            const dropoff = 0;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            }\r\n\r\n        } else if (this.isGrenade) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            const system = this.system as WeaponData;\r\n\r\n            const distance = system.thrown.blast.radius;\r\n            const dropoff = system.thrown.blast.dropoff;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            }\r\n\r\n        } else if (this.hasExplosiveAmmo) {\r\n            const item = this.getEquippedAmmo();\r\n            const ammo = item.asAmmo;\r\n\r\n            if (!ammo) return {radius: 0, dropoff: 0};\r\n\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            const distance = ammo.system.blast.radius;\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            const dropoff = ammo.system.blast.dropoff;\r\n\r\n            return {\r\n                radius: distance,\r\n                dropoff\r\n            };\r\n        }\r\n    }\r\n\r\n    getEquippedAmmo(): SR5Item {\r\n        const equippedAmmos = (this.items || []).filter((item) =>\r\n            item.isAmmo &&\r\n            item.isEquipped());\r\n\r\n        // Cast Typing isn't a mistake, so long as isAmmo is filtered.\r\n        return equippedAmmos[0];\r\n    }\r\n\r\n    getEquippedMods(): SR5Item[] {\r\n        return (this.items || []).filter((item) =>\r\n            item.isWeaponModification &&\r\n            item.isEquipped());\r\n    }\r\n\r\n    get hasExplosiveAmmo(): boolean {\r\n        const ammo = this.getEquippedAmmo();\r\n        if (!ammo) return false;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        const system = ammo.system as AmmoData;\r\n        return system.blast.radius > 0;\r\n    }\r\n\r\n    /**\r\n     * Toggle equipment state of a single Modification item.\r\n     * @param iid Modification item id to be equip toggled\r\n     */\r\n    async equipWeaponMod(iid) {\r\n        await this.equipNestedItem(iid, 'modification', {unequipOthers: false, toggle: true});\r\n    }\r\n\r\n    /**\r\n     * Check if weapon has enough ammunition.\r\n     *\r\n     * @param rounds The amount of rounds to be fired\r\n     * @returns Either the weapon has no ammo at all or not enough.\r\n     */\r\n    hasAmmo(rounds: number=0): boolean {\r\n        return this.ammoLeft >= rounds;\r\n    }\r\n\r\n    /**\r\n     * Amount of ammunition this weapon has currently available\r\n     */\r\n    get ammoLeft(): number {\r\n        const ammo = this.wrapper.getAmmo();\r\n        if (!ammo) return 0;\r\n\r\n        return ammo.current.value;\r\n    }\r\n\r\n    /**\r\n     * Use the weapons ammunition with the amount of bullets fired.\r\n     * @param fired Amount of bullets fired.\r\n     */\r\n    async useAmmo(fired) {\r\n        if (this.type !== 'weapon') return;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        const value = Math.max(0, this.system.ammo.current.value - fired);\r\n        return await this.update({'system.ammo.current.value': value});\r\n    }\r\n\r\n    async reloadAmmo() {\r\n        if (this.type !== 'weapon') return;\r\n        \r\n        // Reload this weapons ammunition to it's max capacity.\r\n        const updateData = {};\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        const diff = this.system.ammo.current.max - this.system.ammo.current.value;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        updateData['system.ammo.current.value'] = this.system.ammo.current.max;\r\n        \r\n        // TODO: Make actual use of this spare clips system...\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        if (this.system.ammo.current.spare_clips) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            updateData['system.ammo.current.value'] = Math.max(0, this.system.ammo.spare_clips.value - 1);\r\n        }\r\n        \r\n        await this.update(updateData);\r\n\r\n\r\n        // Reduce capacity in whatever equipped nested ammunition item.\r\n        // TODO: This must be the other way around. Reduce equipped ammo first and only reload what's possible to the weapon item.\r\n        //       Additionally there needs to be a reload clip mechanism equipping / unequipping clips/mags\r\n        const newAmmunition = (this.items || [])\r\n            .filter((i) => i.type === 'ammo')\r\n            .reduce((acc: AmmoItemData[], item: SR5Item) => {\r\n                //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                // Not-equipped ammunition isn't expected to be consumed.\r\n                if (item.data && item.data.system.technology.equipped) {\r\n\r\n                    const itemData = item.toObject() as AmmoItemData;\r\n                    //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                    const qty = typeof itemData.system.technology.quantity === 'string' ? 0 : itemData.system.technology.quantity;\r\n\r\n                    // Inform user about missing rounds.\r\n                    if (qty - diff < 0) {\r\n                        ui.notifications?.warn('SR5.Warnings.CantConsumeEquippedAmmo', {localize: true})\r\n                    }\r\n                    \r\n                    //@ts-ignore // TODO: foundry-vtt-types v10 \r\n                    itemData.system.technology.quantity = Math.max(0, qty - diff);\r\n                    acc.push(itemData);\r\n                }\r\n                \r\n                return acc;\r\n            }, []);\r\n\r\n        if (newAmmunition && newAmmunition.length) {\r\n            await this.updateNestedItems(newAmmunition);\r\n\r\n            // Inform user about change to equipped ammo.\r\n            ui.notifications?.info('SR5.Infos.ConsumedEquippedAmmo', {localize: true});\r\n        }\r\n    }\r\n\r\n    async equipNestedItem(id: string, type: string, options: {unequipOthers?: boolean, toggle?: boolean}={}) {\r\n        const unequipOthers = options.unequipOthers || false;\r\n        const toggle = options.toggle || false;\r\n\r\n        // Collect all item data and update at once.\r\n        const updateData: Record<any, any>[] = [];\r\n        const ammoItems = this.items.filter(item => item.type === type);\r\n            \r\n        for (const item of ammoItems) {\r\n            if (!unequipOthers && item.id !== id) continue;\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            const equip = toggle ? !item.system.technology.equipped : id === item.id;\r\n\r\n            updateData.push({_id: item.id, 'system.technology.equipped': equip});\r\n        }\r\n\r\n        if (updateData) await this.updateNestedItems(updateData);\r\n    }\r\n\r\n    /**\r\n     * Equip one ammo item exclusivley.\r\n     * \r\n     * @param id Item id of the to be exclusivley equipped ammo item.\r\n     */\r\n    async equipAmmo(id) {\r\n        await this.equipNestedItem(id, 'ammo', {unequipOthers: true});\r\n    }\r\n\r\n    async addNewLicense() {\r\n        if (this.type !== 'sin') return;\r\n\r\n        // NOTE: This might be related to Foundry data serialization sometimes returning arrays as ordered HashMaps...\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        const licenses = foundry.utils.getType(this.system.licenses) === 'Object' ? \r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            Object.values(this.system.licenses) :\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            this.system.licenses;\r\n\r\n        if (!licenses) return;\r\n        \r\n        // Add the new license to the list\r\n        licenses.push({\r\n            name: '',\r\n            rtg: '',\r\n            description: '',\r\n        });\r\n\r\n        await this.update({'system.licenses': licenses});\r\n    }\r\n\r\n    getRollPartsList(): ModList<number> {\r\n        // we only have a roll if we have an action or an actor\r\n        const action = this.getAction();\r\n        if (!action || !this.actor) return [];\r\n\r\n        // @ts-ignore\r\n        const parts = new PartsList(duplicate(this.getModifierList()));\r\n\r\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\r\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\r\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\r\n\r\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\r\n\r\n        // if we have a valid skill, don't look for a second attribute\r\n        if (skill) {\r\n            parts.addUniquePart(skill.label || skill.name, skill.value);\r\n            SkillFlow.handleDefaulting(skill, parts);\r\n        }\r\n        else if (attribute2 && attribute2.label) {\r\n            parts.addPart(attribute2.label, attribute2.value);\r\n        }\r\n\r\n        const spec = this.getActionSpecialization();\r\n        if (spec) parts.addUniquePart(spec, 2);\r\n\r\n        //@ts-ignore parseInt does allow for number type parameter. // TODO: foundry-vtt-types v10\r\n        const mod = parseInt(this.system.action.mod || 0);\r\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\r\n\r\n        const atts: (AttributeField | SkillField)[] | boolean = [];\r\n        if (attribute !== undefined) atts.push(attribute);\r\n        if (attribute2 !== undefined) atts.push(attribute2);\r\n        if (skill !== undefined) atts.push(skill);\r\n        // add global parts from actor\r\n        this.actor._addGlobalParts(parts);\r\n        this.actor._addMatrixParts(parts, atts);\r\n        this._addWeaponParts(parts);\r\n\r\n        return parts.list;\r\n    }\r\n\r\n    calculateRecoil() {\r\n        const lastFireMode = this.getLastFireMode();\r\n        if (!lastFireMode) return 0;\r\n        if (lastFireMode.value === 20) return 0;\r\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\r\n    }\r\n\r\n    _addWeaponParts(parts: PartsList<number>) {\r\n        if (this.isRangedWeapon) {\r\n            const recoil = this.calculateRecoil();\r\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\r\n        }\r\n    }\r\n\r\n    get isSin(): boolean {\r\n        return this.wrapper.isSin();\r\n    }\r\n\r\n    get asSin(): SinItemData | undefined {\r\n        if (this.isSin) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as SinItemData;\r\n        }\r\n    }\r\n\r\n    get isLifestyle(): boolean {\r\n        return this.wrapper.isLifestyle();\r\n    }\r\n\r\n    get asLifestyle(): LifestyleItemData | undefined {\r\n        if (this.isLifestyle) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as LifestyleItemData;\r\n        }\r\n    }\r\n\r\n    get isAmmo(): boolean {\r\n        return this.wrapper.isAmmo();\r\n    }\r\n\r\n    get isAoEAmmo(): boolean {\r\n        return this.wrapper.isAoEAmmo();\r\n    }\r\n\r\n    get asAmmo(): AmmoItemData | undefined {\r\n        if (this.isAmmo) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as AmmoItemData;\r\n        }\r\n    }\r\n\r\n    get isModification(): boolean {\r\n        return this.wrapper.isModification();\r\n    }\r\n\r\n    asModification(): ModificationItemData | undefined {\r\n        if (this.isModification) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as ModificationItemData;\r\n        }\r\n    }\r\n\r\n    get isWeaponModification(): boolean {\r\n        return this.wrapper.isWeaponModification();\r\n    }\r\n\r\n    get isArmorModification(): boolean {\r\n        return this.wrapper.isArmorModification();\r\n    }\r\n\r\n    get isProgram(): boolean {\r\n        return this.wrapper.isProgram();\r\n    }\r\n\r\n    get asProgram(): ProgramItemData | undefined {\r\n        if (this.isProgram) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as ProgramItemData;\r\n        }\r\n    }\r\n\r\n    get isQuality(): boolean {\r\n        return this.wrapper.isQuality();\r\n    }\r\n\r\n    get asQuality(): QualityItemData | undefined {\r\n        if (this.isQuality) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as QualityItemData;\r\n        }\r\n    }\r\n\r\n    get isAdeptPower(): boolean {\r\n        return this.type === 'adept_power';\r\n    }\r\n\r\n    asAdeptPower(): AdeptPowerItemData|undefined {\r\n        if (this.isAdeptPower)\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as AdeptPowerItemData;\r\n    }\r\n\r\n\r\n    get isHost(): boolean {\r\n        return this.type === 'host';\r\n    }\r\n\r\n    get asHost(): HostItemData|undefined {\r\n        if (this.isHost) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as HostItemData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * SIN Item - remove a single license within this SIN\r\n     * \r\n     * @param index The license list index\r\n     */\r\n    async removeLicense(index) {\r\n        if (this.type !== 'sin') return;\r\n\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        const licenses = this.system.licenses.splice(index, 1);\r\n        await this.update({'system.licenses': licenses});\r\n    }\r\n\r\n    isAction(): boolean {\r\n        return this.wrapper.isAction();\r\n    }\r\n\r\n    asAction(): ActionItemData | undefined {\r\n        if (this.isAction()) {\r\n            //@ts-ignore TODO: foundry-vtt-types v10\r\n            return this as ActionItemData;\r\n        }\r\n    }\r\n\r\n    async rollOpposedTest(target: SR5Actor, attack: AttackData, event):  Promise<void> {\r\n        console.error(`Shadowrun5e | ${this.constructor.name}.rollOpposedTest is not supported anymore`);\r\n    }\r\n\r\n    async rollTestType(type: string, attack: AttackData, event, target: SR5Actor) {\r\n        if (type === 'opposed') {\r\n            await this.rollOpposedTest(target, attack, event);\r\n        }\r\n        if (type === 'action') {\r\n            await this.castAction(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The item can be stored on a token on the current or another, given, scene.\r\n     *\r\n     * The chat message must contain a data attribute containing a 'SceneId.TokenId' mapping.\r\n     * See chat.ts#getTokenSceneId for further context.\r\n     *\r\n     *\r\n     * @param html\r\n     */\r\n    static getItemFromMessage(html): SR5Item | undefined {\r\n        if (!game || !game.scenes || !game.ready || !canvas || !canvas.ready || !canvas.scene) return;\r\n\r\n        const card = html.find('.chat-card');\r\n        let actor;\r\n        const sceneTokenId = card.data('tokenId');\r\n        if (sceneTokenId) actor = Helpers.getSceneTokenActor(sceneTokenId);\r\n        else actor = game.actors?.get(card.data('actorId'));\r\n\r\n        if (!actor) return;\r\n        const itemId = card.data('itemId');\r\n        return actor.items.get(itemId);\r\n    }\r\n\r\n    static getTargets() {\r\n        if (!game.ready || !game.user) return;\r\n        const { character } = game.user;\r\n        // @ts-ignore\r\n        const { controlled } = canvas.tokens;\r\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\r\n        if (character && controlled.length === 0) targets.push(character);\r\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\r\n        return targets;\r\n    }\r\n\r\n    getActionTests(): ActionTestLabel[] {\r\n        if (!this.hasRoll) return []\r\n\r\n        return [{\r\n            label: this.getActionTestName(),\r\n            uuid: this.uuid\r\n        }];\r\n    }\r\n\r\n    getActionResult(): ActionResultData|undefined {\r\n        if (!this.isAction()) return;\r\n\r\n        return this.wrapper.getActionResult();\r\n    }\r\n\r\n    /**\r\n     * Create an item in this item\r\n     * @param itemData\r\n     * @param options\r\n     * \r\n     * //@ts-ignore TODO: foundry-vtt-types v10 Rework method...\r\n     */\r\n    async createNestedItem(itemData, options = {}) {\r\n        if (!Array.isArray(itemData)) itemData = [itemData];\r\n        // weapons accept items\r\n        if (this.type === 'weapon') {\r\n            const currentItems = duplicate(this.getNestedItems());\r\n\r\n            itemData.forEach((ogItem) => {\r\n                const item = duplicate(ogItem);\r\n                item._id = randomID(16);\r\n                if (item.type === 'ammo' || item.type === 'modification') {\r\n                    if (item?.system?.technology?.equipped) {\r\n                        item.system.technology.equipped = false;\r\n                    }\r\n                    currentItems.push(item);\r\n                }\r\n            });\r\n\r\n            await this.setNestedItems(currentItems);\r\n        }\r\n        this.prepareNestedItems();\r\n        this.prepareData();\r\n        this.render(false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare embeddedItems\r\n     */\r\n    prepareNestedItems() {\r\n        this.items = this.items || [];\r\n        \r\n        const items = this.getNestedItems();\r\n        if (!items) return;\r\n\r\n        // Reduce items to id:item HashMap style\r\n        const loaded = this.items.reduce((object, item) => {\r\n            object[item.id as string] = item;\r\n            return object;\r\n        }, {});\r\n\r\n        // Merge and overwrite existing owned items with new changes.\r\n        const tempItems = items.map((item) => {\r\n            // Set user permissions to owner, to allow none-GM users to edit their own nested items.\r\n            const data = game.user ? {ownership: {[game.user.id]: CONST.DOCUMENT_PERMISSION_LEVELS.OWNER}} :\r\n                                     {};\r\n            item = mergeObject(item, data);\r\n\r\n            // Case: MODIFY => Update existing item.\r\n            if (item._id in loaded) {\r\n                const currentItem = loaded[item._id];\r\n                \r\n                // Update DocumentData directly, since we're not really having database items here.\r\n                currentItem.updateSource(item);\r\n                currentItem.prepareData();\r\n                return currentItem;\r\n\r\n            // Case: CREATE => Create new item.\r\n            } else {\r\n                // NOTE: It's important to deliver the item as the item parent document, even though this is meant for actor owners.\r\n                //       The legacy approach for embeddedItems (within another item) relies upon this.actor\r\n                //       returning an SR5Item instance to call .updateEmbeddedEntities, while Foundry expects an actor\r\n                return new SR5Item(item, {parent: this as unknown as SR5Actor});\r\n            }\r\n        });\r\n\r\n        this.items = tempItems;\r\n    }\r\n\r\n    // TODO: Rework to either use custom embeddedCollection or Map\r\n    getOwnedItem(itemId): SR5Item | undefined {\r\n        const items = this.items;\r\n        if (!items) return;\r\n        return items.find((item) => item.id === itemId);\r\n    }\r\n\r\n    // TODO: Rework this method. It's complicated and obvious optimizations can be made. (find vs findIndex)\r\n    async updateNestedItems(changes) {\r\n        const items = duplicate(this.getNestedItems());\r\n        if (!items) return;\r\n        changes = Array.isArray(changes) ? changes : [changes];\r\n        if (!changes || changes.length === 0) return;\r\n        changes.forEach((itemChanges) => {\r\n            const index = items.findIndex((i) => i._id === itemChanges._id);\r\n            if (index === -1) return;\r\n            const item = items[index];\r\n\r\n            // TODO: The _id field has been added by the system. Even so, don't change the id to avoid any byproducts.\r\n            delete itemChanges._id;\r\n\r\n            if (item) {\r\n                itemChanges = expandObject(itemChanges);\r\n                mergeObject(item, itemChanges);\r\n                items[index] = item;\r\n                // this.items[index].data = items[index];\r\n            }\r\n        });\r\n\r\n        await this.setNestedItems(items);\r\n        this.prepareNestedItems();\r\n        this.prepareData();\r\n        this.render(false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This method hooks into the Foundry Item.update approach and is called using this<Item>.actor.updateEmbeddedEntity.\r\n     *\r\n     * @param embeddedName\r\n     * @param data\r\n     * @param options\r\n     */\r\n    // @ts-ignore\r\n    async updateEmbeddedEntity(embeddedName, data, options?): Promise<any> {\r\n        await this.updateNestedItems(data);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an owned item\r\n     * @param deleted\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async deleteOwnedItem(deleted) {\r\n        const items = duplicate(this.getNestedItems());\r\n        if (!items) return;\r\n\r\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\r\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\r\n        items.splice(idx, 1);\r\n        // we need to clear the items when one is deleted or it won't actually be deleted\r\n        await this.clearNestedItems();\r\n        await this.setNestedItems(items);\r\n        await this.prepareNestedItems();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Use the items source field to open it as another browser tab.\r\n     * \r\n     * This is meant to allow for wikis to be used as sources.\r\n     */\r\n    openSourceURL() {\r\n        const source = this.getSource();\r\n        if (source === '') {\r\n            ui.notifications?.error('SR5.SourceFieldEmptyError', {localize: true});\r\n        }\r\n\r\n        window.open(source);\r\n    }\r\n\r\n    /**\r\n     * Use the items source field to try matching it against a PDF document and display that within FoundryVTT.\r\n     */\r\n    openSourcePDF() {\r\n        // Check for pdfpager module hook: https://github.com/farling42/fvtt-pdf-pager\r\n        if (!ui['pdfpager']) {\r\n            ui.notifications?.warn('SR5.DIALOG.MissingModuleContent', {localize: true});\r\n            return;\r\n        }\r\n\r\n        const source = this.getSource();\r\n        if (source === '') {\r\n            ui.notifications?.error('SR5.SourceFieldEmptyError', {localize: true});\r\n        }\r\n\r\n        const [code, page] = source.split(' ');\r\n\r\n        //@ts-ignore\r\n        ui.pdfpager.openPDFByCode(code, { page: parseInt(page) });\r\n    }\r\n\r\n    /**\r\n     * Use the items source field and try different means of opening it.\r\n     */\r\n    openSource() {\r\n        const source = this.getSource();\r\n\r\n        if (Helpers.isURL(source)) {\r\n            return this.openSourceURL();\r\n        }\r\n\r\n        return this.openSourcePDF();\r\n    }\r\n\r\n    _canDealDamage(): boolean {\r\n        // NOTE: Double negation to force boolean comparison casting.\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return !!action.damage.type.base;\r\n    }\r\n\r\n    getAction(): ActionRollData|undefined {\r\n        return this.wrapper.getAction();\r\n    }\r\n\r\n    getExtended(): boolean {\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return action.extended;\r\n    }\r\n\r\n    getTechnologyData(): TechnologyData|undefined {\r\n        return this.wrapper.getTechnology();\r\n    }\r\n\r\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\r\n        return this.wrapper.getRange();\r\n    }\r\n\r\n    getWeaponRange(): RangeWeaponData|undefined {\r\n        if (this.isRangedWeapon)\r\n            return this.getRange() as RangeWeaponData;\r\n    }\r\n\r\n    getRollName(): string {\r\n        if (this.isRangedWeapon) {\r\n            return game.i18n.localize('SR5.RangeWeaponAttack');\r\n        }\r\n        if (this.isMeleeWeapon) {\r\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\r\n        }\r\n        if (this.isCombatSpell) {\r\n            return game.i18n.localize('SR5.SpellAttack');\r\n        }\r\n        if (this.isSpell) {\r\n            return game.i18n.localize('SR5.SpellCast');\r\n        }\r\n        if (this.hasRoll) {\r\n            return this.name as string;\r\n        }\r\n\r\n        return DEFAULT_ROLL_NAME;\r\n    }\r\n\r\n    /**\r\n     * An attack with this weapon will create an area of effect / blast.\r\n     * \r\n     * There is a mulitide of possibilties as to HOW an item can create an AoE, \r\n     * both directly connected to the item and / or some of it's nested items.\r\n     * \r\n     */\r\n    get isAreaOfEffect(): boolean {\r\n        return this.wrapper.isAreaOfEffect() || this.hasExplosiveAmmo;\r\n    }\r\n\r\n    get isArmor(): boolean {\r\n        return this.wrapper.isArmor();\r\n    }\r\n\r\n    get asArmor(): ArmorItemData | undefined {\r\n        if (this.isArmor) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as ArmorItemData;\r\n        }\r\n    }\r\n\r\n    get hasArmorBase(): boolean {\r\n        return this.wrapper.hasArmorBase();\r\n    }\r\n\r\n    get hasArmorAccessory(): boolean {\r\n        return this.wrapper.hasArmorAccessory();\r\n    }\r\n\r\n    get hasArmor(): boolean {\r\n        return this.wrapper.hasArmor();\r\n    }\r\n\r\n    get isGrenade(): boolean {\r\n        return this.wrapper.isGrenade();\r\n    }\r\n\r\n    get isWeapon(): boolean {\r\n        return this.wrapper.isWeapon();\r\n    }\r\n\r\n    get asWeapon(): WeaponItemData | undefined {\r\n        if (this.isWeapon) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as WeaponItemData;\r\n        }\r\n    }\r\n\r\n    get isRangedWeapon(): boolean {\r\n        return this.wrapper.isRangedWeapon();\r\n    }\r\n\r\n    get isMeleeWeapon(): boolean {\r\n        return this.wrapper.isMeleeWeapon();\r\n    }\r\n\r\n    get isCyberware(): boolean {\r\n        return this.wrapper.isCyberware();\r\n    }\r\n\r\n    get asCyberware(): CyberwareItemData | undefined {\r\n        if (this.isCyberware) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as CyberwareItemData;\r\n        }\r\n    }\r\n\r\n    get isCombatSpell(): boolean {\r\n        return this.wrapper.isCombatSpell();\r\n    }\r\n\r\n    get isDirectCombatSpell(): boolean {\r\n        return this.wrapper.isDirectCombatSpell();\r\n    }\r\n\r\n    get isIndirectCombatSpell(): boolean {\r\n        return this.wrapper.isIndirectCombatSpell();\r\n    }\r\n\r\n    get isManaSpell(): boolean {\r\n        return this.wrapper.isManaSpell();\r\n    }\r\n\r\n    get isPhysicalSpell(): boolean {\r\n        return this.wrapper.isPhysicalSpell();\r\n    }\r\n\r\n    get isSpell(): boolean {\r\n        return this.wrapper.isSpell();\r\n    }\r\n\r\n    get asSpell(): SpellItemData | undefined {\r\n        if (this.isSpell) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as SpellItemData;\r\n        }\r\n    }\r\n\r\n    get isSpritePower(): boolean {\r\n        return this.wrapper.isSpritePower();\r\n    }\r\n\r\n    get asSpritePower(): SpritePowerItemData | undefined {\r\n        if (this.isSpritePower) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as SpritePowerItemData;\r\n        }\r\n    }\r\n\r\n    get isBioware(): boolean {\r\n        return this.wrapper.isBioware();\r\n    }\r\n\r\n    get isComplexForm(): boolean {\r\n        return this.wrapper.isComplexForm();\r\n    }\r\n\r\n    get asComplexForm(): ComplexFormItemData | undefined {\r\n        if (this.isComplexForm) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as ComplexFormItemData;\r\n        }\r\n    }\r\n\r\n    get isContact(): boolean {\r\n        return this.wrapper.isContact();\r\n    }\r\n\r\n    get asContact(): ContactItemData | undefined {\r\n        if (this.isContact) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as ContactItemData;\r\n        }\r\n    }\r\n\r\n    get isCritterPower(): boolean {\r\n        return this.wrapper.isCritterPower();\r\n    }\r\n\r\n    get asCritterPower(): CritterPowerItemData | undefined {\r\n        if (this.isCritterPower) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as CritterPowerItemData;\r\n        }\r\n    }\r\n\r\n    get isDevice(): boolean {\r\n        return this.wrapper.isDevice();\r\n    }\r\n\r\n    get asDevice(): DeviceItemData | undefined {\r\n        if (this.isDevice) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as DeviceItemData;\r\n        }\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10\r\n    asController(): HostItemData | DeviceItemData | undefined {\r\n        return this.asHost || this.asDevice || undefined;\r\n    }\r\n\r\n    isEquipment(): boolean {\r\n        return this.wrapper.isEquipment();\r\n    }\r\n\r\n    get asEquipment(): EquipmentItemData | undefined {\r\n        if (this.isEquipment()) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this as EquipmentItemData;\r\n        }\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.wrapper.isEquipped();\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.wrapper.isCyberdeck();\r\n    }\r\n\r\n    isCommlink(): boolean {\r\n        return this.wrapper.isCommlink();\r\n    }\r\n\r\n    isMatrixAction(): boolean {\r\n        return this.wrapper.isMatrixAction();\r\n    }\r\n\r\n    getSource(): string {\r\n        return this.wrapper.getSource();\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.wrapper.getConditionMonitor();\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.wrapper.getRating();\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.wrapper.getArmorValue();\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        return this.wrapper.getArmorElements();\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.wrapper.getEssenceLoss();\r\n    }\r\n\r\n    getASDF() {\r\n        return this.wrapper.getASDF();\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.wrapper.getActionSkill();\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.wrapper.getActionAttribute();\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.wrapper.getActionAttribute2();\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.wrapper.getModifierList();\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        return this.wrapper.getActionSpecialization();\r\n    }\r\n\r\n    get getDrain(): number {\r\n        return this.wrapper.getDrain();\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.wrapper.getFade();\r\n    }\r\n\r\n    getRecoilCompensation(includeActor: boolean = true): number {\r\n        let rc = this.wrapper.getRecoilCompensation();\r\n        if (includeActor && this.actor) {\r\n            rc += this.actor.getRecoilCompensation();\r\n        }\r\n        return rc;\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10 \r\n            const system = this.system as WeaponData;\r\n            return system.melee.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getCondition(): ConditionData|undefined {\r\n        const technology = this.getTechnologyData();\r\n        if (technology && \"condition_monitor\" in technology)\r\n            return technology.condition_monitor;\r\n    }\r\n\r\n    hasOpposedTest(): boolean {\r\n        if (!this.hasOpposedRoll) return false;\r\n        const action = this.getAction();\r\n        if (!action) return false;\r\n        return action.opposed.test !== '';\r\n    }\r\n\r\n    /**\r\n     * A host type item can store IC actors to spawn in order, use this method to add into that.\r\n     * @param id An IC type actor id to fetch the actor with.\r\n     * @param pack Optional pack collection to fetch from\r\n     */\r\n    async addIC(id: string, pack: string|null = null) {\r\n        const host = this.asHost;\r\n        if (!host || !id) return;\r\n\r\n        // Check if actor exists before adding.\r\n        const actor = (pack ? await Helpers.getEntityFromCollection(pack, id) : game.actors?.get(id)) as SR5Actor;\r\n        if (!actor || !actor.isIC()) {\r\n            console.error(`Provided actor id ${id} doesn't exist (with pack collection '${pack}') or isn't an IC type`);\r\n            return;\r\n        }\r\n\r\n        const icData = actor.asIC();\r\n        if (!icData) return;\r\n\r\n        // Add IC to the hosts IC order\r\n        const sourceEntity = DefaultValues.sourceEntityData({\r\n            id: actor.id as string,\r\n            name: actor.name as string,\r\n            type: 'Actor',\r\n            pack,\r\n            // Custom fields for IC\r\n            data: {icType: icData.data.icType},\r\n        });\r\n        host.system.ic.push(sourceEntity);\r\n\r\n        await this.update({'system.ic': host.system.ic});\r\n    }\r\n\r\n    /**\r\n     * A host type item can contain IC in an order. Use this function remove IC at the said position\r\n     * @param index The position in the IC order to be removed\r\n     */\r\n    async removeIC(index: number) {\r\n        if (isNaN(index) || index < 0) return;\r\n\r\n        const host = this.asHost;\r\n        if (!host) return;\r\n        if (host.system.ic.length <= index) return;\r\n\r\n        host.system.ic.splice(index, 1);\r\n\r\n        await this.update({'system.ic': host.system.ic});\r\n    }\r\n\r\n    get _isNestedItem(): boolean {\r\n        return this.hasOwnProperty('parent') && this.parent instanceof SR5Item;\r\n    }\r\n\r\n    /**\r\n     * Hook into the Item.update process for embedded items.\r\n     *\r\n     * @param data changes made to the SR5ItemData\r\n     */\r\n    async updateNestedItem(data): Promise<this> {\r\n        if (!this.parent || this.parent instanceof SR5Actor) return this;\r\n        // Inform the parent item about changes to one of it's embedded items.\r\n        // TODO: updateOwnedItem needs the id of the update item. hand the item itself over, to the hack within updateOwnedItem for this.\r\n        data._id = this.id;\r\n\r\n        // Shadowrun Items can contain other items, while Foundry Items can't. Use the system local implementation for items.\r\n        // @ts-ignore\r\n        await this.parent.updateNestedItems(data);\r\n\r\n        // After updating all item embedded data, rerender the sheet to trigger the whole rerender workflow.\r\n        // Otherwise changes in the template of an hiddenItem will show for some fields, while not rerendering all\r\n        // #if statements (hidden fields for other values, won't show)\r\n        await this.sheet?.render(false);\r\n\r\n        return this;\r\n    }\r\n\r\n    async update(data, options?): Promise<this> {\r\n        // Item.item => Embedded item into another item!\r\n        if (this._isNestedItem) {\r\n            return this.updateNestedItem(data);\r\n        }\r\n\r\n        // Actor.item => Directly owned item by an actor!\r\n        // @ts-ignore\r\n        return await super.update(data, options);\r\n    }\r\n\r\n    /**\r\n     * Place a Matrix Mark for this Item.\r\n     *\r\n     * @param target The Document the marks are placed on. This can be an actor (character, technomancer, IC) OR an item (Host)\r\n     * @param marks Amount of marks to be placed.\r\n     * @param options Additional options that may be needed.\r\n     * @param options.scene The scene the targeted actor lives on.\r\n     * @param options.item\r\n     *\r\n     * TODO: It might be useful to create a 'MatrixDocument' class sharing matrix methods to avoid duplication between\r\n     *       SR5Item and SR5Actor.\r\n     */\r\n    async setMarks(target: Token, marks: number, options?: {scene?: Scene, item?: Item, overwrite?: boolean}) {\r\n        if (!canvas.ready) return;\r\n\r\n        if (!this.isHost) {\r\n            console.error('Only Host item types can place matrix marks!');\r\n            return;\r\n        }\r\n\r\n        // Both scene and item are optional.\r\n        const scene = options?.scene || canvas.scene as Scene;\r\n        const item = options?.item;\r\n\r\n        // Build the markId string. If no item has been given, there still will be a third split element.\r\n        // Use Helpers.deconstructMarkId to get the elements.\r\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\r\n        const host = this.asHost;\r\n\r\n        if (!host) return;\r\n\r\n        const currentMarks = options?.overwrite ? 0 : this.getMarksById(markId);\r\n        host.system.marks[markId] = MatrixRules.getValidMarksCount(currentMarks + marks);\r\n\r\n        await this.update({'system.marks': host.system.marks});\r\n    }\r\n\r\n    getMarksById(markId: string): number {\r\n        const host = this.asHost;\r\n        return host ? host.system.marks[markId] : 0;\r\n    }\r\n\r\n    getAllMarks(): MatrixMarks|undefined {\r\n        const host = this.asHost;\r\n        if (!host) return;\r\n        return host.system.marks;\r\n    }\r\n\r\n    /**\r\n     * Receive the marks placed on either the given target as a whole or one it's owned items.\r\n     *\r\n     * @param target\r\n     * @param item\r\n     * @param options\r\n     *\r\n     * TODO: Check with technomancers....\r\n     *\r\n     * @return Will always return a number. At least zero, for no marks placed.\r\n     */\r\n    getMarks(target: SR5Actor, item?: SR5Item, options?: {scene?: Scene}): number {\r\n        if (!canvas.ready) return 0;\r\n        if (!this.isHost) return 0;\r\n\r\n        // Scene is optional.\r\n        const scene = options?.scene || canvas.scene as Scene;\r\n        item = item || target.getMatrixDevice();\r\n\r\n        const markId = Helpers.buildMarkId(scene.id as string, target.id as string, item?.id as string);\r\n        const host = this.asHost;\r\n\r\n        if (!host) return 0\r\n\r\n        return host.system.marks[markId] || 0;\r\n    }\r\n\r\n    /**\r\n     * Remove ALL marks placed by this item.\r\n     *\r\n     * TODO: Allow partial deletion based on target / item\r\n     */\r\n    async clearMarks() {\r\n        if (!this.isHost) return;\r\n\r\n        const host = this.asHost;\r\n\r\n        if (!host) return;\r\n\r\n        // Delete all markId properties from ActorData\r\n        const updateData = {}\r\n        for (const markId of Object.keys(host.system.marks)) {\r\n            updateData[`-=${markId}`] = null;\r\n        }\r\n\r\n        await this.update({'system.marks': updateData});\r\n    }\r\n\r\n    /**\r\n     * Remove ONE mark. If you want to delete all marks, use clearMarks instead.\r\n     */\r\n    async clearMark(markId: string) {\r\n        if (!this.isHost) return;\r\n\r\n        const updateData = {}\r\n        updateData[`-=${markId}`] = null;\r\n\r\n        await this.update({'system.marks': updateData});\r\n    }\r\n\r\n    /**\r\n     * Configure the given matrix item to be controlled by this item in a PAN/WAN.\r\n     * @param target The matrix item to be connected.\r\n     */\r\n    async addNetworkDevice(target: SR5Item) {\r\n        // TODO: Add device to WAN network\r\n        // TODO: Add IC actor to WAN network\r\n        // TODO: setup networkController link on networked devices.\r\n        await NetworkDeviceFlow.addDeviceToNetwork(this, target);\r\n    }\r\n\r\n    /**\r\n     * Alias method for addNetworkDevice, both do the same.\r\n     * @param target\r\n     */\r\n    async addNetworkController(target: SR5Item) {\r\n        await this.addNetworkDevice(target);\r\n    }\r\n\r\n    async removeNetworkDevice(index: number) {\r\n        const controllerData = this.asController();\r\n        if (!controllerData) return;\r\n\r\n        // Convert the index to a device link.\r\n        if (controllerData.system.networkDevices[index] === undefined) return;\r\n        const networkDeviceLink = controllerData.system.networkDevices[index];\r\n        const controller = this;\r\n        return await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, networkDeviceLink);\r\n    }\r\n\r\n    async removeAllNetworkDevices() {\r\n        const controllerData = this.asController();\r\n        if (!controllerData) return;\r\n\r\n        return await NetworkDeviceFlow.removeAllDevicesFromNetwork(this);\r\n    }\r\n\r\n    getAllMarkedDocuments(): MarkedDocument[] {\r\n        if (!this.isHost) return [];\r\n\r\n        const marks = this.getAllMarks();\r\n        if (!marks) return [];\r\n\r\n        // Deconstruct all mark ids into documents.\r\n        // @ts-ignore\r\n        return Object.entries(marks)\r\n            .filter(([markId, marks]) => Helpers.isValidMarkId(markId))\r\n            .map(([markId, marks]) => ({\r\n                ...Helpers.getMarkIdDocuments(markId),\r\n                marks,\r\n                markId\r\n            }))\r\n    }\r\n\r\n    /**\r\n     * Return the network controller item when connected to a PAN or WAN.\r\n     */\r\n    get networkController(): SR5Item | undefined {\r\n        const technologyData = this.getTechnologyData();\r\n        if (!technologyData) return;\r\n        if (!technologyData.networkController) return;\r\n\r\n        return NetworkDeviceFlow.resolveLink(technologyData.networkController) as SR5Item;\r\n    }\r\n\r\n    /**\r\n     * Return all network device items within a possible PAN or WAN.\r\n     */\r\n    get networkDevices(): SR5Item[] {\r\n        const controller = this.asDevice || this.asHost;\r\n        if (!controller) return [];\r\n\r\n        return NetworkDeviceFlow.getNetworkDevices(this);\r\n    }\r\n\r\n    /**\r\n     * Only devices can control a network.\r\n     */\r\n    get canBeNetworkController(): boolean {\r\n        return this.isDevice || this.isHost;\r\n    }\r\n\r\n    /**\r\n     * Assume all items with that are technology (therefore have a rating) are active matrix devices.\r\n     */\r\n    get canBeNetworkDevice(): boolean {\r\n        const technologyData = this.getTechnologyData();\r\n        return !!technologyData;\r\n    }\r\n\r\n    /**\r\n     * Disconnect any kind of item from a PAN or WAN.\r\n     */\r\n    async disconnectFromNetwork() {\r\n        if (this.canBeNetworkController) await NetworkDeviceFlow.removeAllDevicesFromNetwork(this);\r\n        if (this.canBeNetworkDevice) await NetworkDeviceFlow.removeDeviceFromController(this);\r\n    }\r\n\r\n    async _onCreate(changed, options, user) {\r\n        const applyData = {};\r\n        //@ts-ignore\r\n        Helpers.injectActionTestsIntoChangeData(this.type, changed, applyData);\r\n        await super._preCreate(changed, options, user);\r\n\r\n        // Don't kill DocumentData by applying empty objects. Also performance.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!foundry.utils.isEmpty(applyData)) await this.update(applyData);\r\n    }\r\n\r\n    /**\r\n     * Make sure all item data is in a persistent and valid status.\r\n     *\r\n     * This is preferred to altering data on the fly in the prepareData methods flow.\r\n     */\r\n     async _preUpdate(changed, options: DocumentModificationOptions, user: User) {\r\n        // Some Foundry core updates will no diff and just replace everything. This doesn't match with the\r\n        // differential approach of action test injection. (NOTE: Changing ownership of a document)\r\n        if (options.diff !== false && options.recursive !== false) {\r\n            // Change used action test implementation when necessary.\r\n            Helpers.injectActionTestsIntoChangeData(this.type, changed, changed);\r\n        }\r\n        \r\n        await super._preUpdate(changed, options, user);\r\n    }\r\n}\r\n", "import MagicActorData = Shadowrun.MagicActorData;\r\nimport MatrixActorData = Shadowrun.MatrixActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class InitiativePrep {\r\n    static prepareCurrentInitiative(system: ActorTypesData) {\r\n        const { initiative } = system;\r\n\r\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\r\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\r\n        else {\r\n            initiative.current = initiative.meatspace;\r\n            initiative.perception = 'meatspace';\r\n        }\r\n\r\n        initiative.current.dice.value = Helpers.calcTotal(initiative.current.dice, {min: 0, max: 5});\r\n        if (initiative.edge) initiative.current.dice.value = 5;\r\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\r\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\r\n\r\n        initiative.current.base.value = Helpers.calcTotal(initiative.current.base);\r\n    }\r\n\r\n    static prepareMeatspaceInit(system: ActorTypesData) {\r\n        const { initiative, attributes, modifiers } = system;\r\n\r\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value;\r\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\r\n\r\n        initiative.meatspace.dice.base = 1;\r\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\r\n    }\r\n\r\n    static prepareAstralInit(system: ActorTypesData & MagicActorData) {\r\n        const { initiative, attributes, modifiers } = system;\r\n\r\n        initiative.astral.base.base = attributes.intuition.value * 2;\r\n        initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\r\n\r\n        initiative.astral.dice.base = 2;\r\n        initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\r\n    }\r\n\r\n    static prepareMatrixInit(system: ActorTypesData & MatrixActorData) {\r\n        const { initiative, attributes, modifiers, matrix } = system;\r\n        if (matrix) {\r\n\r\n            initiative.matrix.base.base = attributes.intuition.value + system.matrix.data_processing.value;\r\n            initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative']));\r\n\r\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3);\r\n            initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative_dice']));\r\n        }\r\n    }\r\n}\r\n", "import ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\r\nimport {SR5} from \"../../../config\";\r\nimport CharacterData = Shadowrun.CharacterData;\r\nimport CritterData = Shadowrun.CritterData;\r\nimport SpiritData = Shadowrun.SpiritData;\r\nimport VehicleData = Shadowrun.VehicleData;\r\n\r\nexport class ModifiersPrep {\r\n    /**\r\n     * Prepare the modifiers that are displayed in the Misc. tab\r\n     * \r\n     * NOTE: Currently these aren't controlled by the Foundry template. But ONLY here.\r\n     *       Therefore adding a modifier to an actor DataModel happens here and during Actor#prepareData\r\n     */\r\n    static prepareModifiers(system: ActorTypesData) {\r\n        let modifiers = ModifiersPrep.commonModifiers;\r\n        modifiers = modifiers.concat(ModifiersPrep.matrixModifiers);\r\n        modifiers = modifiers.concat(ModifiersPrep.characterModifiers);\r\n        ModifiersPrep.setupModifiers(system, modifiers);\r\n    }\r\n\r\n    static get commonModifiers() {\r\n        return ['soak', 'defense'];\r\n    }\r\n\r\n    static get characterModifiers() {\r\n        return [\r\n            'drain',\r\n            'armor',\r\n            'physical_limit',\r\n            'social_limit',\r\n            'mental_limit',\r\n            'astral_limit',\r\n            'stun_track',\r\n            'physical_track',\r\n            'physical_overflow_track',\r\n            'meat_initiative',\r\n            'meat_initiative_dice',\r\n            'astral_initiative',\r\n            'astral_initiative_dice',\r\n            'composure',\r\n            'lift_carry',\r\n            'judge_intentions',\r\n            'memory',\r\n            'walk',\r\n            'run',\r\n            'wound_tolerance',\r\n            'pain_tolerance_stun',\r\n            'pain_tolerance_physical',\r\n            'essence',\r\n            'fade',\r\n        ];\r\n    }\r\n\r\n    static get matrixModifiers() {\r\n        return [\r\n            'matrix_initiative',\r\n            'matrix_initiative_dice',\r\n            'matrix_track'\r\n        ]\r\n    }\r\n\r\n    static setupModifiers(system: ShadowrunActorDataData, modifiers) {\r\n        if (!system.modifiers) {\r\n            system.modifiers = {};\r\n        }\r\n\r\n        // TODO: localize sorting of modifiers.\r\n        modifiers.sort();\r\n        // add and force global to the top\r\n        modifiers.unshift('global');\r\n\r\n        // Prepare sorted modifiers and merge with existing values when set.\r\n        // Unset modifier values will be null or not exist at all.\r\n        const sorted = {};\r\n        for (const modifier of modifiers) {\r\n            sorted[modifier] = Number(system.modifiers[modifier]) || 0;\r\n        }\r\n\r\n        system.modifiers = sorted;\r\n    }\r\n\r\n    static clearAttributeMods(system: ShadowrunActorDataData) {\r\n        const { attributes } = system;\r\n        for (const [name, attribute] of Object.entries(attributes)) {\r\n            // Check for valid attributes. Active Effects can cause unexpected properties to appear.\r\n            if (!SR5.attributes.hasOwnProperty(name) || !attribute) return;\r\n\r\n            attribute.mod = [];\r\n        }\r\n    }\r\n\r\n    static clearArmorMods(system: CharacterData|CritterData|SpiritData|VehicleData) {\r\n        const {armor} = system;\r\n\r\n        armor.mod = [];\r\n    }\r\n\r\n    static clearLimitMods(system: ShadowrunActorDataData) {\r\n        const {limits} = system;\r\n        for (const [name, limit] of Object.entries(limits)) {\r\n            if (!SR5.limits.hasOwnProperty(name) || !limit) return;\r\n\r\n            limit.mod = [];\r\n        }\r\n    }\r\n}\r\n", "import { Helpers } from '../../../helpers';\r\nimport {SR} from \"../../../constants\";\r\nimport {SR5} from \"../../../config\";\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class AttributesPrep {\r\n    /**\r\n     * Prepare actor data for attributes\r\n     */\r\n    static prepareAttributes(system: ActorTypesData) {\r\n        const {attributes} = system;\r\n\r\n        // always have special attributes set to hidden\r\n        attributes.magic.hidden = true;\r\n        attributes.resonance.hidden = true;\r\n        attributes.edge.hidden = true;\r\n        attributes.essence.hidden = true;\r\n\r\n        // set the value for the attributes\r\n        for (let [name, attribute] of Object.entries(attributes)) {\r\n            // don't manage the attribute if it is using the old method of edge tracking\r\n            // needed to be able to migrate things correctly\r\n            if (name === 'edge' && attribute['uses'] === undefined) return;\r\n\r\n            AttributesPrep.prepareAttribute(name, attribute)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare one single AttributeField\r\n     * @param name The key field (and name) of the attribute given\r\n     * @param attribute The AttributeField to prepare\r\n     */\r\n    static prepareAttribute(name: string, attribute: AttributeField) {\r\n        // Check for valid attributes. Active Effects can cause unexpected properties to appear.\r\n        if (!SR5.attributes.hasOwnProperty(name) || !attribute) return;\r\n\r\n        // Each attribute can have a unique value range.\r\n        // TODO:  Implement metatype attribute value ranges for character actors.\r\n        AttributesPrep.calculateAttribute(name, attribute);\r\n\r\n        // add i18n labels.\r\n        attribute.label = SR5.attributes[name];\r\n    }\r\n\r\n    /**\r\n     * Calculate a single attributes value with all it's ranges and rules applied.\r\n     *\r\n     * @param name The attributes name / id\r\n     * @param attribute The attribute will be modified in place\r\n     */\r\n    static calculateAttribute(name: string, attribute: AttributeField) {\r\n        // Check for valid attributes. Active Effects can cause unexpected properties to appear.\r\n        if (!SR5.attributes.hasOwnProperty(name) || !attribute) return;\r\n\r\n        // Each attribute can have a unique value range.\r\n        // TODO:  Implement metatype attribute value ranges for character actors.\r\n        const range = SR.attributes.ranges[name];\r\n        Helpers.calcTotal(attribute, range);\r\n    }\r\n}\r\n", "import MatrixActorData = Shadowrun.MatrixActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { SR5ItemDataWrapper } from '../../../data/SR5ItemDataWrapper';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport {SR5} from \"../../../config\";\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\r\nimport CommonData = Shadowrun.CommonData;\r\nimport {AttributesPrep} from \"./AttributesPrep\";\r\n\r\nexport class MatrixPrep {\r\n    /**\r\n     * Prepare Matrix data on the actor\r\n     * - if an item is equipped, it will use that data\r\n     * - if it isn't and player is technomancer, it will use that data\r\n     */\r\n    static prepareMatrix(system: ActorTypesData & MatrixActorData, items: SR5ItemDataWrapper[]) {\r\n        const { matrix, attributes, modifiers } = system;\r\n\r\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\r\n\r\n        // clear matrix data to defaults\r\n        MatrixList.forEach((key) => {\r\n            const parts = new PartsList(matrix[key].mod);\r\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\r\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\r\n            parts.removePart('Temporary');\r\n            matrix[key].mod = parts.list;\r\n            matrix[key].value = parts.total;\r\n        });\r\n        matrix.condition_monitor.max = 0;\r\n        matrix.rating = 0;\r\n        matrix.name = '';\r\n        matrix.device = '';\r\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\r\n\r\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\r\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\r\n\r\n        if (device) {\r\n            matrix.device = device.getId();\r\n\r\n            const conditionMonitor = device.getConditionMonitor();\r\n\r\n            matrix.condition_monitor.max = conditionMonitor.max + Number(modifiers.matrix_track);\r\n            matrix.condition_monitor.value = conditionMonitor.value;\r\n            matrix.rating = device.getRating();\r\n            matrix.is_cyberdeck = device.isCyberdeck();\r\n            matrix.name = device.getName();\r\n            matrix.item = device.getData();\r\n            const deviceAtts = device.getASDF();\r\n            if (deviceAtts) {\r\n                // setup the actual matrix attributes for the actor\r\n                for (const [key, value] of Object.entries(deviceAtts)) {\r\n                    if (value && matrix[key]) {\r\n                        matrix[key].base = value.value;\r\n                        matrix[key].device_att = value.device_att;\r\n                    }\r\n                }\r\n            }\r\n        } // if we don't have a device, use living persona\r\n        else if (system.special === 'resonance') {\r\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\r\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\r\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\r\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\r\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\r\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\r\n        }\r\n\r\n        // set matrix condition monitor to max if greater than\r\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\r\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add Matrix Attributes to Limits and Attributes\r\n     * @param system\r\n     */\r\n    static prepareMatrixToLimitsAndAttributes(system: CommonData & MatrixActorData) {\r\n        const { matrix, attributes, limits } = system;\r\n\r\n        // add matrix attributes to both limits and attributes as hidden entries\r\n        Object.keys(SR5.matrixAttributes).forEach((attributeName) => {\r\n            if (!matrix.hasOwnProperty(attributeName)) {\r\n                return console.error(`SR5Actor matrix preparation failed due to missing matrix attributes`);\r\n            }\r\n\r\n            const attribute = matrix[attributeName];\r\n            // Helpers.calcTotal(matrix[attributeName]);\r\n            // const label = SR5.matrixAttributes[attributeName];\r\n            // const { value, base, mod } = matrix[attributeName];\r\n            AttributesPrep.prepareAttribute(attributeName, attribute);\r\n            const { value, base, mod, label } = attribute;\r\n            const hidden = true;\r\n\r\n            // Each matrix attribute also functions as a limit.\r\n            limits[attributeName] = {\r\n                value,\r\n                base,\r\n                mod,\r\n                label,\r\n                hidden,\r\n            };\r\n\r\n            // Copy matrix attribute data into attributes for ease of access during testing.\r\n            attributes[attributeName] = {\r\n                value,\r\n                base,\r\n                mod,\r\n                label,\r\n                hidden,\r\n            };\r\n        });\r\n    }\r\n\r\n    static prepareMentalAttributesForDevice(system: CommonData & MatrixActorData, rating?: number) {\r\n        const { matrix, attributes } = system;\r\n        rating = rating ?? matrix.rating;\r\n        const mentalAttributes = ['intuition', 'logic', 'charisma', 'willpower'];\r\n\r\n        mentalAttributes.forEach((attLabel) => {\r\n            if (attributes[attLabel] !== undefined) {\r\n                attributes[attLabel].base = rating ?? 0; // TypeScript got confused otherwise...\r\n                Helpers.calcTotal(attributes[attLabel]);\r\n            }\r\n        });\r\n    }\r\n\r\n    static prepareMatrixAttributesForDevice(system: CommonData & MatrixActorData, rating?: number) {\r\n        const { matrix } = system;\r\n        rating = rating ?? matrix.rating;\r\n        const matrixAttributes = ['firewall', 'data_processing'];\r\n        matrixAttributes.forEach((attribute) => {\r\n            matrix[attribute].base = rating;\r\n        });\r\n        [...matrixAttributes, 'sleaze', 'attack'].forEach((attId) => {\r\n            Helpers.calcTotal(matrix[attId]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prepare the mental attributes for a sheet that just has a device rating\r\n     * @param system\r\n     */\r\n    static prepareAttributesForDevice(system: CommonData & MatrixActorData, rating: number = 0) {\r\n        MatrixPrep.prepareMentalAttributesForDevice(system, rating);\r\n        MatrixPrep.prepareMatrixAttributesForDevice(system, rating);\r\n    }\r\n}\r\n", "import { SR5ItemDataWrapper } from '../../../data/SR5ItemDataWrapper';\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport ArmorActorData = Shadowrun.ArmorActorData;\r\nimport {SR5} from \"../../../config\";\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\nimport {SR} from \"../../../constants\";\r\n\r\nexport class ItemPrep {\r\n    /**\r\n     * Prepare the armor data for the Item\r\n     * - will only allow one \"Base\" armor item to be used (automatically takes the best one if multiple are equipped)\r\n     * - all \"accessories\" will be added to the armor\r\n     */\r\n    static prepareArmor(system: ActorTypesData & ArmorActorData, items: SR5ItemDataWrapper[]) {\r\n        const { armor } = system;\r\n        armor.base = 0;\r\n        armor.value = 0;\r\n        // if (!isNaN(armor.mod)) {\r\n        //     armor.mod = [armor.mod]\r\n        // }\r\n        // armor.mod = [];\r\n        for (const element of Object.keys(SR5.elementTypes)) {\r\n            armor[element] = 0;\r\n        }\r\n\r\n        const armorModParts = new PartsList<number>(armor.mod);\r\n        const equippedArmor = items.filter((item) => item.couldHaveArmor() && item.isEquipped());\r\n        equippedArmor?.forEach((item) => {\r\n            // Don't spam armor values with clothing or armor like items without any actual armor.\r\n            if (item.hasArmor()) {\r\n                // We allow only one base armor but multiple armor accessories\r\n                if (item.hasArmorAccessory()) {\r\n                    armorModParts.addUniquePart(item.getName(), item.getArmorValue());\r\n                }\r\n                else {\r\n                    const armorValue = item.getArmorValue();\r\n                    if (armorValue > armor.base) {\r\n                        armor.base = item.getArmorValue();\r\n                        armor.label = item.getName();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Apply elemental modifiers of all worn armor and clothing SR5#169.\r\n            for (const element of Object.keys(SR5.elementTypes)) {\r\n                armor[element] += item.getArmorElements()[element];\r\n            }\r\n        });\r\n\r\n        if (system.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), system.modifiers['armor']);\r\n        // SET ARMOR\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n    /**\r\n     * Prepare actor data for ware changes\r\n     * - this calculates the actors essence\r\n     */\r\n    static prepareBodyware(system: ActorTypesData, items: SR5ItemDataWrapper[]) {\r\n        const { attributes } = system;\r\n        const parts = new PartsList<number>();\r\n        // add Items as values to lower the total value of essence\r\n        items\r\n            .filter((item) => item.isBodyware() && item.isEquipped())\r\n            .forEach((item) => {\r\n                if (item.getEssenceLoss()) {\r\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\r\n                }\r\n            });\r\n        // add the bonus from the misc tab if applied\r\n        const essenceMod = system.modifiers['essence'];\r\n        if (essenceMod && !Number.isNaN(essenceMod)) {\r\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\r\n        }\r\n\r\n        // The essence base is fixed. Changes should be made through the attribute.temp field.\r\n        attributes.essence.base = SR.attributes.defaults.essence;\r\n        attributes.essence.mod = parts.list;\r\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\r\n    }\r\n}\r\n", "import { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport {SR5} from \"../../../config\";\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class SkillsPrep {\r\n    /**\r\n     * Prepare actor data for skills\r\n     */\r\n    static prepareSkills(system: ActorTypesData) {\r\n        const { language, active, knowledge } = system.skills;\r\n        if (language) {\r\n            if (!language.value) {\r\n                language.value = {};\r\n            }\r\n\r\n            // language.value is defined as an array in template.json\r\n            // However what we actually want here is an object, so we set it manually\r\n            // The same is done for the other knowledge skillgroups 'value' properties below\r\n            if (Array.isArray(language.value) && language.value.length == 0) {\r\n                language.value = {};\r\n            }\r\n\r\n            language.attribute = 'intuition';\r\n        }\r\n\r\n        // function that will set the total of a skill correctly\r\n        const prepareSkill = (skill) => {\r\n            if (!skill.base) skill.base = 0;\r\n            if (skill.bonus?.length) {\r\n                for (let bonus of skill.bonus) {\r\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, Number(bonus.value));\r\n                }\r\n            }\r\n            skill.value = Helpers.calcTotal(skill);\r\n\r\n            // Older Chummer imports miss some fields.\r\n            _mergeWithMissingSkillFields(skill);\r\n        };\r\n\r\n        // setup active skills\r\n        for (const skill of Object.values(active)) {\r\n            if (!skill.hidden) {\r\n                prepareSkill(skill);\r\n            }\r\n        }\r\n\r\n        const entries = Object.entries(system.skills.language.value);\r\n        // remove entries which are deleted TODO figure out how to delete these from the data\r\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete system.skills.language.value[key]);\r\n\r\n        for (let skill of Object.values(language.value)) {\r\n            prepareSkill(skill);\r\n            skill.attribute = 'intuition';\r\n        }\r\n\r\n        // setup knowledge skills\r\n        for (let [, group] of Object.entries(knowledge)) {\r\n            const entries = Object.entries(group.value);\r\n            // remove entries which are deleted TODO figure out how to delete these from the data\r\n            group.value = entries\r\n                .filter(([, val]) => !val._delete)\r\n                .reduce((acc, [id, skill]) => {\r\n                    prepareSkill(skill);\r\n\r\n                    // set the attribute on the skill\r\n                    skill.attribute = group.attribute;\r\n                    acc[id] = skill;\r\n                    return acc;\r\n                }, {});\r\n        }\r\n\r\n        // skill labels\r\n        for (let [skillKey, skillValue] of Object.entries(active)) {\r\n            skillValue.label = SR5.activeSkills[skillKey];\r\n        }\r\n    }\r\n}\r\n\r\n/** Just a quick, semi hacky way of setting up a complete skill data structure, while still allowing\r\n *  fields to be added at need.\r\n *\r\n * @param givenSkill\r\n * @return merge default skill fields with fields of the given field, only adding new fields in the process.\r\n */\r\nexport const _mergeWithMissingSkillFields = (givenSkill) => {\r\n    // Only the absolute most necessary fields, not datatype complete to SkillField\r\n    const template = {\r\n        name: \"\",\r\n        base: \"\",\r\n        value: 0,\r\n        attribute: \"\",\r\n        mod: [],\r\n        specs: [],\r\n        hidden: false\r\n    };\r\n\r\n    // Use mergeObject to reserve original object instance in case replacing it\r\n    // causes problems down the line with active skills taken from a preexisting\r\n    // data structure.\r\n    // overwrite false to prohibit existing values to be overwritten with empty values.\r\n    mergeObject(givenSkill, template, {overwrite: false});\r\n}", "import { SR5 } from '../config';\r\nimport { DefaultValues } from './../data/DataDefaults';\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport LimitField = Shadowrun.LimitField;\r\n\r\n\r\n/**\r\n * Rules around caluclating and anything to do with limits.\r\n */\r\nexport const LimitRules = {\r\n    /**\r\n     * Derive the astral limit of a character from it's other limits based on SR5#278.\r\n     * \r\n     * NOTE: Modify the original astral limit to keep pre-applied modifiers like ActiveEffects.\r\n     * \r\n     * @param astral The current astral fields with all it's modifiers, this is to be modified.\r\n     * @param mental The characters mental limit.\r\n     * @param social The characters social limit.\r\n     * \r\n     * @returns The astral limit as a modified source value.\r\n     */\r\n    calculateAstralLimit(astral: LimitField, mental: LimitField, social: LimitField): LimitField {\r\n        astral.base = Math.max(mental.value, social.value);\r\n        astral.label = SR5.limits.astral;\r\n\r\n        return astral;\r\n    },\r\n\r\n    /**\r\n     * Derive the magic limit of character from it's magic attribute.\r\n     * \r\n     * There is no rule for that, but when using an attribute as a limit, we should honor \r\n     * the general limit interface.\r\n     * \r\n     * @params magic The magic attribute to use.\r\n     * @returns A magic limit field based on the magic attribute\r\n     */\r\n     calculateMagicLimit(magic: AttributeField): LimitField {\r\n        return DefaultValues.limitField({\r\n            base: magic.value,\r\n            label: magic.label\r\n        });\r\n     }\r\n}", "import { LimitRules } from './../../../rules/LimitRules';\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport { Helpers } from '../../../helpers';\r\nimport {SR5} from \"../../../config\";\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class LimitsPrep {\r\n    static prepareLimits(system: ActorTypesData) {\r\n        const { limits, modifiers, special } = system;\r\n\r\n        // Apply the actor local modifiers defined on the sheet.\r\n        limits.physical.mod = PartsList.AddUniquePart(limits.physical.mod, 'SR5.Bonus', Number(modifiers['physical_limit']));\r\n        limits.mental.mod = PartsList.AddUniquePart(limits.mental.mod, 'SR5.Bonus', Number(modifiers['mental_limit']));\r\n        limits.social.mod = PartsList.AddUniquePart(limits.social.mod, \"SR5.Bonus\", Number(modifiers['social_limit']));\r\n        \r\n        // Determine if the astral limit is relevant.\r\n        limits.astral.hidden = special !== 'magic';\r\n\r\n        for (let [name, limit] of Object.entries(limits)) {\r\n            Helpers.calcTotal(limit);\r\n            limit.label = SR5.limits[name];\r\n        }\r\n    }\r\n\r\n    static prepareLimitBaseFromAttributes(system: ActorTypesData) {\r\n\r\n        const { limits, attributes } = system;\r\n\r\n        // Default limits are derived directly from attributes.\r\n        limits.physical.base = Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3);\r\n        limits.mental.base = Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3);\r\n        limits.social.base = Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3);\r\n    }\r\n\r\n    /**\r\n     * Some limits are derived from others or must be caluclated last.\r\n     */\r\n    static prepareDerivedLimits(system: ActorTypesData) {\r\n        const {limits, modifiers, special, attributes} = system;\r\n\r\n        if (special === 'magic') {\r\n            // Astral limit.\r\n            limits.astral = LimitRules.calculateAstralLimit(limits.astral, limits.mental, limits.social);\r\n            limits.astral.mod = PartsList.AddUniquePart(limits.astral.mod, \"SR5.Bonus\", Number(modifiers['astral_limit']));\r\n            Helpers.calcTotal(limits.astral);\r\n\r\n            // Magic attribute as limit, hidden as it's directly derived from an attribute.\r\n            limits.magic = LimitRules.calculateMagicLimit(attributes.magic);\r\n            limits.magic.hidden = true;\r\n            Helpers.calcTotal(limits.magic);\r\n        }\r\n    }\r\n}\r\n", "import PhysicalTrackActorData = Shadowrun.PhysicalTrackActorData;\r\nimport StunTrackActorData = Shadowrun.StunTrackActorData;\r\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\r\nimport {SR5} from \"../../../config\";\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class ConditionMonitorsPrep {\r\n    static prepareStun(system: ActorTypesData & StunTrackActorData) {\r\n        const { track, attributes, modifiers } = system;\r\n\r\n        track.stun.base = 8 + Math.ceil(attributes.willpower.value / 2);\r\n        track.stun.max = track.stun.base + Number(modifiers.stun_track);\r\n        track.stun.label = SR5.damageTypes.stun;\r\n        track.stun.disabled = false;\r\n    }\r\n\r\n    static preparePhysical(system: ActorTypesData & PhysicalTrackActorData) {\r\n        const { track, attributes, modifiers } = system;\r\n\r\n        track.physical.base = 8 + Math.ceil(attributes.body.value / 2);\r\n        track.physical.max = track.physical.base + Number(modifiers.physical_track);\r\n        track.physical.overflow.max = attributes.body.value + Number(modifiers.physical_overflow_track);\r\n        track.physical.label = SR5.damageTypes.physical;\r\n        track.physical.disabled = false;\r\n    }\r\n\r\n    static prepareGrunt(system: ActorTypesData & TwoTrackActorData) {\r\n        // Grunts use only one monitor, use physical to get overflow functionality.\r\n        ConditionMonitorsPrep.prepareStun(system);\r\n\r\n        const { track, attributes, modifiers } = system;\r\n        // Overwrite stun damage to avoid invisible damage modifiers.\r\n        track.stun.value = 0;\r\n        track.stun.disabled = true;\r\n\r\n        // Grunts use either their WIL or BOD as their monitors attribute.\r\n        const attribute = attributes.willpower.value > attributes.body.value ?\r\n            attributes.willpower:\r\n            attributes.body;\r\n\r\n        track.physical.base = 8 + Math.ceil(attribute.value / 2);\r\n        track.physical.max = track.physical.base + Number(modifiers.physical_track);\r\n        track.physical.overflow.max = attributes.body.value;\r\n        track.physical.label = \"SR5.ConditionMonitor\";\r\n        track.physical.disabled = false;\r\n    }\r\n}\r\n", "import MovementActorData = Shadowrun.MovementActorData;\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\nimport {PartsList} from \"../../../parts/PartsList\";\r\n\r\nexport class MovementPrep {\r\n    static prepareMovement(system: ActorTypesData & MovementActorData) {\r\n        const { attributes, modifiers } = system;\r\n\r\n        const movement = system.movement;\r\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\r\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk'])) + new PartsList(movement.walk.mod).total;\r\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run'])) + new PartsList(movement.run.mod).total;\r\n    }\r\n}\r\n", "/**\r\n * Everything calculating damage monitors, tracks and how damage applies to it.\r\n */\r\nexport const MonitorRules = {\r\n    /**\r\n     * Calculate the amount of damage boxes per wound modifier\r\n     * \r\n     * According to SR5#169-170 'Wound Modifiers' and SR5#82 'Low Pain Tolerance'.\r\n     * \r\n     * To avoid confusion between Low Pain and High Pain Tolerance, this method uses a\r\n     * damage tolerance concept, allowing users to define how many boxes should determine\r\n     * a wound modifier. This allows to define both lower and higher amounts of damage taken\r\n     * per wound modifier.\r\n     * \r\n     * @param damageTolerance Apply this damage tolerance to the base damage\r\n     * @param baseDamage The amount of damage boxes taken before applying a wound modifier.\r\n     */\r\n    woundModifierBoxesThreshold(damageTolerance: number=0, baseDamage: number=3): number {\r\n        return baseDamage + damageTolerance;\r\n    },\r\n\r\n    /**\r\n     * Calculate the wounds for damage taken on a monitor.\r\n     * \r\n     * This differes from wound modifier and will be positive value.\r\n     * \r\n     * This is intended for stund an physical monitors and implements rules \r\n     * - SR5#169 'Wound Modifiers\r\n     * - SR#74 'High Pain Tolerance'\r\n     * \r\n     * @param damageTaken Amount of damage boxes filled on the damage monitor\r\n     * @param woundBoxesThreshold Amount of damage boxes per wound modifier\r\n     * @param painTolerance Amount of damage boxes that can be ingored before calculating wound modifiers. \r\n     *                      Expects a positive number when applying High Pain Tolerance Ratings\r\n     * @returns The amount of wounds on a damage monitor.\r\n     */\r\n    wounds(damageTaken: number, woundBoxesThreshold: number, painTolerance: number=0): number {\r\n        const relevantDamageTaken = Math.max(damageTaken - painTolerance, 0);\r\n        return Math.floor(relevantDamageTaken / woundBoxesThreshold);\r\n    },\r\n\r\n    /**\r\n     * Calculate the wound modifier based on the wounds taken.\r\n     * \r\n     * @param wounds Amount of wounds (not damage) taken\r\n     * @param modifierPerWound base modifier to apply to given wounds\r\n     */\r\n    woundModifier(wounds:number, modifierPerWound: number=-1): number {\r\n        return wounds * modifierPerWound;\r\n    }\r\n}", "import { MonitorRules } from './../../../rules/MonitorRules';\r\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\r\nimport WoundsActorData = Shadowrun.WoundsActorData;\r\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\r\n\r\nexport class WoundsPrep {\r\n    static prepareWounds(system: ActorTypesData & TwoTrackActorData & WoundsActorData) {\r\n        const { modifiers, track } = system;\r\n        \r\n        // The actor overall has a wound tolerance.\r\n        const damageTolerance = Number(modifiers['wound_tolerance']);\r\n        const woundBoxesThreshold = MonitorRules.woundModifierBoxesThreshold(damageTolerance);\r\n\r\n        // Each track defines it's local pain tolerance.\r\n        track.stun.pain_tolerance = Number(modifiers['pain_tolerance_stun']);\r\n        track.physical.pain_tolerance = Number(modifiers['pain_tolerance_physical']);\r\n\r\n        // Legacy system provides a way of disabling a track, which will always return no wounds\r\n        const stunWounds = track.stun.disabled ? 0 : MonitorRules.wounds(track.stun.value, woundBoxesThreshold, track.stun.pain_tolerance);\r\n        const physicalWounds = track.physical.disabled ? 0 : MonitorRules.wounds(track.physical.value, woundBoxesThreshold, track.physical.pain_tolerance);\r\n\r\n        // Each track defines it's local wounds\r\n        track.stun.wounds = stunWounds;\r\n        track.physical.wounds = physicalWounds;\r\n\r\n        // The actor as a whole derives these wounds for wound modifier calculation\r\n        system.wounds = {\r\n            value: stunWounds + physicalWounds,\r\n        };\r\n    }\r\n}\r\n", "import CharacterActorData = Shadowrun.CharacterData;\r\nimport {DataDefaults} from \"../../../data/DataDefaults\";\r\nimport {METATYPEMODIFIER} from \"../../../constants\";\r\nimport {PartsList} from \"../../../parts/PartsList\";\r\nimport {AttributesPrep} from \"./AttributesPrep\";\r\n\r\nexport class NPCPrep {\r\n    static prepareNPCData(system: CharacterActorData) {\r\n        // Apply to NPC and none NPC to remove lingering modifiers after actor has been removed it's npc status.\r\n        NPCPrep.applyMetatypeModifiers(system);\r\n    }\r\n\r\n    /**\r\n     * Apply modifiers that result from an NPCs metatype.\r\n     * This method also should still run on any none NPC to remove eventually lingering NPC metatype modifiers.\r\n     */\r\n    static applyMetatypeModifiers(system: CharacterActorData) {\r\n        // Extract needed data.\r\n        const {attributes, metatype} = system;\r\n        const metatypeModifier = DataDefaults.grunt.metatype_modifiers[metatype] || {};\r\n\r\n        for (const [name, attribute] of Object.entries(attributes)) {\r\n            // old-style object mod transformation is happening in AttributePrep and is needed here. Order is important.\r\n            if (!Array.isArray(attribute.mod)) {\r\n                    console.error('Actor data contains wrong data type for attribute.mod', attribute, !Array.isArray(attribute.mod));\r\n            } else {\r\n\r\n                // Remove lingering modifiers from NPC actors that aren't anymore.\r\n                const parts = new PartsList(attribute.mod);\r\n                parts.removePart(METATYPEMODIFIER);\r\n\r\n                // Apply NPC modifiers\r\n                const modifyBy = metatypeModifier.attributes?.[name];\r\n                if (system.is_npc && modifyBy) {\r\n                    parts.addPart(METATYPEMODIFIER, modifyBy);\r\n                }\r\n\r\n                // Prepare attribute modifiers\r\n                attribute.mod = parts.list;\r\n\r\n                AttributesPrep.calculateAttribute(name, attribute);\r\n            }\r\n        }\r\n    }\r\n}", "import { InitiativePrep } from './functions/InitiativePrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { ItemPrep } from './functions/ItemPrep';\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { NPCPrep } from './functions/NPCPrep';\r\nimport CharacterData = Shadowrun.CharacterData;\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\n\r\nexport class CharacterPrep {\r\n    static prepareBaseData(system: CharacterData) {\r\n        ModifiersPrep.prepareModifiers(system);\r\n        ModifiersPrep.clearAttributeMods(system);\r\n        ModifiersPrep.clearArmorMods(system);\r\n        ModifiersPrep.clearLimitMods(system);\r\n    }\r\n\r\n    /**\r\n     * All derived data should depend on basic values like Attributes or Skills.\r\n     *\r\n     * It shouldn't be modified by Active Effects, which instead should modify the global modifiers.\r\n     *\r\n     * @param system\r\n     * @param items\r\n     */\r\n    static prepareDerivedData(system: CharacterData, items: SR5ItemDataWrapper[]) {\r\n        AttributesPrep.prepareAttributes(system);\r\n        // NPCPrep is reliant to be called after AttributesPrep.\r\n        NPCPrep.prepareNPCData(system);\r\n\r\n        SkillsPrep.prepareSkills(system);\r\n\r\n        ItemPrep.prepareArmor(system, items);\r\n        ItemPrep.prepareBodyware(system, items);\r\n\r\n        MatrixPrep.prepareMatrix(system, items);\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\r\n\r\n        // Limits depend on attributes and active effects.\r\n        LimitsPrep.prepareLimitBaseFromAttributes(system);\r\n        LimitsPrep.prepareLimits(system);\r\n        LimitsPrep.prepareDerivedLimits(system);\r\n\r\n        if (system.is_npc && system.npc.is_grunt) {\r\n            ConditionMonitorsPrep.prepareGrunt(system);\r\n        } else {\r\n            ConditionMonitorsPrep.preparePhysical(system);\r\n            ConditionMonitorsPrep.prepareStun(system);\r\n        }\r\n\r\n        MovementPrep.prepareMovement(system);\r\n        WoundsPrep.prepareWounds(system);\r\n\r\n        InitiativePrep.prepareMeatspaceInit(system);\r\n        InitiativePrep.prepareAstralInit(system);\r\n        InitiativePrep.prepareMatrixInit(system);\r\n        InitiativePrep.prepareCurrentInitiative(system);\r\n    }\r\n}", "import {InitiativePrep} from './functions/InitiativePrep';\r\nimport {ModifiersPrep} from './functions/ModifiersPrep';\r\nimport {MatrixPrep} from './functions/MatrixPrep';\r\nimport {ItemPrep} from './functions/ItemPrep';\r\nimport {SkillsPrep} from './functions/SkillsPrep';\r\nimport {LimitsPrep} from './functions/LimitsPrep';\r\nimport {ConditionMonitorsPrep} from './functions/ConditionMonitorsPrep';\r\nimport {MovementPrep} from './functions/MovementPrep';\r\nimport {WoundsPrep} from './functions/WoundsPrep';\r\nimport {AttributesPrep} from './functions/AttributesPrep';\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\nimport CritterData = Shadowrun.CritterData;\r\n\r\n\r\nexport class CritterPrep {\r\n    static prepareBaseData(data: CritterData) {\r\n        ModifiersPrep.prepareModifiers(data);\r\n        ModifiersPrep.clearAttributeMods(data);\r\n        ModifiersPrep.clearArmorMods(data);\r\n        ModifiersPrep.clearLimitMods(data);\r\n    }\r\n\r\n    static prepareDerivedData(data: CritterData, items: SR5ItemDataWrapper[]) {\r\n        AttributesPrep.prepareAttributes(data);\r\n        SkillsPrep.prepareSkills(data);\r\n\r\n        ItemPrep.prepareArmor(data, items);\r\n        ItemPrep.prepareBodyware(data, items);\r\n\r\n        MatrixPrep.prepareMatrix(data, items);\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\r\n\r\n        // Limits depend on attributes and active effects.\r\n        LimitsPrep.prepareLimitBaseFromAttributes(data);\r\n        LimitsPrep.prepareLimits(data);\r\n        LimitsPrep.prepareDerivedLimits(data);\r\n\r\n        ConditionMonitorsPrep.preparePhysical(data);\r\n        ConditionMonitorsPrep.prepareStun(data);\r\n\r\n        MovementPrep.prepareMovement(data);\r\n        WoundsPrep.prepareWounds(data);\r\n\r\n        InitiativePrep.prepareMeatspaceInit(data);\r\n        InitiativePrep.prepareAstralInit(data);\r\n        InitiativePrep.prepareMatrixInit(data);\r\n        InitiativePrep.prepareCurrentInitiative(data);\r\n    }\r\n}", "import {SkillsPrep} from './functions/SkillsPrep';\r\nimport {AttributesPrep} from './functions/AttributesPrep';\r\nimport {LimitsPrep} from './functions/LimitsPrep';\r\nimport {ConditionMonitorsPrep} from './functions/ConditionMonitorsPrep';\r\nimport {MovementPrep} from './functions/MovementPrep';\r\nimport {WoundsPrep} from './functions/WoundsPrep';\r\nimport {ModifiersPrep} from './functions/ModifiersPrep';\r\nimport {InitiativePrep} from './functions/InitiativePrep';\r\nimport {Helpers} from '../../helpers';\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\nimport {SkillFlow} from \"../flows/SkillFlow\";\r\nimport SpiritType = Shadowrun.SpiritType;\r\nimport SpiritData = Shadowrun.SpiritData;\r\n\r\n\r\nexport class SpiritPrep {\r\n    static prepareBaseData(data: SpiritData) {\r\n        SpiritPrep.prepareSpiritSpecial(data);\r\n\r\n        ModifiersPrep.prepareModifiers(data);\r\n        ModifiersPrep.clearAttributeMods(data);\r\n        ModifiersPrep.clearArmorMods(data);\r\n        ModifiersPrep.clearLimitMods(data);\r\n    }\r\n\r\n    static prepareDerivedData(data: SpiritData, items: SR5ItemDataWrapper[]) {\r\n        SpiritPrep.prepareSpiritBaseData(data);\r\n\r\n        AttributesPrep.prepareAttributes(data);\r\n        SkillsPrep.prepareSkills(data);\r\n\r\n        LimitsPrep.prepareLimitBaseFromAttributes(data);\r\n        LimitsPrep.prepareLimits(data);\r\n        LimitsPrep.prepareDerivedLimits(data);\r\n\r\n        SpiritPrep.prepareSpiritArmor(data);\r\n\r\n        ConditionMonitorsPrep.prepareStun(data);\r\n        ConditionMonitorsPrep.preparePhysical(data);\r\n\r\n        MovementPrep.prepareMovement(data);\r\n        WoundsPrep.prepareWounds(data);\r\n\r\n        InitiativePrep.prepareCurrentInitiative(data);\r\n    }\r\n\r\n    static prepareSpiritSpecial(data: SpiritData) {\r\n        // Spirits will always be awakened.\r\n        data.special = 'magic';\r\n    }\r\n\r\n    static prepareSpiritBaseData(data: SpiritData) {\r\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\r\n\r\n        if (overrides) {\r\n            const {attributes, skills, initiative, force, modifiers} = data;\r\n\r\n            // set the base of attributes to the provided force\r\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\r\n                if (attributes[attId] !== undefined) {\r\n                    attributes[attId].base = value + force;\r\n                }\r\n            }\r\n\r\n            // set base of skill according to force and spirit type\r\n            for (const [skillId, skill] of Object.entries(skills.active)) {\r\n                // Leave custom skills alone to allow users to change those at will.\r\n                if (SkillFlow.isCustomSkill(skill)) continue;\r\n\r\n                // Change default skills to the force rating.\r\n                skill.base = overrides.skills.find((s) => s === skillId) ? force : 0;\r\n            }\r\n\r\n            // prepare initiative data\r\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\r\n            initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\r\n            initiative.meatspace.dice.base = 2;\r\n            initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\r\n\r\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\r\n            initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\r\n            initiative.astral.dice.base = 3;\r\n            initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\r\n        }\r\n    }\r\n\r\n    static prepareSpiritArmor(data: SpiritData) {\r\n        const {armor, attributes} = data;\r\n        armor.base = (attributes.essence.value ?? 0) * 2;\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n\r\n    /**\r\n     * get the attribute and initiative modifiers and skills\r\n     */\r\n    static getSpiritStatModifiers(spiritType: SpiritType) {\r\n        const overrides = {\r\n            // value of 0 for attribute makes it equal to the Force\r\n            attributes: {\r\n                body: 0,\r\n                agility: 0,\r\n                reaction: 0,\r\n                strength: 0,\r\n                willpower: 0,\r\n                logic: 0,\r\n                intuition: 0,\r\n                charisma: 0,\r\n                magic: 0,\r\n                essence: 0,\r\n            },\r\n            // modifiers for after the Force x 2 calculation\r\n            init: 0,\r\n            astral_init: 0,\r\n            // skills are all set to Force\r\n            skills: [] as string[],\r\n        };\r\n        switch (spiritType) {\r\n            case 'air':\r\n                overrides.attributes.body = -2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'aircraft':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = -2;\r\n                overrides.skills.push('free_fall', 'navigation', 'perception', 'pilot_aircraft', 'unarmed_combat');\r\n                break;\r\n            case 'airwave':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'impersonation', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'automotive':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 1;\r\n                overrides.attributes.logic = -2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('navigation', 'perception', 'pilot_ground_craft', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'beasts':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'ceramic':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'earth':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'energy':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'fire':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guardian':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guidance':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'man':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n            case 'metal':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'plant':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\r\n                break;\r\n            case 'ship':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.attributes.logic = -2;\r\n                overrides.init = -1;\r\n                overrides.skills.push('navigation', 'perception', 'pilot_water_craft', 'survival', 'swimming', 'unarmed_combat');\r\n                break;\r\n            case 'task':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'train':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.logic = -2;\r\n                overrides.init = -1;\r\n                overrides.skills.push('intimidation', 'navigation', 'perception', 'pilot_ground_craft', 'unarmed_combat');\r\n                break;\r\n            case 'water':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'toxic_air':\r\n                overrides.attributes.body = -2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_beasts':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'gymnastics', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_earth':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_fire':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'flight', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_man':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spell_casting', 'unarmed_combat');\r\n                break;\r\n            case 'toxic_water':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'blood':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.strength = 2;\r\n                overrides.attributes.logic = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'running', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'muse':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'nightmare':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'shade':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'succubus':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'wraith':\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.attributes.charisma = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\r\n                break;\r\n\r\n            case 'shedim':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'master_shedim':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'perception', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n\r\n            // insect\r\n            case 'caretaker':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 1;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'leadership', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'nymph':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n            case 'scout':\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'sneaking', 'unarmed_combat');\r\n                break;\r\n            case 'soldier':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 1;\r\n                overrides.attributes.strength = 3;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'exotic_range', 'gymnastics', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'worker':\r\n                overrides.attributes.strength = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'queen':\r\n                overrides.attributes.body = 5;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = 5;\r\n                overrides.attributes.willpower = 1;\r\n                overrides.attributes.logic = 1;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 5;\r\n                overrides.skills.push(\r\n                    'assensing',\r\n                    'astral_combat',\r\n                    'con',\r\n                    'counterspelling',\r\n                    'gymnastics',\r\n                    'leadership',\r\n                    'negotiation',\r\n                    'perception',\r\n                    'spellcasting',\r\n                    'unarmed_combat',\r\n                );\r\n                break;\r\n        }\r\n        return overrides;\r\n    }\r\n}\r\n", "import { SkillsPrep } from './functions/SkillsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport SpriteType = Shadowrun.SpriteType;\r\nimport { Helpers } from '../../helpers';\r\nimport { PartsList } from '../../parts/PartsList';\r\nimport SpriteData = Shadowrun.SpriteData;\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\n\r\n\r\n/**\r\n * Prepare a Sprite Type of Actor\r\n */\r\nexport class SpritePrep {\r\n    static prepareBaseData(data: SpriteData) {\r\n        SpritePrep.prepareSpriteSpecial(data);\r\n\r\n        ModifiersPrep.prepareModifiers(data);\r\n        ModifiersPrep.clearAttributeMods(data);\r\n        ModifiersPrep.clearLimitMods(data);\r\n    }\r\n\r\n    static prepareDerivedData(data: SpriteData, items: SR5ItemDataWrapper[]) {\r\n        SpritePrep.prepareSpriteMatrixAttributes(data);\r\n        SpritePrep.prepareSpriteAttributes(data);\r\n        SpritePrep.prepareSpriteSkills(data);\r\n\r\n        AttributesPrep.prepareAttributes(data);\r\n        SkillsPrep.prepareSkills(data);\r\n\r\n        LimitsPrep.prepareLimits(data);\r\n\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\r\n\r\n        SpritePrep.prepareSpriteConditionMonitor(data);\r\n        SpritePrep.prepareSpriteInitiative(data);\r\n\r\n        InitiativePrep.prepareCurrentInitiative(data);\r\n    }\r\n\r\n    static prepareSpriteSpecial(data: SpriteData) {\r\n        // Sprites are always awakened\r\n        data.special = 'resonance';\r\n    }\r\n\r\n    static prepareSpriteAttributes(data: SpriteData) {\r\n        const {attributes, level, spriteType} = data;\r\n\r\n        const overrides = this.getSpriteStatModifiers(spriteType);\r\n\r\n        // calculate resonance value\r\n        attributes.resonance.base = level + overrides.resonance;\r\n        Helpers.calcTotal(attributes.resonance);\r\n    }\r\n\r\n    static prepareSpriteMatrixAttributes(data: SpriteData) {\r\n        const {level, matrix, spriteType} = data;\r\n\r\n        const matrixAtts = ['attack', 'sleaze', 'data_processing', 'firewall'];\r\n\r\n        const overrides = this.getSpriteStatModifiers(spriteType);\r\n\r\n        // apply the matrix overrides\r\n        matrixAtts.forEach((att) => {\r\n            if (matrix[att] !== undefined) {\r\n                matrix[att].base = level + overrides[att];\r\n                matrix[att].value = Helpers.calcTotal(matrix[att]);\r\n            }\r\n        });\r\n\r\n        matrix.rating = level;\r\n    }\r\n\r\n    static prepareSpriteSkills(data: SpriteData) {\r\n        const {skills, level, spriteType} = data;\r\n\r\n        const overrides = this.getSpriteStatModifiers(spriteType);\r\n\r\n        // apply skill levels\r\n        // clear skills that we don't have\r\n        for (const [skillId, skill] of Object.entries(skills.active)) {\r\n            skill.base = overrides.skills.find((s) => s === skillId) ? level : 0;\r\n        }\r\n    }\r\n\r\n    static prepareSpriteConditionMonitor(data: SpriteData) {\r\n        const {matrix, level, modifiers} = data;\r\n\r\n        matrix.condition_monitor.max = 8 + Math.ceil(level / 2) + Number(modifiers.matrix_track);\r\n    }\r\n\r\n    static prepareSpriteInitiative(data: SpriteData) {\r\n        const {initiative, level, spriteType, modifiers} = data;\r\n\r\n        // always in matrix perception\r\n        initiative.perception = 'matrix';\r\n\r\n        const overrides = this.getSpriteStatModifiers(spriteType);\r\n\r\n        // setup initiative from overrides\r\n        initiative.matrix.base.base = level * 2 + overrides.init;\r\n        PartsList.AddUniquePart(initiative.matrix.base.mod, 'SR5.Bonus', modifiers['matrix_initiative']);\r\n        Helpers.calcTotal(initiative.matrix.base, {min: 0});\r\n\r\n        initiative.matrix.dice.base = 4;\r\n        PartsList.AddUniquePart(initiative.matrix.dice.mod, 'SR5.Bonus', modifiers['matrix_initiative_dice']);\r\n        Helpers.calcTotal(initiative.matrix.dice, {min: 0});\r\n    }\r\n\r\n    /**\r\n     * Get the stat modifiers for the specified type of sprite\r\n     * @param spriteType\r\n     */\r\n    static getSpriteStatModifiers(spriteType: SpriteType) {\r\n        const overrides = {\r\n            attack: 0,\r\n            sleaze: 0,\r\n            data_processing: 0,\r\n            firewall: 0,\r\n            resonance: 0,\r\n            init: 0,\r\n            // all sprites have computer\r\n            skills: ['computer'],\r\n        };\r\n        switch (spriteType) {\r\n            case 'courier':\r\n                overrides.sleaze = 3;\r\n                overrides.data_processing = 1;\r\n                overrides.firewall = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('hacking');\r\n                break;\r\n            case 'crack':\r\n                overrides.sleaze = 3;\r\n                overrides.data_processing = 2;\r\n                overrides.firewall = 1;\r\n                overrides.init = 2;\r\n                overrides.skills.push('hacking', 'electronic_warfare');\r\n                break;\r\n            case 'data':\r\n                overrides.attack = -1;\r\n                overrides.data_processing = 4;\r\n                overrides.firewall = 1;\r\n                overrides.init = 4;\r\n                overrides.skills.push('electronic_warfare');\r\n                break;\r\n            case 'fault':\r\n                overrides.attack = 3;\r\n                overrides.data_processing = 1;\r\n                overrides.firewall = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('cybercombat', 'hacking');\r\n                break;\r\n            case 'machine':\r\n                overrides.attack = 1;\r\n                overrides.data_processing = 3;\r\n                overrides.firewall = 2;\r\n                overrides.init = 3;\r\n                overrides.skills.push('electronic_warfare', 'hardware');\r\n                break;\r\n        }\r\n        return overrides;\r\n    }\r\n}\r\n", "import VehicleActorData = Shadowrun.VehicleData;\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { Helpers } from '../../helpers';\r\nimport { PartsList } from '../../parts/PartsList';\r\nimport {SR5} from \"../../config\";\r\nimport VehicleData = Shadowrun.VehicleData;\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\n\r\n\r\nexport class VehiclePrep {\r\n    static prepareBaseData(system: VehicleData) {\r\n        ModifiersPrep.prepareModifiers(system);\r\n        ModifiersPrep.clearAttributeMods(system);\r\n        ModifiersPrep.clearArmorMods(system);\r\n        ModifiersPrep.clearLimitMods(system);\r\n    }\r\n\r\n    static prepareDerivedData(system: VehicleData, items: SR5ItemDataWrapper[]) {\r\n        VehiclePrep.prepareVehicleStats(system);\r\n        VehiclePrep.prepareAttributes(system);\r\n        VehiclePrep.prepareDeviceAttributes(system);\r\n        VehiclePrep.prepareLimits(system);\r\n\r\n        AttributesPrep.prepareAttributes(system);\r\n        SkillsPrep.prepareSkills(system);\r\n\r\n        LimitsPrep.prepareLimits(system);\r\n        VehiclePrep.prepareConditionMonitor(system);\r\n\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\r\n        MatrixPrep.prepareMatrixAttributesForDevice(system);\r\n\r\n        VehiclePrep.prepareMovement(system);\r\n\r\n        VehiclePrep.prepareMeatspaceInit(system);\r\n        InitiativePrep.prepareMatrixInit(system);\r\n        InitiativePrep.prepareCurrentInitiative(system);\r\n\r\n        VehiclePrep.prepareArmor(system);\r\n    }\r\n\r\n    static prepareVehicleStats(system: VehicleData) {\r\n        const { vehicle_stats, isOffRoad } = system;\r\n        // set the value for the stats\r\n        for (let [key, stat] of Object.entries(vehicle_stats)) {\r\n            // this turns the Object model into the list mod\r\n            if (typeof stat.mod === 'object') {\r\n                stat.mod = new PartsList(stat.mod).list;\r\n            }\r\n            const parts = new PartsList(stat.mod);\r\n\r\n            parts.addUniquePart('SR5.Temporary', stat.temp ?? 0);\r\n\r\n            stat.mod = parts.list;\r\n            Helpers.calcTotal(stat);\r\n            // add labels\r\n            stat.label = SR5.vehicle.stats[key];\r\n        }\r\n\r\n        // hide certain stats depending on if we're offroad\r\n        if (isOffRoad) {\r\n            vehicle_stats.off_road_speed.hidden = false;\r\n            vehicle_stats.off_road_handling.hidden = false;\r\n            vehicle_stats.speed.hidden = true;\r\n            vehicle_stats.handling.hidden = true;\r\n        } else {\r\n            vehicle_stats.off_road_speed.hidden = true;\r\n            vehicle_stats.off_road_handling.hidden = true;\r\n            vehicle_stats.speed.hidden = false;\r\n            vehicle_stats.handling.hidden = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply SR5#199 'Pilot' rules.\r\n     */\r\n    static prepareAttributes(system: VehicleActorData) {\r\n        const { attributes, vehicle_stats } = system;\r\n\r\n        // SR5#199 - 'Pilot' => All  mental attributes and reaction.\r\n        const attributeIds = ['reaction', 'willpower', 'logic', 'intuition', 'charisma'];\r\n\r\n        const totalPilot = Helpers.calcTotal(vehicle_stats.pilot);\r\n\r\n        attributeIds.forEach((attId) => {\r\n            if (attributes[attId] !== undefined) {\r\n                attributes[attId].base = totalPilot;\r\n            }\r\n        });\r\n    }\r\n\r\n    static prepareLimits(system: VehicleActorData) {\r\n        const { limits, vehicle_stats, isOffRoad } = system;\r\n\r\n        limits.mental.base = Helpers.calcTotal(vehicle_stats.sensor);\r\n\r\n        // add sensor, handling, and speed as limits\r\n        limits.sensor = { ...vehicle_stats.sensor, hidden: true };\r\n        limits.handling = { ...(isOffRoad ? vehicle_stats.off_road_handling : vehicle_stats.handling), hidden: true };\r\n        limits.speed = { ...(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed), hidden: true };\r\n    }\r\n\r\n    /**\r\n     * Apply SR5#269 'Drones in the matrix' rules.\r\n     */\r\n    static prepareDeviceAttributes(system: VehicleActorData) {\r\n        const {matrix, vehicle_stats} = system;\r\n\r\n        matrix.rating = vehicle_stats.pilot.value;\r\n    }\r\n\r\n    static prepareConditionMonitor(system: VehicleActorData) {\r\n        const { track, attributes, matrix, isDrone, modifiers } = system;\r\n\r\n        const halfBody = Math.ceil(Helpers.calcTotal(attributes.body) / 2);\r\n        // CRB pg 199 drone vs vehicle physical condition monitor rules\r\n        if (isDrone) {\r\n            track.physical.base = 6 + halfBody;\r\n            track.physical.max = track.physical.base + (Number(modifiers['physical_track']) || 0);\r\n        } else {\r\n            track.physical.base = 12 + halfBody;\r\n            track.physical.max =  track.physical.base + (Number(modifiers['physical_track']) || 0);\r\n        }\r\n        track.physical.label = SR5.damageTypes.physical;\r\n\r\n        const rating = matrix.rating || 0;\r\n        matrix.condition_monitor.max = 8 + Math.ceil(rating / 2) + Number(modifiers.matrix_track);\r\n    }\r\n\r\n    static prepareMovement(system: VehicleActorData) {\r\n        const { vehicle_stats, movement, isOffRoad } = system;\r\n\r\n        let speedTotal = Helpers.calcTotal(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed);\r\n\r\n        // algorithm to determine speed, CRB pg 202 table\r\n        movement.walk.base = 5 * Math.pow(2, speedTotal - 1);\r\n        movement.walk.value = movement.walk.base;\r\n\r\n        movement.run.base = 10 * Math.pow(2, speedTotal - 1);\r\n        movement.run.value = movement.run.base;\r\n    }\r\n\r\n    static prepareMeatspaceInit(system: VehicleActorData) {\r\n        const { vehicle_stats, initiative, modifiers } = system;\r\n\r\n        const pilot = Helpers.calcTotal(vehicle_stats.pilot);\r\n\r\n        initiative.meatspace.base.base = pilot * 2;\r\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\r\n        initiative.meatspace.dice.base = 4;\r\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\r\n\r\n        Helpers.calcTotal(initiative.meatspace.base);\r\n        Helpers.calcTotal(initiative.meatspace.dice);\r\n    }\r\n\r\n    static prepareArmor(system: VehicleActorData) {\r\n        const { armor, modifiers } = system;\r\n\r\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR5.Temporary', Number(armor['temp']));\r\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR5.Bonus', Number(modifiers['armor']));\r\n\r\n        Helpers.calcTotal(armor);\r\n    }\r\n}\r\n", "import { SR5Actor } from './../../actor/SR5Actor';\r\nimport { DocumentSituationModifiers, ModifiableDocumentTypes } from '../DocumentSituationModifiers';\r\nimport Modifier = Shadowrun.ModifierData;\r\nimport SourceModifierData = Shadowrun.SourceModifierData;\r\nimport ActiveModifierValue = Shadowrun.ActiveModifierValue;\r\nimport SituationModifiersSourceData = Shadowrun.SituationModifiersSourceData;\r\n\r\n\r\n\r\nexport interface SituationalModifierApplyOptions {\r\n    // When set to true, applied will be regenerated always.\r\n    reapply?: boolean\r\n    // When new source data is given, internal source is overwritten.\r\n    source?: SourceModifierData\r\n    // When given will be used to ONLY applied active selections within.\r\n    // keys should be included as applied.active.<applicable>\r\n    applicable?: string[]\r\n}\r\n\r\nexport type SituationModifierCategory = keyof SituationModifiersSourceData;\r\n/**\r\n * Base class for handling a single category of situational modifiers, to be used in conjungtion with\r\n * the Modifiers class.\r\n * \r\n * Each situational modifier allows for a generic handling of it's active selections, totals and manual\r\n * override values, while also allowing to apply custom rules to each.\r\n * \r\n * A modifier category would be: environmental, matrix, magic/astral, social, ...\r\n * \r\n * Each handler works on the document level, which might have local source modifier data containing\r\n * selections for a scene, a position, an actor or else.\r\n * \r\n * A user/GM can select specific modifier values (so called active modifiers).\r\n * \r\n * It's allowed to have user selections for their character, while the gm has selections made\r\n * globally for the scene or local token position. These selections override each other and can\r\n * be modified by an ActiveEffect.\r\n * \r\n */\r\nexport class SituationModifier {\r\n    category: SituationModifierCategory;\r\n    // A reference to the modifiers this handler is used within.\r\n    modifiers?: DocumentSituationModifiers\r\n    // The original source modifier data. This shouldn't be altered.\r\n    source: SourceModifierData\r\n    // The applied modifier data, originating from the original source data.\r\n    applied: Modifier\r\n\r\n    globalActivesApplied: boolean;\r\n\r\n    /**\r\n     * \r\n     * @param data The low level modifier data for this handler to work on.\r\n     * @param modifiers Modifiers instances this handler is used in.\r\n     */\r\n    constructor(data?: Partial<SourceModifierData>, modifiers?: DocumentSituationModifiers) {\r\n        this.source = this._prepareSourceData(data);\r\n        this.modifiers = modifiers;\r\n    }\r\n\r\n    /**\r\n     * Prepare valid source modifier data.\r\n     * \r\n     * @param data A documents source modifier data\r\n     * @returns Either a documents source modifier data or a valid fallback.\r\n     */\r\n    _prepareSourceData(data: Partial<SourceModifierData>={}): SourceModifierData {\r\n        // Avoid incomplete source data from documents.\r\n        return {...{active: {}}, ...data};\r\n    }\r\n\r\n    /** \r\n     * Determine if any documents have been added to this instance.\r\n     */\r\n    get hasDocuments(): boolean {\r\n        return this.modifiers !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Determine if the source document used is an actor.\r\n     */\r\n    get sourceDocumentIsActor(): boolean {\r\n        return this.modifiers !== undefined && this.modifiers.documentIsActor;\r\n    }\r\n\r\n    /**\r\n     * Determine if the source document used is a scene.\r\n     */\r\n    get sourceDocumentIsScene(): boolean {\r\n        return this.modifiers !== undefined && this.modifiers.documentIsScene;\r\n    }    \r\n\r\n    /**\r\n     * Return the source active values for use during selection.\r\n     */\r\n    get active(): ActiveModifierValue {\r\n        return this.source.active;\r\n    }\r\n\r\n    /**\r\n     * Determine if the source data has an active modifier set for this situational modifier.\r\n     */\r\n    get hasActive(): boolean {\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        return !foundry.utils.isEmpty(this.source.active);\r\n    }\r\n\r\n    /**\r\n     * Determine if a fixed value has been set.\r\n     */\r\n    get hasFixed(): boolean {\r\n        return this.applied.hasOwnProperty('fixed');\r\n    }\r\n\r\n    /**\r\n     * Determine if a fixed user selection has been made.\r\n     */\r\n    get hasFixedSelection(): boolean {\r\n        return this.applied.active.hasOwnProperty('value');\r\n    }\r\n\r\n    /**\r\n     * Determine if any user selection has been made.\r\n     */\r\n    get hasSelection(): boolean {\r\n        return this.hasActive || this.hasFixed;\r\n    }\r\n\r\n    /**\r\n     * Does the applied selection match?\r\n     * \r\n     * Use applied as source might not match, but applied might.\r\n     * \r\n     * In that case a matching applied might need to be altered in source.\r\n     * \r\n     * @param modifier The selection / active identifier\r\n     * @param level The modifier level\r\n     */\r\n    isMatching(modifier: string, level: number): boolean {\r\n        return this.applied.active[modifier] === level;\r\n    }\r\n\r\n    /**\r\n     * Set a active selection to a modifier level.\r\n     * \r\n     * @param modifier The selection / active identifier.\r\n     * @param level The modifier level\r\n     */\r\n    setActive(modifier: string, level: number) {\r\n        this.source.active[modifier] = level;\r\n        this._updateDocumentSourceModifiers();\r\n    }\r\n\r\n    /**\r\n     * Set a active selection as inactive.\r\n     *\r\n     * @param modifier The selection / active identivier.\r\n     */\r\n    setInactive(modifier: string) {\r\n        delete this.source.active[modifier];\r\n        this._updateDocumentSourceModifiers();\r\n    }\r\n\r\n    /**\r\n     * Determine if the given modifier is active\r\n     * @param modifier The possibly active modifier to check\r\n     */\r\n    isActive(modifier: string) {\r\n        return this.source.active.hasOwnProperty(modifier);\r\n    }\r\n\r\n    /**\r\n     * When using a selection this method will toggle an active modifier on and off.\r\n     * \r\n     * @param modifier The active modifier name\r\n     * @param value The value the modifier uses currently.\r\n     */\r\n    toggleSelection(modifier: string, value: number) {\r\n        if (this.isMatching(modifier, value)) {\r\n            this.setInactive(modifier)\r\n        } else {\r\n            this.setActive(modifier, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Using the local documents source modifier data apply all higher-level situational modifiers\r\n     * on top and apply to the actual modifiers.\r\n     * \r\n     * @params options An optional set of options.\r\n     * @params options.reapply When set to true, should cause a full re application.\r\n     */\r\n    apply(options: SituationalModifierApplyOptions={}) {\r\n        // Initial application or reapplication\r\n        if (!this.applied || options.reapply || options.source) {\r\n            // Clear current application.\r\n            this.applied = {\r\n                active: {},\r\n                total: 0\r\n            }\r\n        }   \r\n\r\n        // Update source when given.\r\n        this.source = options.source ?? this.source;\r\n\r\n        // To filter active selections.\r\n        const applicable = options.applicable ?? null;\r\n\r\n        // Collected source to applied in order.\r\n        const sources: SourceModifierData[] = [];\r\n\r\n        // CASE 1 - Actor document class - apply all top level documents first.\r\n        // Note, instance against configured class to be change resistant.\r\n        if (this.modifiers && this.sourceDocumentIsActor) {\r\n            // Using a document source, a category is necessary to extract the right source modifiers.\r\n            if (!this.category) return console.error(`Shadowrun 5e | ${this.constructor.name} can't interact with documents without a modifier category set.`)\r\n\r\n            const actor = this.modifiers.document as SR5Actor;\r\n            this._addSceneSourceDataFromActor(actor, sources);\r\n        }\r\n\r\n        // Add local source (last) into order.\r\n        sources.push(this.source);\r\n\r\n        // Apply each source in order.\r\n        sources.forEach(source => foundry.utils.mergeObject(this.applied, source));\r\n\r\n        // Remove not applicable active selections.\r\n        if (applicable && applicable.length > 0) {\r\n            Object.keys(this.applied.active).forEach((selection) => {\r\n                if (!applicable.includes(selection)) delete this.applied.active[selection];\r\n            });\r\n        }\r\n\r\n        // If a fixed value selection has been made, use that.\r\n        if (!this.hasFixed && this.hasFixedSelection) this.applied.fixed = this.applied.active.value;\r\n\r\n        // After merging active and fixed value, derive total.\r\n        if (this.hasFixed) this.applied.total = this.applied.fixed as number;\r\n        else this.applied.total = this._calcActiveTotal();\r\n\r\n        console.debug(`Shadowrun 5e | Totalled situational modifiers for ${this.modifiers?.document?.name} to be: ${this.applied.total}`, this.applied);\r\n    }\r\n\r\n    /**\r\n     * Add scene modifier sources into the applicable sources, when an actor is present on scene\r\n     * \r\n     * @param actor The actor to check for tokens\r\n     * @param sources The sources list, as used within #apply\r\n     */\r\n    _addSceneSourceDataFromActor(actor: SR5Actor, sources: SourceModifierData[]) {\r\n        const scene = actor.getToken()?.parent;\r\n\r\n        if (!scene) return;\r\n        const sceneSource = this._getDocumentsSourceData(scene);\r\n        if (!sceneSource) return;\r\n\r\n        // Add parent scene (top most) into order.\r\n        sources.push(sceneSource);\r\n    }\r\n\r\n    _getDocumentsSourceData(document: ModifiableDocumentTypes): SourceModifierData|undefined {\r\n        // To access another objects\r\n        if (!this.category) return;\r\n        // A placed token must apply it's scene modifiers first.\r\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(document);\r\n        // Select the modifier category only.\r\n        return modifiers.source[this.category];\r\n    }\r\n\r\n    /**\r\n     * Determine the total value of all active modifier values.\r\n     * \r\n     * Override this method if you want to apply different rules depending on the situational modifier category.\r\n     * \r\n     * By default the active modifiers will simply be sumed up.\r\n     * \r\n     * @returns The total modifier value to be used for this situational modifier category.\r\n     */\r\n    _calcActiveTotal(): number {\r\n        return Object.values(this.applied.active).reduce((sum, current) => sum + current, 0) || 0;\r\n    }\r\n\r\n    /**\r\n     * Give the total modifier value for this category.\r\n     *  \r\n     * Should this modifier not yet been applied, this will apply it.\r\n     * \r\n     * NOTE: Always use this field to access resulting modifier values as some modifiers might have a total level applied vs a total modifer given.\r\n     */\r\n    get total(): number {\r\n        if (!this.applied) {\r\n            this.apply();\r\n        }\r\n        return this.applied.total;\r\n    }\r\n\r\n    /**\r\n     * Clear the source modifier data to a default state.\r\n     */\r\n    clear() {\r\n        this.source = this._prepareSourceData();\r\n        // With source default, reapply all values\r\n        this.apply({reapply: true});\r\n\r\n        this._updateDocumentModifiers();\r\n    }\r\n\r\n    _updateDocumentSourceModifiers() {\r\n        if (!this.category || !this.modifiers) return;\r\n        this.modifiers.source[this.category] = this.source;\r\n    }\r\n    \r\n    _updateDocumentAppliedModifiers() {\r\n        if (!this.category || !this.modifiers) return;\r\n        this.modifiers.applied[this.category] = this.applied;\r\n    }\r\n\r\n    _updateDocumentModifiers() {\r\n        this._updateDocumentSourceModifiers();\r\n        this._updateDocumentAppliedModifiers();\r\n    }\r\n}", "import { SituationModifier, SituationModifierCategory } from './SituationModifier';\r\nimport BackgroundCountModifiersSourceData = Shadowrun.BackgroundCountModifiersSourceData;\r\nimport BackgroundCountModifiersData = Shadowrun.BackgroundCountModifiersData;\r\n\r\n/**\r\n * Rules application of situation modifieres for magic.\r\n */\r\nexport class BackgroundCountModifier extends SituationModifier {\r\n    source: BackgroundCountModifiersSourceData\r\n    applied: BackgroundCountModifiersData\r\n    category: SituationModifierCategory = 'background_count';\r\n}", "import { SituationModifier, SituationModifierCategory } from './SituationModifier';\r\nimport NoiseModifiersSourceData = Shadowrun.NoiseModifiersSourceData;\r\nimport NoiseModifiersData = Shadowrun.NoiseModifiersData;\r\n\r\n/**\r\n * Rules application of situation modifieres for matrix.\r\n */\r\nexport class NoiseModifier extends SituationModifier {\r\n    source: NoiseModifiersSourceData\r\n    applied: NoiseModifiersData\r\n    category: SituationModifierCategory = 'noise'\r\n}", "import { SR } from '../../constants';\r\nimport { SituationModifier, SituationModifierCategory } from './SituationModifier';\r\nimport EnvironmentalModifierLevels = Shadowrun.EnvironmentalModifierLevels;\r\nimport EnvironmentalModifiersSourceData = Shadowrun.EnvironmentalModifiersSourceData;\r\nimport EnvironmentalModifiersData = Shadowrun.EnvironmentalModifiersData;\r\n\r\n/**\r\n  * Rules application of situation modifieres for matrix.\r\n */\r\nexport class EnvironmentalModifier extends SituationModifier {\r\n    source: EnvironmentalModifiersSourceData\r\n    applied: EnvironmentalModifiersData\r\n    category: SituationModifierCategory = 'environmental';\r\n\r\n    \r\n    get levels(): EnvironmentalModifierLevels {\r\n        return SR.combat.environmental.levels;\r\n    }\r\n\r\n    /**\r\n     * How many selectios / modifiers are active per level of enviornmental modifiers.\r\n     * \r\n     * A level would be light and fitting modifiers would be 'Light Rain', 'Light Winds' or Medium Range.\r\n     * \r\n     * @param values Active modifier values to be matched to level values\r\n     * @returns A count per level of modifiers on that level\r\n     */\r\n    activeLevels(values: Number[]): Record<string, number> {\r\n        return {\r\n            light: values.reduce((count: number, value: number) => (value === this.levels.light ? count + 1 : count), 0) as number,\r\n            moderate: values.reduce((count: number, value: number) => (value === this.levels.moderate ? count + 1 : count), 0) as number,\r\n            heavy: values.reduce((count: number, value: number) => (value === this.levels.heavy ? count + 1 : count), 0) as number,\r\n            extreme: values.reduce((count: number, value: number) => (value === this.levels.extreme ? count + 1 : count), 0) as number\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply rules for environmental modifier selection to calculate a total modifier value.\r\n     * \r\n     * SR5#173 'Environmental Modifiers'\r\n     */\r\n    _calcActiveTotal(): number {\r\n        // A fixed value selection overrides other selections.\r\n        if (this.applied.active.value)\r\n            return this.applied.active.value;\r\n\r\n        // Calculation based on active modifier categories, excluding manual overwrite.\r\n        const activeCategories = Object.entries(this.applied.active);\r\n        // Should an active category miss a level set, ignore and fail gracefully.\r\n        const activeValues = activeCategories.map(([category, level]) => level ? level : 0);\r\n        // Calculate the amout of categor\r\n        const count = this.activeLevels(activeValues);\r\n\r\n        if (count.extreme > 0 || count.heavy >= 2) {\r\n            return this.levels.extreme;\r\n        }\r\n        else if (count.heavy === 1 || count.moderate >= 2) {\r\n            return this.levels.heavy;\r\n        }\r\n        else if (count.moderate === 1 || count.light >= 2) {\r\n            return this.levels.moderate;\r\n        }\r\n        else if (count.light === 1) {\r\n            return this.levels.light;\r\n        } \r\n\r\n        return this.levels.good;\r\n    }\r\n\r\n    setInactive(modifier: string): void {\r\n        if (this.source.active[modifier] !== this.applied.active[modifier]) this.setActive(modifier, 0);\r\n        else delete this.source.active[modifier];\r\n    }\r\n}", "import { BackgroundCountModifier as BackgroundCountModifier } from './modifiers/BackgroundCountModifier';\r\nimport { NoiseModifier as NoiseModifer } from './modifiers/NoiseModifier';\r\nimport { SituationalModifierApplyOptions, SituationModifier } from './modifiers/SituationModifier';\r\nimport { EnvironmentalModifier } from './modifiers/EnvironmentalModifier';\r\nimport { SR5Actor } from \"../actor/SR5Actor\";\r\nimport {FLAGS, SR, SYSTEM_NAME} from \"../constants\";\r\nimport SituationModifiersSourceData = Shadowrun.SituationModifiersSourceData;\r\nimport SituationModifiersData = Shadowrun.SituationModifiersData;\r\n\r\n\r\nexport interface DocumentSituationModifiersTotalForOptions {\r\n    applicable?: string[]\r\n}\r\n\r\n/**\r\n * These documents can store situational modifiers\r\n */\r\n export type ModifiableDocumentTypes = SR5Actor | Scene;\r\n\r\n/**\r\n * Handle all per document situation modifiers.\r\n * \r\n * Each situational modifier has a 'category' like 'environmental' or 'noise'.\r\n * Each category has a situation modifier handler to calculate it's total based on\r\n * user selection and rules for that category.\r\n * \r\n * A selection is based on Shadowrun modifier tables and can either result in a summed total\r\n * or rule specific rules based on what is selected (environmental).\r\n * \r\n * A category should be matched a top-level property to the documents source object.\r\n * \r\n * A DocumentSitiationModifiers instance doesn't do any handling of values but delegates to\r\n * the respectiv handler of each category.\r\n * \r\n * Documents only store source data per document, while a document might have other\r\n * document source data applied first. The resulting applied data is what's actually used to\r\n * calculate a modifiers total.\r\n * \r\n * This allows for modifiers to be defined globally (scene) for all other documents (actors), while\r\n * also allowing as many documents in that apply chain as necessary.\r\n * \r\n */\r\nexport class DocumentSituationModifiers {\r\n    // A reference to the original document holding modifier source data.\r\n    document: ModifiableDocumentTypes | undefined;\r\n    // The source data stored on the document.\r\n    source: SituationModifiersSourceData;\r\n    // The applied data from the document and it's apply chain.\r\n    applied: SituationModifiersData;\r\n    // Handlers for the different modifier categories.\r\n    handlers: {\r\n        noise: NoiseModifer,\r\n        background_count: BackgroundCountModifier,\r\n        environmental: EnvironmentalModifier\r\n    }\r\n\r\n    /**\r\n     * Prepare a Modifiers instance for a and allow handling of the resulting modifiers.\r\n     * \r\n     * @param data situational modifiers taken from a Document.\r\n     * @param document The source document used to retrieve data.\r\n     */\r\n    constructor(data?: SituationModifiersSourceData, document?: ModifiableDocumentTypes) {\r\n        // Fail gracefully for no modifiers given.\r\n        // This can happen as Foundry returns empty objects for no flags set.\r\n        if (!data || foundry.utils.getType(data) !== 'Object') {\r\n            data = DocumentSituationModifiers._defaultModifiers;\r\n        }\r\n\r\n        this.source = this. _completeSourceData(data);\r\n        this.document = document;\r\n\r\n        // Provide all categories to their respective handlers.\r\n        this.handlers = {\r\n            noise: new NoiseModifer(this.source.noise, this),\r\n            background_count: new BackgroundCountModifier(this.source.background_count, this),\r\n            environmental: new EnvironmentalModifier(this.source.environmental, this)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A factory for the SituationalModifier handler of the matrix modifier category\r\n     */\r\n    get noise(): NoiseModifer {\r\n        return this.handlers.noise;\r\n    }\r\n\r\n    /**\r\n     * A factory for the MagicModifier handler of the magic modifier category.\r\n     */\r\n    get background_count(): BackgroundCountModifier {\r\n        return this.handlers.background_count;\r\n    }\r\n\r\n    /**\r\n     * A factory for the EnvironmentalModifier handler of the environmental modifier category.\r\n     */\r\n    get environmental(): EnvironmentalModifier {\r\n        return this.handlers.environmental;\r\n    }\r\n\r\n    /**\r\n     * Complete a partial modifier data object, making sure all modifier category fields are set.\r\n     * \r\n     * @param data An incomplete modifier data object.\r\n     * @returns A completed modifier data object.\r\n     */\r\n    _completeSourceData(data: Partial<SituationModifiersSourceData>): SituationModifiersSourceData {\r\n        // Duplicate data to avoid cross talk between different entities over different Modifier instances.\r\n        data = foundry.utils.duplicate(data);\r\n\r\n        for (const [category, modifiers] of Object.entries(DocumentSituationModifiers._defaultModifiers)) {\r\n            if (!data.hasOwnProperty(category)) data[category] = modifiers;\r\n        }\r\n\r\n        return data as SituationModifiersSourceData;\r\n    }\r\n\r\n    /**\r\n     * Return this total value for a modifiers category selection.\r\n     * \r\n     * @param category A string matching a situation modifiers category.\r\n     * @param options\r\n     */\r\n    getTotalFor(category: keyof SituationModifiersSourceData, options:DocumentSituationModifiersTotalForOptions={}): number {\r\n        const modifier = this.handlers[category];\r\n\r\n        // re-apply to limit applicable selections.\r\n        if (options.applicable) {\r\n            modifier.apply({applicable: options.applicable})\r\n        }\r\n\r\n        return modifier.total;\r\n    }\r\n\r\n    /**\r\n     * Re-apply all situational modifiers totals based on their active selections made.\r\n     * \r\n     * This will turn the source data per modifier category over to their matching handler\r\n     * and apply that categories total according to the rules for that category.\r\n     * \r\n     * The result will be stored in the applied modifiers, where a total and the applied\r\n     * selections can be found.\r\n     * \r\n     * @params options What options to pass onto the SituationModifier.apply method.\r\n     *                 The source property will be overriden.\r\n     */\r\n    applyAll(options: SituationalModifierApplyOptions={}) {\r\n        //@ts-ignore // Rebuild applied data fully for all modifiers.\r\n        this.applied = {};\r\n\r\n        // Let all handlers apply their modifier rules on the documents source data.\r\n        Object.entries(this.handlers).forEach(([category, handler]) => {\r\n            // Befor application, remove invalid selections. \r\n            // This happens when a selection has been set with an empty input DOM element.\r\n            Object.entries(this.source[category].active).forEach(([modifier, value]) => {\r\n                switch (value) {\r\n                    case null:\r\n                    case undefined:\r\n                        delete this.source[category].active[modifier];\r\n                }\r\n            })\r\n\r\n            // Update category modifier source data and reapply.\r\n            options.reapply = options.reapply ?? true;\r\n            options.source = this.source[category];\r\n            handler.apply(options);\r\n\r\n            // Move the applied modifier data to the document space.\r\n            this.applied[category] = handler.applied;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear a given document from all situation modifiers selection.\r\n     * \r\n     * @param document The document to clear.\r\n     * @returns A new instance with the resulting modifiers structure\r\n     */\r\n    static async clearAllOnDocument(document: ModifiableDocumentTypes) {\r\n        if (document instanceof SR5Actor) {\r\n            // Overwrite all selections with default values.\r\n            await document.update({'system.-=situation_modifiers': null}, {render: false});\r\n            await document.update({'system.situation_modifiers': DocumentSituationModifiers._defaultModifiers});\r\n        } else {\r\n            await document.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\r\n            await document.setFlag(SYSTEM_NAME, FLAGS.Modifier, DocumentSituationModifiers._defaultModifiers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear a given modifiers categories selection from a document.\r\n     * \r\n     * @param document The document to clear.\r\n     * @param category Modifiers category to clear\r\n     * @returns A new instance with the resulting modifiers structure\r\n     */\r\n    static async clearCategoryOnDocument(document: ModifiableDocumentTypes, category: keyof SituationModifiersSourceData): Promise<DocumentSituationModifiers> {\r\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(document);\r\n\r\n        if (!modifiers.source.hasOwnProperty(category)) return modifiers;\r\n        modifiers.source[category] = DocumentSituationModifiers._defaultModifier;\r\n\r\n        await DocumentSituationModifiers.setDocumentModifiers(document, modifiers.source);\r\n        return modifiers;\r\n    }\r\n\r\n    /**\r\n     * Clear the environmental modifier selection for a document.\r\n     * \r\n     * @param document The document to clear.\r\n     * @returns A new instance with the resulting modifiers structure\r\n     */\r\n    static async clearEnvironmentalOn(document: ModifiableDocumentTypes): Promise<DocumentSituationModifiers> {\r\n        return await DocumentSituationModifiers.clearCategoryOnDocument(document, 'environmental');\r\n    }\r\n\r\n    /**\r\n     * Clear the background count modifier selection for a document.\r\n     * \r\n     * @param document The document to clear.\r\n     * @returns A new instance with the resulting modifiers structure\r\n     */\r\n    static async clearBackgroundCountOn(document: ModifiableDocumentTypes): Promise<DocumentSituationModifiers> {\r\n        return await DocumentSituationModifiers.clearCategoryOnDocument(document, 'background_count');\r\n    }\r\n\r\n    /**\r\n     * Clear the noise modifier selection for a document.\r\n     * \r\n     * @param document The document to clear.\r\n     * @returns A new instance with the resulting modifiers structure\r\n     */\r\n    static async clearNoiseOn(document: ModifiableDocumentTypes): Promise<DocumentSituationModifiers> {\r\n        return await DocumentSituationModifiers.clearCategoryOnDocument(document, 'noise');\r\n    }\r\n\r\n    /**\r\n     * Prepare complete default modifier structure for a single modifier category.\r\n     */\r\n    static get _defaultModifier()  {\r\n        return {\r\n            active: {}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare complete default modifier data structure for a single document.\r\n     */\r\n    static get _defaultModifiers(): SituationModifiersSourceData {\r\n        return {\r\n            environmental: DocumentSituationModifiers._defaultModifier,\r\n            noise: DocumentSituationModifiers._defaultModifier,\r\n            background_count: DocumentSituationModifiers._defaultModifier\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine if the current document is a scene.\r\n     */\r\n    get documentIsScene(): boolean {\r\n        return this.document instanceof CONFIG.Scene.documentClass\r\n    }\r\n\r\n    /**\r\n     * Determine if the current document is an actor.\r\n     */\r\n    get documentIsActor(): boolean {\r\n        return this.document instanceof CONFIG.Actor.documentClass;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the situational modifiers data.\r\n     * \r\n     * @param document Any document with flags support.\r\n     * @returns The raw modifier data of a document\r\n     */\r\n     static getDocumentModifiersData(document: ModifiableDocumentTypes): SituationModifiersSourceData {\r\n        if (document instanceof SR5Actor) {\r\n            return document.system.situation_modifiers;\r\n        } else {\r\n            return document.getFlag(SYSTEM_NAME, FLAGS.Modifier) as SituationModifiersSourceData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For a modifiable document return all situational modifiers.\r\n     * \r\n     * @param document The document containing modifiers or implementing a custom modifier retrieval system.\r\n     */\r\n    static fromDocument(document: ModifiableDocumentTypes): DocumentSituationModifiers {\r\n        // Actor targets might have no personal modifiers, but still see the scene modifiers then, and use those\r\n        // as a template for their local modifiers.\r\n        if (document instanceof SR5Actor) {\r\n            return document.getSituationModifiers();\r\n        }\r\n        // All other types are handled without special cases.\r\n        return DocumentSituationModifiers.getDocumentModifiers(document);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the situational modifiers data.\r\n     * \r\n     * @param document Any document with flags support.\r\n     * @returns The raw modifier data of a document\r\n     */\r\n    static getDocumentModifiers(document: ModifiableDocumentTypes): DocumentSituationModifiers {\r\n        // It's possible for scene modifiers to chosen, while no scene is actually opened.\r\n        // if (!document) return new Modifiers(Modifiers.getDefaultModifiers());\r\n        const data = DocumentSituationModifiers.getDocumentModifiersData(document);\r\n        return new DocumentSituationModifiers(data, document);\r\n    }\r\n\r\n    /**\r\n     * Set the situation modifiers data on the given document.\r\n     * \r\n     * @param document Any document with flags support.\r\n     * @param modifiers Source data of all situation modifiers for this document.\r\n     */\r\n    static async setDocumentModifiers(document: ModifiableDocumentTypes, modifiers: SituationModifiersSourceData) {\r\n        if (document instanceof SR5Actor) {\r\n            // Due to active selection merging by Foundry mergeObject, we need to delete first.\r\n            await document.update({'system.-=situation_modifiers': null}, {render: false});\r\n            await document.update({'system.situation_modifiers': modifiers});\r\n        } else {\r\n            // Due to active selection merging by Foundry mergeObject, we need to delete first.\r\n            await document.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\r\n            await document.setFlag(SYSTEM_NAME, FLAGS.Modifier, modifiers);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for instances to update modifiers on a document\r\n     */\r\n    async updateDocument() {\r\n        if (!this.document) return console.error(`'Shadowrun 5e | ${this.constructor.name} can't update without connected document'`);\r\n        await DocumentSituationModifiers.setDocumentModifiers(this.document, this.source);\r\n    }\r\n\r\n    /**\r\n     * Helper for instances to clear all modifiers on a document\r\n     */\r\n    async clearAll() {\r\n        if (!this.document) return console.error(`'Shadowrun 5e | ${this.constructor.name} can't clear without connected document'`);\r\n        await DocumentSituationModifiers.clearAllOnDocument(this.document);\r\n        // Reset local source data.\r\n        this.source = DocumentSituationModifiers.getDocumentModifiersData(this.document);\r\n    }\r\n\r\n    /**\r\n     * Helper for scene modifier instances to clear all modifiers for all placed tokens\r\n     */\r\n    async clearAllTokensOnScene() {\r\n        if (!canvas.ready || !canvas.scene) return;\r\n        if (!this.documentIsScene) return;\r\n\r\n        // Validate that modifiers scene is same to current scene.\r\n        const scene = this.document as Scene;\r\n        if (canvas.scene.id !== scene.id) return;\r\n\r\n        // Use current scene for ease of access to tokens\r\n        canvas.scene.tokens.forEach(token => token.actor?.getSituationModifiers().clearAll());\r\n    }\r\n}", "import {ModifiersPrep} from \"./functions/ModifiersPrep\";\r\nimport {InitiativePrep} from \"./functions/InitiativePrep\";\r\nimport {AttributesPrep} from \"./functions/AttributesPrep\";\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {SR5} from \"../../config\";\r\nimport {MatrixPrep} from \"./functions/MatrixPrep\";\r\nimport ICData = Shadowrun.ICData;\r\nimport {SR5ItemDataWrapper} from \"../../data/SR5ItemDataWrapper\";\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {MatrixRules} from \"../../rules/MatrixRules\";\r\nimport DeviceAttribute = Shadowrun.DeviceAttribute;\r\nimport {SkillsPrep} from \"./functions/SkillsPrep\";\r\n\r\n\r\nexport class ICPrep {\r\n    static prepareBaseData(data: ICData) {\r\n        ModifiersPrep.clearAttributeMods(data);\r\n        ModifiersPrep.clearLimitMods(data);\r\n\r\n        ICPrep.addMissingTracks(data);\r\n        ICPrep.prepareModifiers(data);\r\n        ICPrep.hideMeatAttributes(data);\r\n    }\r\n\r\n    static prepareDerivedData(data: ICData, items: SR5ItemDataWrapper[]) {\r\n        ICPrep.prepareMatrixAttributes(data);\r\n\r\n        SkillsPrep.prepareSkills(data);\r\n\r\n        ICPrep.prepareHostAttributes(data);\r\n        ICPrep.prepareMeatAttributes(data);\r\n\r\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\r\n\r\n        ICPrep.prepareMatrix(data);\r\n        ICPrep.prepareMatrixTrack(data);\r\n\r\n        ICPrep.prepareMatrixInit(data);\r\n        InitiativePrep.prepareCurrentInitiative(data);\r\n    }\r\n\r\n    /**\r\n     * On initial actor creation the matrix track will be missing.\r\n     *\r\n     * This is intentional as not to pollute template.json with actor type specific data.\r\n     *\r\n     */\r\n    static addMissingTracks(data: ICData) {\r\n        // Newly created actors SHOULD have this by template.\r\n        // Legacy actors MIGHT not have it, therefore make sure it's their.\r\n        const track = data.track || {};\r\n        // @ts-ignore\r\n        if (!track.matrix) track.matrix = DefaultValues.trackData();\r\n        // @ts-ignore\r\n        data.track = track;\r\n    }\r\n\r\n    /**\r\n     * Add IC modifiers only to the misc tab.\r\n     * @param data\r\n     */\r\n    static prepareModifiers(data: ICData) {\r\n        let modifiers = ModifiersPrep.commonModifiers;\r\n        modifiers = modifiers.concat(ModifiersPrep.matrixModifiers);\r\n        ModifiersPrep.setupModifiers(data, modifiers);\r\n    }\r\n\r\n    static prepareMatrix(data: ICData) {\r\n        data.matrix.rating = MatrixRules.getICDeviceRating(data.host.rating);\r\n    }\r\n\r\n    static prepareMatrixTrack(data: ICData) {\r\n        const { modifiers, track, matrix } = data;\r\n\r\n        // Prepare internal matrix condition monitor values\r\n        // LEGACY: matrix.condition_monitor is no TrackType. It will only be used as a info, should ever be needed anywhere\r\n        matrix.condition_monitor.max = Number(modifiers['matrix_track']) + MatrixRules.getConditionMonitor(matrix.rating as number);\r\n\r\n        // Prepare user visible matrix track values\r\n        track.matrix.base = MatrixRules.getConditionMonitor(matrix.rating as number);\r\n        track.matrix.mod = PartsList.AddUniquePart(track.matrix.mod, \"SR5.Bonus\", Number(modifiers['matrix_track']));\r\n        track.matrix.max = matrix.condition_monitor.max;\r\n        track.matrix.label = SR5.damageTypes.matrix;\r\n    }\r\n\r\n    static prepareMatrixInit(data: ICData) {\r\n        const { initiative, modifiers, host } = data;\r\n\r\n\r\n        // Set current initiative to matrix\r\n        initiative.perception = 'matrix';\r\n\r\n        // Prepare used initiative parts\r\n        initiative.matrix.base.base = MatrixRules.getICInitiativeBase(host.rating);\r\n        initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative']));\r\n\r\n        initiative.matrix.dice.base = MatrixRules.getICInitiativeDice();\r\n        initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative_dice']));\r\n    }\r\n\r\n    /**\r\n     * For connected hosts overwrite matrix attributes with the hosts attributes, otherwise leave as is.\r\n     */\r\n    static prepareHostAttributes(data: ICData) {\r\n        if (!data.host.id || !data.host.atts) return;\r\n\r\n        Object.keys(data.host.atts).forEach(deviceAttribute => {\r\n            const attribute: DeviceAttribute = data.host.atts[deviceAttribute];\r\n            data.matrix[attribute.att].base = attribute.value;\r\n            data.matrix[attribute.att].device_att = deviceAttribute;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide all meat attributes from display\r\n     */\r\n    static hideMeatAttributes(data: ICData) {\r\n        const { attributes } = data;\r\n\r\n        for (const attribute of Object.values(attributes)) {\r\n            attribute.hidden = true;\r\n        }\r\n    }\r\n\r\n    static prepareMeatAttributes(data: ICData) {\r\n        const { attributes, host } = data;\r\n\r\n        for (const id of Object.keys(SR5.attributes)) {\r\n            if (!attributes.hasOwnProperty(id)) continue;\r\n            // Exclude invalid attributes for IC\r\n            if (['magic', 'edge', 'essence', 'resonance'].includes(id)) continue\r\n\r\n            const attribute = attributes[id];\r\n\r\n            // Overwrite the base as it's missing on new actors and IC should only derive it's meat attributes\r\n            // from it's host attributes.\r\n            attribute.base = 0;\r\n\r\n            const parts = new PartsList(attribute.mod);\r\n            parts.addPart('SR5.Host.Rating', MatrixRules.getICMeatAttributeBase(host.rating));\r\n            attribute.mod = parts.list;\r\n\r\n            AttributesPrep.prepareAttribute(id, attribute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate all matrix attributes without the meat attributes\r\n     */\r\n    static prepareMatrixAttributes(data: ICData) {\r\n        const { matrix } = data;\r\n\r\n        for (const id of Object.keys(SR5.matrixAttributes)) {\r\n            if (!matrix.hasOwnProperty(id)) continue;\r\n\r\n            const attribute = matrix[id];\r\n            AttributesPrep.prepareAttribute(id, attribute);\r\n        }\r\n    }\r\n\r\n}", "import {SR5Actor} from \"../SR5Actor\";\r\nimport {Helpers} from \"../../helpers\";\r\nimport InventoryData = Shadowrun.InventoryData;\r\nimport InventoriesData = Shadowrun.InventoriesData;\r\nimport {SR5Item} from \"../../item/SR5Item\";\r\n\r\n\r\n/**\r\n * Handle all inventory related actions on an SR5Actor'.\r\n *\r\n * An inventory can store a set of items on a document, without actually altering the\r\n * itemData directly, only going through the documentData and indirectly referencing the item.\r\n *\r\n * It expects the document to define a defaultInventory field of type InventoryData, which\r\n * is where all items without an inventory will be placed. This default inventory won't be\r\n * stored on the document. This allows for the inventory system to be drop in, without any\r\n * migration needed.\r\n */\r\nexport class InventoryFlow {\r\n    document: SR5Actor;\r\n\r\n    constructor(document: SR5Actor) {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (document.system.inventories === undefined)\r\n            console.error('Shawdorun 5e | Actor given does not have a inventory data structure. You will experience bugs.');\r\n\r\n        this.document = document;\r\n    }\r\n\r\n    /**\r\n     * Create an inventory place for gear organization.\r\n     *\r\n     * @param name How to name the inventory, will also be its label for custom inventories.\r\n     * @returns Created inventories name\r\n     */\r\n    async create(name: string): Promise<string|void> {\r\n        console.log(`Shadowrun 5e | Creating inventory ${name}`);\r\n\r\n        name = InventoryFlow._sanitzeName(name);\r\n\r\n        if (name.length === 0) return console.error('Shadowrun 5e | The given name has been reduced to a zero length, please try another name');\r\n        if (this.exists(name)) return ui.notifications?.warn(game.i18n.localize('SR5.Errors.InventoryAlreadyExists'));\r\n        if (this.document.defaultInventory.name === name) return;\r\n\r\n        const updateData = {\r\n            'system.inventories': {\r\n                [name]: {\r\n                    name,\r\n                    label: name,\r\n                    itemIds: []\r\n                }\r\n            }\r\n        };\r\n\r\n        console.log(`Shadowrun 5e | Executing update to create inventory`, updateData)\r\n        // Don't render to allow sheets to manage switching inventories.\r\n        await this.document.update(updateData, {render: false});\r\n\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Remove an actors inventory and maybe move the containing items over to another one.\r\n     *\r\n     * @param name The inventory name to be removed.\r\n     * @param moveTo The inventory name items need to moved over to, otherwise the default inventory.\r\n     */\r\n    async remove(name: string, moveTo: string = this.document.defaultInventory.name) {\r\n        console.log(`Shadowrun 5e | Removing inventory ${name}. Moving items over to ${moveTo}`);\r\n\r\n        if (this.document.defaultInventory.name === name)\r\n            return ui.notifications?.error(game.i18n.localize('SR5.Errors.DefaultInventoryCantBeRemoved'));\r\n\r\n        if (!this.exists(name))\r\n            return console.error(`Shadowrun 5e | Can't remove inventory ${name} or move its items over to inventory ${moveTo}`);\r\n\r\n        // Move items over to default in case of missing target inventory.\r\n        if (!this.exists(moveTo))\r\n            moveTo = this.document.defaultInventory.name;\r\n\r\n        // Prepare deletion of inventory.\r\n        const updateData = Helpers.getDeleteKeyUpdateData('system.inventories', name);\r\n\r\n        // Default inventory is virtual, so only none default inventories need to have their items merged.\r\n        if (this.document.defaultInventory.name !== moveTo) {\r\n            // @ts-ignore\r\n            updateData[`system.inventories.${moveTo}.itemIds`] = [\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                ...this.document.system.inventories[name].itemIds,\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                ...this.document.system.inventories[moveTo].itemIds\r\n            ];\r\n        }\r\n\r\n        console.log(`Shadowrun 5e | Executing update to remove inventory`, updateData);\r\n        // Don't render to allow sheets to manage switching inventories.\r\n        await this.document.update(updateData, {render: false});\r\n    }\r\n\r\n        /**\r\n     * Does this actor have the given inventory already?\r\n     *\r\n     * Note: Comparisons will only be against lower case.\r\n     *\r\n     * @param name The inventory name.\r\n     */\r\n    exists(name): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return name === Object.keys(this.document.system.inventories)\r\n                              .find(inventory => inventory.toLowerCase() === name.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Helper to get a specifics inventory's data\r\n     *\r\n     * @param name The inventory name to return.\r\n     */\r\n    getOne(name): InventoryData | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.document.system.inventories[name];\r\n    }\r\n\r\n    /**\r\n     * Helper to get all inventories.\r\n     */\r\n    getAll(): InventoriesData {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.document.system.inventories;\r\n    }\r\n\r\n    /**\r\n     * Rename an existing inventory to a new name.\r\n     *\r\n     * @param current The old name of the inventory.\r\n     * @param newName The new name of the inventory.\r\n     */\r\n    async rename(current: string, newName: string): Promise<string|void> {\r\n        console.log(`Shadowrun 5e | Renaming the inventory ${current} to ${newName}`);\r\n\r\n        newName = InventoryFlow._sanitzeName(newName);\r\n\r\n        if (newName.length === 0) return console.error('Shadowrun 5e | The given name has been reduced to a zero length, please try another name');\r\n        if (this.document.defaultInventory.name === current) return;\r\n        if (current === newName) return;\r\n\r\n        const inventory = this.getOne(current);\r\n        if (!inventory) return;\r\n\r\n        // Change internal and display name.\r\n        inventory.name = newName;\r\n        inventory.label = newName;\r\n\r\n        const updateData = {\r\n            'system.inventories': {\r\n                [`-=${current}`]: null,\r\n                [newName]:  inventory\r\n            }\r\n        };\r\n\r\n        console.log(`Shadowrun 5e | Executing update to rename inventory`, updateData);\r\n        // Don't render to allow sheets to manage switching inventories.\r\n        await this.document.update(updateData, {render: false});\r\n\r\n        return newName;\r\n    }\r\n\r\n    /**\r\n     * Add an array of items to the given inventory.\r\n     *\r\n     * @param name The inventory to add the items to.\r\n     * @param items The items in question. A single item can be given.\r\n     * @param removeFromCurrent By default the item added will be removed from another inventory it might be in.\r\n     */\r\n    async addItems(name: string, items: SR5Item[] | SR5Item, removeFromCurrent: boolean = true) {\r\n        console.log(`Shadowrun 5e | Adding items to to inventory ${name}`, items);\r\n\r\n        // Default inventory is valid target here.\r\n        if (this.document.defaultInventory.name !== name && !this.exists(name)) return;\r\n        if (items instanceof SR5Item) items = [items];\r\n        if (items.length === 0) return;\r\n\r\n        if (removeFromCurrent) {\r\n            // This will cause at least one additional re-render, but make the code clearer.\r\n            for (const item of items) await this.removeItem(item);\r\n        }\r\n\r\n        // Default inventory is no actual inventory that needs to be added to.\r\n        if (this.document.defaultInventory.name === name) return;\r\n\r\n        for (const item of items) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            if (item.id) this.document.system.inventories[name].itemIds.push(item.id);\r\n        }\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const updateData = {[`system.inventories.${name}.itemIds`]: this.document.system.inventories[name].itemIds};\r\n\r\n        console.log(`Shadowrun 5e | Executing adding items to inventory`, updateData);\r\n        await this.document.update(updateData);\r\n    }\r\n\r\n     /**\r\n     * Remove the given item from one or any inventory it might be in.\r\n     *\r\n     * @param item The item to be removed.\r\n     * @param name The one inventory to remove it from. If empty, will search for inventory the item is in.\r\n     */\r\n    async removeItem(item: SR5Item, name?: string) {\r\n        console.log(`Shadowrun 5e | Removing item from inventory (${name || this.document.defaultInventory.name})`, item);\r\n\r\n        // The default inventory is not actual inventory.\r\n        if (this.document.defaultInventory.name === name) return;\r\n\r\n        // Collect affected inventories.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const inventories: InventoryData[] = name ?\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            [this.document.system.inventories[name]] :\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            Object.values(this.document.system.inventories).filter(({itemIds}) => itemIds.includes(item.id as string));\r\n\r\n        // No inventory found means, it's in the default inventory and no removal is needed.\r\n        if (inventories.length === 0) return;\r\n\r\n        // Collect all inventories with remaining ids after the item's been removed.\r\n        const updateData = {};\r\n        for (const inventory of inventories) {\r\n            const itemIds = inventory.itemIds.filter(id => id !== item.id);\r\n            updateData[`system.inventories.${inventory.name}.itemIds`] = itemIds;\r\n        }\r\n\r\n        console.log(`Shadowrun 5e | Executing update to remove item`, updateData);\r\n        if (updateData) await this.document.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * Sanitize inventory name to not use characters used within FoundryVTT Document#update and expandObject methods.\r\n     * \r\n     * @param name The inventory name, maybe containing prohibited characters\r\n     */\r\n    static _sanitzeName(name: string): string {\r\n        return Helpers.sanitizeDataKey(name);\r\n    }\r\n}", "import { DocumentSituationModifiers } from './../../rules/DocumentSituationModifiers';\r\nimport {SR5Actor} from \"../SR5Actor\";\r\n\r\n\r\nexport interface ModifierFlowOptions {\r\n    // See SituationModifier applicable\r\n    applicable?: string[]\r\n}\r\n\r\n/**\r\n * Map the different kinds of modifier handlings that have been deployed accross the systems lifetime.\r\n * \r\n * All actor modifier totals should be access through this interface and only mapped onto the whatever\r\n * data / api lies underneath.\r\n * \r\n * Use this interface to retrieve a total value, not values used to create that total.\r\n * \r\n */\r\nexport class ModifierFlow {\r\n    // The actor document to retrieve modifiers for.\r\n    document: SR5Actor;\r\n\r\n    constructor(document: SR5Actor) {\r\n        this.document = document;\r\n    }\r\n\r\n    /**\r\n     * Retrieve a total modifier value for a specific modifier\r\n     * \r\n     * @param name The internal modifiers name. This can either be a situation modifier or an actor modifier\r\n     * @param options \r\n     * @returns Total value requested or zero, should the requested modifier not exist.\r\n     */\r\n    async totalFor(name: string, options: ModifierFlowOptions={}): Promise<number> {\r\n        // Get special cases that need local handling.\r\n        if (this[name] !== undefined) return this[name];\r\n\r\n        // Get global modifiers that can come from the general modifier system.\r\n         const modifiers = this.document.getSituationModifiers();\r\n        //@ts-ignore\r\n        if (modifiers.source.hasOwnProperty(name)) return modifiers.getTotalFor(name, {applicable: options.applicable});\r\n\r\n        // Get global modifiers that come from the legacy actor modifier system.\r\n        return this.document.getModifier(name) || 0;\r\n    }\r\n\r\n    /**\r\n     * Translate simple modifier type string to the differently named actor / document method.\r\n     */\r\n    get wounds(): number {\r\n        return this.document.getWoundModifier();\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\nexport interface AttributeOnlyTestData extends SuccessTestData {\r\n    // Selection for attributes used. attribute1 will be preselected.\r\n    attribute1: string\r\n    attribute2: string\r\n}\r\n\r\n\r\n/**\r\n * Handle custom attribute-only tests as defined in SR5#152.\r\n *\r\n * Attribute-Only Tests don't alter default SuccessTests rule wise but only Foundry behaviour wise.\r\n * Main difference is the user ability to change attributes before rolling dice.\r\n */\r\nexport class AttributeOnlyTest extends SuccessTest {\r\n    data: AttributeOnlyTestData\r\n\r\n    get _dialogTemplate() {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/attribute-only-test-dialog.html';\r\n    }\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        // Preset attribute selection with action attributes.\r\n        data.attribute1 = data.action.attribute;\r\n        data.attribute2 = data.action.attribute2;\r\n\r\n        return data;\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        this.prepareAttributeSelection();\r\n\r\n        super.prepareBaseValues();\r\n    }\r\n\r\n    prepareAttributeSelection() {\r\n        if (!this.actor) return;\r\n\r\n        // Clear everything. This way we don't have to track previous / current attributes and remove accordingly.\r\n        this.data.pool.mod = [];\r\n        const pool = new PartsList(this.pool.mod);\r\n\r\n        const attribute1 = this.actor.getAttribute(this.data.attribute1);\r\n        const attribute2 = this.actor.getAttribute(this.data.attribute2);\r\n\r\n        // Re-build base pool values first. Other modifiers will be added within prepareBaseValues\r\n        if (attribute1) pool.addPart(attribute1.label, attribute1.value);\r\n        if (attribute2) pool.addPart(attribute2.label, attribute2.value);\r\n\r\n        // Rebuild attribute specific modifiers previously added in TestCreate#_prepareTestDataWithAction\r\n        if (attribute1 && this.actor._isMatrixAttribute(this.data.attribute1)) this.actor._addMatrixParts(pool, true);\r\n        if (attribute2 && this.actor._isMatrixAttribute(this.data.attribute2)) this.actor._addMatrixParts(pool, true);\r\n    }\r\n}", "export const RecoveryRules = {\r\n    /**\r\n     * Can an actor heal physical damage depends on its stun track according to SR5#207 section 'Glitches&Healing'\r\n     *\r\n     * @param stunBoxes\r\n     */\r\n    canHealPhysicalDamage: (stunBoxes: number): boolean => {\r\n        return stunBoxes === 0;\r\n    }\r\n}", "import {Helpers} from '../helpers';\r\nimport {SR5Item} from '../item/SR5Item';\r\nimport {SKILL_DEFAULT_NAME, SR, SYSTEM_NAME} from '../constants';\r\nimport {PartsList} from '../parts/PartsList';\r\nimport {SR5Combat} from \"../combat/SR5Combat\";\r\nimport {DefaultValues} from '../data/DataDefaults';\r\nimport {SkillFlow} from \"./flows/SkillFlow\";\r\nimport {SR5} from \"../config\";\r\nimport {CharacterPrep} from \"./prep/CharacterPrep\";\r\nimport {SR5ItemDataWrapper} from \"../data/SR5ItemDataWrapper\";\r\nimport {CritterPrep} from \"./prep/CritterPrep\";\r\nimport {SpiritPrep} from \"./prep/SpiritPrep\";\r\nimport {SpritePrep} from \"./prep/SpritePrep\";\r\nimport {VehiclePrep} from \"./prep/VehiclePrep\";\r\nimport {DocumentSituationModifiers} from \"../rules/DocumentSituationModifiers\";\r\nimport {SkillRules} from \"../rules/SkillRules\";\r\nimport {MatrixRules} from \"../rules/MatrixRules\";\r\nimport {ICPrep} from \"./prep/ICPrep\";\r\nimport {\r\n    EffectChangeData\r\n} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/effectChangeData\";\r\nimport {InventoryFlow} from \"./flows/InventoryFlow\";\r\nimport {ModifierFlow} from \"./flows/ModifierFlow\";\r\nimport {SuccessTest} from \"../tests/SuccessTest\";\r\nimport {TestCreator} from \"../tests/TestCreator\";\r\nimport {AttributeOnlyTest} from \"../tests/AttributeOnlyTest\";\r\nimport {RecoveryRules} from \"../rules/RecoveryRules\";\r\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\r\nimport VehicleStat = Shadowrun.VehicleStat;\r\nimport Attributes = Shadowrun.Attributes;\r\nimport Limits = Shadowrun.Limits;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport TrackType = Shadowrun.TrackType;\r\nimport OverflowTrackType = Shadowrun.OverflowTrackType;\r\nimport NumberOrEmpty = Shadowrun.NumberOrEmpty;\r\nimport VehicleStats = Shadowrun.VehicleStats;\r\nimport ActorArmorData = Shadowrun.ActorArmorData;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport Skills = Shadowrun.Skills;\r\nimport CharacterSkills = Shadowrun.CharacterSkills;\r\nimport SpiritActorData = Shadowrun.SpiritActorData;\r\nimport CharacterActorData = Shadowrun.CharacterActorData;\r\nimport SpriteActorData = Shadowrun.SpriteActorData;\r\nimport VehicleActorData = Shadowrun.VehicleActorData;\r\nimport CritterActorData = Shadowrun.CritterActorData;\r\nimport ICActorData = Shadowrun.ICActorData;\r\nimport MatrixData = Shadowrun.MatrixData;\r\nimport HostItemData = Shadowrun.HostItemData;\r\nimport MarkedDocument = Shadowrun.MarkedDocument;\r\nimport MatrixMarks = Shadowrun.MatrixMarks;\r\nimport InventoryData = Shadowrun.InventoryData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport PackActionName = Shadowrun.PackActionName;\r\nimport PackName = Shadowrun.PackName;\r\nimport ActionRollData = Shadowrun.ActionRollData;\r\nimport ActorAttribute = Shadowrun.ActorAttribute;\r\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\r\nimport KnowledgeSkills = Shadowrun.KnowledgeSkills;\r\nimport ShadowrunItemData= Shadowrun.ShadowrunItemData\r\n\r\n\r\n/**\r\n * The general Shadowrun actor implementation, which currently handles all actor types.\r\n *\r\n * To easily access Actor.data without any typing issues us the SR5Actor.asCritter helpers.\r\n * They are set up in a way that will handle both error management and type narrowing.\r\n * Example:\r\n * <pre><code>\r\n *     const actor = game.actors.get('randomId');\r\n *     const critter = actor.asCritter();\r\n *     if (!critter) return;\r\n *     // critter.type === 'critter'\r\n *     // critter.system as CritterData\r\n * </code></pre>\r\n *\r\n */\r\nexport class SR5Actor extends Actor {\r\n    // This is the default inventory name and label for when no other inventory has been created.\r\n    defaultInventory: InventoryData = {\r\n        name: 'Carried',\r\n        label: 'SR5.Labels.Inventory.Carried',\r\n        itemIds: []\r\n    }\r\n\r\n    // Allow users to access to tests creation.\r\n    tests: typeof TestCreator = TestCreator;\r\n\r\n    // Add v10 type helper\r\n    system: ShadowrunActorDataData; // TODO: foundry-vtt-types v10\r\n\r\n    // Holds all operations related to this actors inventory.\r\n    inventory: InventoryFlow;\r\n    // Holds all operations related to fetching an actors modifiers.\r\n    modifiers: ModifierFlow;\r\n\r\n    constructor(data, context?) {\r\n        super(data, context);\r\n\r\n        this.inventory = new InventoryFlow(this);\r\n        this.modifiers = new ModifierFlow(this);\r\n    }\r\n\r\n    getOverwatchScore() {\r\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\r\n        return os !== undefined ? os : 0;\r\n    }\r\n\r\n    async setOverwatchScore(value) {\r\n        const num = parseInt(value);\r\n        if (!isNaN(num)) {\r\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * General data preparation order.\r\n     * Check base, embeddedEntities and derived methods (see super.prepareData implementation for order)\r\n     * Only implement data preparation here that doesn't fall into the other three categories.\r\n     */\r\n    prepareData() {\r\n        super.prepareData();\r\n    }\r\n\r\n    /**\r\n     *  Prepare base data. Be careful that this ONLY included data not in need for item access.\r\n     *  Check Actor and ClientDocumentMixin.prepareData for order of data prep.\r\n     *\r\n     *  Shadowrun data preparation is separate from the actor entity see the different <>Prep classes like\r\n     *  CharacterPrep\r\n     */\r\n    prepareBaseData() {\r\n        super.prepareBaseData();\r\n\r\n        switch (this.type) {\r\n            case 'character':\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                CharacterPrep.prepareBaseData(this.system);\r\n                break;\r\n            case \"critter\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                CritterPrep.prepareBaseData(this.system);\r\n                break;\r\n            case \"spirit\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                SpiritPrep.prepareBaseData(this.system);\r\n                break;\r\n            case \"sprite\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                SpritePrep.prepareBaseData(this.system);\r\n                break;\r\n            case \"vehicle\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                VehiclePrep.prepareBaseData(this.system);\r\n                break;\r\n            case \"ic\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                ICPrep.prepareBaseData(this.system);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\r\n     */\r\n    prepareEmbeddedDocuments() {\r\n        // This will apply ActiveEffects, which is okay for modify (custom) effects, however add/multiply on .value will be\r\n        // overwritten.\r\n        super.prepareEmbeddedDocuments();\r\n\r\n        // @ts-ignore\r\n        // NOTE: Hello there! Should you ever be in need of calling the grand parents methods, maybe to avoid applyActiveEffects,\r\n        //       look at this beautiful piece of software and shiver in it's glory.\r\n        // ClientDocumentMixin(class {}).prototype.prepareEmbeddedDocuments.apply(this);\r\n    }\r\n\r\n    /**\r\n     * Should some ActiveEffects need to be excluded from the general application, do so here.\r\n     * @override\r\n     */\r\n    applyActiveEffects() {\r\n        // Shadowrun uses prepareDerivedData to calculate lot's of things that don't exist on the data model in full.\r\n        // Errors during change application will stop that process and cause a broken sheet.\r\n        try {\r\n            super.applyActiveEffects();\r\n        } catch (error) {\r\n            console.error(`Shadowrun5e | Some effect changes could not be applied and might cause issues. Check effects of actor (${this.name}) / id (${this.id})`);\r\n            console.error(error);\r\n            ui.notifications?.error(`See browser console (F12): Some effect changes could not be applied and might cause issues. Check effects of actor (${this.name}) / id (${this.id})`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\r\n     *\r\n     * At the moment general actor data preparation has been moved to derived data preparation, due it's dependence\r\n     * on prepareEmbeddedEntities and prepareEmbeddedItems for items modifying attribute values and more.\r\n     */\r\n    prepareDerivedData() {\r\n        super.prepareDerivedData();\r\n\r\n        // General actor data preparation has been moved to derived data, as it depends on prepared item data.\r\n        const itemDataWrappers = this.items.map((item) => new SR5ItemDataWrapper(item as unknown as ShadowrunItemData));\r\n        switch (this.type) {\r\n            case 'character':\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                CharacterPrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n            case \"critter\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                CritterPrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n            case \"spirit\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                SpiritPrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n            case \"sprite\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                SpritePrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n            case \"vehicle\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                VehiclePrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n            case \"ic\":\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                ICPrep.prepareDerivedData(this.system, itemDataWrappers);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * NOTE: This method is unused at the moment, keep it for future inspiration.\r\n     */\r\n    applyOverrideActiveEffects() {\r\n        const changes = this.effects.reduce((changes: EffectChangeData[], effect) => {\r\n            if (effect.data.disabled) return changes;\r\n\r\n            // include changes partially matching given keys.\r\n            return changes.concat(effect.data.changes\r\n                .filter(change => change.mode === CONST.ACTIVE_EFFECT_MODES.OVERRIDE)\r\n                .map(change => {\r\n                    // @ts-ignore // Foundry internal code, duplicate doesn't like EffectChangeData\r\n                    change = foundry.utils.duplicate(change);\r\n                    // @ts-ignore\r\n                    change.effect = effect;\r\n                    change.priority = change.priority ?? (change.mode * 10);\r\n\r\n                    return change;\r\n                }));\r\n        }, []);\r\n        // Sort changes according to priority, in case it's ever needed.\r\n        // @ts-ignore // a / b can't be null here...\r\n        changes.sort((a, b) => a.priority - b.priority);\r\n\r\n        for (const change of changes) {\r\n            // @ts-ignore\r\n            change.effect.apply(this, change);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A helper method to only apply a subset of keys instead of all.\r\n     * @param partialKeys Can either be complete keys or partial keys\r\n     */\r\n    _applySomeActiveEffects(partialKeys: string[]) {\r\n        const changes = this._reduceEffectChangesByKeys(partialKeys);\r\n        this._applyActiveEffectChanges(changes);\r\n    }\r\n\r\n\r\n    /**\r\n     * A helper method to apply a active effect changes collection (which might come from multiple active effects)\r\n     * @param changes\r\n     */\r\n    _applyActiveEffectChanges(changes: EffectChangeData[]) {\r\n        const overrides = {};\r\n\r\n        for (const change of changes) {\r\n            // @ts-ignore\r\n            const result = change.effect.apply(this, change);\r\n            if (result !== null) overrides[change.key] = result;\r\n        }\r\n\r\n        this.overrides = {...this.overrides, ...foundry.utils.expandObject(overrides)};\r\n    }\r\n\r\n    /**\r\n     * Reduce all changes across multiple active effects that match the given set of partial keys\r\n     * @param partialKeys Can either be complete keys or partial keys\r\n     */\r\n    _reduceEffectChangesByKeys(partialKeys: string[]): EffectChangeData[] {\r\n        // Collect only those changes matching the given partial keys.\r\n        const changes = this.effects.reduce((changes: EffectChangeData[], effect) => {\r\n            if (effect.data.disabled) return changes;\r\n\r\n            // include changes partially matching given keys.\r\n            return changes.concat(effect.data.changes\r\n                .filter(change => partialKeys.some(partialKey => change.key.includes(partialKey)))\r\n                .map(change => {\r\n                    // @ts-ignore // Foundry internal code, duplicate doesn't like EffectChangeData\r\n                    change = foundry.utils.duplicate(change);\r\n                    // @ts-ignore\r\n                    change.effect = effect;\r\n                    change.priority = change.priority ?? (change.mode * 10);\r\n\r\n                    return change;\r\n                }));\r\n        }, []);\r\n        // Sort changes according to priority, in case it's ever needed.\r\n        // @ts-ignore // TODO: v9\r\n        changes.sort((a, b) => a.priority - b.priority);\r\n\r\n        return changes;\r\n    }\r\n\r\n    getModifier(modifierName: string): NumberOrEmpty {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.modifiers[modifierName];\r\n    }\r\n\r\n    /**\r\n     * Some actors have skills, some don't. While others don't have skills but derive skill values from their ratings.\r\n     */\r\n    findActiveSkill(skillName?: string): SkillField | undefined {\r\n        // Check for faulty to catch empty names as well as missing parameters.\r\n        if (!skillName) return;\r\n\r\n        // Handle legacy skills (name is id)\r\n        const skills = this.getActiveSkills();\r\n        const skill = skills[skillName];\r\n        if (skill) return skill;\r\n\r\n        // Handle custom skills (name is not id)\r\n        return Object.values(skills).find(skill => skill.name === skillName);\r\n    }\r\n\r\n    findAttribute(id?: string): AttributeField | undefined {\r\n        if (id === undefined) return;\r\n        const attributes = this.getAttributes();\r\n        if (!attributes) return;\r\n        return attributes[id];\r\n    }\r\n\r\n    findVehicleStat(statName?: string): VehicleStat | undefined {\r\n        if (statName === undefined) return;\r\n\r\n        const vehicleStats = this.getVehicleStats();\r\n        if (vehicleStats)\r\n            return vehicleStats[statName];\r\n    }\r\n\r\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        const attribute = this.findAttribute(attributeName);\r\n        if (!attribute?.limit) return undefined;\r\n        return this.findLimit(attribute.limit);\r\n    }\r\n\r\n    findLimit(limitName?: string): LimitField | undefined {\r\n        if (!limitName) return undefined;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.limits[limitName];\r\n    }\r\n\r\n    getWoundModifier(): number {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!(\"wounds\" in this.system)) return 0;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return -1 * this.system.wounds.value || 0;\r\n    }\r\n\r\n    /** Use edge on actors that have an edge attribute.\r\n     *\r\n     * NOTE: This doesn't only include characters but spirits, critters and more.\r\n     */\r\n    async useEdge(by: number = -1) {\r\n        const edge = this.getEdge();\r\n        if (edge && edge.value === 0) return;\r\n        // NOTE: There used to be a bug which could lower edge usage below zero. Let's quietly ignore and reset. :)\r\n        const usesLeft = edge.uses > 0 ? edge.uses : by * -1;\r\n\r\n        const uses = Math.min(edge.value, usesLeft + by);\r\n\r\n        // @ts-ignore\r\n        await this.update({'data.attributes.edge.uses': uses});\r\n    }\r\n\r\n    getEdge(): EdgeAttributeField {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.attributes.edge;\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return \"armor\" in this.system;\r\n    }\r\n\r\n    /**\r\n     * Return \r\n     * @param damage \r\n     * @returns \r\n     */\r\n    getArmor(damage?:DamageData): ActorArmorData {\r\n        // Prepare base armor data.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const armor = \"armor\" in this.system ? \r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            foundry.utils.duplicate(this.system.armor) : \r\n            DefaultValues.actorArmorData();\r\n        // Prepare damage to apply to armor.\r\n        damage = damage || DefaultValues.damageData();\r\n\r\n        Helpers.calcTotal(damage);\r\n        Helpers.calcTotal(damage.ap);\r\n\r\n        // Modify by penetration\r\n        if (damage.ap.value !== 0)\r\n            PartsList.AddUniquePart(armor.mod, 'SR5.AP', damage.ap.value);\r\n                \r\n        // Modify by element\r\n        if (damage.element.value !== '') {\r\n            const armorForDamageElement = armor[damage.element.value] || 0;\r\n            if (armorForDamageElement > 0)\r\n                PartsList.AddUniquePart(armor.mod, 'SR5.Element', armorForDamageElement);\r\n        }\r\n        \r\n        Helpers.calcTotal(armor, {min: 0});\r\n\r\n        return armor;\r\n    }\r\n\r\n    getMatrixDevice(): SR5Item | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!(\"matrix\" in this.system)) return;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const matrix = this.system.matrix;\r\n        if (matrix.device) return this.items.get(matrix.device);\r\n    }\r\n\r\n    getFullDefenseAttribute(): AttributeField | undefined {\r\n        if (this.isVehicle()) {\r\n            return this.findVehicleStat('pilot');\r\n        } else if (this.isCharacter()) {\r\n            const character = this.asCharacter();\r\n            if (character) {\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                let att = character.system.full_defense_attribute;\r\n                if (!att) att = 'willpower';\r\n                return this.findAttribute(att);\r\n            }\r\n        }\r\n    }\r\n\r\n    getEquippedWeapons(): SR5Item[] {\r\n        return this.items.filter((item: SR5Item) => item.isEquipped() && item.isWeapon);\r\n    }\r\n\r\n    /**\r\n     * Amount of recoil compensation this actor has.\r\n     */\r\n    getRecoilCompensation(): number {\r\n        // Each new attack allows one free compensation.\r\n        let total = 1;\r\n        const strength = this.findAttribute('strength');\r\n        if (strength) {\r\n            total += Math.ceil(strength.value / 3);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getDeviceRating(): number {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!(\"matrix\" in this.system)) return 0;\r\n        // @ts-ignore // parseInt does indeed allow number types.\r\n        return parseInt(this.system.matrix.rating);\r\n    }\r\n\r\n    getAttributes(): Attributes {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.attributes;\r\n    }\r\n\r\n    /**\r\n     * Return the given attribute, no matter its source.\r\n     *\r\n     * For characters and similar this will only return their attributes.\r\n     * For vehicles this will also return their vehicle stats.\r\n\r\n     * @param name An attribute or other stats name.\r\n     * @returns Note, this can return undefined. It is not typed that way, as it broke many things. :)\r\n     */\r\n    getAttribute(name: string): AttributeField {\r\n        // First check vehicle stats, as they don't always exist.\r\n        const stats = this.getVehicleStats();\r\n        if (stats && stats[name]) return stats[name];\r\n\r\n        // Second check general attributes.\r\n        const attributes = this.getAttributes();\r\n        return attributes[name];\r\n    }\r\n\r\n    getLimits(): Limits {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.limits;\r\n    }\r\n\r\n    getLimit(name: string): LimitField {\r\n        const limits = this.getLimits();\r\n        return limits[name];\r\n    }\r\n\r\n    /** Return actor type, which can be different kind of actors from 'character' to 'vehicle'.\r\n     *  Please check SR5ActorType for reference.\r\n     */\r\n    getType(): string {\r\n        return this.type;\r\n    }\r\n\r\n    isCharacter(): boolean {\r\n        return this.getType() === 'character';\r\n    }\r\n\r\n    isSpirit(): boolean {\r\n        return this.getType() === 'spirit';\r\n    }\r\n\r\n    isSprite(): boolean {\r\n        return this.getType() === 'sprite';\r\n    }\r\n\r\n    isVehicle() {\r\n        return this.getType() === 'vehicle';\r\n    }\r\n\r\n    isGrunt() {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!(\"is_npc\" in this.system) || !(\"npc\" in this.system)) return false;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.is_npc && this.system.npc.is_grunt;\r\n    }\r\n\r\n    isCritter() {\r\n        return this.getType() === 'critter';\r\n    }\r\n\r\n    isIC() {\r\n        return this.getType() === 'ic';\r\n    }\r\n\r\n    /**\r\n     * Determine if this actor is able to have natural damage recovery.\r\n     * @returns true in case of possible natural recovery.\r\n     */\r\n    get hasNaturalRecovery(): boolean {\r\n        return this.isCharacter() || this.isCritter();\r\n    }\r\n\r\n    getVehicleTypeSkillName(): string | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!(\"vehicleType\" in this.system)) return;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        switch (this.system.vehicleType) {\r\n            case 'air':\r\n                return 'pilot_aircraft';\r\n            case 'ground':\r\n                return 'pilot_ground_craft';\r\n            case 'water':\r\n                return 'pilot_water_craft';\r\n            case 'aerospace':\r\n                return 'pilot_aerospace';\r\n            case 'walker':\r\n                return 'pilot_walker';\r\n            case 'exotic':\r\n                return 'pilot_exotic_vehicle';\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    getVehicleTypeSkill(): SkillField | undefined {\r\n        if (!this.isVehicle()) return;\r\n\r\n        const name = this.getVehicleTypeSkillName();\r\n        return this.findActiveSkill(name);\r\n    }\r\n\r\n    get hasSkills(): boolean {\r\n        return this.getSkills() !== undefined;\r\n    }\r\n\r\n    getSkills(): CharacterSkills {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.skills;\r\n    }\r\n\r\n    getActiveSkills(): Skills {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.skills.active;\r\n    }\r\n\r\n    /**\r\n     * Determine if an actor can choose a special trait using the special field.\r\n     */\r\n    get hasSpecial(): boolean {\r\n        return ['character', 'sprite', 'spirit', 'critter'].includes(this.type);\r\n    }\r\n\r\n    /**\r\n     * Determine if an actor can choose a full defense attribute\r\n     */\r\n    get hasFullDefense(): boolean {\r\n        return ['character', 'vehicle', 'sprite', 'spirit', 'critter'].includes(this.type);\r\n    }\r\n\r\n    /**\r\n     * Determine if an actor is awakened / magical in some kind.\r\n     */\r\n    get isAwakened(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.special === 'magic';\r\n    }\r\n\r\n    /**\r\n     * This actor is emerged as a matrix native actor (Technomancers, Sprites)\r\n     *\r\n     */\r\n    get isEmerged(): boolean {\r\n        if (this.isSprite()) return true;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (this.isCharacter() && this.system.special === 'resonance') return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return the full pool of a skill including attribute and possible specialization bonus.\r\n     * @param skillId The ID of the skill. Note that this can differ from what is shown in the skill list. If you're\r\n     *                unsure about the id and want to search\r\n     * @param options An object to change the behaviour.\r\n     *                The property specialization will trigger the pool value to be raised by a specialization modifier\r\n     *                The property byLbale will cause the param skillId to be interpreted as the shown i18n label.\r\n     */\r\n    getPool(skillId: string, options = {specialization: false, byLabel: false}): number {\r\n        const skill = options.byLabel ? this.getSkillByLabel(skillId) : this.getSkill(skillId);\r\n        if (!skill || !skill.attribute) return 0;\r\n        if (!SkillFlow.allowRoll(skill)) return 0;\r\n\r\n        const attribute = this.getAttribute(skill.attribute);\r\n\r\n        // An attribute can have a NaN value if no value has been set yet. Do the skill for consistency.\r\n        const attributeValue = typeof attribute.value === 'number' ? attribute.value : 0;\r\n        const skillValue = typeof skill.value === 'number' ? skill.value : 0;\r\n\r\n        if (SkillRules.mustDefaultToRoll(skill) && SkillRules.allowDefaultingRoll(skill)) {\r\n            return SkillRules.defaultingModifier + attributeValue;\r\n        }\r\n\r\n        const specializationBonus = options.specialization ? SR.skill.SPECIALIZATION_MODIFIER : 0;\r\n        return skillValue + attributeValue + specializationBonus;\r\n    }\r\n\r\n    /**\r\n     * Find a skill either by id or label.\r\n     *\r\n     * Skills are mapped by an id, which can be a either a lower case name (legacy skills) or a short uid (custom, language, knowledge).\r\n     * Legacy skills use their name as the id, while not having a name set on the SkillField.\r\n     * Custom skills use an id and have their name set, however no label. This goes for active, language and knowledge.\r\n     *\r\n     * NOTE: Normalizing skill mapping from active, language and knowledge to a single skills with a type property would\r\n     *       clear this function up.\r\n     *\r\n     * @param id Either the searched id, name or translated label of a skill\r\n     * @param options .byLabel when true search will try to match given skillId with the translated label\r\n     */\r\n    getSkill(id: string, options = {byLabel: false}): SkillField | undefined {\r\n        if (options.byLabel)\r\n            return this.getSkillByLabel(id);\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const {skills} = this.system;\r\n\r\n        // Find skill by direct id to key matching.\r\n        if (skills.active.hasOwnProperty(id)) {\r\n            return skills.active[id];\r\n        }\r\n        if (skills.language.value.hasOwnProperty(id)) {\r\n            return skills.language.value[id];\r\n        }\r\n        // Knowledge skills are de-normalized into categories (street, hobby, ...)\r\n        for (const categoryKey in skills.knowledge) {\r\n            if (skills.knowledge.hasOwnProperty(categoryKey)) {\r\n                const category = skills.knowledge[categoryKey];\r\n                if (category.value.hasOwnProperty(id)) {\r\n                    return category.value[id];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search all skills for a matching i18n translation label.\r\n     * NOTE: You should use getSkill if you have the skillId ready. Only use this for ease of use!\r\n     *\r\n     * @param searchedFor The translated output of either the skill label (after localize) or name of the skill in question.\r\n     * @return The first skill found with a matching translation or name.\r\n     */\r\n    getSkillByLabel(searchedFor: string): SkillField | undefined {\r\n        if (!searchedFor) return;\r\n\r\n        const possibleMatch = (skill: SkillField): string => skill.label ? game.i18n.localize(skill.label) : skill.name;\r\n\r\n        const skills = this.getSkills();\r\n\r\n        for (const [id, skill] of Object.entries(skills.active)) {\r\n            if (searchedFor === possibleMatch(skill))\r\n                return {...skill, id};\r\n        }\r\n\r\n        for (const [id, skill] of Object.entries(skills.language.value)) {\r\n            if (searchedFor === possibleMatch(skill))\r\n                return {...skill, id};\r\n        }\r\n\r\n        // Iterate over all different knowledge skill categories\r\n        for (const categoryKey in skills.knowledge) {\r\n            if (!skills.knowledge.hasOwnProperty(categoryKey)) continue;\r\n            // Typescript can't follow the flow here...\r\n            const categorySkills = skills.knowledge[categoryKey].value as SkillField[];\r\n            for (const [id, skill] of Object.entries(categorySkills)) {\r\n                if (searchedFor === possibleMatch(skill))\r\n                    return {...skill, id};\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For the given skillId as it be would in the skill data structure for either\r\n     * active, knowledge or language skill.\r\n     * \r\n     * @param skillId Legacy / default skills have human-readable ids, while custom one have machine-readable.\r\n     * @returns The label (not yet translated) OR set custom name.\r\n     */\r\n    getSkillLabel(skillId: string): string {\r\n        const skill = this.getSkill(skillId);\r\n        if (!skill) {\r\n            return '';\r\n        }\r\n\r\n        return skill.label ? skill.label : skill.name ? skill.name : '';\r\n    }\r\n\r\n    /**\r\n     * Add a new knowledge skill for a specific category.\r\n     * \r\n     * Knowledge skills are stored separataly from active and language skills and have\r\n     * some values pre-defined by their category (street, professional, ...)\r\n     * \r\n     * @param category Define the knowledege skill category\r\n     * @param skill  Partially define the SkillField properties needed. Omitted properties will be default.\r\n     * @returns The id of the created knowledege skill.\r\n     */\r\n    async addKnowledgeSkill(category: keyof KnowledgeSkills, skill: Partial<SkillField>={name: SKILL_DEFAULT_NAME}): Promise<string|undefined> {\r\n        //@ts-ignore // prevent accidental creation for wrong categories TODO: foundry-vtt-types v10\r\n        if (!this.system.skills.knowledge.hasOwnProperty(category)) {\r\n            console.error(`Shadowrun5e | Tried creating knowledge skill with unkown category ${category}`);\r\n            return;\r\n        }\r\n        \r\n        skill = DefaultValues.skillData(skill);\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `system.skills.knowledge.${category}.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n\r\n        await this.update(updateData);\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Add a new active skill.\r\n     * \r\n     * @param skillData Partially define the SkillField properties needed. Omitted properties will be default.\r\n     * @returns The new active skill id.\r\n     */\r\n    async addActiveSkill(skillData: Partial<SkillField> = {name: SKILL_DEFAULT_NAME}): Promise<string | undefined> {\r\n        const skill = DefaultValues.skillData(skillData);\r\n\r\n        const activeSkillsPath = 'system.skills.active';\r\n        const updateSkillDataResult = Helpers.getRandomIdSkillFieldDataEntry(activeSkillsPath, skill);\r\n\r\n        if (!updateSkillDataResult) return;\r\n\r\n        const {updateSkillData, id} = updateSkillDataResult;\r\n\r\n        await this.update(updateSkillData as object);\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Remove a language skill by it's id.\r\n     * @param skillId What skill id to delete.\r\n     */\r\n    async removeLanguageSkill(skillId: string) {\r\n        const updateData = Helpers.getDeleteKeyUpdateData('system.skills.language.value', skillId);\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * Add a language skill.\r\n     * \r\n     * @param skill Partially define the SkillField properties needed. Omitted properties will be default.\r\n     * @returns The new language skill id.\r\n     */\r\n    async addLanguageSkill(skill): Promise<string> {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            // TODO: BUG ModifiableValue is ModList<number>[] and not number\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `system.skills.language.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n\r\n        await this.update(updateData);\r\n\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Remove a knowledge skill\r\n     * @param skillId What skill id to delete.\r\n     * @param category The matching knowledege skill category for skillId\r\n     */\r\n    async removeKnowledgeSkill(skillId: string, category: keyof KnowledgeSkills) {\r\n        const updateData = Helpers.getDeleteKeyUpdateData(`system.skills.knowledge.${category}.value`, skillId);\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /** \r\n     * Delete the given active skill by it's id. It doesn't\r\n     *\r\n     * @param skillId Either a random id for custom skills or the skills name used as an id.\r\n     */\r\n    async removeActiveSkill(skillId: string) {\r\n        const activeSkills = this.getActiveSkills();\r\n        if (!activeSkills.hasOwnProperty(skillId)) return;\r\n        const skill = this.getSkill(skillId);\r\n        if (!skill) return;\r\n\r\n        // Don't delete legacy skills to allow prepared items to use them, should the user delete by accident.\r\n        // New custom skills won't have a label set also.\r\n        if (skill.name === '' && skill.label !== undefined && skill.label !== '') {\r\n            await this.hideSkill(skillId);\r\n            // NOTE: For some reason unlinked token actors won't cause a render on update?\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            if (!this.prototypeToken.actorLink)\r\n                await this.sheet?.render();\r\n            return;\r\n        }\r\n\r\n        // Remove custom skills without mercy!\r\n        const updateData = Helpers.getDeleteKeyUpdateData('system.skills.active', skillId);\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * Mark the given skill as hidden.\r\n     *\r\n     * NOTE: Hiding skills has\r\n     *\r\n     * @param skillId The id of any type of skill.\r\n     */\r\n    async hideSkill(skillId: string) {\r\n        if (!skillId) return;\r\n        const skill = this.getSkill(skillId);\r\n        if (!skill) return;\r\n\r\n        skill.hidden = true;\r\n        const updateData = Helpers.getUpdateDataEntry(`system.skills.active.${skillId}`, skill);\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * mark the given skill as visible.\r\n     *\r\n     * @param skillId The id of any type of skill.\r\n     */\r\n    async showSkill(skillId: string) {\r\n        if (!skillId) return;\r\n        const skill = this.getSkill(skillId);\r\n        if (!skill) return;\r\n\r\n        skill.hidden = false;\r\n        const updateData = Helpers.getUpdateDataEntry(`system.skills.active.${skillId}`, skill);\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * Show all hidden skills.\r\n     * \r\n     * For hidding/unhiding skill see SR5Actor#showSkill and SR5Actor#hideSkill.\r\n     */\r\n    async showHiddenSkills() {\r\n        const updateData = {};\r\n\r\n        const skills = this.getActiveSkills();\r\n        for (const [id, skill] of Object.entries(skills)) {\r\n            if (skill.hidden === true) {\r\n                skill.hidden = false;\r\n                updateData[`system.skills.active.${id}`] = skill;\r\n            }\r\n        }\r\n\r\n        if (!updateData) return;\r\n\r\n        await this.update(updateData);\r\n        // NOTE: For some reason unlinked token actors won't cause a render on update?\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!this.prototypeToken.actorLink)\r\n            await this.sheet?.render();\r\n    }\r\n\r\n    /**\r\n     * Prompt the current user for a generic roll. \r\n     */\r\n    async promptRoll() {\r\n        await this.tests.promptSuccessTest();\r\n    }\r\n\r\n    /**\r\n     * The general action process has currently no good way of injecting device ratings into the mix.\r\n     * So, let's trick a bit.\r\n     *\r\n     * @param options\r\n     */\r\n    async rollDeviceRating(options?: ActorRollOptions) {\r\n        const rating = this.getDeviceRating();\r\n\r\n        const showDialog = this.tests.shouldShowDialog(options?.event);\r\n        const testCls = this.tests._getTestClass('SuccessTest');\r\n        const test = new testCls({}, {actor: this}, {showDialog});\r\n\r\n        // Build pool values.\r\n        const pool = new PartsList<number>(test.pool.mod);\r\n        pool.addPart('SR5.Labels.ActorSheet.DeviceRating', rating);\r\n        pool.addPart('SR5.Labels.ActorSheet.DeviceRating', rating);\r\n\r\n        // Build modifiers values.\r\n        const mods = new PartsList<number>();\r\n        this._addGlobalParts(mods);\r\n        test.data.modifiers.mod = mods.list;\r\n\r\n        await test.execute();\r\n    }\r\n\r\n    /**\r\n     * Get an action from any pack with the given name, configured for this actor and let the caller handle it..\r\n     * \r\n     * @param packName The name of the item pack to search.\r\n     * @param actionName The name within that pack.\r\n     * @param options Success Test options\r\n     * @returns the test instance after configuration and before it's execution.\r\n     */\r\n    async packActionTest(packName: PackName, actionName: PackActionName, options?: ActorRollOptions) {\r\n        const showDialog = this.tests.shouldShowDialog(options?.event);\r\n        return await this.tests.fromPackAction(packName, actionName, this, {showDialog});\r\n    }\r\n\r\n    /**\r\n     * Roll an action from any pack with the given name.\r\n     *\r\n     * @param packName The name of the item pack to search.\r\n     * @param actionName The name within that pack.\r\n     * @param options Success Test options\r\n     * @returns the test instance after it's been executed\r\n     */\r\n    async rollPackAction(packName: PackName, actionName: PackActionName, options?: ActorRollOptions) {\r\n        const test = await this.packActionTest(packName, actionName, options);\r\n\r\n        if (!test) return console.error('Shadowrun 5e | Rolling pack action failed');\r\n\r\n        return await test.execute();\r\n    }\r\n\r\n    /**\r\n     * Get an action as defined within the systems general action pack.\r\n     * \r\n     * @param actionName The action with in the general pack.\r\n     * @param options Success Test options \r\n     */\r\n    async generalActionTest(actionName: PackActionName, options?: ActorRollOptions) {\r\n        return await this.packActionTest(SR5.packNames.generalActions as PackName, actionName, options);\r\n    }\r\n\r\n    /**\r\n     * Roll an action as defined within the systems general action pack.\r\n     *\r\n     * @param actionName The action with in the general pack.\r\n     * @param options Success Test options\r\n     */\r\n    async rollGeneralAction(actionName: PackActionName, options?: ActorRollOptions) {\r\n        return await this.rollPackAction(SR5.packNames.generalActions as PackName, actionName, options);\r\n    }\r\n\r\n    /**\r\n     * Roll a skill test for a specific skill\r\n     * @param skillId The id or label for the skill. When using a label, the appropriate option must be set.\r\n     * @param options Optional options to configure the roll.\r\n     * @param options.byLabel true to search the skill by label as displayed on the sheet.\r\n     * @param options.specialization true to configure the skill test to use a specialization.\r\n     */\r\n    async rollSkill(skillId: string, options: SkillRollOptions={}) {\r\n        console.info(`Shadowrun5e | Rolling skill test for ${skillId}`);\r\n\r\n        const action = this.skillActionData(skillId, options);\r\n        if (!action) return;\r\n\r\n        const showDialog = this.tests.shouldShowDialog(options.event);\r\n        const test = await this.tests.fromAction(action, this, {showDialog});\r\n        if (!test) return;\r\n\r\n        await test.execute();\r\n    }\r\n\r\n    /**\r\n     * Roll a general attribute test with one or two attributes.\r\n     *\r\n     * @param name The attributes name as defined within data\r\n     * @param options Change general roll options.\r\n     */\r\n    async rollAttribute(name, options?: ActorRollOptions) {\r\n        console.info(`Shadowrun5e | Rolling attribute ${name} test from ${this.constructor.name}`);\r\n\r\n        // Prepare test from action.\r\n        const action = DefaultValues.actionData({attribute: name, test: AttributeOnlyTest.name});\r\n        const test = await this.tests.fromAction(action, this);\r\n        if (!test) return;\r\n\r\n        await test.execute();\r\n    }\r\n\r\n    /**\r\n     * Is the given attribute id a matrix attribute\r\n     * @param attribute\r\n     */\r\n    _isMatrixAttribute(attribute: string): boolean {\r\n        return SR5.matrixAttributes.hasOwnProperty(attribute);\r\n    }\r\n\r\n    /**\r\n     * Add matrix modifier values to the given modifier parts from whatever Value as part of \r\n     * matrix success test.\r\n     * \r\n     * @param parts The Value.mod field as a PartsList\r\n     * @param atts The attributes used for the success test.\r\n     */\r\n    _addMatrixParts(parts: PartsList<number>, atts) {\r\n        if (Helpers.isMatrix(atts)) {\r\n            if (!(\"matrix\" in this.system)) return;\r\n\r\n            // Apply general matrix modifiers based on commlink/cyberdeck status.\r\n            const matrix = this.system.matrix;\r\n            if (matrix.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\r\n            if (matrix.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\r\n        }\r\n    }\r\n\r\n    // TODO: Check for legacy removal\r\n    _addGlobalParts(parts: PartsList<number>) {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (this.system.modifiers.global) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            parts.addUniquePart('SR5.Global', this.system.modifiers.global);\r\n        }\r\n    }\r\n\r\n    // TODO: check for legacy removal.\r\n    _addDefenseParts(parts: PartsList<number>) {\r\n        if (this.isVehicle()) {\r\n            const pilot = this.findVehicleStat('pilot');\r\n            if (pilot) {\r\n                parts.addUniquePart(pilot.label, Helpers.calcTotal(pilot));\r\n            }\r\n            const skill = this.getVehicleTypeSkill();\r\n            if (skill) {\r\n                parts.addUniquePart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\r\n            }\r\n        } else {\r\n            const reaction = this.findAttribute('reaction');\r\n            const intuition = this.findAttribute('intuition');\r\n\r\n            if (reaction) {\r\n                parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\r\n            }\r\n            if (intuition) {\r\n                parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\r\n            }\r\n        }\r\n\r\n        const mod = this.getModifier('defense');\r\n        if (mod) {\r\n            parts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n    }\r\n\r\n    // TODO: Check for legacy removal.\r\n    _addArmorParts(parts: PartsList<number>) {\r\n        const armor = this.getArmor();\r\n        if (armor) {\r\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\r\n            for (let part of armor.mod) {\r\n                parts.addUniquePart(part.name, part.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Build an action for the given skill id based on it's configured values.\r\n     *\r\n     * @param skillId Any skill, no matter if active, knowledge or language\r\n     * @param options\r\n     */\r\n    skillActionData(skillId: string, options: SkillRollOptions = {}): ActionRollData|undefined {\r\n        const byLabel = options.byLabel || false;\r\n        const skill = this.getSkill(skillId, {byLabel});\r\n        if (!skill) {\r\n            console.error(`Shadowrun 5e | Skill ${skillId} is not registered of actor ${this.id}`);\r\n            return;\r\n        }\r\n\r\n        if (!SkillFlow.allowRoll(skill)) {\r\n            ui.notifications?.warn(game.i18n.localize('SR5.Warnings.SkillCantBeDefault'));\r\n        }\r\n\r\n        // When fetched by label, getSkillByLabel will inject the id into SkillField.\r\n        skillId = skill.id || skillId;\r\n\r\n        // Derive limit from skill attribute.\r\n        const attribute = this.getAttribute(skill.attribute);\r\n        // TODO: Typing. LimitData is incorrectly typed to ActorAttributes only but including limits.\r\n        const limit = attribute.limit as ActorAttribute|| '';\r\n        // Should a specialization be used?\r\n        const spec = options.specialization || false;\r\n\r\n        return DefaultValues.actionData({\r\n            skill: skillId,\r\n            spec,\r\n            attribute: skill.attribute,\r\n            limit: {\r\n                base: 0, value: 0, mod: [],\r\n                attribute: limit\r\n            },\r\n\r\n            test: SuccessTest.name\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    //@ts-ignore // TODO: foundry-vtt-types v10\r\n    setFlag(scope: string, key: string, value: any): Promise<any> {\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    //@ts-ignore // TODO: foundry-vtt-types v10\r\n    getFlag(scope: string, key: string): any {\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n\r\n    /** Return either the linked token or the token of the synthetic actor.\r\n     *\r\n     * @retrun Will return null should no token have been placed on scene.\r\n     */\r\n    getToken(): TokenDocument | null {\r\n        // Linked actors can only have one token, which isn't stored within actor data...\r\n        if (this._isLinkedToToken() && this.hasToken()) {\r\n            const linked = true;\r\n            const tokens = this.getActiveTokens(linked) as unknown as Token[];\r\n            // This assumes for a token to exist and should fail if not.\r\n            return tokens[0].document;\r\n        }\r\n\r\n        // Unlinked actors can have multiple active token but each have theirs directly attached...\r\n        return this.token;\r\n    }\r\n\r\n    /**\r\n     * There is no need for a token to placed. The prototype token is enough.\r\n     */\r\n    _isLinkedToToken(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        // If an actor is linked, all it's copies also contain this linked status, even if they're not.\r\n        return this.prototypeToken.actorLink && !this.token;\r\n    }\r\n\r\n    hasToken(): boolean {\r\n        return this.getActiveTokens().length > 0;\r\n    }\r\n\r\n    hasActivePlayerOwner(): boolean {\r\n        const players = this.getActivePlayerOwners();\r\n        return players.length > 0;\r\n    }\r\n\r\n    getActivePlayer(): User | null {\r\n        if (!game.users) return null;\r\n        if (!this.hasPlayerOwner) return null;\r\n\r\n        for (const user of game.users.contents) {\r\n            if (!user.active || user.isGM) {\r\n                continue;\r\n            }\r\n            if (this.id === user.character?.id) {\r\n                return user;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getActivePlayerOwners(): User[] {\r\n        // @ts-ignore\r\n        return Helpers.getPlayersWithPermission(this, 'OWNER', true);\r\n    }\r\n\r\n    __addDamageToTrackValue(damage: DamageData, track: TrackType | OverflowTrackType | ConditionData): TrackType | OverflowTrackType | ConditionData {\r\n        if (damage.value === 0) return track;\r\n        if (track.value === track.max) return track;\r\n\r\n        //  Avoid cross referencing.\r\n        // @ts-ignore\r\n        track = duplicate(track);\r\n\r\n        track.value += damage.value;\r\n        if (track.value > track.max) {\r\n            // dev error, not really meant to be ever seen by users. Therefore no localization.\r\n            console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\r\n            track.value = track.max;\r\n        }\r\n\r\n        return track;\r\n    }\r\n\r\n    async _addDamageToDeviceTrack(damage: DamageData, device: SR5Item) {\r\n        if (!device) return;\r\n\r\n        let condition = device.getCondition();\r\n        if (!condition) return damage;\r\n\r\n        if (damage.value === 0) return;\r\n        if (condition.value === condition.max) return;\r\n\r\n        condition = this.__addDamageToTrackValue(damage, condition);\r\n\r\n        const updateData = {['system.technology.condition_monitor']: condition};\r\n        await device.update(updateData);\r\n    }\r\n\r\n    async _addDamageToTrack(damage: DamageData, track: TrackType | OverflowTrackType | ConditionData) {\r\n        if (damage.value === 0) return;\r\n        if (track.value === track.max) return;\r\n\r\n        track = this.__addDamageToTrackValue(damage, track);\r\n        const updateData = {[`system.track.${damage.type.value}`]: track};\r\n        await this.update(updateData);\r\n    }\r\n\r\n    async _addDamageToOverflow(damage: DamageData, track: OverflowTrackType) {\r\n        if (damage.value === 0) return;\r\n        if (track.overflow.value === track.overflow.max) return;\r\n\r\n        //  Avoid cross referencing.\r\n        const overflow = duplicate(track.overflow);\r\n\r\n        // Don't over apply damage to the track overflow.\r\n        overflow.value += damage.value;\r\n        overflow.value = Math.min(overflow.value, overflow.max);\r\n\r\n        const updateData = {[`system.track.${damage.type.value}.overflow`]: overflow};\r\n        await this.update(updateData);\r\n    }\r\n\r\n    /**\r\n     * Heal damage on a given damage track. Be aware that healing damage doesn't equate to recovering damage\r\n     * and will not adhere to the recovery rules.\r\n     *\r\n     * @param track What track should be healed?\r\n     * @param healing How many boxes of healing should be done?\r\n     */\r\n    async healDamage(track: DamageType, healing: number) {\r\n        console.log(`Shadowrun5e | Healing ${track} damage of ${healing} for actor`, this);\r\n\r\n        // @ts-ignore\r\n        if (!this.system?.track.hasOwnProperty(track)) return\r\n\r\n        // @ts-ignore\r\n        const current = Math.max(this.system.track[track].value - healing, 0);\r\n\r\n        await this.update({[`system.track.${track}.value`]: current});\r\n    }\r\n\r\n    async healStunDamage(healing: number) {\r\n        await this.healDamage('stun', healing);\r\n    }\r\n\r\n    async healPhysicalDamage(healing: number) {\r\n        await this.healDamage('physical', healing);\r\n    }\r\n\r\n    get canRecoverPhysicalDamage(): boolean {\r\n        const stun = this.getStunTrack();\r\n        if (!stun) return false\r\n        return RecoveryRules.canHealPhysicalDamage(stun.value);\r\n    }\r\n\r\n    /** Apply damage to the stun track and get overflow damage for the physical track.\r\n     */\r\n    async addStunDamage(damage: DamageData): Promise<DamageData> {\r\n        if (damage.type.value !== 'stun') return damage;\r\n\r\n        const track = this.getStunTrack();\r\n        if (!track)\r\n            return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        // Only change damage type when needed, in order to avoid confusion of callers.\r\n        if (overflow.value > 0) {\r\n            // Apply Stun overflow damage to physical track according to: SR5E#170\r\n            overflow.value = Math.floor(overflow.value / 2);\r\n            overflow.type.value = 'physical';\r\n        }\r\n\r\n        await this._addDamageToTrack(rest, track);\r\n        return overflow;\r\n    }\r\n\r\n    async addPhysicalDamage(damage: DamageData) {\r\n        if (damage.type.value !== 'physical') return damage;\r\n\r\n        const track = this.getPhysicalTrack();\r\n        if (!track)\r\n            return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        await this._addDamageToTrack(rest, track);\r\n        await this._addDamageToOverflow(overflow, track);\r\n    }\r\n\r\n    /**\r\n     * Matrix damage can be added onto different tracks:\r\n     * - IC has a local matrix.condition_monitor\r\n     * - Characters have matrix devices (items) with their local track\r\n     */\r\n    async addMatrixDamage(damage: DamageData): Promise<DamageData> {\r\n        if (damage.type.value !== 'matrix') return damage;\r\n\r\n\r\n        const device = this.getMatrixDevice();\r\n        const track = this.getMatrixTrack();\r\n        if (!track) return damage;\r\n\r\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\r\n\r\n        if (device) {\r\n            await this._addDamageToDeviceTrack(rest, device);\r\n        }\r\n        if (this.isIC() || this.isSprite()) {\r\n            await this._addDamageToTrack(rest, track);\r\n        }\r\n\r\n\r\n        // Return overflow for consistency, yet nothing will take overflowing matrix damage.\r\n        return overflow;\r\n    }\r\n\r\n    /**\r\n     * Directly set the matrix damage track of this actor to a set amount.\r\n     *\r\n     * This is mainly used for manual user input on an actor sheet.\r\n     *\r\n     * This is done by resetting all tracked damage and applying one manual damage set.\r\n     *\r\n     * @param value The matrix damage to be applied.\r\n     */\r\n    async setMatrixDamage(value: number) {\r\n        // Disallow negative values.\r\n        value = Math.max(value, 0);\r\n\r\n        // Use artificial damage to be consistent across other damage application Actor methods.\r\n        const damage = DefaultValues.damageData({\r\n            type: {base: 'matrix', value: 'matrix'},\r\n            base: value,\r\n            value: value\r\n        });\r\n\r\n        let track = this.getMatrixTrack();\r\n        if (!track) return;\r\n\r\n        // Reduce track to minimal value and simply add new damage.\r\n        track.value = 0;\r\n        // As track has been reduced to zero already, setting it to zero is already done.\r\n        if (value > 0)\r\n            track = this.__addDamageToTrackValue(damage, track);\r\n\r\n        // If a matrix device is used, damage that instead of the actor.\r\n        const device = this.getMatrixDevice();\r\n        if (device) {\r\n            return await device.update({'system.technology.condition_monitor': track});\r\n        }\r\n\r\n        // IC actors use a matrix track.\r\n        if (this.isIC()) {\r\n            return await this.update({'system.track.matrix': track});\r\n        }\r\n\r\n        // Emerged actors use a personal device like condition monitor.\r\n        if (this.isMatrixActor) {\r\n            return await this.update({'system.matrix.condition_monitor': track});\r\n        }\r\n    }\r\n\r\n    /** Calculate damage overflow only based on max and current track values.\r\n     */\r\n    _calcDamageOverflow(damage: DamageData, track: TrackType | ConditionData): { overflow: DamageData, rest: DamageData } {\r\n        const freeTrackDamage = track.max - track.value;\r\n        const overflowDamage = damage.value > freeTrackDamage ?\r\n            damage.value - freeTrackDamage :\r\n            0;\r\n        const restDamage = damage.value - overflowDamage;\r\n\r\n        //  Avoid cross referencing.\r\n        const overflow = duplicate(damage);\r\n        const rest = duplicate(damage);\r\n\r\n        overflow.value = overflowDamage;\r\n        rest.value = restDamage;\r\n\r\n        // @ts-ignore\r\n        return {overflow, rest};\r\n    }\r\n\r\n    getStunTrack(): TrackType | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (\"track\" in this.system && \"stun\" in this.system.track)\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this.system.track.stun;\r\n    }\r\n\r\n    getPhysicalTrack(): OverflowTrackType | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (\"track\" in this.system && \"physical\" in this.system.track)\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this.system.track.physical;\r\n    }\r\n\r\n    /**\r\n     * The matrix depends on actor type and possibly equipped matrix device.\r\n     *\r\n     * Use this method for whenever you need to access this actors matrix damage track as it's source might differ.\r\n     */\r\n    getMatrixTrack(): ConditionData | undefined {\r\n        // Some actors will have a direct matrix track.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (\"track\" in this.system && \"matrix\" in this.system.track) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this.system.track.matrix;\r\n        }\r\n\r\n        // Some actors will have a personal matrix condition monitor, like a device condition monitor.\r\n        if (this.isMatrixActor) {\r\n            // @ts-ignore isMatrixActor checks for the matrix attribute\r\n            return this.system.matrix.condition_monitor;\r\n        }\r\n\r\n        // Fallback to equipped matrix device.\r\n        const device = this.getMatrixDevice();\r\n        if (!device) return undefined;\r\n\r\n        return device.getCondition();\r\n    }\r\n\r\n    getModifiedArmor(damage: DamageData): ActorArmorData {\r\n        if (!damage.ap?.value) {\r\n            return this.getArmor();\r\n        }\r\n\r\n        const modified = duplicate(this.getArmor());\r\n        if (modified) {\r\n            // @ts-ignore\r\n            modified.mod = PartsList.AddUniquePart(modified.mod, 'SR5.DV', damage.ap.value);\r\n            // @ts-ignore\r\n            modified.value = Helpers.calcTotal(modified, {min: 0});\r\n        }\r\n\r\n        // @ts-ignore\r\n        return modified;\r\n    }\r\n\r\n    /** Reduce the initiative of the actor in the currently open / selected combat.\r\n     * Should a tokens actor be in multiple combats it will also only affect the currently open combat,\r\n     * since that is what's set in game.combat\r\n     *\r\n     * TODO: There is an issue with linked actors that have multiple tokens placed, with each in different combats.\r\n     *       The defense test needs to be done using the correct token, not just by the actor (from the sidebar).\r\n     *       One could argue this to be correct behavior, just confusing with normal linked actor / token usage.\r\n     */\r\n    async changeCombatInitiative(modifier: number) {\r\n        // No change needed for nothing to change.\r\n        if (modifier === 0) return;\r\n\r\n        const combat: SR5Combat = game.combat as unknown as SR5Combat;\r\n        const combatant = combat.getActorCombatant(this);\r\n\r\n        // Token might not be part of active combat.\r\n        if (!combatant) return;\r\n\r\n        // While not prohibiting, inform user about missing ressource.\r\n        if (combatant.initiative + modifier < 0) {\r\n            ui.notifications?.warn('SR5.MissingRessource.Initiative', {localize: true});\r\n        }\r\n\r\n        await combat.adjustInitiative(combatant, modifier);\r\n    }\r\n\r\n    hasDamageTracks(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return \"track\" in this.system;\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asVehicle(): VehicleActorData | undefined {\r\n        if (this.isVehicle())\r\n            return this.data as VehicleActorData;\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asCharacter(): CharacterActorData | undefined {\r\n        if (this.isCharacter())\r\n            return this.data as CharacterActorData;\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asSpirit(): SpiritActorData | undefined {\r\n        if (this.isSpirit()) {\r\n            return this.data as SpiritActorData;\r\n        }\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asSprite(): SpriteActorData | undefined {\r\n        if (this.isSprite()) {\r\n            return this.data as SpriteActorData;\r\n        }\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asCritter(): CritterActorData | undefined {\r\n        if (this.isCritter()) {\r\n            return this.data as CritterActorData;\r\n        }\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types v10 - will return the item \r\n    asIC(): ICActorData | undefined {\r\n        if (this.isIC()) {\r\n            return this.data as ICActorData;\r\n        }\r\n    }\r\n\r\n    getVehicleStats(): VehicleStats | undefined {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (this.isVehicle() && \"vehicle_stats\" in this.system) {\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            return this.system.vehicle_stats;\r\n        }\r\n    }\r\n\r\n    /** Add another actor as the driver of a vehicle to allow for their values to be used in testing.\r\n     *\r\n     * @param uuid An actors id. Should be a character able to drive a vehicle\r\n     */\r\n    async addVehicleDriver(uuid: string) {\r\n        if (!this.isVehicle()) return;\r\n\r\n        const driver = await fromUuid(uuid) as SR5Actor;\r\n        if (!driver) return;\r\n\r\n        // NOTE: In THEORY almost all actor types can drive a vehicle.\r\n        // ... drek, in theory a drone could drive another vehicle even...\r\n\r\n        await this.update({'system.driver': driver.id});\r\n    }\r\n\r\n    async removeVehicleDriver() {\r\n        if (!this.hasDriver()) return;\r\n\r\n        await this.update({'system.driver': ''});\r\n    }\r\n\r\n    hasDriver(): boolean {\r\n        const data = this.asVehicle();\r\n        if (!data) return false;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.system.driver.length > 0;\r\n    }\r\n\r\n    getVehicleDriver(): SR5Actor | undefined {\r\n        if (!this.hasDriver()) return;\r\n        const data = this.asVehicle();\r\n        if (!data) return;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const driver = game.actors?.get(this.system.driver) as SR5Actor;\r\n        // If no driver id is set, we won't get an actor and should explicitly return undefined.\r\n        if (!driver) return;\r\n        return driver;\r\n    }\r\n\r\n    /**\r\n     * Add a host to this IC type actor.\r\n     *\r\n     * Currently compendium hosts aren't supported.\r\n     * Any other actor type has no use for this method.\r\n     *\r\n     * @param uuid The host item id\r\n     */\r\n    async addICHost(uuid: string) {\r\n        if (!this.isIC()) return;\r\n\r\n        // Check if the given item id is valid.\r\n        const item = await fromUuid(uuid) as SR5Item;\r\n        if (!item || !item.isHost) return;\r\n\r\n        const host = item.asHost;\r\n        if (!host) return;\r\n        await this._updateICHostData(host);\r\n    }\r\n\r\n    async _updateICHostData(hostData: HostItemData) {\r\n        const updateData = {\r\n            // @ts-ignore _id is missing on internal typing...\r\n            id: hostData._id,\r\n            rating: hostData.system.rating,\r\n            atts: duplicate(hostData.system.atts)\r\n        }\r\n\r\n        // Some host data isn't stored on the IC actor (marks) and won't cause an automatic render.\r\n        await this.update({'system.host': updateData}, {render: false});\r\n        await this.sheet?.render();\r\n    }\r\n\r\n    /**\r\n     * Remove a connect Host item from an ic type actor.\r\n     */\r\n    async removeICHost() {\r\n        if (!this.isIC()) return;\r\n\r\n        const updateData = {\r\n            id: null,\r\n            rating: 0,\r\n            atts: null\r\n        }\r\n\r\n        await this.update({'system.host': updateData});\r\n    }\r\n\r\n    /**\r\n     * Will return true if this ic type actor has been connected to a host.\r\n     */\r\n    hasHost(): boolean {\r\n        const ic = this.asIC();\r\n        if (!ic) return false;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return ic && !!ic.system.host.id;\r\n    }\r\n\r\n    /**\r\n     * Get the host item connect to this ic type actor.\r\n     */\r\n    getICHost(): SR5Item | undefined {\r\n        const ic = this.asIC();\r\n        if (!ic) return;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return game.items?.get(ic?.system?.host.id);\r\n    }\r\n\r\n    /** Check if this actor is of one or multiple given actor types\r\n     *\r\n     * @param types A list of actor types to check.\r\n     */\r\n    matchesActorTypes(types: string[]): boolean {\r\n        return types.includes(this.type);\r\n    }\r\n\r\n    /** \r\n     * Get all situaitional modifiers from this actor.\r\n     */\r\n    getSituationModifiers(): DocumentSituationModifiers {\r\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(this);\r\n        modifiers.applyAll();\r\n        return modifiers;\r\n    }\r\n\r\n    /**\r\n     * Set all situational modifiers for this actor\r\n     * \r\n     * @param modifiers The DocumentSituationModifiers instance to save source modifiers from.\r\n     *                  The actor will not be checked, so be careful.\r\n     */\r\n    async setSituationModifiers(modifiers: DocumentSituationModifiers) {\r\n        await DocumentSituationModifiers.setDocumentModifiers(this, modifiers.source);\r\n    }\r\n\r\n    /**\r\n     * Check if the current actor has matrix capabilities.\r\n     */\r\n    get isMatrixActor(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return 'matrix' in this.system;\r\n    }\r\n\r\n    get matrixData(): MatrixData | undefined {\r\n        if (!this.isMatrixActor) return;\r\n        // @ts-ignore // isMatrixActor handles it, TypeScript doesn't know.\r\n        return this.system.matrix as MatrixData;\r\n    }\r\n\r\n    /**\r\n     * Change the amount of marks on the target by the amount of marks given, while adhering to min/max values.\r\n     *\r\n     *\r\n     * @param target The Document the marks are placed on. This can be an actor (character, technomancer, IC) OR an item (Host)\r\n     * @param marks The amount of marks to be placed\r\n     * @param options Additional options that may be needed\r\n     * @param options.scene The scene the actor lives on. If empty, will be current active scene\r\n     * @param options.item The item that the mark is to be placed on\r\n     * @param options.overwrite Replace the current marks amount instead of changing it\r\n     */\r\n    async setMarks(target: Token, marks: number, options?: { scene?: Scene, item?: SR5Item, overwrite?: boolean }) {\r\n        if (!canvas.ready) return;\r\n\r\n        if (this.isIC() && this.hasHost()) {\r\n            return await this.getICHost()?.setMarks(target, marks, options);\r\n        }\r\n\r\n        if (!this.isMatrixActor) {\r\n            ui.notifications?.error(game.i18n.localize('SR5.Errors.MarksCantBePlacedBy'));\r\n            return console.error(`The actor type ${this.type} can't receive matrix marks!`);\r\n        }\r\n        if (target.actor && !target.actor.isMatrixActor) {\r\n            ui.notifications?.error(game.i18n.localize('SR5.Errors.MarksCantBePlacedOn'));\r\n            // @ts-ignore\r\n            return console.error(`The actor type ${target.actor.type} can't receive matrix marks!`);\r\n        }\r\n        if (!target.actor) {\r\n            return console.error(`The token ${target.name} is missing it's actor`);\r\n        }\r\n\r\n        // It hurt itself in confusion.\r\n        if (this.id === target.actor.id) {\r\n            return;\r\n        }\r\n\r\n        // Both scene and item are optional.\r\n        const scene = options?.scene || canvas.scene as Scene;\r\n        const item = options?.item;\r\n\r\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\r\n        const matrixData = this.matrixData;\r\n\r\n        if (!matrixData) return;\r\n\r\n        const currentMarks = options?.overwrite ? 0 : this.getMarksById(markId);\r\n        matrixData.marks[markId] = MatrixRules.getValidMarksCount(currentMarks + marks);\r\n\r\n        await this.update({'system.matrix.marks': matrixData.marks});\r\n    }\r\n\r\n    /**\r\n     * Remove ALL marks placed by this actor\r\n     */\r\n    async clearMarks() {\r\n        const matrixData = this.matrixData;\r\n        if (!matrixData) return;\r\n\r\n        // Delete all markId properties from ActorData\r\n        const updateData = {}\r\n        for (const markId of Object.keys(matrixData.marks)) {\r\n            updateData[`-=${markId}`] = null;\r\n        }\r\n\r\n        await this.update({'system.matrix.marks': updateData});\r\n    }\r\n\r\n    /**\r\n     * Remove ONE mark. If you want to delete all marks, use clearMarks instead.\r\n     */\r\n    async clearMark(markId: string) {\r\n        if (!this.isMatrixActor) return;\r\n\r\n        const updateData = {}\r\n        updateData[`-=${markId}`] = null;\r\n\r\n        await this.update({'system.matrix.marks': updateData});\r\n    }\r\n\r\n    getAllMarks(): MatrixMarks | undefined {\r\n        const matrixData = this.matrixData;\r\n        if (!matrixData) return;\r\n        return matrixData.marks;\r\n    }\r\n\r\n    /**\r\n     * Return the amount of marks this actor has on another actor or one of their items.\r\n     *\r\n     * TODO: It's unclear what this method will be used for\r\n     *       What does the caller want?\r\n     *\r\n     * TODO: Check with technomancers....\r\n     *\r\n     * @param target\r\n     * @param item\r\n     * @param options\r\n     */\r\n    getMarks(target: Token, item?: SR5Item, options?: { scene?: Scene }): number {\r\n        if (!canvas.ready) return 0;\r\n        if (target instanceof SR5Item) {\r\n            console.error('Not yet supported');\r\n            return 0;\r\n        }\r\n        if (!target.actor || !target.actor.isMatrixActor) return 0;\r\n\r\n\r\n        const scene = options?.scene || canvas.scene as Scene;\r\n        // If an actor has been targeted, they might have a device. If an item / host has been targeted they don't.\r\n        item = item || target instanceof SR5Actor ? target.actor.getMatrixDevice() : undefined;\r\n\r\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\r\n        return this.getMarksById(markId);\r\n    }\r\n\r\n    getMarksById(markId: string): number {\r\n        return this.matrixData?.marks[markId] || 0;\r\n    }\r\n\r\n    /**\r\n     * Return the actor or item that is the network controller of this actor.\r\n     * These cases are possible:\r\n     * - IC with a host connected will provide the host item\r\n     * - IC without a host will provide itself\r\n     * - A matrix actor within a PAN will provide the controlling actor\r\n     * - A matrix actor without a PAN will provide itself\r\n     */\r\n    get matrixController(): SR5Actor | SR5Item {\r\n        // In case of a broken host connection, return the IC actor.\r\n        if (this.isIC() && this.hasHost()) return this.getICHost() || this;\r\n        // TODO: Implement PAN\r\n        // if (this.isMatrixActor && this.hasController()) return this.getController();\r\n\r\n        return this;\r\n    }\r\n\r\n    getAllMarkedDocuments(): MarkedDocument[] {\r\n        const marks = this.matrixController.getAllMarks();\r\n        if (!marks) return [];\r\n\r\n        // Deconstruct all mark ids into documents.\r\n        // @ts-ignore\r\n        return Object.entries(marks)\r\n            .filter(([markId, marks]) => Helpers.isValidMarkId(markId))\r\n            .map(([markId, marks]) => ({\r\n                ...Helpers.getMarkIdDocuments(markId),\r\n                marks,\r\n                markId\r\n            }))\r\n    }\r\n}\r\n", "import {FormDialog, FormDialogData} from \"./FormDialog\";\r\n\r\nexport class DeleteConfirmationDialog extends FormDialog {\r\n    constructor(options?) {\r\n        const dialogData = DeleteConfirmationDialog.getDialogData() as unknown as FormDialogData;\r\n\r\n        super(dialogData, options)\r\n    }\r\n\r\n    static getDialogData() {\r\n        return {\r\n            title: game.i18n.localize(\"SR5.DeleteConfirmationApplication.Title\"),\r\n            buttons: {\r\n                delete: {\r\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Delete')\r\n                },\r\n                cancel: {\r\n                    label: game.i18n.localize('SR5.DeleteConfirmationApplication.Cancel')\r\n                }\r\n            },\r\n            default: 'cancel',\r\n            templateData: {},\r\n            templatePath: 'systems/shadowrun5e/dist/templates/apps/dialogs/delete-confirmation-dialog.html'\r\n        }\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'delete-confirmation-application';\r\n        // Class Dialog here is needed for dialog button styling.\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.resizable = true;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n}", "import AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport GenericValueField = Shadowrun.GenericValueField;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport Skills = Shadowrun.Skills;\r\nimport TargetedDocument = Shadowrun.TargetedDocument;\r\nimport { SR5Actor } from \"./actor/SR5Actor\";\r\nimport { DeleteConfirmationDialog } from \"./apps/dialogs/DeleteConfirmationDialog\";\r\nimport { SR5 } from \"./config\";\r\nimport { DEFAULT_ID_LENGTH, FLAGS, LENGTH_UNIT, LENGTH_UNIT_TO_METERS_MULTIPLIERS, SR, SYSTEM_NAME } from \"./constants\";\r\nimport { DataDefaults } from \"./data/DataDefaults\";\r\nimport { SR5Item } from './item/SR5Item';\r\nimport { PartsList } from './parts/PartsList';\r\nimport { SuccessTestData } from \"./tests/SuccessTest\";\r\n\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\n\r\ninterface CalcTotalOptions {\r\n    min?: number,\r\n    max?: number\r\n}\r\n\r\nexport class Helpers {\r\n    /**\r\n     * Calculate the total value for a data object\r\n     * - stores the total value and returns it\r\n     * @param value\r\n     * @param options min will a apply a minimum value, max will apply a maximum value.\r\n     */\r\n    static calcTotal(value: ModifiableValue, options?: CalcTotalOptions): number {\r\n        if (value.mod === undefined) value.mod = [];\r\n\r\n        const parts = new PartsList(value.mod);\r\n        // if a temp field is found, add it as a unique part\r\n        if (!isNaN(value.temp as number) && Number(value.temp) !== 0) {\r\n            parts.addUniquePart('SR5.Temporary', value['temp']);\r\n        }\r\n\r\n        // On some values base might be undefined...\r\n        // Check for undefined, as some Values might be none numerical / boolean.\r\n        value.base = value.base !== undefined ? Number(value.base) : 0;\r\n\r\n        // If the given value has an override defined, use that as a value, while keeping the base and mod values.\r\n        if (value.override) {\r\n            // Still apply a possible value range, even if override says otherwise.\r\n            value.value = Helpers.applyValueRange(value.override.value, options);\r\n            return value.value;\r\n        }\r\n\r\n        // Base on type change calculation behaviour.\r\n        switch (getType(value.base)) {\r\n            case 'number':\r\n                value.value = Helpers.roundTo(parts.total + value.base, 3);\r\n                value.value = Helpers.applyValueRange(value.value, options);\r\n                break;\r\n            // boolean / string values should be applied\r\n            default:\r\n                value.value = parts.last === undefined ? value.base : parts.last;\r\n                break;\r\n        }\r\n\r\n        value.mod = parts.list;\r\n\r\n        return value.value;\r\n    }\r\n\r\n    static calcValue<ValueType>(value: GenericValueField): any {\r\n        if (value.mod === undefined) value.mod = [];\r\n\r\n        if (value.override) {\r\n            value.value = value.override.value;\r\n\r\n            return value.value;\r\n        }\r\n\r\n        value.value = value.base;\r\n\r\n        return value.value;\r\n    }\r\n\r\n    /** Round a number to a given degree.\r\n     *\r\n     * @param value Number to round with.\r\n     * @param decimals Amount of decimals after the decimal point.\r\n     */\r\n    static roundTo(value: number, decimals): number {\r\n        const multiplier = Math.pow(10, decimals);\r\n        return Math.round(value * multiplier) / multiplier;\r\n    }\r\n\r\n    /** Make sure a given value is in between a range.\r\n     *\r\n     * @param value\r\n     * @param options Define the range the given value must be in (or none)\r\n     */\r\n    static applyValueRange(value: number, options?: CalcTotalOptions): number {\r\n        if (typeof options?.min === 'number') {\r\n            value = Math.max(options.min, value);\r\n        }\r\n        if (typeof options?.max === 'number') {\r\n            value = Math.min(options.max, value);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    static listItemId(event): string {\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\r\n    //@ts-ignore TODO: foundry-vtt-types v10\r\n    static onSetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\r\n            newData[newKey] = this.onSetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    // replace 'SR5_DOT_' with 'SR5.' on keys\r\n    //@ts-ignore TODO: foundry-vtt-types v10\r\n    static onGetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\r\n            newData[newKey] = this.onGetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\r\n        if (!atts) return false;\r\n        if (typeof atts === 'boolean') return atts;\r\n        // array of labels to check for on the incoming data\r\n        const matrixLabels = [\r\n            'SR5.MatrixAttrFirewall',\r\n            'SR5.MatrixAttrDataProcessing',\r\n            'SR5.MatrixAttrSleaze',\r\n            'SR5.MatrixAttrAttack',\r\n            'SR5.SkillComputer',\r\n            'SR5.SkillHacking',\r\n            'SR5.SkillCybercombat',\r\n            'SR5.SkillElectronicWarfare',\r\n            'SR5.Software',\r\n        ];\r\n        if (!Array.isArray(atts)) atts = [atts];\r\n        atts = atts.filter((att) => att);\r\n        // iterate over the attributes and return true if we find a matrix att\r\n        for (const att of atts) {\r\n            if (typeof att === 'string') {\r\n                if (matrixLabels.indexOf(att) >= 0) {\r\n                    return true;\r\n                }\r\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\r\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // if we don't find anything return false\r\n        return false;\r\n    }\r\n\r\n    static parseInputToString(val: number | string | string[] | undefined): string {\r\n        if (val === undefined) return '';\r\n        if (typeof val === 'number') return val.toString();\r\n        if (typeof val === 'string') return val;\r\n        if (Array.isArray(val)) {\r\n            return val.join(',');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\r\n        if (typeof val === 'number') return val;\r\n        if (typeof val === 'string') {\r\n            const ret = +val;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        if (Array.isArray(val)) {\r\n            const str = val.join('');\r\n            const ret = +str;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static setupCustomCheckbox(app, html) {\r\n        const setContent = (el) => {\r\n            const checkbox = $(el).children('input[type=checkbox]');\r\n            const checkmark = $(el).children('.checkmark');\r\n            if ($(checkbox).prop('checked')) {\r\n                $(checkmark).addClass('fa-check-circle');\r\n                $(checkmark).removeClass('fa-circle');\r\n            } else {\r\n                $(checkmark).addClass('fa-circle');\r\n                $(checkmark).removeClass('fa-check-circle');\r\n            }\r\n        };\r\n        html.find('label.checkbox').each(function () {\r\n            setContent(this);\r\n        });\r\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\r\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\r\n    }\r\n\r\n    static mapRoundsToDefenseDesc(rounds) {\r\n        if (rounds === 1) return '';\r\n        if (rounds === 3) return '-2';\r\n        if (rounds === 6) return '-5';\r\n        if (rounds === 10) return '-9';\r\n        if (rounds === 20) return 'SR5.DuckOrCover';\r\n        return '';\r\n    }\r\n\r\n    static label(str) {\r\n        const frags = str.split('_');\r\n        for (let i = 0; i < frags.length; i++) {\r\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\r\n        }\r\n        frags.forEach((frag, idx) => {\r\n            if (frag === 'Processing') frags[idx] = 'Proc.';\r\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\r\n        });\r\n        return frags.join(' ');\r\n    }\r\n\r\n    static orderKeys(obj) {\r\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\r\n            if (k1 < k2) return -1;\r\n            if (k1 > k2) return +1;\r\n            return 0;\r\n        });\r\n\r\n        let i;\r\n        const after = {};\r\n        for (i = 0; i < keys.length; i++) {\r\n            after[keys[i]] = obj[keys[i]];\r\n            delete obj[keys[i]];\r\n        }\r\n\r\n        for (i = 0; i < keys.length; i++) {\r\n            obj[keys[i]] = after[keys[i]];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static hasModifiers(event) {\r\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\r\n    }\r\n\r\n    static filter(obj, comp) {\r\n        const retObj = {};\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            Object.entries(obj).forEach(([key, value]) => {\r\n                if (comp([key, value])) retObj[key] = value;\r\n            });\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n    static addLabels(obj, label) {\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\r\n                obj.label = label;\r\n            }\r\n            Object.entries(obj)\r\n                .filter(([, value]) => typeof value === 'object')\r\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\r\n        }\r\n    }\r\n\r\n    /* Handle Shadowrun style shortened attribute names with typical three letter shortening. */\r\n    static shortenAttributeLocalization(label: string, length: number = 3): string {\r\n        const name = game.i18n.localize(label);\r\n\r\n        if (length <= 0) {\r\n            return name;\r\n        }\r\n\r\n        if (name.length < length) {\r\n            length = name.length;\r\n        }\r\n\r\n        return name.slice(0, length).toUpperCase();\r\n    }\r\n\r\n    // TODO: Foundry 0.9 Should TokenDocument be used instead of Token?\r\n    // TODO: Check canvas.scene.tokens\r\n    static getToken(id?: string): Token | undefined {\r\n        if (!canvas || !canvas.ready || !canvas.tokens) return;\r\n\r\n        for (const token of canvas.tokens.placeables) {\r\n            if (token.id === id) {\r\n                return token;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this helper to get a tokens actor from any given scene id.\r\n     * @param sceneTokenId A mixed id with the format '<sceneId>.<tokenid>\r\n     */\r\n    static getSceneTokenActor(sceneTokenId: string): SR5Actor | null {\r\n        const [sceneId, tokenId] = Helpers.deconstructSceneTokenId(sceneTokenId);\r\n        const token = Helpers.getSceneTokenDocument(sceneId, tokenId);\r\n        if (!token) return null;\r\n        return token.getActor();\r\n    }\r\n\r\n    static deconstructSceneTokenId(sceneTokenId: string): [sceneId: string, tokenId: string] {\r\n        return sceneTokenId.split('.') as [sceneId: string, tokenId: string];\r\n    }\r\n\r\n    static getSceneTokenDocument(sceneId, tokenId): TokenDocument | undefined {\r\n        const scene = game.scenes?.get(sceneId);\r\n        if (!scene) return;\r\n        // @ts-ignore\r\n        const token = scene.tokens.get(tokenId);\r\n        if (!token) return;\r\n\r\n        return token;\r\n    }\r\n\r\n    static getUserTargets(user?: User | null): Token[] {\r\n        user = user ? user : game.user;\r\n\r\n        if (!user) return []\r\n\r\n        return Array.from(user.targets);\r\n    }\r\n\r\n    static userHasTargets(user?: User | null): boolean {\r\n        user = user ? user : game.user;\r\n\r\n        if (!user) return false;\r\n\r\n        return user.targets.size > 0;\r\n    }\r\n\r\n    static measureTokenDistance(tokenOrigin: TokenDocument, tokenDest: TokenDocument): number {\r\n        if (!canvas || !canvas.ready || !canvas.scene || !canvas.grid) return 0;\r\n\r\n        if (!tokenOrigin || !tokenDest) return 0;\r\n\r\n        const origin = new PIXI.Point(...canvas.grid.getCenter(tokenOrigin.data.x, tokenOrigin.data.y));\r\n        const dest = new PIXI.Point(...canvas.grid.getCenter(tokenDest.data.x, tokenDest.data.y));\r\n\r\n        // TODO: Used to be const distanceInGridUnits = canvas.grid.measureDistance(origin, dest, {gridSpaces: true});\r\n        //       Double Check for errors.\r\n        const distanceInGridUnits = canvas.grid.measureDistance(origin, dest);\r\n        const sceneUnit = canvas.scene.data.gridUnits;\r\n        return Helpers.convertLengthUnit(distanceInGridUnits, sceneUnit);\r\n    }\r\n\r\n    static convertLengthUnit(length: number, fromUnit: string): number {\r\n        //@ts-ignore\r\n        fromUnit = fromUnit.toLowerCase();\r\n\r\n        if (!LENGTH_UNIT_TO_METERS_MULTIPLIERS.hasOwnProperty(fromUnit)) {\r\n            console.error(`Distance can't be converted from ${fromUnit} to ${LENGTH_UNIT}`);\r\n            return 0;\r\n        }\r\n\r\n        // Note: length is a grid distance. To avoid suddenly feeding floats, still round in case\r\n        //       of a later API change somewhere.\r\n        return Math.round(length * LENGTH_UNIT_TO_METERS_MULTIPLIERS[fromUnit]);\r\n    }\r\n\r\n    static getControlledTokens(): Token[] {\r\n        if (!canvas || !canvas.ready || !canvas.tokens) return [];\r\n        return canvas.tokens.controlled;\r\n    }\r\n\r\n    /**\r\n     * Determine if the current user has any tokens selected.\r\n     * @returns true if one or more tokens have been selected.\r\n     */\r\n    static userHasControlledTokens(): boolean {\r\n        if (!canvas || !canvas.ready || !canvas.tokens) return false;\r\n        return canvas.tokens.controlled.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Return all actors connected to all user controlled tokens.\r\n     * @returns An array token actors.\r\n     */\r\n    static getControlledTokenActors(): SR5Actor[] {\r\n        if (!canvas || !canvas.ready) return []\r\n\r\n        const tokens = Helpers.getControlledTokens();\r\n        return tokens.map(token => token.actor) as SR5Actor[];\r\n    }\r\n\r\n    /**\r\n     * return all tokens a user has targeted at the moment.\r\n     * @returns An array tokens.\r\n     */\r\n    static getTargetedTokens(): Token[] {\r\n        if (!canvas.ready || !game.user) return [];\r\n\r\n        return Array.from(game.user.targets);\r\n    }\r\n\r\n    /**\r\n     * Return either all user selected token actors or the users game character actor.\r\n     * @returns An array of actors.\r\n     */\r\n    static getSelectedActorsOrCharacter(): SR5Actor[] {\r\n        if (!game.user) return [];\r\n\r\n        const actors = Helpers.getControlledTokenActors();\r\n\r\n        // Try to default to a users character.\r\n        if (actors.length === 0 && game.user.character) {\r\n            actors.push(game.user.character);\r\n        }\r\n\r\n        return actors as SR5Actor[];\r\n    }\r\n\r\n    /**\r\n     * Given a SuccessTestData subset fetch all target actors.\r\n     *\r\n     * BEWARE: A target will always be token based BUT linked actors provide an actor uuid instead of\r\n     * pointing to their token actors.\r\n     * \r\n     * @param testData The test data containing target uuids.\r\n     */\r\n    static async getTestTargetActors(testData: SuccessTestData): Promise<SR5Actor[]> {\r\n        const actors: SR5Actor[] = [];\r\n        for (const uuid of testData.targetActorsUuid) {\r\n            const tokenOrActor = await fromUuid(uuid);\r\n            // Assume given target to be an actor.\r\n            let actor = tokenOrActor;\r\n\r\n            // In case of a Token, extract it's synthetic actor.\r\n            if (tokenOrActor instanceof TokenDocument) {\r\n                if (!tokenOrActor.actor) continue;\r\n                actor = tokenOrActor.actor;\r\n            }\r\n\r\n            // Avoid fromUuid pulling an unwanted Document type.\r\n            if (!(actor instanceof SR5Actor)) {\r\n                console.error(`Shadowrun5e | testData with targets containt UUID ${uuid} which doesn't provide an actor or syntheic actor`, tokenOrActor);\r\n                continue;\r\n            }\r\n\r\n            actors.push(actor);\r\n        }\r\n        return actors;\r\n    }\r\n\r\n    static createRangeDescription(label: string, distance: number, modifier: number): RangeTemplateData {\r\n        label = game.i18n.localize(label);\r\n        return {label, distance, modifier}\r\n    }\r\n\r\n    static convertIndexedObjectToArray(indexedObject: object): object[] {\r\n        return Object.keys(indexedObject).map((index) => {\r\n            if (Number.isNaN(index)) {\r\n                console.warn('An object with no numerical index was given, which is likely a bug.', indexedObject);\r\n            }\r\n            return indexedObject[index];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Depending on the system setting allow GMs to define if they want to always display the name within the actor\r\n     * or within the token.\r\n     *\r\n     * This can be relevant for when GMs either manually or by module change the tokens name, while the actors name\r\n     * is untouched and might even be detrimental to share with players.\r\n     *\r\n     * @param actor\r\n     */\r\n    static getChatSpeakerName(actor: SR5Actor): string {\r\n        if (!actor) return '';\r\n\r\n        const useTokenNameForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\r\n        const token = actor.getToken();\r\n\r\n        if (useTokenNameForChatOutput && token) return token.name as string;\r\n\r\n        return actor.name as string;\r\n    }\r\n\r\n    /**\r\n     * Given an actor this will display either the actor or token name, when there is any.\r\n     *\r\n     * The use token name setting is also respected.\r\n     *\r\n     * @param actor Either an actual or a virtual actor, taken from a token.\r\n     * @returns A path pointing to an image.\r\n     */\r\n    static getChatSpeakerImg(actor: SR5Actor): string {\r\n        if (!actor) return '';\r\n\r\n        const useTokenForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\r\n        const token = actor.getToken();\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (useTokenForChatOutput && token) return token.texture.src || '';\r\n        return actor.img || '';\r\n    }\r\n\r\n    static createDamageData(value: number, type: DamageType, ap: number = 0, element: DamageElement = '', sourceItem?: SR5Item): DamageData {\r\n        const damage = duplicate(DataDefaults.damage) as DamageData;\r\n        damage.base = value;\r\n        damage.value = value;\r\n        damage.type.base = type;\r\n        damage.type.value = type;\r\n        damage.ap.base = ap;\r\n        damage.ap.value = ap;\r\n        damage.element.base = element;\r\n        damage.element.value = element;\r\n\r\n        if (sourceItem && sourceItem.actor) {\r\n            damage.source = {\r\n                actorId: sourceItem.actor.id as string,\r\n                itemType: sourceItem.type,\r\n                itemId: sourceItem.id as string,\r\n                itemName: sourceItem.name as string\r\n            };\r\n        }\r\n\r\n        return damage;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the item causing the damage, if there is any.\r\n     * This only works for embedded items at the moment\r\n     */\r\n    static findDamageSource(damageData: DamageData): SR5Item | undefined {\r\n        if (!game.actors) return;\r\n\r\n        if (!damageData.source) {\r\n            return;\r\n        }\r\n\r\n        const actorId = damageData.source.actorId;\r\n        const actorSource = game.actors.get(actorId)\r\n\r\n        if (!actorSource) {\r\n            return;\r\n        }\r\n\r\n        // First search the actor itself for the item\r\n        const itemId = damageData.source.itemId;\r\n        const actorItem = actorSource.items.get(itemId);\r\n        if (actorItem) {\r\n            return actorItem;\r\n        }\r\n\r\n        // If we did not find anything on the actor, search the active tokens (the item might only exist on a non linked token)\r\n        // This will not work if we are on a different scene or the token got deleted, which is expected when you put an\r\n        // item on a token without linking it.\r\n        const tokens = actorSource.getActiveTokens();\r\n        let tokenItem: SR5Item | undefined;\r\n        tokens.forEach(token => {\r\n            if (!token.actor) return;\r\n\r\n            const foundItem = token.actor.items.get(itemId);\r\n            if (foundItem) {\r\n                tokenItem = foundItem as unknown as SR5Item;\r\n            }\r\n        });\r\n\r\n        return tokenItem;\r\n    }\r\n\r\n    /** Modifies given damage value and returns both original and modified damage\r\n     *\r\n     * For better readability reduceDamageByHits wraps this method to avoid negative params in the call signature.\r\n     * so instead of\r\n     * > modifyDamageByHits(incoming, -hits, label)\r\n     * do this instead\r\n     * > reduceDamageByHits(incoming, hits, label)\r\n     *\r\n     * @param incoming A DamageData value to be modified from\r\n     * @param hits Positive or negative hits to change the damage value with.\r\n     * @param modificationLabel The translatable label for the modification\r\n     */\r\n    static modifyDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\r\n        const modified = duplicate(incoming) as DamageData;\r\n        modified.mod = PartsList.AddUniquePart(modified.mod, modificationLabel, hits);\r\n        modified.value = Helpers.calcTotal(modified, {min: 0});\r\n\r\n        return {incoming, modified};\r\n    }\r\n\r\n    /** Reduces given damage value and returns both original and modified damage.\r\n     *\r\n     * Should you want RAISE the damage value, use modifyDamageByHits directly.\r\n     *\r\n     * @param incoming A DamageData value to be modified from\r\n     * @param hits Positive hits to reduce the damage value with! Should the hits amount be negative, use modifyDamageByHits.\r\n     * @param modificationLabel The translatable label for the modification\r\n     */\r\n    static reduceDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\r\n        if (hits < 0) hits = 0;\r\n        return Helpers.modifyDamageByHits(incoming, -hits, modificationLabel);\r\n    }\r\n\r\n    static async confirmDeletion(): Promise<boolean> {\r\n        const dialog = new DeleteConfirmationDialog();\r\n        await dialog.select();\r\n        return !dialog.canceled && dialog.selectedButton === 'delete';\r\n    }\r\n\r\n    /**\r\n     * This can be used to create an SkillField into the Skills data path during the Skill creation process.\r\n     *\r\n     * @param skillDataPath Could be 'data.skills.active' or 'data.skill.language.value' or more\r\n     * @param skillField A SkillField with whatever values. You could use DefaultValues.skillData to create one.\r\n     * @param idLength How long should the id (GUID) be?\r\n     */\r\n    static getRandomIdSkillFieldDataEntry(skillDataPath: string, skillField: SkillField, idLength: number = DEFAULT_ID_LENGTH): { id: string, updateSkillData: { [skillDataPath: string]: { [id: string]: SkillField } } } | undefined {\r\n        if (!skillDataPath || skillDataPath.length === 0) return;\r\n\r\n        const id = randomID(idLength);\r\n        const updateSkillData = {\r\n            [skillDataPath]: {[id]: skillField}\r\n        };\r\n\r\n        return {\r\n            id,\r\n            updateSkillData\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A simple helper to get an data entry for updating with Entity.update\r\n     *\r\n     * @param path The main data path as a doted string relative from the type data (not document data).\r\n     * @param value Whatever needs to be stored.\r\n     *\r\n     */\r\n    static getUpdateDataEntry(path: string, value: any): { [path: string]: any } {\r\n        return {[path]: value};\r\n    }\r\n\r\n    /**\r\n     * A simple helper to delete existing document data keys with Entity.update\r\n     *\r\n     * @param path The main data path as doted string relative from the item type data (not document data). data.skills.active\r\n     * @param key The single sub property within the path that's meant to be deleted. 'test'\r\n     *\r\n     * @return An expected return object could look like this: {'data.skills.active': {'-=Pistols': null}} and would\r\n     *         remove the Pistols key from the 'data.skills.active' path within Entity.data.data.skills.active.\r\n     */\r\n    static getDeleteKeyUpdateData(path: string, key: string): { [path: string]: { [key: string]: null } } {\r\n        // Entity.update utilizes the mergeObject function within Foundry.\r\n        // That functions documentation allows property deletion using the -= prefix before property key.\r\n        return {[path]: {[`-=${key}`]: null}};\r\n    }\r\n\r\n    static localizeSkill(skill: SkillField): string {\r\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\r\n    }\r\n\r\n    /**\r\n     * Alphabetically sort skills either by their translated label. Should a skill not have one, use the name as a\r\n     * fallback.\r\n     *\r\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\r\n     *\r\n     * @param skills\r\n     * @param asc Set to true for ascending sorting order and to false for descending order.\r\n     * @return Sorted Skills given by the skills parameter\r\n     */\r\n    static sortSkills(skills: Skills, asc: boolean = true): Skills {\r\n        // Filter entries instead of values to have a store of ids for easy rebuild.\r\n        const sortedEntries = Object.entries(skills).sort(([aId, a], [bId, b]) => {\r\n            const comparatorA = Helpers.localizeSkill(a) || aId;\r\n            const comparatorB = Helpers.localizeSkill(b) || bId;\r\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\r\n            if (asc)\r\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\r\n            else\r\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\r\n        });\r\n\r\n        // Rebuild the Skills type using the earlier entries.\r\n        const sortedAsObject = {};\r\n        for (const [id, skill] of sortedEntries) {\r\n            sortedAsObject[id] = skill;\r\n        }\r\n\r\n        return sortedAsObject;\r\n    }\r\n\r\n    /**\r\n     * Alphabetically sort any SR5 config object with a key to label structure.\r\n     *\r\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\r\n     *\r\n     * @param configValues The config value to be sorted\r\n     * @param asc Set to true for ascending sorting order and to false for descending order.\r\n     * @return Sorted config values given by the configValues parameter\r\n     */\r\n    static sortConfigValuesByTranslation(configValues: Record<string, string>, asc: boolean = true): Record<string, string> {\r\n        // Filter entries instead of values to have a store of ids for easy rebuild.\r\n        const sortedEntries = Object.entries(configValues).sort(([aId, a], [bId, b]) => {\r\n            const comparatorA = game.i18n.localize(a);\r\n            const comparatorB = game.i18n.localize(b);\r\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\r\n            if (asc)\r\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\r\n            else\r\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\r\n        });\r\n\r\n        // Rebuild the skills type using the earlier entries.\r\n        const sortedAsObject = {};\r\n        for (const [key, translated] of sortedEntries) {\r\n            sortedAsObject[key] = translated;\r\n        }\r\n        return sortedAsObject;\r\n    }\r\n\r\n    /**\r\n     * Return a list of users with the given permission for the given document.\r\n     *\r\n     * @param document A foundry Document implementation.\r\n     * @param permission A foundry access permission\r\n     * @param active If true, will only return users that are also currently active.\r\n     */\r\n    static getPlayersWithPermission(document: foundry.abstract.Document<any>, permission: string, active: boolean = true): User[] {\r\n        if (!game.users) return [];\r\n\r\n        return game.users.filter(user => {\r\n            if (user.isGM) return false;\r\n            // @ts-ignore // Check for permissions. String is allowed\r\n            if (!document.testUserPermission(user, permission)) return false;\r\n            // Check for active state.\r\n            if (active && !user.active) return false;\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle the special skill cases with id equals name and possible i18n\r\n     *\r\n     * @param skill\r\n     * @returns Either a translation or a name.\r\n     */\r\n    static getSkillLabelOrName(skill: SkillField): string {\r\n        // Custom skills don't have labels, use their name instead.\r\n        return skill.label ? game.i18n.localize(skill.label) : skill.name || '';\r\n    }\r\n\r\n    /**\r\n     * Fetch entities from global or pack collections using data acquired by Foundry Drag&Drop process\r\n     * @param data Foundry Drop Data\r\n     */\r\n    static async getEntityFromDropData(data: { type: 'Actor' | 'Item', pack: string, id: string }): Promise<SR5Actor | SR5Item | undefined> {\r\n        if (!game.actors || !game.items) return;\r\n\r\n        if (data.pack && data.type === 'Actor')\r\n            return await Helpers.getEntityFromCollection(data.pack, data.id) as unknown as SR5Actor;\r\n\r\n        if (data.pack && data.type === 'Item')\r\n            return await Helpers.getEntityFromCollection(data.pack, data.id) as unknown as SR5Item;\r\n\r\n        if (data.type === 'Actor')\r\n            return game.actors.get(data.id);\r\n\r\n        if (data.type === 'Item')\r\n            return game.items.get(data.id);\r\n    }\r\n\r\n    /**\r\n     * Fetch entities from a pack collection\r\n     * @param collection The pack name as stored in the collection property\r\n     * @param id The entity id in that collection\r\n     */\r\n    static async getEntityFromCollection(collection: string, id: string): Promise<Document> {\r\n        const pack = game.packs.find((p) => p.collection === collection);\r\n        // @ts-ignore // All Document types COULD be returned...\r\n        return await pack.getDocument(id);\r\n    }\r\n\r\n    /**\r\n     * A markId is valid if:\r\n     * - It's scene still exists\r\n     * - The token still exists on that scene\r\n     * - And a possible owned item still exists on that documents actor.\r\n     */\r\n    static isValidMarkId(markId: string): boolean {\r\n        if (!game.scenes) return false;\r\n\r\n        const [sceneId, targetId, itemId] = Helpers.deconstructMarkId(markId);\r\n\r\n        const scene = game.scenes.get(sceneId);\r\n        if (!scene) return false;\r\n\r\n        const tokenDocument = scene.tokens.get(targetId);\r\n        if (!tokenDocument) return false;\r\n\r\n        const actor = tokenDocument.actor;\r\n        // Some targets are allowed without a targeted owned item.\r\n        if (itemId && !actor?.items.get(itemId)) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Build a markId string. See Helpers.deconstructMarkId for usage.\r\n     *\r\n     * @param sceneId Optional id in a markId\r\n     * @param targetId Mandatory id in a markId\r\n     * @param itemId Optional id in a markId\r\n     * @param separator Should you want to change the default separator used. Make sure not to use a . since Foundry will split the key into objects.\r\n     */\r\n    static buildMarkId(sceneId: string, targetId: string, itemId: string | undefined, separator = '/'): string {\r\n        return [sceneId, targetId, itemId || ''].join(separator);\r\n    }\r\n\r\n    /**\r\n     * Deconstruct the given markId string.\r\n     *\r\n     * @param markId 'sceneId.targetId.itemId' with itemId being optional\r\n     * @param separator Should you want to change the default separator used\r\n     */\r\n    static deconstructMarkId(markId: string, separator = '/'): [sceneId: string, targetId: string, itemId: string] {\r\n        const ids = markId.split(separator);\r\n\r\n        if (ids.length !== 3) {\r\n            console.error('A mark id must always be of length 3');\r\n        }\r\n\r\n        return ids as [string, string, string];\r\n    }\r\n\r\n    static getMarkIdDocuments(markId: string): TargetedDocument | undefined {\r\n        if (!game.scenes || !game.items) return;\r\n\r\n        const [sceneId, targetId, itemId] = Helpers.deconstructMarkId(markId);\r\n\r\n        const scene = game.scenes.get(sceneId);\r\n        if (!scene) return;\r\n        const target = scene.tokens.get(targetId) || game.items.get(targetId) as SR5Item;\r\n        const item = target?.actor?.items?.get(itemId) as SR5Item; // DocumentCollection will return undefined if needed\r\n\r\n        return {\r\n            scene, target, item\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if all given keys are present in the given object.\r\n     * Values don't matter for this comparison.\r\n     *\r\n     * @param obj\r\n     * @param keys\r\n     */\r\n    static objectHasKeys(obj: object, keys: string[]): boolean {\r\n        for (const key of keys) {\r\n            if (!obj.hasOwnProperty(key)) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check packs for a given action.\r\n     *\r\n     * TODO: Use pack and action ids to avoid polluted user namespaces\r\n     * TODO: Allow for i18n to fetch a label from an action? Or predefine the title?\r\n     *\r\n     * @param packName The metadata name of the pack\r\n     * @param actionName The name of the action within that pack\r\n     */\r\n    static async getPackAction(packName, actionName): Promise<SR5Item | undefined> {\r\n        console.debug(`Shadowrun 5e | Trying to fetch action ${actionName} from pack ${packName}`);\r\n        const pack = game.packs.find(pack =>\r\n            pack.metadata.system === SYSTEM_NAME &&\r\n            pack.metadata.name === packName);\r\n        if (!pack) return;\r\n\r\n        // TODO: Use predefined ids instead of names...\r\n        const packEntry = pack.index.find(data => data.name?.toLowerCase().replace(new RegExp(' ', 'g'), '_') === actionName.toLowerCase());\r\n        if (!packEntry) return;\r\n\r\n        const item = await pack.getDocument(packEntry._id) as unknown as SR5Item;\r\n        if (!item || item.type !== 'action') return;\r\n\r\n        console.debug(`Shadowrun5e | Fetched action ${actionName} from pack ${packName}`, item);\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Show the DocumentSheet of whatever entity link uuid.\r\n     *\r\n     * This function is designed to work in cojunction with the content-link CSS-class used by Foundry opening\r\n     * the given id. Because of this only entity-links with uuid dataset entries should trigger.\r\n     *\r\n     * @param event A PointerEvent by user interaction.\r\n     */\r\n    static async renderEntityLinkSheet(event) {\r\n        const element = $(event.currentTarget);\r\n        const uuid = element.data('uuid');\r\n        await Helpers.renderDocumentSheet(uuid);\r\n    }\r\n\r\n    /**\r\n     * Fetch a Document using the FoundryVTT UUID and render it's connected sheet.\r\n     *\r\n     * @param uuid Generated by Document.uuid property.\r\n     * @param resolveTokenToActor Should the uuid resolve to a TokenDocument, rather render it's actor.\r\n     */\r\n    static async renderDocumentSheet(uuid: string, resolveTokenToActor = true) {\r\n        if (!uuid) return;\r\n        let document = await fromUuid(uuid);\r\n        if (!document) return;\r\n        if (document instanceof TokenDocument && resolveTokenToActor && document.actor)\r\n            document = document.actor;\r\n        // @ts-ignore\r\n        await document.sheet.render(true);\r\n    }\r\n\r\n    /**\r\n     * See injectActionTestsIntoChangeData for documentation.\r\n     */\r\n    static injectWeaponTestIntoChangeData(type: string, changeData: Partial<WeaponItemData>, applyData) {\r\n        // Abort when category isn't part of this change.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (changeData?.system?.category === undefined) return;\r\n        \r\n        // Remove test when user selects empty category.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (changeData.system.category === '') {\r\n            foundry.utils.setProperty(applyData, 'system.action.test', '');\r\n            return;\r\n        }\r\n\r\n        //@ts-ignore Make sure a matching active test for the configured weapons category is used.\r\n        const test = SR5.weaponCategoryActiveTests[changeData.system.category];\r\n        if (!test) { //@ts-ignore // TODO: foundry-vtt-types v10\r\n            console.error(`Shadowrun 5 | There is no active test configured for the weapon category ${changeData.system.category}.`, changeData);\r\n        }\r\n\r\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\r\n        foundry.utils.setProperty(applyData, 'system.action.opposed.test', 'PhysicalDefenseTest');\r\n        foundry.utils.setProperty(applyData, 'system.action.opposed.resist.test', 'PhysicalResistTest');\r\n    }\r\n\r\n    /**\r\n     * See injectActionTestsIntoChangeData for documentation.\r\n     */\r\n    static injectSpellTestIntoChangeData(type: string, changeData: Partial<SpellItemData>, applyData) {\r\n        // Abort when category isn't part of this change.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (changeData?.system?.category === undefined) return;\r\n        \r\n        // Remove test when user selects empty category.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (changeData.system.category === '') {\r\n            foundry.utils.setProperty(applyData, 'system.action.test', '');\r\n            return;\r\n        } \r\n        \r\n        // Based on category switch out active, opposed and resist test.\r\n        const test = SR5.activeTests[type];\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const opposedTest = SR5.opposedTests[type][changeData.system.category] || 'OpposedTest';\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const resistTest = SR5.opposedResistTests[type][changeData.system.category] || '';\r\n        const drainTest = SR5.followedTests[test] ?? '';\r\n\r\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\r\n        foundry.utils.setProperty(applyData, 'system.action.opposed.test', opposedTest);\r\n        foundry.utils.setProperty(applyData, 'system.action.opposed.resist.test', resistTest);\r\n        foundry.utils.setProperty(applyData, 'system.action.followed.test', drainTest);\r\n    }\r\n\r\n    /**\r\n     * See injectActionTestsIntoChangeData for documentation.\r\n     */\r\n    static injectComplexFormTestIntoChangeData(type: string, changeData: Partial<SpellItemData>, applyData) {\r\n        const test = SR5.activeTests[type];\r\n\r\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\r\n    }\r\n\r\n    /**\r\n     * Inject action test data into any item \r\n     * \r\n     * This method is designed to be called on _preCreate/_preUpdate/_preCreateEmbeddedDocuments\r\n     * \r\n     * Make sure to not mix up changeData and itemData\r\n     * \r\n     * Depending on the caller whatever was applied to the applyData parameter must be handeled differently.\r\n     * When called by _onCreate, it must be used as updateData using Document#update\r\n     * When called by _preUpdate, it must be applied directly to changeData\r\n     * When called before any DocumentData as been created, it can be applied directly to the source object before Document#create\r\n     * \r\n     * @param type The item type where operating on\r\n     * @param changeData The changeData (partial or complet) that's been transmitted.\r\n     * @param applyData An object to carry the altering data changes\r\n     */\r\n    static injectActionTestsIntoChangeData(type: string, changeData: Partial<ShadowrunItemData>, applyData) {\r\n        if (!changeData) return;\r\n\r\n        const typeHandler = {\r\n            'weapon': Helpers.injectWeaponTestIntoChangeData,\r\n            'spell': Helpers.injectSpellTestIntoChangeData,\r\n            'complex_form': Helpers.injectComplexFormTestIntoChangeData\r\n        };\r\n\r\n        const handler = typeHandler[type];\r\n        if (!handler) return;\r\n\r\n        handler(type, changeData, applyData);\r\n    }\r\n\r\n    /**\r\n     * Sanitize keys to not use characters used within FoundryVTT Document#update and expandObject methods.\r\n     * \r\n     * @param key The key, maybe containing prohibited characters\r\n     * @param replace The characters to replaces prohibited characters with\r\n     * @returns key without \r\n     */\r\n    static sanitizeDataKey(key: string, replace: string=''): string {\r\n        const spicyCharacters = ['.', '-='];\r\n        spicyCharacters.forEach(character => key = key.replace(character, replace));\r\n        return key;\r\n    }\r\n\r\n    /**\r\n     * Determine if given string contains a url pattern.\r\n     * \r\n     * @param candidate The string that might contain a url\r\n     * @returns true, when candidate contains a url pattern\r\n     */\r\n    static isURL(candidate: string): boolean {\r\n        var urlRegex = '^(?!mailto:)(?:(?:http|https|ftp)://)?(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$';\r\n        var url = new RegExp(urlRegex, 'i');\r\n        return url.test(candidate);\r\n   }\r\n}\r\n", "import { PartsList } from '../parts/PartsList';\r\nimport ModList = Shadowrun.ModList;\r\nimport {Helpers} from \"../helpers\";\r\nimport {SafeString} from \"handlebars\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport ModListEntry = Shadowrun.ModListEntry;\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\r\n\r\nexport const registerRollAndLabelHelpers = () => {\r\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\r\n        if (damage === 'physical') return 'P';\r\n        if (damage === 'stun') return 'S';\r\n        if (damage === 'matrix') return 'M';\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('damageCode', function(damage: DamageData): SafeString {\r\n        const typeCode = Handlebars.helpers.damageAbbreviation(damage.type.value);\r\n        let code = `${damage.value}${typeCode}`;\r\n        return new Handlebars.SafeString(code);\r\n    });\r\n\r\n    Handlebars.registerHelper('diceIcon', function (side) {\r\n        if (side) {\r\n            switch (side) {\r\n                case 1:\r\n                    return 'red';\r\n                case 2:\r\n                    return 'grey';\r\n                case 3:\r\n                    return 'grey';\r\n                case 4:\r\n                    return 'grey';\r\n                case 5:\r\n                    return 'green';\r\n                case 6:\r\n                    return 'green';\r\n            }\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('elementIcon', function (element) {\r\n        let icon = '';\r\n        if (element === 'electricity') {\r\n            icon = 'fas fa-bolt';\r\n        } else if (element === 'radiation') {\r\n            icon = 'fas fa-radiation-alt';\r\n        } else if (element === 'fire') {\r\n            icon = 'fas fa-fire';\r\n        } else if (element === 'acid') {\r\n            icon = 'fas fa-vials';\r\n        } else if (element === 'cold') {\r\n            icon = 'fas fa-snowflake';\r\n        }\r\n        return icon;\r\n    });\r\n\r\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\r\n        const parts = new PartsList(partsList);\r\n        return parts.total;\r\n    });\r\n\r\n    Handlebars.registerHelper('signedValue', function (value: number) {\r\n        return value > 0 ?  `+${value}`: `${value}`;\r\n    });\r\n\r\n    Handlebars.registerHelper('speakerName', Helpers.getChatSpeakerName);\r\n    Handlebars.registerHelper('speakerImg', Helpers.getChatSpeakerImg);\r\n};\r\n", "import {SR5ItemDataWrapper} from '../data/SR5ItemDataWrapper';\r\nimport {SR5} from \"../config\";\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\nimport MarkedDocument = Shadowrun.MarkedDocument;\r\n\r\nexport const registerItemLineHelpers = () => {\r\n    Handlebars.registerHelper('ItemHeaderIcons', function (type) {\r\n        const PlusIcon = 'fas fa-plus';\r\n        const AddText = game.i18n.localize('SR5.Add');\r\n        const addIcon = {\r\n            icon: PlusIcon,\r\n            text: AddText,\r\n            title: game.i18n.localize('SR5.CreateItem'),\r\n            cssClass: 'item-create',\r\n            // Add HTML data attributes using a key<string>:value<string> structure\r\n            data: {}\r\n        };\r\n        switch (type) {\r\n            case 'lifestyle':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\r\n                return [addIcon];\r\n            case 'contact':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\r\n                return [addIcon];\r\n            case 'sin':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\r\n                return [addIcon];\r\n            case 'license':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\r\n                return [addIcon];\r\n            case 'quality':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\r\n                return [addIcon];\r\n            case 'adept_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\r\n                return [addIcon];\r\n            case 'action':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\r\n                return [addIcon];\r\n            case 'spell':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\r\n                return [addIcon];\r\n            case 'gear':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\r\n                return [addIcon];\r\n            case 'complex_form':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\r\n                return [addIcon];\r\n            case 'program':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\r\n                return [addIcon];\r\n            case 'weapon':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemWeapon');\r\n                return [addIcon];\r\n            case 'armor':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemArmor');\r\n                return [addIcon];\r\n            case 'ammo':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAmmo');\r\n                return [addIcon];\r\n            case 'modification':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemModification');\r\n                return [addIcon];\r\n            case 'device':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemDevice');\r\n                return [addIcon];\r\n            case 'equipment':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemEquipment');\r\n                return [addIcon];\r\n            case 'cyberware':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemCyberware');\r\n                return [addIcon];\r\n            case 'bioware':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemBioware');\r\n                return [addIcon];\r\n            case 'critter_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemCritterPower');\r\n                return [addIcon];\r\n            case 'sprite_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpritePower');\r\n                return [addIcon];\r\n            case 'effect':\r\n                addIcon.title = game.i18n.localize('SR5.CreateEffect');\r\n                addIcon.cssClass = 'effect-control';\r\n                addIcon.data = {action: 'create'};\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('InventoryIcons', function(name) {\r\n        const addItemIcon = {\r\n            icon: 'fas fa-plus',\r\n            text: game.i18n.localize('SR5.Add'),\r\n            title: game.i18n.localize('SR5.CreateItem'),\r\n            cssClass: 'inventory-item-create',\r\n            // Add HTML data attributes using a key<string>:value<string> structure\r\n            data: {inventory: name}\r\n        };\r\n\r\n        return [addItemIcon];\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\r\n        switch (id) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Skill'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Limit'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Modifier'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'weapon':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n            case 'modification':\r\n            case 'ammo':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Qty'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Target'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Fade'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.PowerType'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellType'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellRange'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Drain'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'critter_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Type'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Range'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.CritterPower.Duration'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.QualityType'),\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemRightSide', function (item: ShadowrunItemData) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        const qtyInput = {\r\n            input: {\r\n                type: 'number',\r\n                value: wrapper.getQuantity(),\r\n                cssClass: 'item-qty',\r\n            },\r\n        };\r\n        switch (item.type) {\r\n            case 'action':\r\n\r\n                // Only show a limit, when one is defined. Either by name or attribute\r\n                const limitAttribute = item.system.action.limit.attribute;\r\n                const limitBase = Number(item.system.action.limit.base);\r\n                // Transform into text values, either numerical or localized.\r\n                const textLimitParts: string[] = [];\r\n                if (!isNaN(limitBase) && limitBase > 0) {\r\n                    textLimitParts.push(limitBase.toString());\r\n                }\r\n                if (limitAttribute) {\r\n                    textLimitParts.push(game.i18n.localize(SR5.limits[limitAttribute ?? '']));\r\n                }\r\n                const textLimit = textLimitParts.join(' + ');\r\n                \r\n\r\n                return [\r\n                    {\r\n                        text: {\r\n                            // Either use the legacy skill localization OR just the skill name/id instead.\r\n                            text: game.i18n.localize(SR5.activeSkills[wrapper.getActionSkill() ?? ''] ?? wrapper.getActionSkill()),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.attributes[wrapper.getActionAttribute() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.attributes[wrapper.getActionAttribute2() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: textLimit,\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getActionDicePoolMod(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'armor':\r\n            case 'ammo':\r\n            case 'modification':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n                return [qtyInput];\r\n            case 'weapon':\r\n                if (wrapper.isRangedWeapon()) {\r\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\r\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\r\n                    // Show reload on both no ammo configured and partially consumed clips.\r\n                    const text = count < max || max === 0 ? \r\n                        `${game.i18n.localize('SR5.WeaponReload')} (${count}/${max})` : \r\n                        game.i18n.localize('SR5.AmmoFull');\r\n\r\n                    const cssClass = 'no-break' + (count < max ? ' reload-ammo roll' : 'faded');\r\n                    return [\r\n                        {\r\n                            text: {\r\n                                title: `${game.i18n.localize('SR5.WeaponAmmoCount')}: ${count}`,\r\n                                text,\r\n                                cssClass,\r\n                            },\r\n                        },\r\n                        {\r\n                            text: {\r\n                                text: '',\r\n                            },\r\n                        },\r\n                        qtyInput,\r\n                    ];\r\n                } else {\r\n                    return [qtyInput];\r\n                }\r\n\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.qualityTypes[item.system.type ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.adeptPower.types[item.system.type ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.spellTypes[item.system.type ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.spellRanges[item.system.range ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.durations[item.system.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getDrain(),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'critter_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.critterPower.types[item.system.powerType ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.critterPower.ranges[item.system.range ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.critterPower.durations[item.system.duration ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.matrixTargets[item.system.target ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(SR5.durations[item.system.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: String(item.system.fade),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [\r\n                    {\r\n                        button: {\r\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\r\n                            short: true,\r\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemIcons', function (item: ShadowrunItemData) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n\r\n        const editIcon = {\r\n            icon: 'fas fa-edit item-edit',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash item-delete',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n        };\r\n        const equipIcon = {\r\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\r\n            title: game.i18n.localize('SR5.ToggleEquip'),\r\n        };\r\n        const pdfIcon = {\r\n            icon: 'fas fa-file open-source',\r\n            title: game.i18n.localize('SR5.OpenSourcePdf'),\r\n        };\r\n\r\n        const icons = [pdfIcon, editIcon, removeIcon];\r\n\r\n        switch (wrapper.getType()) {\r\n            case 'program':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n            case 'weapon':\r\n                icons.unshift(equipIcon);\r\n        }\r\n\r\n        return icons;\r\n    });\r\n\r\n    Handlebars.registerHelper('InventoryItemIcons', function (item: ShadowrunItemData) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        const moveIcon = {\r\n            icon: 'fas fa-exchange-alt inventory-item-move',\r\n            title: game.i18n.localize('SR5.MoveItemInventory')\r\n        };\r\n        const editIcon = {\r\n            icon: 'fas fa-edit item-edit',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash item-delete',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n        };\r\n        const equipIcon = {\r\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\r\n            title: game.i18n.localize('SR5.ToggleEquip'),\r\n        };\r\n        const pdfIcon = {\r\n            icon: 'fas fa-file open-source',\r\n            title: game.i18n.localize('SR5.OpenSource'),\r\n        };\r\n\r\n        const icons = [pdfIcon, moveIcon, editIcon, removeIcon];\r\n\r\n        switch (wrapper.getType()) {\r\n            case 'program':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'bioware':\r\n            case 'weapon':\r\n                icons.unshift(equipIcon);\r\n        }\r\n\r\n        return icons;\r\n    });\r\n\r\n    /**\r\n     * Helper specifically for active effect icons.\r\n     *\r\n     * Add HTML data attributes using a key<string>:value<string> structure for each icon.\r\n     */\r\n    Handlebars.registerHelper('EffectIcons', function (effect) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit effect-control',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n            data: {action: 'edit'}\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash effect-control',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n            data: {action: 'delete'}\r\n        };\r\n        const disableIcon = {\r\n            icon: `${effect.disabled ? 'far fa-circle' : 'fas fa-check-circle'} effect-control`,\r\n            title: game.i18n.localize('SR5.ToggleActive'),\r\n            data: {action: \"toggle\"}\r\n        };\r\n        const openOriginIcon = {\r\n            icon: 'fas fa-file effect-control',\r\n            title: game.i18n.localize('SR5.OpenOrigin'),\r\n            data: {action: \"open-origin\"}\r\n        }\r\n        // Disallow changes to effects that aren't of direct origin.\r\n        let icons = [disableIcon, editIcon, removeIcon];\r\n        if (effect.isOriginOwned) icons = [openOriginIcon, ...icons];\r\n        return icons;\r\n    });\r\n\r\n    Handlebars.registerHelper('EffectData', function(effectType: string) {\r\n        return {'effect-type': effectType};\r\n    });\r\n\r\n    // Allow Matrix Marks to be changed on the spot on a Sheet.\r\n    Handlebars.registerHelper('MarksRightSide', (marked: MarkedDocument) => {\r\n        const quantityInput = {\r\n            input: {\r\n                type: 'number',\r\n                value: marked.marks,\r\n                cssClass: 'marks-qty',\r\n            },\r\n        };\r\n        return [quantityInput]\r\n    });\r\n\r\n    // Matrix Mark interaction on a Sheet.\r\n    Handlebars.registerHelper('MarksIcons', (marked: MarkedDocument) => {\r\n        const incrementIcon = {\r\n            icon: 'fas fa-plus marks-add-one',\r\n            title: game.i18n.localize('SR5.Labels.Sheet.AddOne'),\r\n            data: {action: 'add-one'}\r\n        };\r\n        const decrementIcon = {\r\n            icon: 'fas fa-minus marks-remove-one',\r\n            title: game.i18n.localize('SR5.Labels.Sheet.SubtractOne'),\r\n            data: {action: 'remove-one'}\r\n        }\r\n\r\n        return [incrementIcon, decrementIcon];\r\n    });\r\n\r\n    Handlebars.registerHelper('MarkListHeaderRightSide', () => {\r\n        return [\r\n            {\r\n                text: {\r\n                    text: game.i18n.localize('SR5.FOUNDRY.Scene'),\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: game.i18n.localize('SR5.FOUNDRY.Item'),\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: game.i18n.localize('SR5.Qty'),\r\n                },\r\n            }]\r\n    });\r\n\r\n    Handlebars.registerHelper('MarkListHeaderIcons', () => {\r\n        return [{\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.ClearMarks'),\r\n            text: game.i18n.localize('SR5.Del'),\r\n            cssClass: 'marks-clear-all'\r\n        }];\r\n    });\r\n\r\n    Handlebars.registerHelper('NetworkDevicesListRightSide', () => {\r\n        return [\r\n            {\r\n                text: {\r\n                    text: game.i18n.localize('SR5.FOUNDRY.Actor'),\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: game.i18n.localize('SR5.FOUNDRY.Item'),\r\n                },\r\n            }]\r\n    })\r\n\r\n    Handlebars.registerHelper('NetworkDevicesListHeaderIcons', () => {\r\n        return [{\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.Labels.Sheet.ClearNetwork'),\r\n            text: game.i18n.localize('SR5.Del'),\r\n            cssClass: 'network-clear'\r\n        }];\r\n    })\r\n};\r\n", "import SkillField = Shadowrun.SkillField;\r\nimport { Helpers } from '../helpers';\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\nimport SkillCategories = Shadowrun.SkillCategories;\r\nimport {SkillRules} from \"../rules/SkillRules\";\r\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\r\n\r\nexport const registerSkillLineHelpers = () => {\r\n    Handlebars.registerHelper('SkillHeaderIcons', function (category: SkillCategories) {\r\n        const addIcon = {\r\n            icon: 'fas fa-plus',\r\n            title: game.i18n.localize('SR5.AddSkill'),\r\n            text: game.i18n.localize('SR5.Add'),\r\n            cssClass: '',\r\n        };\r\n        switch (category) {\r\n            case 'active':\r\n                addIcon.cssClass = 'add-active';\r\n                return [addIcon];\r\n            case 'language':\r\n                addIcon.cssClass = 'add-language';\r\n                return [addIcon];\r\n            case 'knowledge':\r\n                addIcon.cssClass = 'add-knowledge';\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id, filters: SR5SheetFilters) {\r\n        const specs = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Specialization'),\r\n                cssClass: 'skill-spec-item',\r\n            },\r\n        };\r\n\r\n        const rtg = {\r\n            // Change Rating header to show active filtering.\r\n            text: {\r\n                text: !filters || filters.showUntrainedSkills ?\r\n                    game.i18n.localize('SR5.Rtg') :\r\n                    game.i18n.localize('SR5.RtgAboveZero'),\r\n                cssClass: 'rtg',\r\n            },\r\n        };\r\n\r\n        switch (id) {\r\n            case 'active':\r\n            case 'knowledge':\r\n            case 'language':\r\n                return [specs, rtg];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\r\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\r\n        return [\r\n            {\r\n                html: {\r\n                    text: specs.map(spec => `<span class=\"roll skill-spec-roll\">${spec}</span>`).join(', '),\r\n                    cssClass: 'skill-spec-item',\r\n                }\r\n            },\r\n            {\r\n                text: {\r\n                    text: Helpers.calcTotal(skill),\r\n                    cssClass: 'rtg',\r\n                },\r\n            },\r\n        ];\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillAdditionCssClass', function(skill: SkillField): string[] {\r\n        const classes: string[] = [];\r\n\r\n        // @PDF SR5#151 not defaultable skills should be shown as italic.\r\n        if (game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) && !SkillRules.allowDefaultingRoll(skill)) {\r\n            classes.push('skill-roll-not-defaultable');\r\n        }\r\n\r\n        return classes;\r\n    })\r\n\r\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit',\r\n            title: game.i18n.localize('SR5.EditSkill'),\r\n            cssClass: '',\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.DeleteSkill'),\r\n            cssClass: '',\r\n        };\r\n        switch (skillType) {\r\n            case 'active':\r\n                editIcon.cssClass = 'skill-edit';\r\n                removeIcon.cssClass = 'remove-active'\r\n                return [editIcon, removeIcon];\r\n            case 'language':\r\n                editIcon.cssClass = 'language-skill-edit';\r\n                removeIcon.cssClass = 'remove-language';\r\n                return [editIcon, removeIcon];\r\n            case 'knowledge':\r\n                editIcon.cssClass = 'knowledge-skill-edit';\r\n                removeIcon.cssClass = 'remove-knowledge';\r\n                return [editIcon, removeIcon];\r\n            default:\r\n                return [editIcon];\r\n        }\r\n    });\r\n\r\n};\r\n", "export const registerAppHelpers = () => {\r\n    // TODO: Add modifiers.env typing and add missing type\r\n    /** \r\n     * An environmental modifier is active when the the set value matches the expected modifier value\r\n     * for this selection.\r\n     *\r\n     * @param active The applied environmental modifiers \r\n     * @param category A environment modifier category (wind, range, ...)\r\n     * @param modifier A environmental modifier value (0, -1)\r\n     */\r\n    Handlebars.registerHelper('IsEnvModifierActive', (active, category: string, modifier: number) => {\r\n        return active[category] === modifier;\r\n    })\r\n}", "import { Helpers } from '../helpers';\r\nimport {SafeString} from \"handlebars\";\r\nimport SkillField = Shadowrun.SkillField;\r\nimport {SR5} from \"../config\";\r\nimport {FLAGS, SR, SYSTEM_NAME} from \"../constants\";\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\n\r\nexport const registerBasicHelpers = () => {\r\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\r\n        if (obj) strId = obj[strId];\r\n        return game.i18n.localize(strId);\r\n    });\r\n\r\n    Handlebars.registerHelper('localizeDocumentType', function (document) {\r\n        if (document.type.length < 1) return '';\r\n        const documentClass = document instanceof SR5Actor ? 'ACTOR' : 'ITEM';\r\n        const documentTypeLabel = document.type[0].toUpperCase() + document.type.slice(1);\r\n        const i18nTypeLabel = `${documentClass}.Type${documentTypeLabel}`;\r\n        return game.i18n.localize(i18nTypeLabel);\r\n    });\r\n\r\n    Handlebars.registerHelper('localizeSkill', function (skill: SkillField): string {\r\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\r\n        // NOTE: Below is code to append a shortened attribute name to the skill name. It's been removed for readability.\r\n        //       But still might useful for someone.\r\n        // if (!game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) || !translatedSkill || !skill.attribute)\r\n        //     return translatedSkill;\r\n        //\r\n        // // Try showing the first three letters, or less.\r\n        // const translatedAttribute = game.i18n.localize(SR5.attributes[skill.attribute]);\r\n        // if (!translatedAttribute) return translatedSkill;\r\n        //\r\n        // const cutToIndex = translatedAttribute.length < SR.attributes.SHORT_NAME_LENGTH ?\r\n        //     translatedAttribute.length -1 :\r\n        //     SR.attributes.SHORT_NAME_LENGTH;\r\n        // const translatedAttributeShorthand = translatedAttribute.substring(0, cutToIndex).toUpperCase();\r\n        // return `${translatedSkill} (${translatedAttributeShorthand})`;\r\n    });\r\n\r\n    Handlebars.registerHelper('toHeaderCase', function (str) {\r\n        if (str) return Helpers.label(str);\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('concatStrings', function (...args) {\r\n        return args.filter(a => typeof a === 'string').join('');\r\n    });\r\n\r\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\r\n        if (Array.isArray(strs)) {\r\n            return strs.join(c);\r\n        }\r\n        return strs;\r\n    });\r\n\r\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\r\n        let accum = '';\r\n        for (let i = from; i < to; i += 1) {\r\n            accum += options.fn(i);\r\n        }\r\n\r\n        return accum;\r\n    });\r\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\r\n        return v1 % v2;\r\n    });\r\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\r\n        if (v2 === 0) return 0;\r\n        return v1 / v2;\r\n    });\r\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            return options.fn(this);\r\n        } else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\r\n        if (arr.includes(val)) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if greater than\r\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\r\n        if (v1 > v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than\r\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\r\n        if (v1 < v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than or equal\r\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\r\n        if (v1 <= v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if not equal\r\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\r\n        if (v1 !== v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if equal\r\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\r\n        if (v1 === v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if empty (object, array, string)\r\n    Handlebars.registerHelper('empty', function (value) {\r\n        if (foundry.utils.getType(value) === 'Array') return value.length === 0;\r\n        if (foundry.utils.getType(value) === 'Object') return Object.keys(value).length === 0;\r\n        if (foundry.utils.getType(value) === 'String') return value.length === 0;\r\n    });\r\n    Handlebars.registerHelper('not', function (v1) {\r\n        return !v1;\r\n    });\r\n    Handlebars.registerHelper('sum', function (v1, v2) {\r\n        return v1 + v2;\r\n    });\r\n\r\n    Handlebars.registerHelper('isDefined', function (value) {\r\n        return value !== undefined && value !== null;\r\n    });\r\n    /**\r\n     * Return a fallback value if the provided value is not defined (null or undefined)\r\n     * NOTE: original helper 'default' caused incompatibilities with module AFK Ready Check, as both were overwriting it.\r\n     */\r\n    Handlebars.registerHelper('fallbackValue', function (value: string, defaultValue: string) {\r\n        return new Handlebars.SafeString(value ?? defaultValue);\r\n    });\r\n\r\n    Handlebars.registerHelper('log', function (value: string) {\r\n        console.log(value);\r\n    });\r\n    Handlebars.registerHelper('buildName', function (options) {\r\n        const hash: string[] = Helpers.orderKeys(options.hash);\r\n        const name = Object.values(hash).reduce((retVal, current, index) => {\r\n            if (index > 0) retVal += '.';\r\n            return retVal + current;\r\n        }, '');\r\n        return new Handlebars.SafeString(name);\r\n    });\r\n    Handlebars.registerHelper('disabledHelper', function (value) {\r\n        const val = Boolean(value);\r\n        return val ? val : undefined;\r\n    });\r\n    // TODO: This helper doesn't work... Don't know why, but it doesn't.\r\n    Handlebars.registerHelper('localizeShortened', function (label: string, length: number, options: any): SafeString {\r\n        return new Handlebars.SafeString(Helpers.shortenAttributeLocalization(label, length));\r\n    });\r\n\r\n    /**\r\n     * Given an object return the value for a given key.\r\n     */\r\n    Handlebars.registerHelper('objValue', function(obj: Object, key: string) {\r\n        return obj[key] ||  '';\r\n    });\r\n};\r\n", "import { MonitorRules } from './../rules/MonitorRules';\r\nexport const registerActorHelpers = () => {\r\n    /** \r\n     * Determine if a wound modifier should be shown for a specific box on a damage track, including pain rules.\r\n     * \r\n     * @param box The box to be treated as virutal damage\r\n     * @param painTolerance Amount of boxes before given box to be ignored\r\n     * @param woundBoxesThreshold Amount of boxes after pain tolerance used as a step size between shown wound modifiers.\r\n     */\r\n    Handlebars.registerHelper('showWoundModifier', (box: number, painTolerance: number, woundBoxesThreshold: number): boolean => {\r\n        if (box <= painTolerance) return false;\r\n\r\n        return (box - painTolerance) % woundBoxesThreshold === 0;\r\n    });\r\n\r\n    Handlebars.registerHelper('woundModifier', (box: number, painTolerance: number, woundBoxesThreshold: number): number => {\r\n        const wounds = MonitorRules.wounds(box, woundBoxesThreshold, painTolerance);\r\n        return MonitorRules.woundModifier(wounds);\r\n    });\r\n}", "import { preloadHandlebarsTemplates } from './HandlebarTemplates';\r\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\r\nimport { registerItemLineHelpers } from './ItemLineHelpers';\r\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\r\nimport { registerAppHelpers } from \"./AppHelpers\";\r\nimport { registerBasicHelpers } from \"./BasicHelpers\";\r\nimport { registerActorHelpers } from './ActorHelpers';\r\n\r\nexport class HandlebarManager {\r\n    static async loadTemplates() {\r\n        await preloadHandlebarsTemplates();\r\n    }\r\n    static registerHelpers(): void {\r\n        registerBasicHelpers();\r\n        registerRollAndLabelHelpers();\r\n        registerItemLineHelpers();\r\n        registerSkillLineHelpers();\r\n        registerAppHelpers();\r\n        registerActorHelpers();\r\n    }\r\n}", "import { SR5Actor } from '../actor/SR5Actor';\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport {ActorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\nimport ShadowrunActorData = Shadowrun.ShadowrunActorData;\r\n\r\nexport type SystemMigrationDocuments = SR5Actor|SR5Item|Scene;\r\n/**\r\n * Converts a game's data model from source version to a target version.\r\n * Extending classes are only required to handle items, actors, and scenes,\r\n *  other methods are implementable purely for convenience and atomicity.\r\n */\r\nexport abstract class VersionMigration {\r\n    static readonly MODULE_NAME = 'shadowrun5e';\r\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\r\n    static readonly NO_VERSION = '0';\r\n\r\n    private m_Abort: boolean = false;\r\n    private m_AbortReason: string;\r\n\r\n    /**\r\n     * The allowed version this migrator should be able to operate on.\r\n     */\r\n    public abstract get SourceVersion(): string;\r\n    /**\r\n     * The resulting version this migrator will produce.\r\n     */\r\n    public abstract get TargetVersion(): string;\r\n\r\n    public get SourceVersionFriendlyName(): string {\r\n        return `v${this.SourceVersion}`;\r\n    }\r\n    public get TargetVersionFriendlyName(): string {\r\n        return `v${this.TargetVersion}`;\r\n    }\r\n\r\n    /**\r\n     * Flag the migration to be aborted.\r\n     * @param reason The reason that the migration must be aborted, to be displayed\r\n     *  to the user and returned from the migration call.\r\n     */\r\n    protected abort(reason: string): void {\r\n        this.m_Abort = true;\r\n        this.m_AbortReason = reason;\r\n        ui.notifications?.error(`Data migration has been aborted: ${reason}`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Begin migration for the specified game.\r\n     * @param game The world that should be migrated.\r\n     */\r\n    public async Migrate(game: Game) {\r\n        ui.notifications?.info(`${game.i18n.localize('SR5.MIGRATION.BeginNotification')} ${this.SourceVersionFriendlyName} -> ${this.TargetVersionFriendlyName}.`);\r\n        ui.notifications?.warn(game.i18n.localize('SR5.MIGRATION.DoNotCloseNotification'), {\r\n            permanent: true,\r\n        });\r\n\r\n        // Map of entities to update, store until later to reduce chance of partial updates\r\n        // which may result in impossible game states.\r\n        const entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate> = new Map();\r\n\r\n        // Migrate World Items\r\n        await this.PreMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateItems(game, entityUpdates);\r\n        await this.PostMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate World Actors\r\n        await this.PreMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateActors(game, entityUpdates);\r\n        await this.PostMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate Actor Tokens\r\n        await this.PreMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateScenes(game, entityUpdates);\r\n        await this.PostMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Apply the updates, this should *always* work, now that parsing is complete.\r\n        await this.Apply(entityUpdates);\r\n\r\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\r\n        ui.notifications?.info(`${game.i18n.localize('SR5.MIGRATION.SuccessNotification')} ${this.TargetVersion}.`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Applies the specified mapping of entities, iteratively updating each.\r\n     * @param documentUpdates A mapping of document updateData pairs.\r\n     */\r\n    protected async Apply(documentUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\r\n        for (const [entity, { updateData, embeddedItems }] of documentUpdates) {\r\n\r\n            if (embeddedItems !== null) {\r\n                const actor = entity as SR5Actor;\r\n                // @ts-ignore\r\n                await actor.updateEmbeddedDocuments('Item', embeddedItems);\r\n            }\r\n\r\n            if (updateData !== null ) {\r\n                await entity.update(updateData, { enforceTypes: false });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through all scenes and migrate each if needed.\r\n     * @param game\r\n     * @param entityUpdates\r\n     */\r\n    protected async IterateScenes(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\r\n        // @ts-ignore // ignore null state\r\n        for (const scene of game.scenes.contents) {\r\n            try {\r\n                if (!(await this.ShouldMigrateSceneData(scene))) {\r\n                    continue;\r\n                }\r\n\r\n                // Migrate SceneData itself.\r\n                console.log(`Migrating Scene entity ${scene.name}`);\r\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(scene, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n\r\n                // Migrate embedded TokenDocument / ActorData within SceneData\r\n                for (const token of scene.data.tokens) {\r\n                    // Don't migrate tokens without or a linked actor.\r\n                    if (!token.actor || token.data.actorLink) continue;\r\n                    \r\n                    //@ts-ignore // TODO: foundry-vtt-types v10\r\n                    if (foundry.utils.isEmpty(token.actor.data)) continue;\r\n\r\n                    // @ts-ignore\r\n                    const updateData = await this.MigrateActorData(foundry.utils.duplicate(token.actor.data));\r\n\r\n                    expandObject(updateData);\r\n                    entityUpdates.set(token.actor, {\r\n                        updateData: updateData.data || null,\r\n                        embeddedItems: updateData.items || null\r\n                    });\r\n                }\r\n\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                if (foundry.utils.isEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(scene, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all items and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async IterateItems(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\r\n        // @ts-ignore // ignore null state\r\n        for (const item of game.items.contents) {\r\n            try {\r\n                if (!(await this.ShouldMigrateItemData(item.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Item: ${item.name}`);\r\n                const updateData = await this.MigrateItemData(item.data);\r\n\r\n                //@ts-ignore // TODO: foundry-vtt-types v10\r\n                if (foundry.utils.isEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                // @ts-ignore\r\n                entityUpdates.set(item, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all actors and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async IterateActors(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\r\n        // @ts-ignore // ignore null state\r\n        for (const actor of game.actors.contents) {\r\n            try {\r\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Actor ${actor.name}`);\r\n                console.log(actor);\r\n                // @ts-ignore\r\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\r\n                console.log(updateData);\r\n                let items = [];\r\n                if (updateData.items) {\r\n                    items = updateData.items;\r\n                    delete updateData.items;\r\n                }\r\n\r\n                expandObject(updateData);\r\n\r\n                entityUpdates.set(actor, {\r\n                    updateData,\r\n                    embeddedItems: items,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over an actor's items, updating those that need updating.\r\n     * @param actorData The actor to iterate over\r\n     * @param updateData The existing update data to merge into\r\n     */\r\n    protected async IterateActorItems(actorData: ShadowrunActorData, updateData) {\r\n        let hasItemUpdates = false;\r\n        // @ts-ignore\r\n        if (actorData.items !== undefined) {\r\n            const items = await Promise.all(\r\n                // @ts-ignore\r\n                actorData.items.map(async (itemData) => {\r\n                    if (itemData instanceof SR5Item) console.error('Shadowrun 5e | Migration encountered an Item when it should have encountered ItemData / Object');\r\n                    if (!await this.ShouldMigrateItemData(itemData)) return itemData;\r\n                    let itemUpdate = await this.MigrateItemData(itemData);\r\n\r\n                    hasItemUpdates = true;\r\n                    itemUpdate['_id'] = itemData._id;\r\n\r\n                    return mergeObject(itemData, itemUpdate.data, {\r\n                        enforceTypes: false,\r\n                        inplace: false,\r\n                    });\r\n                }),\r\n            );\r\n            if (hasItemUpdates) {\r\n                updateData.items = items;\r\n            }\r\n        }\r\n\r\n        return updateData;\r\n    }\r\n\r\n    /**\r\n     * Check if a scene requires updates.\r\n     * @param scene The scene to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified scene's data.\r\n     * @param scene The scene to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an item requires updates.\r\n     * @param item The item to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateItemData(item: ShadowrunItemData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified item's data.\r\n     * @param item The item to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateItemData(item: ShadowrunItemData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an actor requires updates.\r\n     * @param actor The actor to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateActorData(actor: ActorData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified actor's data.\r\n     * @param actor The actor to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateActorData(actor: ActorData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right after actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of document updates.\r\n     */\r\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Migrate a compendium pack\r\n     * @param pack\r\n     */\r\n    public async MigrateCompendiumPack(pack: CompendiumCollection<CompendiumCollection.Metadata>) {\r\n        if (!['Actor', 'Item', 'Scene'].includes(pack.metadata.type)) return;\r\n\r\n        // Begin by requesting server-side data model migration and get the migrated content\r\n        await pack.migrate({});\r\n        const documents = await pack.getDocuments();\r\n\r\n        // Iterate over compendium entries - applying fine-tuned migration functions\r\n        for (let document of documents) {\r\n            try {\r\n                let updateData: any = null;\r\n                if (pack.metadata.type === 'Item') {\r\n                    // @ts-ignore // TODO: vtt-types v9 document.data.type check added to type gate... but didn't work\r\n                    updateData = await this.MigrateItemData(foundry.utils.duplicate(document.data));\r\n\r\n                    //@ts-ignore // TODO: foundry-vtt-types v10\r\n                    if (foundry.utils.isEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (updateData.data) {\r\n                        expandObject(updateData.data);\r\n                        document.update(updateData.data);\r\n                    }\r\n\r\n                // TODO: Uncomment when foundry allows embeddeds to be updated in packs\r\n                //@ts-ignore\r\n                } else if (pack.metadata.type === 'Actor') {\r\n                    // @ts-ignore\r\n                    updateData = await this.MigrateActorData(foundry.utils.duplicate(document.data));\r\n\r\n                    //@ts-ignore // TODO: foundry-vtt-types v10\r\n                    if (foundry.utils.isEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (updateData.items) {\r\n                        await document.updateEmbeddedDocuments('Item', updateData.items);\r\n                    }\r\n\r\n                    if (updateData.effects) {\r\n                        await document.updateEmbeddedDocuments('Effect', updateData.effects);\r\n                    }\r\n\r\n                    if (updateData.data) {\r\n                        expandObject(updateData.data);\r\n                        await document.update(updateData.data);\r\n                    }\r\n\r\n                } else if (pack.metadata.type === 'Scene') {\r\n                    updateData = await this.MigrateSceneData(foundry.utils.duplicate(document.data));\r\n\r\n                    //@ts-ignore // TODO: foundry-vtt-types v10\r\n                    if (foundry.utils.isEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (updateData.data) {\r\n                        expandObject(updateData.data);\r\n                        await document.update(updateData.data);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        console.log(`Migrated all ${pack.metadata.type} entities from Compendium ${pack.collection}`);\r\n    }\r\n}\r\n\r\ntype DocumentUpdate = {\r\n    updateData: any;\r\n    embeddedItems: null | any[];\r\n};\r\n", "/**\r\n * Version 0.8 comes with a complete rework of the original roller design in ShadowrunRoller.\r\n * instead rolls are handled within the SuccessTest class or subclasses of that using ActionRollData as their basis.\r\n *\r\n * What class is to be used is defined within each action (active, followed, opposed, resist). Migration needs to map\r\n * these classes to their item types.\r\n */\r\nimport {VersionMigration} from \"../VersionMigration\";\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\nimport ShadowrunActorData = Shadowrun.ShadowrunActorData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class Version0_8_0 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.7.6';\r\n    }\r\n\r\n    get TargetVersion(): string {\r\n        return Version0_8_0.TargetVersion;\r\n    }\r\n\r\n    static get TargetVersion(): string {\r\n        return \"0.8.0\";\r\n    }\r\n\r\n    protected async ShouldMigrateItemData(data: ShadowrunItemData) {\r\n        return this._ShouldMigrateItemData(data);\r\n    }\r\n\r\n    protected _ShouldMigrateItemData(data: ShadowrunItemData): boolean {\r\n        return ['weapon', 'spell'].includes(data.type);\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene) {\r\n        return scene.tokens.size > 0;\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(data: ShadowrunActorData) {\r\n        // @ts-ignore\r\n        return data.items.contents.filter(i => this._ShouldMigrateItemData(i.data)).length > 0;\r\n    }\r\n\r\n    protected async MigrateItemData(data: ShadowrunItemData) {\r\n        const updateData: {\r\n            data?: object\r\n        } = {};\r\n\r\n        Helpers.injectActionTestsIntoChangeData(data.type, data, data);\r\n\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateActorData(data: ShadowrunActorData) {\r\n        let updateData: {\r\n            data?: object,\r\n            items?: object[]\r\n        } = {\r\n            items: []\r\n        };\r\n\r\n        updateData = await this.IterateActorItems(data, updateData);\r\n\r\n        // @ts-ignore//@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (updateData.data && foundry.utils.isEmpty(updateData.data)) delete updateData.data;\r\n        // @ts-ignore\r\n        if (updateData.items?.length === 0) delete updateData.items;\r\n\r\n        return updateData;\r\n    }\r\n}", "import { VersionMigration } from './VersionMigration';\r\nimport {Version0_8_0} from \"./versions/Version0_8_0\";\r\n\r\ntype VersionDefinition = {\r\n    versionNumber: string;\r\n    migration: VersionMigration;\r\n};\r\nexport class Migrator {\r\n    // Map of all version migrations to their target version numbers.\r\n    private static readonly s_Versions: VersionDefinition[] = [\r\n        { versionNumber: Version0_8_0.TargetVersion, migration: new Version0_8_0() },\r\n    ];\r\n\r\n    /**\r\n     * Check if the current world is empty of any migratable documents.\r\n     * \r\n     */\r\n    public static get isEmptyWorld(): boolean {\r\n        return game.actors?.contents.length === 0 &&\r\n               game.items?.contents.length === 0 &&\r\n               game.scenes?.contents.length === 0 &&\r\n               Migrator.onlySystemPacks\r\n    }\r\n\r\n    public static get onlySystemPacks(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return game.packs.contents.filter(pack => pack.metadata.packageType !== 'system' && pack.metadata.packageName !== 'shadowrun5e').length === 0;\r\n    }\r\n\r\n    public static async InitWorldForMigration() {\r\n        console.log('Shadowrun 5e | Initializing an empty world for future migrations');\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, game.system.version);\r\n    }\r\n\r\n    public static async BeginMigration() {\r\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION) as string;\r\n        if (currentVersion === undefined || currentVersion === null) {\r\n            currentVersion = VersionMigration.NO_VERSION;\r\n        }\r\n\r\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\r\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\r\n            return this.compareVersion(versionNumber, currentVersion) === 1;\r\n        });\r\n\r\n        // No migrations are required, exit.\r\n        if (migrations.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\r\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\r\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\r\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\r\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\r\n\r\n        const d = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\r\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\r\n                `<p>${localizedWarningDescription}</p>` +\r\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\r\n            buttons: {\r\n                ok: {\r\n                    label: localizedWarningBegin,\r\n                    callback: () => this.migrate(migrations),\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        d.render(true);\r\n    }\r\n\r\n    private static async migrate(migrations: VersionDefinition[]) {\r\n        // we want to apply migrations in ascending order until we're up to the latest\r\n        migrations.sort((a, b) => {\r\n            return this.compareVersion(a.versionNumber, b.versionNumber);\r\n        });\r\n\r\n        await this.migrateWorld(game, migrations);\r\n        await this.migrateCompendium(game, migrations);\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\r\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\r\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\r\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\r\n        const packsDialog = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\r\n                `<p>${localizedSuccessDescription}</p>` +\r\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: localizedSuccessConfirm,\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        packsDialog.render(true);\r\n    }\r\n\r\n    /**\r\n     * Migrate all world objects\r\n     * @param game\r\n     * @param migrations\r\n     */\r\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\r\n        // Run the migrations in order\r\n        for (const { migration } of migrations) {\r\n            await migration.Migrate(game);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over all world compendium packs\r\n     * @param game Game that will be migrated\r\n     * @param migrations Instances of the version migration\r\n     */\r\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\r\n        // Migrate World Compendium Packs\r\n        const packs = game.packs?.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.type));\r\n\r\n        if (!packs) return;\r\n\r\n        // Run the migrations in order on each pack.\r\n        for (const pack of packs) {\r\n            for (const { migration } of migrations) {\r\n                await migration.MigrateCompendiumPack(pack);\r\n            }\r\n        }\r\n    }\r\n\r\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\r\n    // updated for typescript\r\n    /**\r\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    public static compareVersion(v1: string, v2: string) {\r\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\r\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\r\n        const k = Math.min(v1.length, v2.length);\r\n        for (let i = 0; i < k; ++i) {\r\n            if (s1[i] > s2[i]) return 1;\r\n            if (s1[i] < s2[i]) return -1;\r\n        }\r\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\r\n    }\r\n}\r\n", "// game settings for shadowrun 5e\r\n\r\nimport { VersionMigration } from './migrator/VersionMigration';\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\n\r\nexport const registerSystemSettings = () => {\r\n\r\n    /**\r\n     * Register diagonal movement rule setting\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\r\n        name: 'SETTINGS.DiagonalMovementName',\r\n        hint: 'SETTINGS.DiagonalMovementDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: String,\r\n        default: '1-2-1',\r\n        // @ts-ignore\r\n        choices: {\r\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\r\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\r\n            'EUCL': 'SETTINGS.Euclidean',\r\n        },\r\n        onChange: (rule) => {\r\n            if (canvas.ready){\r\n                // @ts-ignore // TODO: foundry-vtt-types diagonalRule doesn't exist anymore. Is it even working?\r\n                canvas.grid.diagonalRule = rule\r\n            }\r\n        },\r\n    });\r\n\r\n    /**\r\n     * Default limit behavior\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\r\n        name: 'SETTINGS.ApplyLimitsName',\r\n        hint: 'SETTINGS.ApplyLimitsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    // game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\r\n    //     name: 'SETTINGS.DisplayDefaultRollCardName',\r\n    //     hint: 'SETTINGS.DisplayDefaultRollCardDescription',\r\n    //     scope: 'user',\r\n    //     config: true,\r\n    //     type: Boolean,\r\n    //     default: false,\r\n    // });\r\n\r\n    /**\r\n     * Track system version upon which a migration was last applied\r\n     */\r\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\r\n        name: 'System Data Version.',\r\n        scope: 'world',\r\n        config: false,\r\n        type: String,\r\n        default: '0',\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\r\n        name: 'SETTINGS.ShowGlitchAnimationName',\r\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput, {\r\n        name: 'SETTINGS.ShowTokenNameForChatOutputName',\r\n        hint: 'SETTINGS.ShowTokenNameForChatOutputDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    // game.settings.register(SYSTEM_NAME, FLAGS.WhisperOpposedTestsToTargetedPlayers, {\r\n    //     name: 'SETTINGS.WhisperOpposedTestsToTargetedPlayers',\r\n    //     hint: 'SETTINGS.WhisperOpposedTestsToTargetedPlayersDescription',\r\n    //     scope: 'world',\r\n    //     config: true,\r\n    //     type: Boolean,\r\n    //     default: true,\r\n    // });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills, {\r\n         name: 'SETTINGS.OnlyAllowRollOnDefaultableSkills',\r\n        hint: 'SETTINGS.OnlyAllowRollOnDefaultableSkillsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails, {\r\n        name: 'SETTINGS.ShowSkillsWithDetails',\r\n        hint: 'SETTINGS.ShowSkillsWithDetailsDescription',\r\n        scope: 'client',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat, {\r\n         name: 'SETTINGS.OnlyAutoRollNPCInCombat',\r\n        hint: 'SETTINGS.OnlyAutoRollNPCInCombatDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.TokenHealthBars, {\r\n        name: 'SETTINGS.TokenHealthBars',\r\n        hint: 'SETTINGS.TokenHealthBarsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n    });\r\n\r\n    /**\r\n     * Control if GM triggered chat messages should hide critical message parts.\r\n     *\r\n     * These parts will only show to players that have appropriate permissions on the used\r\n     * actor for testing.\r\n     */\r\n    game.settings.register(SYSTEM_NAME, FLAGS.HideGMOnlyChatContent, {\r\n        name: 'SETTINGS.HideGMOnlyChatContent',\r\n        hint: 'SETTINGS.HideGMOnlyChatContentDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false\r\n    });\r\n\r\n    /**\r\n     * Control Test behaviour and consumption of necessary ressources for it.\r\n     * \r\n     * When set to true tests will NOT roll should one ressource be missing.\r\n     * \r\n     * This can be used to prevent edge rules to be used, when an actor doesn't have edge\r\n     * and other ressources.\r\n     */\r\n    game.settings.register(SYSTEM_NAME, FLAGS.MustHaveRessourcesOnTest, {\r\n        name: 'SETTINGS.MustHaveRessourcesOnTest',\r\n        hint: 'SETTINGS.MustHaveRessourcesOnTestDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false\r\n    })\r\n};\r\n", "//@ts-nocheck // This is JavaScript code.\r\n/**\r\n * All functions have been taken from : https://gitlab.com/foundrynet/dnd5e/-/blob/master/module/effects.js\r\n *\r\n * There have been some alterations made to fit the Shadowrun5e system.\r\n */\r\n\r\nimport {SR5Actor} from \"./actor/SR5Actor\";\r\nimport {SR5Item} from \"./item/SR5Item\";\r\nimport {Helpers} from \"./helpers\";\r\nimport EffectsSheetData = Shadowrun.EffectsSheetData;\r\n\r\n/**\r\n * Manage Active Effect instances through the Actor Sheet via effect control buttons.\r\n * @param {MouseEvent} event      The left-click event on the effect control\r\n * @param {Actor|Item} owner      The owning entity which manages this effect\r\n */\r\nexport async function onManageActiveEffect(event, owner: SR5Actor|SR5Item) {\r\n    // NOTE: This here is temporary until FoundryVTT has built-in support for nested item updates.\r\n    if ( owner.isOwned )\r\n        return ui.notifications.warn(\"Managing Active Effects within an Owned Item is not currently supported and will be added in a subsequent update.\");\r\n\r\n    event.preventDefault();\r\n    // These element grabs rely heavily on HTML structure within the templates.\r\n    const icon = event.currentTarget;\r\n    const item = event.currentTarget.closest('.list-item');\r\n    const effect = item.dataset.itemId ? owner.effects.get(item.dataset.itemId) : null;\r\n    // The HTML dataset must be defined\r\n    switch (icon.dataset.action) {\r\n        case \"create\":\r\n            return owner.createEmbeddedDocuments('ActiveEffect', [{\r\n                label: game.i18n.localize(\"SR5.ActiveEffect.New\"),\r\n                // icon: \"icons/svg/aura.svg\",\r\n                origin: owner.uuid,\r\n                \"duration.rounds\": item.dataset.effectType === \"temporary\" ? 1 : undefined,\r\n                disabled: item.dataset.effectType === \"inactive\"\r\n            }]);\r\n\r\n        case \"edit\":\r\n            return effect.sheet.render(true);\r\n\r\n        case \"delete\":\r\n            const userConsented = await Helpers.confirmDeletion();\r\n            if (!userConsented) return;\r\n\r\n            return effect.delete();\r\n\r\n        case \"toggle\":\r\n            return effect.toggleDisabled();\r\n        case \"open-origin\":\r\n            return effect.renderSourceSheet();\r\n\r\n        default:\r\n            console.error(`An active effect with the id '${effect}' couldn't be managed as no action has been defined within the template.`);\r\n            return;\r\n    }\r\n}\r\n\r\n/**\r\n * Prepare the data structure for Active Effects which are currently applied to an Actor or Item.\r\n * @param {ActiveEffect[]} effects    The array of Active Effect instances to prepare sheet data for\r\n * @return {object}                   Data for rendering\r\n */\r\nexport function prepareActiveEffectCategories(effects): EffectsSheetData {\r\n\r\n    // Define effect header categories\r\n    const categories = {\r\n        temporary: {\r\n            type: \"temporary\",\r\n            label: game.i18n.localize(\"SR5.ActiveEffect.Types.Temporary\"),\r\n            effects: []\r\n        },\r\n        passive: {\r\n            type: \"passive\",\r\n            label: game.i18n.localize(\"SR5.ActiveEffect.Types.Passive\"),\r\n            effects: []\r\n        },\r\n        inactive: {\r\n            type: \"inactive\",\r\n            label: game.i18n.localize(\"SR5.ActiveEffect.Types.Inactive\"),\r\n            effects: []\r\n        }\r\n    };\r\n\r\n    // Iterate over active effects, classifying them into categories\r\n    for (let effect of effects) {\r\n        effect._getSourceName(); // Trigger a lookup for the source name\r\n        if (effect.disabled) categories.inactive.effects.push(effect);\r\n        else if (effect.isTemporary) categories.temporary.effects.push(effect);\r\n        else categories.passive.effects.push(effect);\r\n    }\r\n    return categories;\r\n}", "/**\r\n * Utils used in DocumentSheet classes\r\n */\r\n\r\nimport Tagify from '@yaireo/tagify';\r\nimport { SR5 } from '../config';\r\n\r\n// A single whitelist / dropdown / tag element\r\ninterface TagData {\r\n    // Identification value\r\n    id: string\r\n    // Display information for id\r\n    value: string\r\n}\r\n\r\ninterface TagifyOptions {\r\n    // Allowed tag inputs / dropdown content for selection\r\n    whitelist?: TagData[]\r\n    // tagify.dropdown.maxItems => max items shown on dropdown\r\n    maxItems?: number\r\n    // Tags to be pre-applied\r\n    tags?: TagData[]\r\n}\r\n\r\n/**\r\n * Create a tagify instance for a given DOM element.\r\n * \r\n * For tagify information, check this: https://github.com/yairEO/tagify\r\n * \r\n * @param input The dom input element for a tagify element to be created onto.\r\n */\r\nexport function createTagify(input: HTMLInputElement|HTMLTextAreaElement|null, options: TagifyOptions = {}) {\r\n    const tagify = new Tagify(input, {\r\n        enforceWhitelist: true,\r\n        editTags: false,\r\n        skipInvalid: true,\r\n        dropdown: {\r\n            maxItems: options.maxItems,\r\n            fuzzySearch: true,\r\n            enabled: 0,\r\n            searchKeys: [\"id\", \"value\"]\r\n        }\r\n    });\r\n\r\n\r\n    tagify.whitelist = options.whitelist ?? [];\r\n    tagify.addTags(options.tags ?? []);\r\n\r\n    return tagify;\r\n}", "import {Helpers} from '../helpers';\r\nimport {SR5Item} from './SR5Item';\r\nimport {SR5} from \"../config\";\r\nimport {onManageActiveEffect, prepareActiveEffectCategories} from \"../effects\";\r\nimport {ItemData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs\";\r\nimport { createTagify } from '../utils/sheets';\r\n\r\n/**\r\n * Extend the basic ItemSheet with some very simple modifications\r\n */\r\nexport class SR5ItemSheet extends ItemSheet {\r\n    private _shownDesc: any[] = [];\r\n    private _scroll: string;\r\n\r\n    /**\r\n     * Extend and override the default options used by the Simple Item Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        // @ts-ignore // mergeObject breaks TypeScript typing. Should be fine.\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'item'],\r\n            width: 720,\r\n            height: 450,\r\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates/item/';\r\n        return `${path}${this.item.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Item sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    async getData(options) {\r\n        let data = super.getData(options);\r\n\r\n        // Rework v9 style data mapping to v10 style, while waiting for foundry-vtt-types to be update to v10.\r\n        //@ts-ignore\r\n        data.type = data.data.type;\r\n        // data.data = data.system = data.data;\r\n        //@ts-ignore\r\n        data.system = data.item.system;\r\n        //@ts-ignore // TODO: remove TODO: foundry-vtt-types v10\r\n        data.data = data.item.system;\r\n        const itemData = this.document.system;\r\n\r\n        if (itemData.action) {\r\n            try {\r\n                const action = itemData.action as any;\r\n                if (itemData.action.mod === 0) delete action.mod;\r\n                if (action.limit === 0) delete action.limit;\r\n                if (action.damage) {\r\n                    if (action.damage.mod === 0) delete action.damage.mod;\r\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\r\n                }\r\n                if (action.limit) {\r\n                    if (action.limit.mod === 0) delete action.limit.mod;\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n\r\n        if (itemData.technology) {\r\n            try {\r\n                const technology = itemData.technology as any;\r\n                if (technology.rating === 0) delete technology.rating;\r\n                if (technology.quantity === 0) delete technology.quantity;\r\n                if (technology.cost === 0) delete technology.cost;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        data['config'] = SR5;\r\n        const items = this.item.items;\r\n        const [ammunition, weaponMods, armorMods] = items.reduce(\r\n            (parts: [ItemData[], ItemData[], ItemData[]], item: SR5Item) => {\r\n                const itemData = item.toObject();\r\n                //@ts-ignore\r\n                itemData.descriptionHTML = this.enrichEditorFieldToHTML(itemData.system.description.value);\r\n\r\n                //@ts-ignore\r\n                if (item.type === 'ammo') parts[0].push(itemData); // TODO: foundry-vtt-types v10\r\n                //@ts-ignore TODO: foundry-vtt-types v10\r\n                if (item.type === 'modification' && \"type\" in item.system && item.system.type === 'weapon') parts[1].push(itemData);\r\n                //@ts-ignore TODO: foundry-vtt-types v10\r\n                if (item.type === 'modification' && \"type\" in item.system && item.system.type === 'armor') parts[2].push(itemData);\r\n                \r\n                return parts;\r\n            },\r\n            [[], [], []],\r\n        );\r\n        data['ammunition'] = ammunition;\r\n        data['weaponMods'] = weaponMods;\r\n        data['armorMods'] = armorMods;\r\n        data['activeSkills'] = this._getSortedActiveSkillsForSelect();\r\n        data['attributes'] = this._getSortedAttributesForSelect();\r\n        data['limits'] = this._getSortedLimitsForSelect();\r\n\r\n        // Active Effects data.\r\n        data['effects'] = prepareActiveEffectCategories(this.document.effects);\r\n\r\n        if (this.item.isHost) {\r\n            data['markedDocuments'] = this.item.getAllMarkedDocuments();\r\n        }\r\n\r\n        if (this.item.canBeNetworkController) {\r\n            data['networkDevices'] = this.item.networkDevices;\r\n        }\r\n\r\n        if (this.item.canBeNetworkDevice) {\r\n            data['networkController'] = this.item.networkController;\r\n        }\r\n\r\n        // Provide action parts with all test variantes.\r\n        // @ts-ignore // TODO: put 'opposed test types' into config (see data.config)\r\n        data.tests = game.shadowrun5e.tests;\r\n        // @ts-ignore\r\n        data.opposedTests = game.shadowrun5e.opposedTests;\r\n        // @ts-ignore\r\n        data.activeTests = game.shadowrun5e.activeTests;\r\n        // @ts-ignore\r\n        data.resistTests = game.shadowrun5e.resistTests;\r\n\r\n        // @ts-ignore TODO: foundry-vtt-types v10\r\n        data.descriptionHTML = this.enrichEditorFieldToHTML(this.item.system.description.value);\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Help enriching editor field values to HTML used to display editor values as read-only HTML in sheets.\r\n     * \r\n     * @param editorValue A editor field value like Item.system.description.value\r\n     * @param options TextEditor, enrichHTML.options passed through\r\n     * @returns Enriched HTML result\r\n     */\r\n    enrichEditorFieldToHTML(editorValue: string, options:any={async: false}): string {\r\n        return TextEditor.enrichHTML(editorValue, options);\r\n    }\r\n\r\n    /**\r\n     * Action limits currently contain limits for all action types. Be it matrix, magic or physical.\r\n     */\r\n    _getSortedLimitsForSelect(): Record<string, string> {\r\n        return Helpers.sortConfigValuesByTranslation(SR5.limits);\r\n    }\r\n\r\n    /**\r\n     * Sorted (by translation) actor attributes.\r\n     */\r\n    _getSortedAttributesForSelect(): Record<string, string> {\r\n        return Helpers.sortConfigValuesByTranslation(SR5.attributes);\r\n    }\r\n\r\n    /**\r\n     * Sorted (by translation) active skills either from the owning actor or general configuration.\r\n     */\r\n    _getSortedActiveSkillsForSelect() {\r\n        // We need the actor owner, instead of the item owner. See actorOwner jsdoc for details.\r\n        const actor = this.item.actorOwner;\r\n        // Fallback for actors without skills.\r\n        if (!actor || actor.isIC()) return Helpers.sortConfigValuesByTranslation(SR5.activeSkills);\r\n\r\n        const activeSkills = Helpers.sortSkills(actor.getActiveSkills());\r\n\r\n        const activeSkillsForSelect = {};\r\n        for (const [id, skill] of Object.entries(activeSkills)) {\r\n            // Legacy skills have no name, but their name is their id!\r\n            // Custom skills have a name and their id is random.\r\n            const key = skill.name || id;\r\n            const label = skill.label || skill.name;\r\n            activeSkillsForSelect[key] = label;\r\n        }\r\n\r\n        return activeSkillsForSelect;\r\n    }\r\n\r\n    _getNetworkDevices(): SR5Item[] {\r\n        // return NetworkDeviceFlow.getNetworkDevices(this.document);\r\n        return [];\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html -  The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        Helpers.setupCustomCheckbox(this, html);\r\n\r\n        /**\r\n         * Drag and Drop Handling\r\n         */\r\n        //@ts-ignore\r\n        this.form.ondragover = (event) => this._onDragOver(event);\r\n        //@ts-ignore\r\n        this.form.ondrop = (event) => this._onDrop(event);\r\n\r\n        // Active Effect management\r\n        html.find(\".effect-control\").click(event => onManageActiveEffect(event, this.document));\r\n\r\n        /**\r\n         * General item handling\r\n         */\r\n        html.find('.edit-item').click(this._onEditItem.bind(this));\r\n        html.find('.open-source').on('click', this._onOpenSource.bind(this));\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.list-item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n        html.find('.hidden').hide();\r\n        html.find('.entity-remove').on('click', this._onEntityRemove.bind(this));\r\n\r\n        /**\r\n         * Weapon item specific\r\n         */\r\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\r\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\r\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\r\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\r\n\r\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\r\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\r\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\r\n        /**\r\n         * SIN item specific\r\n         */\r\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\r\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\r\n\r\n        html.find('.network-clear').on('click', this._onRemoveAllNetworkDevices.bind(this));\r\n        html.find('.network-device-remove').on('click', this._onRemoveNetworkDevice.bind(this));\r\n\r\n        // Marks handling\r\n        html.find('.marks-qty').on('change', this._onMarksQuantityChange.bind(this));\r\n        html.find('.marks-add-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, 1));\r\n        html.find('.marks-remove-one').on('click', async (event) =>\r\n         this._onMarksQuantityChangeBy(event, -1));\r\n        html.find('.marks-delete').on('click', this._onMarksDelete.bind(this));\r\n        html.find('.marks-clear-all').on('click', this._onMarksClearAll.bind(this));\r\n\r\n        // Origin Link handling\r\n        html.find('.origin-link').on('click', this._onOpenOriginLink.bind(this));\r\n        html.find('.controller-remove').on('click', this._onControllerRemove.bind(this));\r\n\r\n        // Prepare listeners only applied to item type action\r\n        if (this.document.isAction()) {\r\n            this._createActionModifierTagify(html);\r\n            \r\n        }\r\n    }\r\n\r\n    async _onDrop(event) {\r\n        if (!game.items || !game.actors || !game.scenes) return;\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // Parse drop data.\r\n        let data;\r\n        try {\r\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n        } catch (err) {\r\n            return console.log('Shadowrun 5e | drop error');\r\n        }\r\n\r\n        if (!data) return;\r\n\r\n        // Add items to a weapons modification / ammo\r\n        if (this.item.isWeapon && data.type === 'Item') {\r\n            let item;\r\n            // Case 1 - Data explicitly provided\r\n            if (data.data) {\r\n                if (this.item.isOwned && data.actorId === this.item.actor?.id && data.data._id === this.item.id) {\r\n                    return console.warn('Shadowrun 5e | Cant drop items onto themself');\r\n                }\r\n                item = data;\r\n            // Case 2 - From a Compendium Pack\r\n            } else if (data.pack) {\r\n                item = await Helpers.getEntityFromCollection(data.pack, data.id);\r\n            // Case 3 - From a World Entity\r\n            } else {\r\n                item = await fromUuid(data.uuid);\r\n            }\r\n\r\n            // Provide readable error for failing item retrieval assumptions.\r\n            if (!item) return console.error('Shadowrun 5e | Item could not be created from DropData', data);\r\n\r\n            return await this.item.createNestedItem(item._source);\r\n        }\r\n\r\n        // Add items to hosts WAN.\r\n        if (this.item.isHost && data.type === 'Actor') {\r\n            const actor = await fromUuid(data.uuid);\r\n            if (!actor || !actor.id) return console.error('Shadowrun 5e | Actor could not be retrieved from DropData', data);\r\n            return await this.item.addIC(actor.id , data.pack);\r\n        }\r\n\r\n        // Add items to a network (PAN/WAN).\r\n        if (this.item.canBeNetworkController && data.type === 'Item') {\r\n            const item = await fromUuid(data.uuid) as SR5Item;\r\n\r\n            if (!item || !item.id) return console.error('Shadowrun 5e | Item could not be retrieved from DropData', data);\r\n            \r\n            return await this.item.addNetworkDevice(item);\r\n        }\r\n    }\r\n\r\n    _eventId(event) {\r\n        event.preventDefault();\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    _onOpenSource(event) {\r\n        event.preventDefault();\r\n        this.item.openSource();\r\n    }\r\n\r\n    async _onEditItem(event) {\r\n        const item = this.item.getOwnedItem(this._eventId(event));\r\n        if (item) {\r\n            item.sheet?.render(true);\r\n        }\r\n    }\r\n\r\n    async _onEntityRemove(event) {\r\n        event.preventDefault();\r\n\r\n        // Grab the data position to remove the correct entity from the list.\r\n        const entityRemove = $(event.currentTarget).closest('.entity-remove');\r\n        const list = entityRemove.data('list');\r\n        const position = entityRemove.data('position');\r\n\r\n        if (!list) return;\r\n\r\n        switch (list) {\r\n            // Handle Host item lists...\r\n            case 'ic':\r\n                await this.item.removeIC(position);\r\n                break;\r\n        }\r\n    }\r\n\r\n    async _onAddLicense(event) {\r\n        event.preventDefault();\r\n        await this.item.addNewLicense();\r\n    }\r\n\r\n    async _onRemoveLicense(event) {\r\n        event.preventDefault();\r\n        const index = event.currentTarget.dataset.index;\r\n        if (index >= 0) await this.item.removeLicense(index);\r\n    }\r\n\r\n    async _onWeaponModRemove(event) {\r\n        await this._onOwnedItemRemove(event);\r\n    }\r\n\r\n    async _onWeaponModEquip(event) {\r\n        await this.item.equipWeaponMod(this._eventId(event));\r\n    }\r\n\r\n    async _onAddWeaponMod(event) {\r\n        event.preventDefault();\r\n        const type = 'modification';\r\n        // TODO: Move this into DefaultValues...\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            system: {type: 'weapon'}\r\n        };\r\n        // @ts-ignore\r\n        // itemData.data.type = 'weapon';\r\n        // @ts-ignore\r\n        const item = new SR5Item(itemData, {parent: this.item});\r\n        //@ts-ignore TODO: foundry-vtt-types v10\r\n        await this.item.createNestedItem(item._source);\r\n    }\r\n\r\n    async _onAmmoReload(event) {\r\n        event.preventDefault();\r\n        await this.item.reloadAmmo();\r\n    }\r\n\r\n    async _onAmmoRemove(event) {\r\n        await this._onOwnedItemRemove(event);\r\n    }\r\n\r\n    async _onAmmoEquip(event) {\r\n        await this.item.equipAmmo(this._eventId(event));\r\n    }\r\n\r\n    async _onAddNewAmmo(event) {\r\n        event.preventDefault();\r\n        const type = 'ammo';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type\r\n        };\r\n        // @ts-ignore\r\n        const item = new SR5Item(itemData, {parent: this.item});\r\n        // @ts-ignore TODO: foundry-vtt-types v10\r\n        await this.item.createNestedItem(item._source);\r\n    }\r\n\r\n    async _onOwnedItemRemove(event) {\r\n         event.preventDefault();1\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    async _onRemoveAllNetworkDevices(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.item.removeAllNetworkDevices();\r\n    }\r\n\r\n    async _onRemoveNetworkDevice(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const networkDeviceIndex = Helpers.parseInputToNumber(event.currentTarget.closest('.list-item').dataset.listItemIndex);\r\n\r\n        await this.item.removeNetworkDevice(networkDeviceIndex);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /**\r\n     * Add a tagify element for an action-modifier dom element.\r\n     * \r\n     * Usage: Call method after render with a singular item's html sub-dom-tree.\r\n     * \r\n     * @param html see DocumentSheet.activateListeners#html param for documentation.\r\n     */\r\n    _createActionModifierTagify(html) {\r\n        var inputElement = html.find('input#action-modifier').get(0);\r\n\r\n        // Tagify expects this format for localized tags.\r\n        const whitelist = Object.keys(SR5.modifierTypes).map(modifier => ({\r\n            value: game.i18n.localize(SR5.modifierTypes[modifier]),\r\n            id: modifier\r\n        }));\r\n\r\n        // Tagify dropdown should show all whitelist tags. \r\n        const maxItems = Object.keys(SR5.modifierTypes).length;\r\n\r\n        // Use localized label as value, and modifier as the later to be extracted value \r\n        const modifiers = this.document.system.action?.modifiers ?? []; \r\n        const tags = modifiers.map(modifier => ({\r\n            value: game.i18n.localize(SR5.modifierTypes[modifier]),\r\n            id: modifier\r\n        }));\r\n\r\n        const tagify = createTagify(inputElement, {whitelist, maxItems, tags});\r\n\r\n        html.find('input#action-modifier').on('change', async (event) => {\r\n            const modifiers = tagify.value.map(tag => tag.id);\r\n            // render would loose tagify input focus. submit on close will save.\r\n            await this.document.update({'system.action.modifiers': modifiers}, {render:false});\r\n        });\r\n    }\r\n\r\n    /** This is needed to circumvent Application.close setting closed state early, due to it's async animation\r\n     * - The length of the closing animation can't be longer then any await time in the closing cycle\r\n     * - FormApplication._onSubmit will otherwise set ._state to RENDERED even if the Application window has closed already\r\n     * - Subsequent render calls then will show the window again, due to it's state\r\n     *\r\n     * @private\r\n     */\r\n    private fixStaleRenderedState() {\r\n        if (this._state === Application.RENDER_STATES.RENDERED && ui.windows[this.appId] === undefined) {\r\n            console.warn(`SR5ItemSheet app for ${this.document.name} is set as RENDERED but has no window registered. Fixing app internal render state. This is a known bug.`);\r\n            // Hotfixing instead of this.close() since FormApplication.close() expects form elements, which don't exist anymore.\r\n            this._state = Application.RENDER_STATES.CLOSED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(force = false, options = {}) {\r\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\r\n        // this.fixStaleRenderedState();\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(force, options);\r\n        this._restoreScrollPositions();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n\r\n    async _onMarksQuantityChange(event) {\r\n        event.stopPropagation();\r\n\r\n        if (!this.object.isHost) return;\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const markedIdDocuments = Helpers.getMarkIdDocuments(markId);\r\n        if (!markedIdDocuments) return;\r\n        const {scene, target, item} = markedIdDocuments;\r\n        if (!scene || !target) return; // item can be undefined.\r\n\r\n        const marks = parseInt(event.currentTarget.value);\r\n        await this.object.setMarks(target, marks, {scene, item, overwrite: true});\r\n    }\r\n\r\n    async _onMarksQuantityChangeBy(event, by: number) {\r\n        event.stopPropagation();\r\n\r\n        if (!this.object.isHost) return;\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const markedIdDocuments = Helpers.getMarkIdDocuments(markId);\r\n        if (!markedIdDocuments) return;\r\n        const {scene, target, item} = markedIdDocuments;\r\n        if (!scene || !target) return; // item can be undefined.\r\n\r\n        await this.object.setMarks(target, by, {scene, item});\r\n    }\r\n\r\n    async _onMarksDelete(event) {\r\n        event.stopPropagation();\r\n\r\n        if (!this.object.isHost) return;\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.object.clearMark(markId);\r\n    }\r\n\r\n    async _onMarksClearAll(event) {\r\n        event.stopPropagation();\r\n\r\n        if (!this.object.isHost) return;\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.object.clearMarks();\r\n    }\r\n\r\n    async _onOpenOriginLink(event) {\r\n        event.preventDefault();\r\n\r\n        console.log('Shadowrun 5e | Opening PAN/WAN network controller');\r\n\r\n        const originLink = event.currentTarget.dataset.originLink;\r\n        const device = await fromUuid(originLink);\r\n        if (!device) return;\r\n\r\n        // @ts-ignore\r\n        device.sheet.render(true);\r\n    }\r\n\r\n    async _onControllerRemove(event) {\r\n        event.preventDefault();\r\n\r\n        await this.item.disconnectFromNetwork();\r\n    }\r\n}\r\n", "import {FLAGS, SYSTEM_NAME} from \"../constants\";\r\nimport TrackType = Shadowrun.TrackType;\r\n\r\nexport class SR5Token extends Token {\r\n    // @ts-ignore Ignore getBarAttribute from Token\r\n    override _drawBar(number: number, bar: PIXI.Graphics, data: ReturnType<Token['getBarAttribute']>){\r\n        const tokenHealthBars = game.settings.get(SYSTEM_NAME, FLAGS.TokenHealthBars);\r\n        // FoundryVTT draws resource bars as full/good when the value is the\r\n        // same as the max and empty/bad at 0 (colored along a gradient).\r\n        // Shadowrun condition trackers count up from 0 to the maximum.\r\n        // We flip the values from Shadowrun format to FoundryVTT format here\r\n        // for drawing.\r\n        if (tokenHealthBars && data && data.attribute.startsWith('track')) {\r\n            const track = data as unknown as TrackType;\r\n            track.value = track.max - track.value;\r\n        }\r\n        super._drawBar(number, bar, data);\r\n    }\r\n}", "import {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {Helpers} from \"../helpers\";\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport {EffectChangeData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/effectChangeData\";\r\n\r\n\r\n\r\nexport class SR5ActiveEffect extends ActiveEffect {\r\n    /**\r\n     * Can be used to determine if the origin of the effect is an document that is owned by another document.\r\n     *\r\n     * A use case would be to check if the effect is applied by an actor owned item.\r\n     *\r\n     * The current approach is a bit simple, due to the limited effect use. Should there be a time of effects applied to\r\n     * items, this would need change.\r\n     */\r\n    public get isOriginOwned(): boolean {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (!this.origin) return false;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        const path = this.origin.split('.');\r\n\r\n        if (path[0] === 'Scene' && path.length === 6) return true;\r\n        if (path[0] === 'Actor' && path.length === 4) return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    public get source() {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return this.origin ? fromUuid(this.origin) : null;\r\n    }\r\n\r\n    /**\r\n     * Render the sheet of the active effect source\r\n     */\r\n    public async renderSourceSheet() {\r\n        const document = await this.source;\r\n        // @ts-ignore\r\n        return document?.sheet?.render(true);\r\n    }\r\n\r\n    async toggleDisabled() {\r\n        // @ts-ignore\r\n        return this.update({disabled: !this.disabled});\r\n    }\r\n\r\n    async disable(disabled) {\r\n        // @ts-ignore\r\n        return this.update({disabled});\r\n    }\r\n\r\n    //@ts-ignore // TODO: foundry-vtt-types\r\n    protected _applyCustom(actor: SR5Actor, change: EffectChangeData, current, delta, changes) {\r\n        return this._applyModify(actor, change, current, delta, changes);\r\n    }\r\n\r\n    /**\r\n     * Apply a modification to a ModifiableValue.\r\n     * Both direct key matches to the whole value and indirect matches to a value property are supported.\r\n     *\r\n     * @protected\r\n     */\r\n    //@ts-ignore // TODO: foundry-vtt-types\r\n    protected _applyModify(actor: SR5Actor, change: EffectChangeData, current, delta, changes) {\r\n        // Check direct key.\r\n        if (this._isKeyModifiableValue(actor, change.key)) {\r\n            const value = foundry.utils.getProperty(actor, change.key) as ModifiableValue;\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            value.mod.push({name: this.label, value: Number(change.value)});\r\n\r\n            return null;\r\n        }\r\n\r\n        // Check indirect key.\r\n        const nodes = change.key.split('.');\r\n        nodes.pop();\r\n        const indirectKey = nodes.join('.');\r\n\r\n        // Don't apply any changes if it's also not a indirect match.\r\n        if (this._isKeyModifiableValue(actor, indirectKey)) {\r\n            const value = foundry.utils.getProperty(actor, indirectKey) as ModifiableValue;\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            value.mod.push({name: this.label, value: Number(change.value)});\r\n\r\n            return null;\r\n        }\r\n\r\n        // If both indirect or direct didn't provide a match, assume the user want's to add to whatever value choosen\r\n        //@ts-ignore // TODO: foundry-vtt-types\r\n        return super._applyAdd(actor, change, current, delta, changes);\r\n    }\r\n\r\n    /**\r\n     * Overriding can be tricky if the overwritten value is a ModifiableValue with derived values.\r\n     *\r\n     * To keep the ActiveEffect workflow simple and still allow to override values that aren't a ModifiableValue,\r\n     * check for such values and give the ActorDataPreparation flow some hints.\r\n     *\r\n     * @protected\r\n     */\r\n    //@ts-ignore // TODO: foundry-vtt-types\r\n    protected _applyOverride(actor: SR5Actor, change: EffectChangeData, current, delta, changes) {\r\n        // Check direct key.\r\n        if (this._isKeyModifiableValue(actor, change.key)) {\r\n            const value = foundry.utils.getProperty(actor, change.key);\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            value.override = {name: this.label, value: Number(change.value)};\r\n            value.value = change.value;\r\n\r\n            return null;\r\n        }\r\n\r\n        // Check indirect key.\r\n        const nodes = change.key.split('.');\r\n        nodes.pop();\r\n        const indirectKey = nodes.join('.');\r\n\r\n        if (this._isKeyModifiableValue(actor, indirectKey)) {\r\n            const value = foundry.utils.getProperty(actor, indirectKey);\r\n            //@ts-ignore // TODO: foundry-vtt-types v10\r\n            value.override = {name: this.label, value: Number(change.value)};\r\n\r\n            return null;\r\n        }\r\n\r\n        // Neither a direct nor an indirect ModifiableValue match.\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return super._applyOverride(actor, change, current, delta, changes);\r\n    }\r\n\r\n    _isKeyModifiableValue(actor: SR5Actor, key: string): boolean {\r\n        const possibleValue = foundry.utils.getProperty(actor, key);\r\n        const possibleValueType = foundry.utils.getType(possibleValue);\r\n\r\n        return possibleValue && possibleValueType === 'Object' && Helpers.objectHasKeys(possibleValue, this.minValueKeys);\r\n    }\r\n\r\n    get minValueKeys(): string[] {\r\n        // Match against these keys, as the exact ModifiableValue layout might be different from time to time.\r\n        return ['value', 'mod'];\r\n    }\r\n}", "import { CombatantData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/module.mjs\";\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {FLAGS, SR, SYSTEM_NAME} from \"../constants\";\r\nimport {CombatRules} from \"../rules/CombatRules\";\r\nimport {SocketMessage} from \"../sockets\";\r\nimport SocketMessageData = Shadowrun.SocketMessageData;\r\n\r\n/**\r\n * Foundry combat implementation for Shadowrun5 rules.\r\n *\r\n * TODO: Store what combatants already acted and with what initiative base and dice they did. This can be used to alter\r\n *       initiative score without fully rerolling and maintain propper turn order after an actor raised they ini while\r\n *       stepping over other actors that already had their action phase in the current initiative pass.\r\n *       @PDF SR5#160 'Chaning Initiative'\r\n */\r\nexport class SR5Combat extends Combat {\r\n    // Overwrite foundry-vtt-types v9 combatTrackerSettings type definitions.\r\n    get settings() {\r\n        return super.settings as {resource: string, skipDefeated: boolean};\r\n    }\r\n\r\n    get initiativePass(): number {\r\n        return this.getFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass) as number || SR.combat.INITIAL_INI_PASS;\r\n    }\r\n\r\n    static async setInitiativePass(combat: SR5Combat, pass: number) {\r\n        await combat.unsetFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass);\r\n        await combat.setFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass, pass);\r\n    }\r\n\r\n    /**\r\n     * Use the given actors token to get the combatant.\r\n     * NOTE: The token must be used, instead of just the actor, as unlinked tokens will all use the same actor id.\r\n     */\r\n    getActorCombatant(actor: SR5Actor): undefined | any {\r\n        const token = actor.getToken();\r\n        if (!token) return;\r\n        return this.getCombatantByToken(token.id as string);\r\n    }\r\n\r\n    /**\r\n     * Add ContextMenu options to CombatTracker Entries -- adds the basic Initiative Subtractions\r\n     * @param html\r\n     * @param options\r\n     */\r\n    static addCombatTrackerContextOptions(html, options: any[]) {\r\n        options.push(\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByOne'),\r\n                icon: '<i class=\"fas fa-caret-down\"></i>',\r\n                callback: async (li) => {\r\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -1);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByFive'),\r\n                icon: '<i class=\"fas fa-angle-down\"></i>',\r\n                callback: async (li) => {\r\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -5);\r\n                    }\r\n                },\r\n            },\r\n            {\r\n                name: game.i18n.localize('SR5.COMBAT.ReduceInitByTen'),\r\n                icon: '<i class=\"fas fa-angle-double-down\"></i>',\r\n                callback: async (li) => {\r\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\r\n                    if (combatant) {\r\n                        const combat: SR5Combat = game.combat as unknown as SR5Combat;\r\n                        await combat.adjustInitiative(combatant, -10);\r\n                    }\r\n                },\r\n            },\r\n        );\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param combatant\r\n     * @param adjustment\r\n     */\r\n    async adjustInitiative(combatant: string | any, adjustment: number): Promise<void> {\r\n        combatant = typeof combatant === 'string' ? this.combatants.find((c) => c.id === combatant) : combatant;\r\n        if (!combatant || typeof combatant === 'string') {\r\n            console.error('Could not find combatant with id ', combatant);\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        await combatant.update({\r\n            initiative: Number(combatant.initiative) + adjustment,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle the change of an initiative pass. This needs owner permissions on the combat document.\r\n     * @param combatId\r\n     */\r\n    static async handleIniPass(combatId: string) {\r\n        const combat = game.combats?.get(combatId) as unknown as SR5Combat;\r\n        if (!combat) return;\r\n\r\n        const initiativePass = combat.initiativePass + 1;\r\n        // Start at the top!\r\n        const turn = 0;\r\n\r\n        // Collect all combatants ini changes for singular update.\r\n        const combatantsData: {_id: string|null, initiative: number}[] = [];\r\n        for (const combatant of combat.combatants) {\r\n            const initiative = CombatRules.reduceIniResultAfterPass(Number(combatant.initiative));\r\n            \r\n            combatantsData.push({\r\n                _id: combatant.id,\r\n                initiative\r\n            });\r\n        }\r\n\r\n        await SR5Combat.setInitiativePass(combat, initiativePass);\r\n        await combat.update({turn, combatants: combatantsData});\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Handle the change of a initiative round. This needs owner permission on the combat document.\r\n     * @param combatId\r\n     */\r\n    static async handleNextRound(combatId: string) {\r\n        const combat = game.combats?.get(combatId) as unknown as SR5Combat;\r\n        if (!combat) return;\r\n        await combat.resetAll();\r\n        await SR5Combat.setInitiativePass(combat, SR.combat.INITIAL_INI_PASS);\r\n\r\n        if (game.settings.get(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat)) {\r\n            await combat.rollNPC();\r\n        } else {\r\n            await combat.rollAll();\r\n        }\r\n\r\n        const turn = 0;\r\n        await combat.update({turn});\r\n    }\r\n\r\n    /**\r\n     * Make sure Shadowrun initiative order is applied.\r\n     */\r\n    setupTurns(): any[] {\r\n        const turns = super.setupTurns();\r\n        return turns.sort(SR5Combat.sortByRERIC);\r\n    }\r\n\r\n    static sortByRERIC(left, right): number {\r\n        // First sort by initiative value if different\r\n        const leftInit = Number(left.initiative);\r\n        const rightInit = Number(right.initiative);\r\n        if (isNaN(leftInit)) return 1;\r\n        if (isNaN(rightInit)) return -1;\r\n        if (leftInit > rightInit) return -1;\r\n        if (leftInit < rightInit) return 1;\r\n\r\n        // now we sort by ERIC\r\n        const genData = (actor): number[] => {\r\n            // There are broken scenes out there, which will try setting up a combat without valid actors.\r\n            if (!actor) return [0, 0, 0, 0];\r\n            // edge, reaction, intuition, coin flip\r\n            return [\r\n                Number(actor.getEdge().value),\r\n                Number(actor.findAttribute('reaction')?.value),\r\n                Number(actor.findAttribute('intuition')?.value),\r\n                // @ts-ignore\r\n                new Roll('1d2').evaluate({async: false}).total as number,\r\n            ];\r\n        };\r\n\r\n        const leftData = genData(left.actor);\r\n        const rightData = genData(right.actor);\r\n        // if we find a difference that isn't 0, return it\r\n        for (let index = 0; index < leftData.length; index++) {\r\n            const diff = rightData[index] - leftData[index];\r\n            if (diff !== 0) return diff;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Return the position in the current ini pass of the next undefeated combatant.\r\n     */\r\n    get nextUndefeatedTurnPosition(): number {\r\n        for (let [turnInPass, combatant] of this.turns.entries()) {\r\n            // Skipping is only interesting when moving forward.\r\n            if (this.turn !== null && turnInPass <= this.turn) continue;\r\n            // @ts-ignore\r\n            if (!combatant.defeated && combatant.initiative > 0) {\r\n                return turnInPass;\r\n            }\r\n        }\r\n        // The current turn is the last undefeated combatant. So go to the end and beeeeyooond.\r\n        return this.turns.length;\r\n    }\r\n\r\n    /**\r\n     * Return the position in the current ini pass of the next combatant that has an action phase left.\r\n     */\r\n    get nextViableTurnPosition(): number {\r\n        // Start at the next position after the current one.\r\n        for (let [turnInPass, combatant] of this.turns.entries()) {\r\n            // Skipping is only interesting when moving forward.\r\n            if (this.turn !== null && turnInPass <= this.turn) continue;\r\n            // @ts-ignore\r\n            if (combatant.initiative > 0) {\r\n                return turnInPass;\r\n            }\r\n        }\r\n        // The current turn is the last undefeated combatant. So go to the end and beeeeyooond.\r\n        return this.turns.length;\r\n    }\r\n\r\n    /**\r\n     * Determine wheter the current combat situation (current turn order) needs and can have an initiative pass applied.\r\n     * @return true means that an initiative pass must be applied\r\n     */\r\n    doIniPass(nextTurn: number): boolean {\r\n        // We're currently only stepping from combatant to combatant.\r\n        if (nextTurn < this.turns.length) return false;\r\n        // Prepare another possible initiative order.\r\n        const currentScores = this.combatants.map(combatant => Number(combatant.initiative));\r\n\r\n        return CombatRules.iniOrderCanDoAnotherPass(currentScores);\r\n    }\r\n\r\n    /**\r\n     * After all combatants have had their action phase (click on next 'turn') handle shadowrun rules for\r\n     * initiative pass and combat turn.\r\n     *\r\n     * As long as a combatant still has a positive initiative score left, go to the next pass.\r\n     *  Raise the Foundry turn and don't raise the Foundry round.\r\n     * As soons as all combatants have no initiative score left, go to the next combat round.\r\n     *  Reset the Foundry pass and don't raise the Foundry turn.\r\n     *\r\n     * Retrigger Initiative Rolls on each new Foundry round.\r\n     *\r\n     *\r\n     * * @Override\r\n     */\r\n    async nextTurn(): Promise<this | undefined> {\r\n        // Maybe advance to the next round/init pass\r\n        let nextRound = this.round;\r\n        let initiativePass = this.initiativePass;\r\n        // Get the next viable turn position.\r\n        let nextTurn = this.settings?.skipDefeated ?\r\n            this.nextUndefeatedTurnPosition :\r\n            this.nextViableTurnPosition;\r\n\r\n        // Start of the combat Handling\r\n        if (nextRound === 0 && initiativePass === 0) {\r\n            await this.startCombat();\r\n            return;\r\n        }\r\n\r\n        // Just step from one combatant to the next!\r\n        if (nextTurn < this.turns.length) {\r\n            await this.update({turn: nextTurn});\r\n            return;\r\n        }\r\n\r\n        // Initiative Pass Handling. Owner permissions are needed to change the initiative pass.\r\n        if (!game.user?.isGM && this.doIniPass(nextTurn)) {\r\n            await this._createDoIniPassSocketMessage();\r\n            return;\r\n        }\r\n\r\n        if (game.user?.isGM && this.doIniPass(nextTurn)) {\r\n            await SR5Combat.handleIniPass(this.id as string)\r\n            return;\r\n        }\r\n\r\n        // Initiative Round Handling.\r\n        // NOTE: It's not checked if the next is needed. This should result int he user noticing the turn going up, when it\r\n        //       maybe shouldn't and reporting a unhandled combat phase flow case.\r\n        return this.nextRound();\r\n    }\r\n\r\n    async startCombat() {\r\n        const nextRound = SR.combat.INITIAL_INI_ROUND;\r\n        const initiativePass = SR.combat.INITIAL_INI_PASS;\r\n        // Start at the top!\r\n        const nextTurn = 0;\r\n\r\n        await SR5Combat.setInitiativePass(this, initiativePass);\r\n        await this.update({round: nextRound, turn: nextTurn});\r\n\r\n        if (game.settings.get(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat)) {\r\n            await this.rollNPC();\r\n        } else {\r\n            await this.rollAll();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    async nextRound(): Promise<any> {\r\n        // Let Foundry handle time and some other things.\r\n        await super.nextRound();\r\n\r\n        // Owner permissions are needed to change the shadowrun initiative round.\r\n        if (!game.user?.isGM) {\r\n            await this._createDoNextRoundSocketMessage();\r\n        } else {\r\n            await SR5Combat.handleNextRound(this.id as string);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * use default behaviour but ALWAYS start at the top!\r\n     */\r\n    // @ts-ignore\r\n    async rollAll(options?): Promise<SR5Combat> {\r\n        const combat = await super.rollAll() as unknown as SR5Combat;\r\n        if (combat.turn !== 0)\r\n            await combat.update({turn: 0});\r\n        return combat;\r\n    }\r\n\r\n    /**\r\n     * Shadowrun starts at the top, except for subsequent initiative passes, then it depends on the new values.\r\n     */\r\n    // @ts-ignore\r\n    async rollInitiative(ids, options?): Promise<SR5Combat> {\r\n        const combat = await super.rollInitiative(ids, options) as SR5Combat;\r\n\r\n        if (this.initiativePass === SR.combat.INITIAL_INI_PASS)\r\n            await combat.update({turn: 0});\r\n\r\n        return combat;\r\n    }\r\n\r\n    /**\r\n     * This handler handles FoundryVTT hook preUpdateCombatant\r\n     *\r\n     * @param combatant The Combatant to update\r\n     * @param changed The changedData (tends to a diff)\r\n     * @param options\r\n     * @param id\r\n     */\r\n    static onPreUpdateCombatant(combatant: Combatant, changed, options, id) {\r\n        console.log('Shadowrun5e | Handle preUpdateCombatant to apply system rules', combatant, changed);\r\n\r\n        // Disallow invalid ini scores to be applied by any source.\r\n        if (changed.initiative) changed.initiative = CombatRules.getValidInitiativeScore(changed.initiative);\r\n    }\r\n\r\n    /**\r\n     * Alter initiative formula to include initiative pass reduction.\r\n     *\r\n     * NOTE: Should this here fail or be buggy, there always is SR5Combat.updateNewCombatants which can be uncommented in SR5Combat.rollInitiative\r\n     * @deprecated since Foundry 0.8. Kept for possible Foundry 0.7 support. Might just be not needed anymore during 0.8 lifecycle.\r\n     * @param combatant\r\n     */\r\n    _getInitiativeFormula(combatant: Combatant) {\r\n        if (this.initiativePass === SR.combat.INITIAL_INI_PASS) { // @ts-ignore\r\n            return super._getInitiativeFormula(combatant);\r\n        }\r\n\r\n        // Reduce for initiative passes until zero.\r\n        return SR5Combat._getSystemInitiativeFormula(this.initiativePass);\r\n    }\r\n\r\n    static _getSystemInitiativeBaseFormula() {\r\n        // @ts-ignore\r\n        return String(CONFIG.Combat.initiative.formula || game.system.data.initiative);\r\n    }\r\n\r\n    static _getSystemInitiativeFormula(initiativePass: number): string {\r\n        initiativePass = initiativePass > 1 ? initiativePass : 1;\r\n        const baseFormula = SR5Combat._getSystemInitiativeBaseFormula();\r\n        const ongoingIniPassModified = (initiativePass - 1) * -SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\r\n        return `max(${baseFormula} - ${ongoingIniPassModified}[Pass], 0)`;\r\n    }\r\n\r\n    static async _handleDoNextRoundSocketMessage(message: SocketMessageData) {\r\n        if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\r\n            console.error(`SR5Combat Socket Message ${FLAGS.DoNextRound} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\r\n            return;\r\n        }\r\n\r\n        return await SR5Combat.handleNextRound(message.data.id);\r\n    }\r\n\r\n    static async _handleDoInitPassSocketMessage(message: SocketMessageData) {\r\n        if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\r\n            console.error(`SR5Combat Socket Message ${FLAGS.DoInitPass} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\r\n            return;\r\n        }\r\n\r\n        return await SR5Combat.handleIniPass(message.data.id);\r\n    }\r\n\r\n    async _createDoNextRoundSocketMessage() {\r\n        await SocketMessage.emitForGM(FLAGS.DoNextRound, {id: this.id});\r\n    }\r\n\r\n    async _createDoIniPassSocketMessage() {\r\n        await SocketMessage.emitForGM(FLAGS.DoInitPass, {id: this.id});\r\n    }\r\n}\r\n\r\n/**\r\n * Since Foundry 0.8 Combat._getInitiativeFormula has been moved to Combatant._getInitiativeFormula.\r\n *\r\n *  This method enhances Combatant#_getInitiativeFormula. Check hooks.ts#init for when it comes into play.\r\n *\r\n *  During initiative roll modify the initiative result depending on the current combats initiative pass.\r\n */\r\nexport function _combatantGetInitiativeFormula() {\r\n    const combat = this.parent;\r\n    return SR5Combat._getSystemInitiativeFormula(combat.initiativePass);\r\n}", "/**\r\n * A GM-Tool to keep track of all players overwatch scores\r\n */\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class OverwatchScoreTracker extends Application {\r\n    static MatrixOverwatchDiceCount = '2d6';\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'overwatch-score-tracker';\r\n        options.classes = ['sr5'];\r\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\r\n        options.width = 450;\r\n        options.height = 'auto';\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    static addedActors = [];\r\n\r\n    getData(options) {\r\n        // Get list of user character actors\r\n        const actors = this._prepareCharacterActorsData();\r\n\r\n        // get actors manually added to the tracker by GM\r\n        OverwatchScoreTracker.addedActors.forEach(id => {\r\n            const actor = game.actors.get(id)\r\n            if (actor) {\r\n                actors.push(actor.toObject());\r\n            }\r\n        });\r\n\r\n        // Reference the currently displayed actors for better access.\r\n        this.actors = actors;\r\n\r\n        return {\r\n            actors,\r\n        };\r\n    }\r\n\r\n    _prepareCharacterActorsData() {\r\n        return game.users.reduce((acc, user) => {\r\n            if (!user.isGM && user.character) {\r\n                acc.push(user.character.toObject());\r\n            }\r\n            return acc;\r\n        }, []);\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-roll-15-minutes').on('click', this._rollFor15Minutes.bind(this));\r\n        html.find('.overwatch-score-add-actor').on('click', this._onAddActor.bind(this));\r\n    }\r\n\r\n    // returns the actor that this event is acting on\r\n    _getActorFromEvent(event) {\r\n        const id = $(event.currentTarget).closest('.list-item').data('actorId');\r\n        if (id) return game.actors.get(id);\r\n    }\r\n\r\n    _onAddActor(event) {\r\n        event.preventDefault();\r\n\r\n        const tokens = Helpers.getControlledTokens();\r\n        if (tokens.length === 0) {\r\n            return ui.notifications?.warn(game.i18n.localize('SR5.OverwatchScoreTracker.NotifyNoSelectedTokens'));\r\n        }\r\n\r\n        // Warn user about selected unlinked token actors.\r\n        const unlinkedActor = tokens.find(token => !token.data.actorLink);\r\n        if (unlinkedActor !== undefined) {\r\n            ui.notifications.warn(game.i18n.localize('SR5.OverwatchScoreTracker.OnlyLinkedActorsSupported'));\r\n        }\r\n\r\n        // Add linked token actors.\r\n        tokens.filter(token => token.data.actorLink).forEach(token => {\r\n            // Double check that the actor actually lives in the actors collection.\r\n            const actor = game.actors.get(token.data.actorId);\r\n            if (!actor) return;\r\n            if (this._isActorOnTracker(actor)) return;\r\n\r\n            OverwatchScoreTracker.addedActors.push(actor.id);\r\n        });\r\n\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Check if the given actor is already added and displayed on the current tracker.\r\n     *\r\n     * @param actor A actors collection actor.\r\n     * @returns {boolean} Will return true when the given actor already exists.\r\n     */\r\n    _isActorOnTracker(actor) {\r\n        return this.actors.find(actorData => actorData._id === actor.id) !== undefined;\r\n    }\r\n\r\n    _setOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = event.currentTarget.value;\r\n        if (amount && actor) {\r\n            actor.setOverwatchScore(amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _addOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = parseInt(event.currentTarget.dataset.amount);\r\n        if (amount && actor) {\r\n            const os = actor.getOverwatchScore();\r\n            actor.setOverwatchScore(os + amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _resetOverwatchScore(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            actor.setOverwatchScore(0).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _rollFor15Minutes(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            //  use static value so it can be modified in modules\r\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\r\n            roll.evaluate({async: false});\r\n\r\n            // use GM Roll Mode so players don't see\r\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\r\n            // roll.toMessage({ rollMode });\r\n\r\n            if (roll.total) {\r\n                const os = actor.getOverwatchScore();\r\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\r\n            }\r\n        }\r\n    }\r\n}\r\n", "export class Constants {\r\n    public static readonly MAP_CATEGORY_TO_SKILL = {\r\n        'Assault Cannons': 'heavy_weapons',\r\n        'Assault Rifles': 'automatics',\r\n        'Blades': 'blades',\r\n        'Bows': 'archery',\r\n        'Carbines': 'automatics',\r\n        'Clubs': 'clubs',\r\n        'Crossbows': 'archery',\r\n        'Exotic Melee Weapons': 'exotic_melee',\r\n        'Exotic Ranged Weapons': 'exotic_ranged',\r\n        'Flamethrowers': 'exotic_ranged',\r\n        'Grenade Launchers': 'heavy_weapons',\r\n        'Heavy Machine Guns': 'heavy_weapons',\r\n        'Heavy Pistols': 'pistols',\r\n        'Holdouts': 'pistols',\r\n        'Laser Weapons': 'exotic_ranged',\r\n        'Light Machine Guns': 'heavy_weapons',\r\n        'Light Pistols': 'pistols',\r\n        'Machine Pistols': 'automatics',\r\n        'Medium Machine Guns': 'automatics',\r\n        'Missile Launchers': 'heavy_weapons',\r\n        'Shotguns': 'longarms',\r\n        'Sniper Rifles': 'longarms',\r\n        'Sporting Rifles': 'longarms',\r\n        'Submachine Guns': 'automatics',\r\n        'Tasers': 'pistols',\r\n        'Unarmed': 'unarmed_combat',\r\n    };\r\n    public static readonly WEAPON_RANGES = {\r\n        'Tasers': {\r\n            short: 5,\r\n            medium: 10,\r\n            long: 15,\r\n            extreme: 20,\r\n        },\r\n        'Holdouts': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Light Pistols': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Heavy Pistols': {\r\n            short: 5,\r\n            medium: 20,\r\n            long: 40,\r\n            extreme: 60,\r\n        },\r\n        'Machine Pistols': {\r\n            short: 5,\r\n            medium: 15,\r\n            long: 30,\r\n            extreme: 50,\r\n        },\r\n        'Submachine Guns': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Assault Rifles': {\r\n            short: 25,\r\n            medium: 150,\r\n            long: 350,\r\n            extreme: 550,\r\n        },\r\n        'Shotguns': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Shotguns (slug)': {\r\n            short: 10,\r\n            medium: 40,\r\n            long: 80,\r\n            extreme: 150,\r\n        },\r\n        'Shotguns (flechette)': {\r\n            short: 15,\r\n            medium: 30,\r\n            long: 45,\r\n            extreme: 60,\r\n        },\r\n        'Sniper Rifles': {\r\n            short: 50,\r\n            medium: 350,\r\n            long: 800,\r\n            extreme: 1500,\r\n        },\r\n        'Sporting Rifles': {\r\n            short: 50,\r\n            medium: 250,\r\n            long: 500,\r\n            extreme: 750,\r\n        },\r\n        'Light Machine Guns': {\r\n            short: 25,\r\n            medium: 200,\r\n            long: 400,\r\n            extreme: 800,\r\n        },\r\n        'Medium/Heavy Machinegun': {\r\n            short: 40,\r\n            medium: 250,\r\n            long: 750,\r\n            extreme: 1200,\r\n        },\r\n        'Assault Cannons': {\r\n            short: 50,\r\n            medium: 300,\r\n            long: 750,\r\n            extreme: 1500,\r\n        },\r\n        'Grenade Launchers': {\r\n            min: 5,\r\n            short: 50,\r\n            medium: 100,\r\n            long: 150,\r\n            extreme: 500,\r\n        },\r\n        'Missile Launchers': {\r\n            min: 20,\r\n            short: 70,\r\n            medium: 150,\r\n            long: 450,\r\n            extreme: 1500,\r\n        },\r\n        'Bows': {\r\n            short: 1,\r\n            medium: 10,\r\n            long: 30,\r\n            extreme: 60,\r\n            attribute: 'strength',\r\n        },\r\n        'Light Crossbows': {\r\n            short: 6,\r\n            medium: 24,\r\n            long: 60,\r\n            extreme: 120,\r\n        },\r\n        'Medium Crossbows': {\r\n            short: 9,\r\n            medium: 36,\r\n            long: 90,\r\n            extreme: 150,\r\n        },\r\n        'Heavy Crossbows': {\r\n            short: 15,\r\n            medium: 45,\r\n            long: 120,\r\n            extreme: 180,\r\n        },\r\n        'Thrown Knife': {\r\n            short: 1,\r\n            medium: 2,\r\n            long: 3,\r\n            extreme: 5,\r\n            attribute: 'strength',\r\n        },\r\n        'Net': {\r\n            short: 0.5,\r\n            medium: 1,\r\n            long: 1.5,\r\n            extreme: 2.5,\r\n            attribute: 'strength',\r\n        },\r\n        'Shuriken': {\r\n            short: 1,\r\n            medium: 2,\r\n            long: 5,\r\n            extreme: 7,\r\n            attribute: 'strength',\r\n        },\r\n        'Standard Grenade': {\r\n            short: 2,\r\n            medium: 4,\r\n            long: 6,\r\n            extreme: 10,\r\n            attribute: 'strength',\r\n        },\r\n        'Aerodynamic Grenade': {\r\n            min: 0,\r\n            short: 2,\r\n            medium: 4,\r\n            long: 8,\r\n            extreme: 15,\r\n            attribute: 'strength',\r\n        },\r\n        'Harpoon Gun': {\r\n            short: 5,\r\n            medium: 20,\r\n            long: 40,\r\n            extreme: 60,\r\n        },\r\n        'Harpoon Gun (Underwater)': {\r\n            short: 6,\r\n            medium: 24,\r\n            long: 60,\r\n            extreme: 120,\r\n        },\r\n        'Flamethrowers': {\r\n            short: 15,\r\n            medium: 20,\r\n            long: -1,\r\n            extreme: -1,\r\n        },\r\n    };\r\n\r\n    public static readonly ROOT_IMPORT_FOLDER_NAME = 'SR5e';\r\n}\r\n", "export abstract class ImportStrategy {\r\n    public abstract intValue(jsonData: object, key: string, fallback: number | undefined): number;\r\n    public abstract stringValue(jsonData: object, key: string | number, fallback: string | undefined): string;\r\n    public abstract objectValue(jsonData: object, key: string | number, fallback: object | null | undefined): object | null;\r\n}\r\nexport type ItemComparer = (item: Item) => boolean;\r\n", "import { ImportHelper } from './ImportHelper';\r\nimport { ImportStrategy } from './ImportStrategy';\r\n\r\nexport class XMLStrategy extends ImportStrategy {\r\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        try {\r\n            return parseInt(jsonData[key][ImportHelper.CHAR_KEY]);\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        try {\r\n            return jsonData[key][ImportHelper.CHAR_KEY];\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        try {\r\n            return jsonData[key];\r\n        } catch (e) {\r\n            if (fallback !== undefined) {\r\n                return fallback;\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { ImportStrategy } from './ImportStrategy';\r\n\r\nexport class JSONStrategy extends ImportStrategy {\r\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        throw new Error('Unimplemented');\r\n    }\r\n\r\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        throw new Error('Unimplemented');\r\n    }\r\n\r\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        throw new Error('Unimplemented');\r\n    }\r\n}\r\n", "import { Constants } from '../importer/Constants';\r\nimport { XMLStrategy } from './XMLStrategy';\r\nimport { JSONStrategy } from './JSONStrategy';\r\nimport { ImportStrategy } from './ImportStrategy';\r\nimport {SR5Item} from \"../../item/SR5Item\";\r\n\r\nexport enum ImportMode {\r\n    XML = 1,\r\n    JSON = 2,\r\n}\r\nexport enum LookupMode {\r\n    Directory = 0,\r\n    Actor = 1,\r\n}\r\n\r\n/**\r\n * An import helper to standardize data extraction.\r\n * Mostly conceived to reduced required refactoring if Chummer changes data file layout.\r\n * Also contains helper methods to safely parse values to appropriate types.\r\n */\r\nexport class ImportHelper {\r\n    public static readonly CHAR_KEY = '_TEXT';\r\n\r\n    private static s_Strategy: ImportStrategy = new XMLStrategy();\r\n\r\n    public static SetMode(mode: ImportMode) {\r\n        switch (mode) {\r\n            case ImportMode.XML:\r\n                ImportHelper.s_Strategy = new XMLStrategy();\r\n                break;\r\n            case ImportMode.JSON:\r\n                ImportHelper.s_Strategy = new JSONStrategy();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Helper method to create a new folder.\r\n     * @param name The name of the folder.\r\n     * @param folder The parent folder.\r\n     * @returns {Promise<Folder>} A promise that resolves with the folder object when the folder is created.\r\n     */\r\n    public static async NewFolder(name: string, folder: Folder | null = null) {\r\n        return await Folder.create({\r\n            type: 'Item',\r\n            folder: folder === null ? null : folder.id,\r\n            name: name,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get / create a folder at a path in the items directory.\r\n     *\r\n     * Traverse path and match folder structure to the last and current path segments.\r\n     *\r\n     * @param path The absolute path of the folder.\r\n     * @param mkdirs If true, will make all folders along the hierarchy if they do not exist.\r\n     * @returns A promise that will resolve with the found folder.\r\n     */\r\n    public static async GetFolderAtPath(path: string, mkdirs: boolean = false): Promise<Folder> {\r\n        let currentFolder,\r\n            lastFolder = null;\r\n        const pathSegments = path.split('/');\r\n        for (const pathSegment of pathSegments) {\r\n             // Check if the path structure matches the folder structure.\r\n            currentFolder = game.folders?.find((folder) => {\r\n                return folder.folder === lastFolder && folder.name === pathSegment\r\n            });\r\n\r\n            // Only create when allowed to. Otherwise abort with error.\r\n            if (!currentFolder && !mkdirs) return Promise.reject(`Unable to find folder: ${path}`);\r\n            // Create the missing folder for the current segment\r\n            if (!currentFolder) currentFolder = await ImportHelper.NewFolder(pathSegment, lastFolder);\r\n\r\n            lastFolder = currentFolder;\r\n        }\r\n\r\n        return Promise.resolve(currentFolder);\r\n    }\r\n\r\n    /**\r\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found\r\n     * or is unable to be parsed to an integer.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static IntValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\r\n        return ImportHelper.s_Strategy.intValue(jsonData, key, fallback);\r\n    }\r\n\r\n    /**\r\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static StringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\r\n        return ImportHelper.s_Strategy.stringValue(jsonData, key, fallback);\r\n    }\r\n\r\n    /**\r\n     * Get an object from the the provided jsonData, optionally returning a default value if it is not found.\r\n     * @param jsonData The data to get the keyed value in.\r\n     * @param key The key to check for the value under.\r\n     * @param fallback An optional default value to return if the key is not found.\r\n     */\r\n    public static ObjectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\r\n        return ImportHelper.s_Strategy.objectValue(jsonData, key, fallback);\r\n    }\r\n\r\n    public static findItem(nameOrCmp: string | ItemComparer): SR5Item {\r\n        let result: any | null;\r\n        if (typeof nameOrCmp === 'string') {\r\n            result = game.items?.find((item) => item.name == nameOrCmp);\r\n        } else {\r\n            result = game.items?.find(nameOrCmp);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static TranslateCategory(name, jsonCategoryTranslations?) {\r\n        if (jsonCategoryTranslations && jsonCategoryTranslations.hasOwnProperty(name)) {\r\n            return jsonCategoryTranslations[name];\r\n        }\r\n\r\n        return name;\r\n    }\r\n    public static async MakeCategoryFolders(\r\n        jsonData: object,\r\n        path: string,\r\n        jsonCategoryTranslations?: object | undefined,\r\n    ): Promise<{ [name: string]: Folder }> {\r\n        let folders = {};\r\n        let jsonCategories = jsonData['categories']['category'];\r\n\r\n        for (let i = 0; i < jsonCategories.length; i++) {\r\n            let categoryName = jsonCategories[i][ImportHelper.CHAR_KEY];\r\n            // use untranslated category name for easier mapping during DataImporter.Parse implementations.\r\n            let origCategoryName = categoryName;\r\n            categoryName = ImportHelper.TranslateCategory(categoryName, jsonCategoryTranslations);\r\n            folders[origCategoryName.toLowerCase()] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${path}/${categoryName}`, true);\r\n        }\r\n\r\n        return folders;\r\n    }\r\n\r\n    /** Extract the correct <chummer file=\"${dataFileName}>[...]</chummer> element from xx-xx_data.xml translations.\r\n     *\r\n     * @param jsoni18n\r\n     * @param dataFileName Expected translation target file name\r\n     */\r\n    public static ExtractDataFileTranslation(jsoni18n, dataFileName): object {\r\n        for (let i = 0; i < jsoni18n.length; i++) {\r\n            const translation = jsoni18n[i];\r\n            if (translation.$.file === dataFileName) {\r\n                return translation;\r\n            }\r\n        }\r\n        return {};\r\n    }\r\n\r\n    /** Extract categories translations within xx-xx_data.xml <chummer/> translation subset.\r\n     *\r\n     *  Note: Not all file translations provide categories.\r\n     *\r\n     * @param jsonChummeri18n Translations as given by ExtractDataFileTranslations\r\n     */\r\n    public static ExtractCategoriesTranslation(jsonChummeri18n) {\r\n        const categoryTranslations = {};\r\n        if (jsonChummeri18n && jsonChummeri18n.hasOwnProperty('categories')) {\r\n            jsonChummeri18n.categories.category.forEach((category) => {\r\n                const name = category[ImportHelper.CHAR_KEY];\r\n                const translate = category.$.translate;\r\n                categoryTranslations[name] = translate;\r\n            });\r\n        }\r\n        return categoryTranslations;\r\n    }\r\n\r\n    /** Extract item type translations within xx-xx_data.xml <chummer/> translation subset.\r\n     *\r\n     * @param jsonItemsi18n Translations as given by ExtractDataFileTranslations\r\n     * @param typeKey The item type to translate. Tends to be plural.\r\n     * @param listKey The item to translate. Tends to be singular.\r\n     */\r\n    public static ExtractItemTranslation(jsonItemsi18n, typeKey, listKey) {\r\n        const itemTranslation = {};\r\n        if (jsonItemsi18n && jsonItemsi18n[typeKey] && jsonItemsi18n[typeKey][listKey] && jsonItemsi18n[typeKey][listKey].length > 0) {\r\n            jsonItemsi18n[typeKey][listKey].forEach((item) => {\r\n                const name = item.name[ImportHelper.CHAR_KEY];\r\n                const translate = item.translate[ImportHelper.CHAR_KEY];\r\n                const altpage = item.altpage[ImportHelper.CHAR_KEY];\r\n                itemTranslation[name] = { translate, altpage };\r\n            });\r\n        }\r\n\r\n        return itemTranslation;\r\n    }\r\n\r\n    static MapNameToTranslationKey(translationMap, name, key, fallbackValue = ''): string {\r\n        if (translationMap && translationMap.hasOwnProperty(name) && translationMap[name].hasOwnProperty(key)) {\r\n            return translationMap[name][key];\r\n        }\r\n\r\n        return fallbackValue;\r\n    }\r\n\r\n    public static MapNameToTranslation(translationMap, name): string {\r\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'translate', name);\r\n    }\r\n\r\n    public static MapNameToPageSource(translationMap, name, fallback='?'): string {\r\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'altpage', fallback);\r\n    }\r\n}\r\nexport type ItemComparer = (item: Item) => boolean;\r\n", "import { ImportHelper } from '../helper/ImportHelper';\r\n\r\nconst xml2js = require('xml2js');\r\n\r\nexport abstract class DataImporter {\r\n    public abstract files: string[];\r\n    public static jsoni18n: any;\r\n    public categoryTranslations: any;\r\n    public entryTranslations: any;\r\n    public static unsupportedBooks: string[] = ['2050'];\r\n\r\n    /**\r\n     * Get default data for constructing a TItem.\r\n     */\r\n    public abstract GetDefaultData(): any;\r\n\r\n    /**\r\n     *\r\n     * @param jsonObject JSON Data with all data translations for one language.\r\n     */\r\n    public static CanParseI18n(jsonObject: any): boolean {\r\n        return jsonObject.hasOwnProperty('chummer') && jsonObject.chummer.length > 0 && jsonObject.chummer[0].$.hasOwnProperty('file');\r\n    }\r\n\r\n    /**\r\n     * Stores translations as a whole for all implementing classes to extract from without reparsing.\r\n     * @param jsonObject JSON Data with all data translations for one language.\r\n     */\r\n    public static ParseTranslation(jsonObject: object) {\r\n        if (jsonObject && jsonObject.hasOwnProperty('chummer')) {\r\n            DataImporter.jsoni18n = jsonObject['chummer'];\r\n        }\r\n    }\r\n    /**\r\n     * Implementing classes can use ExtractTranslation to only extract needed translations.\r\n     */\r\n    public abstract ExtractTranslation(fileName?: string);\r\n\r\n    /**\r\n     * Validate if this importer is capable of parsing the provided JSON data.\r\n     * @param jsonObject JSON data to check import capability for.\r\n     * @returns boolean True if the importer is capable of parsing the provided XML data.\r\n     */\r\n    public abstract CanParse(jsonObject: object): boolean;\r\n\r\n    /**\r\n     * Parse the specified jsonObject and return Item representations.\r\n     * @param jsonObject The JSON data to parse.\r\n     * @returns An array of created objects.\r\n     */\r\n    public abstract Parse(jsonObject: object): Promise<Item>;\r\n\r\n    /**\r\n     * Parse an XML string into a JSON object.\r\n     * @param xmlString The string to parse as XML.\r\n     * @returns A json object converted from the string.\r\n     */\r\n    public static async xml2json(xmlString: string): Promise<object> {\r\n        const parser = xml2js.Parser({\r\n            explicitArray: false,\r\n            explicitCharkey: true,\r\n            charkey: ImportHelper.CHAR_KEY,\r\n        });\r\n\r\n        return (await parser.parseStringPromise(xmlString))['chummer'];\r\n    }\r\n\r\n    public static unsupportedBookSource(jsonObject) {\r\n        if (!jsonObject.hasOwnProperty('source')) return false;\r\n        const source = ImportHelper.StringValue(jsonObject, 'source', '');\r\n        return DataImporter.unsupportedBooks.includes(source);\r\n    }\r\n\r\n    public static unsupportedEntry(jsonObject) {\r\n        if (DataImporter.unsupportedBookSource(jsonObject)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n", "export abstract class Parser<TResult> {\r\n    public abstract Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult;\r\n}\r\n", "import { Parser } from '../Parser';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\r\n\r\nexport abstract class ItemParserBase<TResult extends ShadowrunItemData> extends Parser<TResult> {\r\n    Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\r\n        // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n        item.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { ItemParserBase } from './ItemParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport ShadowrunTechnologyItemData = Shadowrun.ShadowrunTechnologyItemData;\r\n\r\nexport abstract class TechnologyItemParserBase<TResult extends ShadowrunTechnologyItemData> extends ItemParserBase<TResult> {\r\n    Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        item.system.technology.availability = ImportHelper.StringValue(jsonData, 'avail', '0');\r\n        item.system.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\r\n        item.system.technology.rating = ImportHelper.IntValue(jsonData, 'rating', 0);\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { Constants } from '../../importer/Constants';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport WeaponCategory = Shadowrun.WeaponCategory;\r\nimport SkillName = Shadowrun.SkillName;\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\n\r\nexport abstract class WeaponParserBase extends TechnologyItemParserBase<WeaponItemData> {\r\n    public abstract GetDamage(jsonData: object): DamageData;\r\n\r\n    protected GetSkill(weaponJson: object): SkillName {\r\n        if (weaponJson.hasOwnProperty('useskill')) {\r\n            let jsonSkill = ImportHelper.StringValue(weaponJson, 'useskill');\r\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(jsonSkill)) {\r\n                return Constants.MAP_CATEGORY_TO_SKILL[jsonSkill];\r\n            }\r\n            return jsonSkill.replace(/[\\s\\-]/g, '_').toLowerCase();\r\n        } else {\r\n            let category = ImportHelper.StringValue(weaponJson, 'category');\r\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(category)) {\r\n                return Constants.MAP_CATEGORY_TO_SKILL[category];\r\n            }\r\n\r\n            let type = ImportHelper.StringValue(weaponJson, 'type').toLowerCase();\r\n            return type === 'ranged' ? 'exotic_range' : 'exotic_melee';\r\n        }\r\n    }\r\n\r\n    public static GetWeaponType(weaponJson: object): WeaponCategory {\r\n        let type = ImportHelper.StringValue(weaponJson, 'type');\r\n        //melee is the least specific, all melee entries are accurate\r\n        if (type === 'Melee') {\r\n            return 'melee';\r\n        } else {\r\n            // skill takes priorities over category\r\n            if (weaponJson.hasOwnProperty('useskill')) {\r\n                let skill = ImportHelper.StringValue(weaponJson, 'useskill');\r\n                if (skill === 'Throwing Weapons') return 'thrown';\r\n            }\r\n\r\n            // category is the fallback\r\n            let category = ImportHelper.StringValue(weaponJson, 'category');\r\n            if (category === 'Throwing Weapons') return 'thrown';\r\n            // ranged is everything else\r\n            return 'range';\r\n        }\r\n    }\r\n\r\n    public Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        let category = ImportHelper.StringValue(jsonData, 'category');\r\n        // A single item does not meet normal rules, thanks Chummer!\r\n        // TODO: Check these rules after localization using a generic, non-english approach.\r\n        if (category === 'Hold-outs') {\r\n            category = 'Holdouts';\r\n        }\r\n\r\n        item.system.category = WeaponParserBase.GetWeaponType(jsonData);\r\n        item.system.subcategory = category.toLowerCase();\r\n\r\n        item.system.action.skill = this.GetSkill(jsonData);\r\n        item.system.action.damage = this.GetDamage(jsonData);\r\n\r\n        item.system.action.limit.value = ImportHelper.IntValue(jsonData, 'accuracy');\r\n        item.system.action.limit.base = ImportHelper.IntValue(jsonData, 'accuracy');\r\n\r\n        item.system.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal');\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport { Constants } from '../../importer/Constants';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {DefaultValues} from \"../../../data/DataDefaults\";\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\n\r\nexport class RangedParser extends WeaponParserBase {\r\n    public GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n        let damageCode = jsonDamage.match(/[0-9]+[PS]/g)?.[0];\r\n\r\n        if (damageCode == null) {\r\n            return DefaultValues.damageData();\r\n        }\r\n\r\n        let damageType = damageCode.includes('P') ? 'physical' : 'stun';\r\n        let damageAmount = parseInt(damageCode.replace(damageType[0].toUpperCase(), ''));\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        const partialDamageData = {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            base: damageAmount,\r\n            value: damageAmount,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: []\r\n            }\r\n        }\r\n        return DefaultValues.damageData(partialDamageData);\r\n    }\r\n\r\n    protected GetAmmo(weaponJson: object) {\r\n        let jsonAmmo = ImportHelper.StringValue(weaponJson, 'ammo');\r\n        let match = jsonAmmo.match(/([0-9]+)/g)?.[0];\r\n        return match !== undefined ? parseInt(match) : 0;\r\n    }\r\n\r\n    Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        // Some new weapons don't have any rc defined in XML.\r\n        if (jsonData.hasOwnProperty('rc')) {\r\n            item.system.range.rc.base = ImportHelper.IntValue(jsonData, 'rc');\r\n            item.system.range.rc.value = ImportHelper.IntValue(jsonData, 'rc');\r\n        } else {\r\n            item.system.range.rc.base = 0;\r\n            item.system.range.rc.value = 0;\r\n        }\r\n        \r\n\r\n        if (jsonData.hasOwnProperty('range')) {\r\n            item.system.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\r\n        } else {\r\n            item.system.range.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\r\n        }\r\n\r\n        item.system.ammo.current.value = this.GetAmmo(jsonData);\r\n        item.system.ammo.current.max = this.GetAmmo(jsonData);\r\n\r\n        item.system.range.modes.single_shot = ImportHelper.StringValue(jsonData, 'mode').includes('SS');\r\n        item.system.range.modes.semi_auto = ImportHelper.StringValue(jsonData, 'mode').includes('SA');\r\n        item.system.range.modes.burst_fire = ImportHelper.StringValue(jsonData, 'mode').includes('BF');\r\n        item.system.range.modes.full_auto = ImportHelper.StringValue(jsonData, 'mode').includes('FA');\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport ActorAttribute = Shadowrun.ActorAttribute;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {DefaultValues} from \"../../../data/DataDefaults\";\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\n\r\nexport class MeleeParser extends WeaponParserBase {\r\n    GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n        let damageCode: any = jsonDamage.match(/(STR)([+-]?)([1-9]*)\\)([PS])/g)?.[0];\r\n\r\n        if (damageCode == null) {\r\n            return DefaultValues.damageData();\r\n        }\r\n\r\n        let damageBase = 0;\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        let splitDamageCode = damageCode.split(')');\r\n        let damageType = splitDamageCode[1].includes('P') ? 'physical' : 'stun';\r\n\r\n        let splitBaseCode = damageCode.includes('+') ? splitDamageCode[0].split('+') : splitDamageCode[0].split('-');\r\n        if (splitDamageCode[0].includes('+') || splitDamageCode[0].includes('-')) {\r\n            damageBase = parseInt(splitBaseCode[1], 0);\r\n        }\r\n        let damageAttribute = damageCode.includes('STR') ? 'strength' : '';\r\n\r\n        const partialDamageData = {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            base: damageBase,\r\n            value: damageBase,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: [],\r\n            },\r\n            attribute: damageAttribute as ActorAttribute,\r\n        }\r\n        return DefaultValues.damageData(partialDamageData);\r\n    }\r\n\r\n    Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        item.system.melee.reach = ImportHelper.IntValue(jsonData, 'reach');\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { WeaponParserBase } from './WeaponParserBase';\r\nimport { Constants } from '../../importer/Constants';\r\nimport BlastData = Shadowrun.BlastData;\r\nimport ActorAttribute = Shadowrun.ActorAttribute;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {DefaultValues} from \"../../../data/DataDefaults\";\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\n\r\nexport class ThrownParser extends WeaponParserBase {\r\n    public GetDamage(jsonData: object): DamageData {\r\n        let jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\r\n\r\n        let damageAmount = 0;\r\n        let damageType = 'physical';\r\n        let damageAttribute = '';\r\n\r\n        //STR scaling weapons like the boomerang\r\n        if (jsonDamage.includes('STR')) {\r\n            damageAttribute = 'strength';\r\n\r\n            let damageMatch = jsonDamage.match(/((STR)([+-])[0-9]\\)[PS])/g)?.[0];\r\n            if (damageMatch !== undefined) {\r\n                let amountMatch = damageMatch.match(/-?[0-9]+/g)?.[0];\r\n                damageAmount = amountMatch !== undefined ? parseInt(amountMatch) : 0;\r\n            }\r\n        } else {\r\n            let damageMatch = jsonDamage.match(/([0-9]+[PS])/g)?.[0];\r\n\r\n            if (damageMatch !== undefined) {\r\n                let amountMatch = damageMatch.match(/[0-9]+/g)?.[0];\r\n                if (amountMatch !== undefined) {\r\n                    damageAmount = parseInt(amountMatch);\r\n                }\r\n            } else {\r\n                const partialDamageData = {\r\n                    type: {\r\n                        base: 'physical' as DamageType,\r\n                        value: 'physical' as DamageType\r\n                    }\r\n                }\r\n                return DefaultValues.damageData(partialDamageData);\r\n            }\r\n        }\r\n        damageType = jsonDamage.includes('P') ? 'physical' : 'stun';\r\n\r\n        let damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\r\n\r\n        const partialDamageData = {\r\n            type: {\r\n                base: damageType as DamageType,\r\n                value: damageType as DamageType,\r\n            },\r\n            base: damageAmount,\r\n            value: damageAmount,\r\n            ap: {\r\n                base: damageAp,\r\n                value: damageAp,\r\n                mod: [],\r\n            },\r\n            attribute: damageAttribute as ActorAttribute,\r\n        }\r\n        return DefaultValues.damageData(partialDamageData);\r\n    }\r\n\r\n    public GetBlast(jsonData: object, item: WeaponItemData): BlastData {\r\n        let blastData: BlastData = {\r\n            radius: 0,\r\n            dropoff: 0,\r\n        };\r\n\r\n        let blastCode = ImportHelper.StringValue(jsonData, 'damage');\r\n\r\n        let radiusMatch = blastCode.match(/([0-9]+m)/)?.[0];\r\n        if (radiusMatch !== undefined) {\r\n            radiusMatch = radiusMatch.match(/[0-9]+/)?.[0];\r\n            if (radiusMatch !== undefined) {\r\n                blastData.radius = parseInt(radiusMatch);\r\n            }\r\n        }\r\n\r\n        let dropoffMatch = blastCode.match(/(-[0-9]+\\/m)/)?.[0];\r\n        if (dropoffMatch !== undefined) {\r\n            dropoffMatch = dropoffMatch.match(/-[0-9]+/)?.[0];\r\n            if (dropoffMatch !== undefined) {\r\n                blastData.dropoff = parseInt(dropoffMatch);\r\n            }\r\n        }\r\n\r\n        if (blastData.dropoff && !blastData.radius) {\r\n            blastData.radius = -(item.system.action.damage.base / blastData.dropoff);\r\n        }\r\n\r\n        return blastData;\r\n    }\r\n\r\n    Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        if (jsonData.hasOwnProperty('range')) {\r\n            item.system.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'range')];\r\n        } else {\r\n            item.system.thrown.ranges = Constants.WEAPON_RANGES[ImportHelper.StringValue(jsonData, 'category')];\r\n        }\r\n\r\n        item.system.thrown.blast = this.GetBlast(jsonData, item);\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { Parser } from './Parser';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\n\r\nexport class ParserMap<TResult> extends Parser<TResult> {\r\n    private readonly m_BranchKey: string | BranchFunc<TResult>;\r\n    private readonly m_Map: Map<string, Parser<TResult>>;\r\n\r\n    public constructor(branchKey: string | BranchFunc<TResult>, elements: CArg<TResult>[]) {\r\n        super();\r\n\r\n        this.m_BranchKey = branchKey;\r\n\r\n        this.m_Map = new Map();\r\n        for (const { key, value } of elements) {\r\n            this.m_Map.set(key, value);\r\n        }\r\n    }\r\n\r\n    public Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\r\n        let key;\r\n        if (typeof this.m_BranchKey === 'function') {\r\n            key = this.m_BranchKey(jsonData);\r\n        } else {\r\n            key = this.m_BranchKey;\r\n            key = ImportHelper.StringValue(jsonData, key);\r\n        }\r\n\r\n        const parser = this.m_Map.get(key);\r\n        if (parser === undefined) {\r\n            console.warn(`Could not find mapped parser for category ${key}.`);\r\n            return item;\r\n        }\r\n        return parser.Parse(jsonData, item, jsonTranslation);\r\n    }\r\n}\r\n\r\ntype CArg<TResult> = {\r\n    key: string;\r\n    value: Parser<TResult>;\r\n};\r\ntype BranchFunc<TResult> = (TResult) => string;\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { RangedParser } from '../parser/weapon/RangedParser';\r\nimport { MeleeParser } from '../parser/weapon/MeleeParser';\r\nimport { ThrownParser } from '../parser/weapon/ThrownParser';\r\nimport { ParserMap } from '../parser/ParserMap';\r\nimport { WeaponParserBase } from '../parser/weapon/WeaponParserBase';\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport WeaponItemData = Shadowrun.WeaponItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class WeaponImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['weapons.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('weapons') && jsonObject['weapons'].hasOwnProperty('weapon');\r\n    }\r\n\r\n    GetDefaultData(): WeaponItemData {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            type: 'weapon',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: DefaultValues.actionData({type: 'varies', attribute: 'agility'}),\r\n                technology: DefaultValues.technologyData({rating: 1}),\r\n                ammo: {\r\n                    spare_clips: {\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                    current: {\r\n                        value: 0,\r\n                        max: 0,\r\n                    },\r\n                },\r\n                range: {\r\n                    category: '',\r\n                    ranges: {\r\n                        short: 0,\r\n                        medium: 0,\r\n                        long: 0,\r\n                        extreme: 0,\r\n                    },\r\n                    rc: {\r\n                        value: 0,\r\n                        base: 0,\r\n                        mod: [],\r\n                    },\r\n                    modes: {\r\n                        single_shot: false,\r\n                        semi_auto: false,\r\n                        burst_fire: false,\r\n                        full_auto: false,\r\n                    },\r\n                },\r\n                melee: {\r\n                    reach: 0,\r\n                },\r\n                thrown: {\r\n                    ranges: {\r\n                        short: 0,\r\n                        medium: 0,\r\n                        long: 0,\r\n                        extreme: 0,\r\n                        attribute: '',\r\n                    },\r\n                    blast: {\r\n                        radius: 0,\r\n                        dropoff: 0,\r\n                    },\r\n                },\r\n                category: 'range',\r\n                subcategory: '',\r\n            },\r\n        } as unknown as WeaponItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonWeaponi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonWeaponi18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponi18n, 'weapons', 'weapon');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Weapons', this.categoryTranslations);\r\n\r\n        folders['gear'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Gear`, true);\r\n        folders['quality'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Quality`, true);\r\n\r\n        const parser = new ParserMap<WeaponItemData>(WeaponParserBase.GetWeaponType, [\r\n            { key: 'range', value: new RangedParser() },\r\n            { key: 'melee', value: new MeleeParser() },\r\n            { key: 'thrown', value: new ThrownParser() },\r\n        ]);\r\n\r\n        let items: WeaponItemData[] = [];\r\n        let jsonDatas = jsonObject['weapons']['weapon'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n            // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n            item.folder = folders[item.system.subcategory].id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: This should be removed after typing of SR5Item\r\n        return await Item.create(items);\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\nimport ArmorItemData = Shadowrun.ArmorItemData;\r\n\r\nexport class ArmorParserBase extends TechnologyItemParserBase<ArmorItemData> {\r\n    Parse(jsonData: object, item: ArmorItemData): ArmorItemData {\r\n        item = super.Parse(jsonData, item);\r\n\r\n        item.system.armor.value = ImportHelper.IntValue(jsonData, 'armor', 0);\r\n        item.system.armor.mod = ImportHelper.StringValue(jsonData, 'armor').includes('+');\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { ArmorParserBase } from '../parser/armor/ArmorParserBase';\r\nimport ArmorItemData = Shadowrun.ArmorItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class ArmorImporter extends DataImporter {\r\n    public armorTranslations: any;\r\n    public categoryTranslations: any;\r\n    public files = ['armor.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('armors') && jsonObject['armors'].hasOwnProperty('armor');\r\n    }\r\n\r\n    GetDefaultData(): ArmorItemData {\r\n        return {\r\n            name: 'Unnamed Armor',\r\n            type: 'armor',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: DefaultValues.technologyData({rating: 1, equipped: true, wireless: false}),\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n            },\r\n        } as ArmorItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonArmori18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonArmori18n);\r\n        this.armorTranslations = ImportHelper.ExtractItemTranslation(jsonArmori18n, 'armors', 'armor');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Armor', this.categoryTranslations);\r\n\r\n        const parser = new ArmorParserBase();\r\n\r\n        let datas: ArmorItemData[] = [];\r\n        let jsonDatas = jsonObject['armors']['armor'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData());\r\n            const category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\r\n            item.name = ImportHelper.MapNameToTranslation(this.armorTranslations, item.name);\r\n            // @ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folders[category].id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            datas.push(item);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return await Item.create(datas) as Item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport WeaponData = Shadowrun.WeaponData;\r\nimport AmmoItemData = Shadowrun.AmmoItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class AmmoImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData(): AmmoItemData {\r\n        return {\r\n            name: '',\r\n            type: 'ammo',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: DefaultValues.technologyData({rating: 1, equipped: true, wireless: false}),\r\n                element: '',\r\n                ap: 0,\r\n                damage: 0,\r\n                damageType: 'physical',\r\n                blast: {\r\n                    radius: 0,\r\n                    dropoff: 0,\r\n                },\r\n            }\r\n        } as AmmoItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        let ammoDatas: AmmoItemData[] = [];\r\n        let jsonAmmos = jsonObject['gears']['gear'];\r\n        for (let i = 0; i < jsonAmmos.length; i++) {\r\n            let jsonData = jsonAmmos[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            if (ImportHelper.StringValue(jsonData, 'category', '') !== 'Ammunition') {\r\n                continue;\r\n            }\r\n\r\n            let item = this.GetDefaultData();\r\n            item.name = ImportHelper.StringValue(jsonData, 'name');\r\n            item.name = ImportHelper.MapNameToTranslation(this.entryTranslations, item.name);\r\n\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n            item.system.technology.rating = 2;\r\n            item.system.technology.availability = ImportHelper.StringValue(jsonData, 'avail');\r\n            item.system.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\r\n\r\n            let bonusData = ImportHelper.ObjectValue(jsonData, 'weaponbonus', null);\r\n            if (bonusData !== undefined && bonusData !== null) {\r\n                item.system.ap = ImportHelper.IntValue(bonusData, 'ap', 0);\r\n                item.system.damage = ImportHelper.IntValue(bonusData, 'damage', 0);\r\n\r\n                let damageType = ImportHelper.StringValue(bonusData, 'damagetype', '');\r\n                if (damageType.length > 0) {\r\n                    if (damageType.includes('P')) {\r\n                        item.system.damageType = 'physical';\r\n                    } else if (damageType.includes('S')) {\r\n                        item.system.damageType = 'stun';\r\n                    } else if (damageType.includes('M')) {\r\n                        item.system.damageType = 'matrix';\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shouldLookForWeapons = false;\r\n            let nameLower = item.name.toLowerCase();\r\n            ['grenade', 'rocket', 'missile'].forEach((compare) => {\r\n                shouldLookForWeapons = shouldLookForWeapons || nameLower.includes(compare);\r\n            });\r\n            // NOTE: Should either weapons or gear not have been imported with translation, this will fail.\r\n            if (shouldLookForWeapons) {\r\n                let foundWeapon = ImportHelper.findItem((item) => {\r\n                    if (!item || !item.name) return false;\r\n                    // Filter for weapon type due to possible double naming giving other item types.\r\n                    return item.type === 'weapon' && item.name.toLowerCase() === nameLower;\r\n                });\r\n\r\n                if (foundWeapon != null && \"action\" in foundWeapon.data.data) {\r\n                    const weaponData = foundWeapon.data.data as WeaponData;\r\n                    item.system.damage = weaponData.action.damage.value;\r\n                    item.system.ap =weaponData.action.damage.ap.value;\r\n                }\r\n            }\r\n\r\n            // ammo doesn't have conceal rating from looking at the data\r\n            // data.data.technology.conceal.base = ImportHelper.intValue(jsonData, \"conceal\");\r\n            item.system.technology.conceal.base = 0;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            ammoDatas.push(item);\r\n        }\r\n\r\n        for (let i = 0; i < ammoDatas.length; i++) {\r\n            let folderName = 'Misc';\r\n            let ammo = ammoDatas[i];\r\n\r\n            let splitName = ammo.name.split(':');\r\n            if (splitName.length > 1) {\r\n                folderName = splitName[0].trim();\r\n            }\r\n\r\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Ammo/${folderName}`, true);\r\n            // @ts-ignore TODO: Foundry Where is my foundry base data?\r\n            ammo.folder = folder.id;\r\n        }\r\n\r\n        // @ts-ignore\r\n        return await Item.create(ammoDatas) as Item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport MountType = Shadowrun.MountType;\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\nimport ModificationItemData = Shadowrun.ModificationItemData;\r\n\r\nexport class ModParserBase extends TechnologyItemParserBase<ModificationItemData> {\r\n    Parse(jsonData: object, item: ModificationItemData): ModificationItemData {\r\n        item = super.Parse(jsonData, item);\r\n\r\n        item.system.type = 'weapon';\r\n\r\n        item.system.mount_point = ImportHelper.StringValue(jsonData, 'mount') as MountType;\r\n\r\n        item.system.rc = ImportHelper.IntValue(jsonData, 'rc', 0);\r\n        item.system.accuracy = ImportHelper.IntValue(jsonData, 'accuracy', 0);\r\n\r\n        item.system.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal', 0);\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { ModParserBase } from '../parser/mod/ModParserBase';\r\nimport ModificationItemData = Shadowrun.ModificationItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class ModImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public accessoryTranslations: any;\r\n    public files = ['weapons.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('accessories') && jsonObject['accessories'].hasOwnProperty('accessory');\r\n    }\r\n\r\n    GetDefaultData(): ModificationItemData {\r\n        return {\r\n            name: '',\r\n            type: 'modification',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: DefaultValues.technologyData({rating: 1, equipped: true}),\r\n                type: '',\r\n                mount_point: '',\r\n                dice_pool: 0,\r\n                accuracy: 0,\r\n                rc: 0,\r\n            }\r\n        } as ModificationItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonWeaponsi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        // Parts of weapon accessory translations are within the application translation. Currently only data translation is used.\r\n        this.accessoryTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponsi18n, 'accessories', 'accessory');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const parser = new ModParserBase();\r\n\r\n        let datas: ModificationItemData[] = [];\r\n        let jsonDatas = jsonObject['accessories']['accessory'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData());\r\n            item.name = ImportHelper.MapNameToTranslation(this.accessoryTranslations, item.name);\r\n\r\n            let folderName = item.system.mount_point !== undefined ? item.system.mount_point : 'Other';\r\n            if (folderName.includes('/')) {\r\n                let splitName = folderName.split('/');\r\n                folderName = splitName[0];\r\n            }\r\n\r\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Mods/${folderName}`, true);\r\n            //@ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folder.id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            datas.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(datas);\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport SpellCateogry = Shadowrun.SpellCateogry;\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\nexport class SpellParserBase extends ItemParserBase<SpellItemData> {\r\n    public Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\r\n        item.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n        item.system.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as SpellCateogry;\r\n\r\n        let damage = ImportHelper.StringValue(jsonData, 'damage');\r\n        if (damage === 'P') {\r\n            item.system.action.damage.type.base = 'physical';\r\n            item.system.action.damage.type.value = 'physical';\r\n        } else if (damage === 'S') {\r\n            item.system.action.damage.type.base = 'stun';\r\n            item.system.action.damage.type.value = 'stun';\r\n        }\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'I') {\r\n            item.system.duration = 'instant';\r\n        } else if (duration === 'S') {\r\n            item.system.duration = 'sustained';\r\n        } else if (duration === 'P') {\r\n            item.system.duration = 'permanent';\r\n        }\r\n\r\n        let drain = ImportHelper.StringValue(jsonData, 'dv');\r\n        if (drain.includes('+') || drain.includes('-')) {\r\n            item.system.drain = parseInt(drain.substring(1, drain.length));\r\n        }\r\n\r\n        let range = ImportHelper.StringValue(jsonData, 'range');\r\n        if (range === 'T') {\r\n            item.system.range = 'touch';\r\n        } else if (range === 'LOS') {\r\n            item.system.range = 'los';\r\n        } else if (range === 'LOS (A)') {\r\n            item.system.range = 'los_a';\r\n        }\r\n\r\n        let type = ImportHelper.StringValue(jsonData, 'type');\r\n        if (type === 'P') {\r\n            item.system.type = 'physical';\r\n        } else if (type === 'M') {\r\n            item.system.type = 'mana';\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\nexport class CombatSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        // Lower case is needed for the system.\r\n        item.system.combat.type = descriptor.includes('Indirect') ? 'indirect' : 'direct';\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\nexport class ManipulationSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        // Sometimes the field misses altogether.\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor', '');\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        item.system.manipulation.environmental = descriptor.includes('Environmental');\r\n        // Generally no resistance roll.\r\n\r\n        item.system.manipulation.mental = descriptor.includes('Mental');\r\n        if (item.system.manipulation.mental) {\r\n            item.system.action.opposed.type = 'custom';\r\n            item.system.action.opposed.attribute = 'logic';\r\n            item.system.action.opposed.attribute2 = 'willpower';\r\n        }\r\n\r\n        item.system.manipulation.physical = descriptor.includes('Physical');\r\n        if (item.system.manipulation.physical) {\r\n            item.system.action.opposed.type = 'custom';\r\n            item.system.action.opposed.attribute = 'body';\r\n            item.system.action.opposed.attribute2 = 'strength';\r\n        }\r\n        item.system.manipulation.damaging = descriptor.includes('Damaging');\r\n        if (item.system.manipulation.damaging) {\r\n            item.system.action.opposed.type = 'soak';\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\nexport class IllusionSpellParser extends SpellParserBase {\r\n    Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        if (item.system.type === 'mana') {\r\n            item.system.action.opposed.type = 'custom';\r\n            item.system.action.opposed.attribute = 'logic';\r\n            item.system.action.opposed.attribute2 = 'willpower';\r\n        } else if (item.system.type === 'physical') {\r\n            item.system.action.opposed.type = 'custom';\r\n            item.system.action.opposed.attribute = 'intuition';\r\n            item.system.action.opposed.attribute2 = 'logic';\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { SpellParserBase } from './SpellParserBase';\r\nimport { ImportHelper } from '../../helper/ImportHelper';\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\n\r\nexport class DetectionSpellImporter extends SpellParserBase {\r\n    Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\r\n        // A few spells have a missing descriptor instead of an empty string.\r\n        // The field is <descriptor /> rather than <descriptor></descriptor>\r\n        // which gets imported as undefined rather than empty string (sigh)\r\n        // Rather than refactor our ImportHelper we'll handle it in here.\r\n        if (descriptor === undefined) {\r\n            descriptor = '';\r\n        }\r\n\r\n        item.system.detection.passive = descriptor.includes('Passive');\r\n        if (!item.system.detection.passive) {\r\n            item.system.action.opposed.type = 'custom';\r\n            item.system.action.opposed.attribute = 'willpower';\r\n            item.system.action.opposed.attribute2 = 'logic';\r\n        }\r\n\r\n        item.system.detection.extended = descriptor.includes('Extended');\r\n\r\n        if (descriptor.includes('Psychic')) {\r\n            item.system.detection.type = 'psychic';\r\n        } else if (descriptor.includes('Directional')) {\r\n            item.system.detection.type = 'directional';\r\n        } else if (descriptor.includes('Area')) {\r\n            item.system.detection.type = 'area';\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { SpellParserBase } from '../parser/spell/SpellParserBase';\r\nimport { CombatSpellParser } from '../parser/spell/CombatSpellParser';\r\nimport { ManipulationSpellParser } from '../parser/spell/ManipulationSpellParser';\r\nimport { IllusionSpellParser } from '../parser/spell/IllusionSpellParser';\r\nimport { DetectionSpellImporter } from '../parser/spell/DetectionSpellImporter';\r\nimport { ParserMap } from '../parser/ParserMap';\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport SpellItemData = Shadowrun.SpellItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class SpellImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['spells.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('spells') && jsonObject['spells'].hasOwnProperty('spell');\r\n    }\r\n\r\n    GetDefaultData(): SpellItemData {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            type: 'spell',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: DefaultValues.actionData({\r\n                    type: 'varies',\r\n                    attribute: 'magic',\r\n                    skill: 'spellcasting',\r\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}})}),\r\n                drain: 0,\r\n                category: '',\r\n                type: '',\r\n                range: '',\r\n                duration: '',\r\n                extended: false,\r\n                combat: {\r\n                    type: '',\r\n                },\r\n                detection: {\r\n                    passive: false,\r\n                    type: '',\r\n                    extended: false,\r\n                },\r\n                illusion: {\r\n                    type: '',\r\n                    sense: '',\r\n                },\r\n                manipulation: {\r\n                    damaging: false,\r\n                    mental: false,\r\n                    environmental: false,\r\n                    physical: false,\r\n                },\r\n            },\r\n        } as SpellItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonSpelli18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonSpelli18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonSpelli18n, 'spells', 'spell');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Spells', this.categoryTranslations);\r\n\r\n        const parser = new ParserMap<SpellItemData>('category', [\r\n            { key: 'Combat', value: new CombatSpellParser() },\r\n            { key: 'Manipulation', value: new ManipulationSpellParser() },\r\n            { key: 'Illusion', value: new IllusionSpellParser() },\r\n            { key: 'Detection', value: new DetectionSpellImporter() },\r\n            { key: 'Health', value: new SpellParserBase() },\r\n            { key: 'Enchantments', value: new SpellParserBase() },\r\n            { key: 'Rituals', value: new SpellParserBase() },\r\n        ]);\r\n\r\n        let items: SpellItemData[] = [];\r\n        let jsonDatas = jsonObject['spells']['spell'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n            //@ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folders[item.system.category].id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(items);\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\nimport QualityItemData = Shadowrun.QualityItemData;\r\n\r\nexport class QualityParserBase extends ItemParserBase<QualityItemData> {\r\n    public Parse(jsonData: object, item: QualityItemData, jsonTranslation?): QualityItemData {\r\n        // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n        item.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        item.system.type = ImportHelper.StringValue(jsonData, 'category') === 'Positive' ? 'positive' : 'negative';\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { QualityParserBase } from '../parser/quality/QualityParserBase';\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport QualityItemData = Shadowrun.QualityItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class QualityImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['qualities.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('qualities') && jsonObject['qualities'].hasOwnProperty('quality');\r\n    }\r\n\r\n    GetDefaultData(): QualityItemData {\r\n        return {\r\n            name: 'Unnamed Quality',\r\n            type: 'quality',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: DefaultValues.actionData({\r\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\r\n                }),\r\n                type: '',\r\n            },\r\n        } as QualityItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonQualityi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonQualityi18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonQualityi18n, 'qualities', 'quality');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const jsonNameTranslations = {};\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Qualities', this.categoryTranslations);\r\n\r\n        const parser = new QualityParserBase();\r\n\r\n        let items: QualityItemData[] = [];\r\n        let jsonDatas = jsonObject['qualities']['quality'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n\r\n            let category = ImportHelper.StringValue(jsonData, 'category');\r\n            //@ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folders[category.toLowerCase()].id;\r\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(items);\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\nimport ComplexFormTarget = Shadowrun.ComplexFormTarget;\r\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\r\n\r\nexport class ComplexFormParserBase extends ItemParserBase<ComplexFormItemData> {\r\n    Parse(jsonData: object, item: ComplexFormItemData, jsonTranslation?: object): ComplexFormItemData {\r\n        // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n        item.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n\r\n        let fade = ImportHelper.StringValue(jsonData, 'fv');\r\n        if (fade.includes('+') || fade.includes('-')) {\r\n            item.system.fade = parseInt(fade.substring(1, fade.length));\r\n        }\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'I') {\r\n            item.system.duration = 'instant';\r\n        } else if (duration === 'S') {\r\n            item.system.duration = 'sustained';\r\n        } else if (duration === 'P') {\r\n            item.system.duration = 'permanent';\r\n        }\r\n\r\n        let target = ImportHelper.StringValue(jsonData, 'target');\r\n        switch (target) {\r\n            case 'Device':\r\n            case 'File':\r\n            case 'Host':\r\n            case 'Persona':\r\n            case 'Self':\r\n            case 'Sprite':\r\n                item.system.target = target.toLowerCase() as ComplexFormTarget;\r\n                break;\r\n            default:\r\n                item.system.target = 'other';\r\n                break;\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { Constants } from './Constants';\r\nimport { ComplexFormParserBase } from '../parser/complex-form/ComplexFormParserBase';\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class ComplexFormImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public nameTranslations: any;\r\n    public files = ['complexforms.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('complexforms') && jsonObject['complexforms'].hasOwnProperty('complexform');\r\n    }\r\n\r\n    GetDefaultData(): ComplexFormItemData {\r\n        return {\r\n            name: 'Unnamed Form',\r\n            type: 'complex_form',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: DefaultValues.actionData({\r\n                    type: 'complex',\r\n                    attribute: 'resonance',\r\n                    skill: 'compiling'\r\n                }),\r\n                target: '',\r\n                duration: '',\r\n                fade: 0,\r\n            },\r\n        } as ComplexFormItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        // Complexforms don't provide a category translation.\r\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.nameTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, 'complexforms', 'complexform');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const parser = new ComplexFormParserBase();\r\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Complex Forms`, true);\r\n\r\n        let items: ComplexFormItemData[] = [];\r\n        let jsonDatas = jsonObject['complexforms']['complexform'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData(), this.nameTranslations);\r\n\r\n            // @ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folder.id;\r\n\r\n            // TODO: Follow ComplexFormParserBase approach.\r\n            item.name = ImportHelper.MapNameToTranslation(this.nameTranslations, item.name);\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore\r\n        return await Item.create(items) as Item;\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\r\nimport Ware = Shadowrun.WareItemData;\r\n\r\nexport class CyberwareParser extends TechnologyItemParserBase<Ware> {\r\n    Parse(jsonData: object, item: Ware, jsonTranslation?: object): Ware {\r\n        item = super.Parse(jsonData, item, jsonTranslation);\r\n\r\n        const essence = ImportHelper.StringValue(jsonData, 'ess', '0').match(/[0-9]\\.?[0-9]*/g);\r\n        if (essence !== null) {\r\n            item.system.essence = parseFloat(essence[0]);\r\n        }\r\n\r\n        const capacity = ImportHelper.StringValue(jsonData, 'capacity', '0').match(/[0-9]+/g);\r\n        if (capacity !== null) {\r\n            item.system.capacity = parseInt(capacity[0]);\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import { DataImporter } from './DataImporter';\r\nimport { ImportHelper } from '../helper/ImportHelper';\r\nimport { CyberwareParser } from '../parser/ware/CyberwareParser';\r\nimport Ware = Shadowrun.WareItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class WareImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['cyberware.xml', 'bioware.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('cyberwares') && jsonObject['cyberwares'].hasOwnProperty('cyberware') ||\r\n               jsonObject.hasOwnProperty('biowares') && jsonObject['biowares'].hasOwnProperty('bioware');\r\n    }\r\n\r\n    GetDefaultCyberwareData(): CyberwareItemData {\r\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\r\n        return {...this.GetDefaultData(), type: 'cyberware'};\r\n    }\r\n\r\n    GetDefaultBiowareData(): CyberwareItemData {\r\n        //@ts-ignore // Bio/Cyberware conflicts on 'type'...\r\n        return {...this.GetDefaultData(), type: 'bioware'};\r\n    }\r\n\r\n    GetDefaultData(): Ware {\r\n        return {\r\n            name: 'Unnamed Form',\r\n            type: 'cyberware',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                technology: DefaultValues.technologyData({rating: 1}),\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n                action: DefaultValues.actionData(),\r\n                grade: 'standard',\r\n                essence: 0,\r\n                capacity: 0,\r\n            },\r\n        } as Ware;\r\n    }\r\n    ExtractTranslation(fileName) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, fileName);\r\n         // TODO: Move ExtractTranslation phase before the parsing phase and initiate it with the filename to parse.\r\n            if (this.files.length !== 2) console.error('Lazily hacked code will fail for more or less than two files.');\r\n\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonItemi18n);\r\n\r\n        const {typeKey, listKey} = fileName === 'cyberware.xml' ?\r\n                {typeKey: 'cyberwares', listKey: 'cyberware'} :\r\n                {typeKey: 'biowares', listKey: 'bioware'};\r\n\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, typeKey, listKey);\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const cyberParser = new CyberwareParser();\r\n\r\n        let key = jsonObject.hasOwnProperty('cyberwares') ? 'Cyberware' : 'Bioware';\r\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, key);\r\n\r\n        key = key.toLowerCase();\r\n        let items: Ware[] = [];\r\n        let jsonDatas = jsonObject[key + 's'][key];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            if (DataImporter.unsupportedEntry(jsonData)) {\r\n                continue;\r\n            }\r\n\r\n            const defaultData = key === 'cyberware' ? this.GetDefaultCyberwareData() : this.GetDefaultBiowareData();\r\n            let item = cyberParser.Parse(jsonData, defaultData, this.itemTranslations);\r\n            const category = ImportHelper.StringValue(jsonData, 'category');\r\n\r\n            // TODO: Does this type mixture cause later issues? Will it carry over?\r\n            //@ts-ignore\r\n            item.folder = folders[category.toLowerCase()].id;\r\n\r\n            // // TODO: Follow ComplexFormParserBase approach.\r\n            // data.name = ImportHelper.MapNameToTranslation(this.itemTranslations, data.name);\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(items);\r\n    }\r\n}\r\n", "import { ImportHelper } from '../../helper/ImportHelper';\r\nimport CritterPowerCategory = Shadowrun.CritterPowerCategory;\r\nimport { ItemParserBase } from '../item/ItemParserBase';\r\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\r\n\r\nexport class CritterPowerParserBase extends ItemParserBase<CritterPowerItemData> {\r\n    public Parse(jsonData: object, item: CritterPowerItemData, jsonTranslation?: object): CritterPowerItemData {\r\n        // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n        item.name = ImportHelper.StringValue(jsonData, 'name');\r\n\r\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\r\n        item.system.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as CritterPowerCategory;\r\n\r\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\r\n        if (duration === 'Always') {\r\n            item.system.duration = 'always';\r\n        } else if (duration === 'Instant') {\r\n            item.system.duration = 'instant';\r\n        } else if (duration === 'Sustained') {\r\n            item.system.duration = 'sustained';\r\n        } else if (duration === 'Permanent') {\r\n            item.system.duration = 'permanent';\r\n        } else {\r\n              item.system.duration = 'special';\r\n        }\r\n\r\n        let range = ImportHelper.StringValue(jsonData, 'range');\r\n        if (range === 'T') {\r\n            item.system.range = 'touch';\r\n        } else if (range === 'LOS') {\r\n            item.system.range = 'los';\r\n        } else if (range === 'LOS (A)') {\r\n            item.system.range = 'los_a';\r\n        } else if (range === 'Self') {\r\n           item.system.range = 'self';\r\n        } else {\r\n          item.system.range = 'special';\r\n        }\r\n\r\n        let type = ImportHelper.StringValue(jsonData, 'type');\r\n        if (type === 'P') {\r\n            item.system.powerType = 'physical';\r\n        } else if (type === 'M') {\r\n            item.system.powerType = 'mana';\r\n        }\r\n\r\n        if (jsonTranslation) {\r\n            const origName = ImportHelper.StringValue(jsonData, 'name');\r\n            // @ts-ignore // TODO: Foundry Where is my foundry base data?\r\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\r\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\r\n        }\r\n\r\n        return item;\r\n    }\r\n}\r\n", "import {DataImporter} from './DataImporter';\r\nimport {ImportHelper} from '../helper/ImportHelper';\r\nimport {CritterPowerParserBase} from '../parser/critter-power/CritterPowerParserBase';\r\nimport {Constants} from './Constants';\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class CritterPowerImporter extends DataImporter {\r\n    public categoryTranslations: any;\r\n    public itemTranslations: any;\r\n    public files = ['critterpowers.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('powers') && jsonObject['powers'].hasOwnProperty('power');\r\n    }\r\n\r\n    GetDefaultData(): CritterPowerItemData {\r\n        return {\r\n            name: 'Unnamed Item',\r\n            type: 'critter_power',\r\n            system: {\r\n                description: {\r\n                    value: '',\r\n                    chat: '',\r\n                    source: '',\r\n                },\r\n                action: DefaultValues.actionData({\r\n                    damage: DefaultValues.damageData({type: {base: '', value: ''}}),\r\n                }),\r\n                armor: {\r\n                    value: 0,\r\n                    mod: false,\r\n                    acid: 0,\r\n                    cold: 0,\r\n                    fire: 0,\r\n                    electricity: 0,\r\n                    radiation: 0,\r\n                },\r\n                category: '',\r\n                powerType: '',\r\n                range: '',\r\n                duration: '',\r\n                karma: 0,\r\n            },\r\n        } as CritterPowerItemData;\r\n    }\r\n\r\n    ExtractTranslation() {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonCritterPoweri18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonCritterPoweri18n);\r\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonCritterPoweri18n, 'powers', 'power');\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const parser = new CritterPowerParserBase();\r\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Critter Powers`, true);\r\n\r\n        let items: CritterPowerItemData[] = [];\r\n        let jsonDatas = jsonObject['powers']['power'];\r\n        for (let i = 0; i < jsonDatas.length; i++) {\r\n            let jsonData = jsonDatas[i];\r\n\r\n            let item = parser.Parse(jsonData, this.GetDefaultData(), this.itemTranslations);\r\n\r\n            // @ts-ignore TODO: Foundry Where is my foundry base data?\r\n            item.folder = folder.id;\r\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            items.push(item);\r\n        }\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(items);\r\n    }\r\n}\r\n", "import {DataImporter} from \"./DataImporter\";\r\nimport {ImportHelper} from \"../helper/ImportHelper\";\r\nimport {Constants} from \"./Constants\";\r\nimport DeviceItemData = Shadowrun.DeviceItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class DeviceImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData(): DeviceItemData {\r\n        return DefaultValues.deviceItemData();\r\n    }\r\n\r\n    ExtractTranslation(fileName?: string) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    ParseCommlinkDevices(commlinks, folder) {\r\n        const entries = [];\r\n\r\n        for (const commlink of commlinks) {\r\n            if (DataImporter.unsupportedEntry(commlink)) {\r\n                continue;\r\n            }\r\n            const item = this.GetDefaultData();\r\n            \r\n            item.name = ImportHelper.StringValue(commlink, 'name');\r\n            item.name = ImportHelper.MapNameToTranslation(this.entryTranslations, item.name);\r\n\r\n            item.system.description.source = `${ImportHelper.StringValue(commlink, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(commlink, 'name'), ImportHelper.StringValue(commlink, 'page'))}`;\r\n            item.system.technology.rating = ImportHelper.IntValue(commlink, 'devicerating', 0);\r\n            item.system.technology.availability = ImportHelper.StringValue(commlink, 'avail');\r\n            item.system.technology.cost = ImportHelper.IntValue(commlink, 'cost', 0);\r\n            item.system.atts.att3.value = ImportHelper.IntValue(commlink, 'dataprocessing', 0);\r\n            item.system.atts.att4.value = ImportHelper.IntValue(commlink, 'firewall', 0);\r\n\r\n            //@ts-ignore\r\n            item.folder = folder.id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            //@ts-ignore\r\n            entries.push(item);\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    ParseCyberdeckDevices(cyberdecks, folder) {\r\n        const items = [];\r\n\r\n        for (const cyberdeck of cyberdecks) {\r\n            if (DataImporter.unsupportedEntry(cyberdeck)) {\r\n                continue;\r\n            }\r\n\r\n            const item = this.GetDefaultData();\r\n\r\n            item.system.category = 'cyberdeck';\r\n            item.name = ImportHelper.StringValue(cyberdeck, 'name');\r\n            item.name = ImportHelper.MapNameToTranslation(this.entryTranslations, item.name);\r\n\r\n            item.system.description.source = `${ImportHelper.StringValue(cyberdeck, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(cyberdeck, 'name'), ImportHelper.StringValue(cyberdeck, 'page'))}`;\r\n            item.system.technology.rating = ImportHelper.IntValue(cyberdeck, 'devicerating', 0);\r\n            item.system.technology.availability = ImportHelper.StringValue(cyberdeck, 'avail');\r\n            item.system.technology.cost = ImportHelper.IntValue(cyberdeck, 'cost', 0);\r\n\r\n            // Some cyberdecks have a flexible attribute order\r\n            // attributearray is a ',' separated list of values. Since it's hacky, be very unforgiving.\r\n            if (cyberdeck.hasOwnProperty('attributearray')) {\r\n                const attributeOrder = ImportHelper.StringValue(cyberdeck, 'attributearray').split(',');\r\n                const att1 = Number(attributeOrder[0]);\r\n                const att2 = Number(attributeOrder[1]);\r\n                const att3 = Number(attributeOrder[2]);\r\n                const att4 = Number(attributeOrder[3]);\r\n                item.system.atts.att1.value = att1;\r\n                item.system.atts.att2.value = att2;\r\n                item.system.atts.att3.value = att3;\r\n                item.system.atts.att4.value = att4;\r\n\r\n            // Some cyberdecks have a fixed attribute order\r\n            } else if (cyberdeck.hasOwnProperty('attack')) {\r\n                item.system.atts.att1.value = ImportHelper.IntValue(cyberdeck, 'attack', 0);\r\n                item.system.atts.att2.value = ImportHelper.IntValue(cyberdeck, 'sleaze', 0);\r\n                item.system.atts.att3.value = ImportHelper.IntValue(cyberdeck, 'dataprocessing', 0);\r\n                item.system.atts.att4.value = ImportHelper.IntValue(cyberdeck, 'firewall', 0);\r\n            }\r\n\r\n            //@ts-ignore\r\n            item.folder = folder.id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            //@ts-ignore\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        let entries = [];\r\n        const commlinks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Commlinks');\r\n        const cyberdecks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Cyberdecks');\r\n\r\n        let commlinksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCommlink')}`, true);\r\n        let cyberdecksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.DeviceCatCyberdeck')}`, true);\r\n\r\n        entries = entries.concat(this.ParseCommlinkDevices(commlinks, commlinksFolder));\r\n        entries = entries.concat(this.ParseCyberdeckDevices(cyberdecks, cyberdecksFolder));\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(entries)\r\n    }\r\n\r\n    /* List of unsupported Commlinks, due to dynamics value calculations.\r\n     */\r\n    static unsupportedEntry(jsonData): boolean {\r\n        if (DataImporter.unsupportedEntry(jsonData)) {\r\n            return true;\r\n        }\r\n\r\n        const unsupportedIds = [\r\n            'd63eb841-7b15-4539-9026-b90a4924aeeb',  // Dynamic rating value.\r\n        ];\r\n        return unsupportedIds.includes(ImportHelper.StringValue(jsonData, 'id'));\r\n    }\r\n}", "import {DataImporter} from \"./DataImporter\";\r\nimport {ImportHelper} from \"../helper/ImportHelper\";\r\nimport {Constants} from \"./Constants\";\r\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {Helpers} from \"../../helpers\";\r\n\r\nexport class EquipmentImporter extends DataImporter {\r\n    public files = ['gear.xml'];\r\n\r\n    CanParse(jsonObject: object): boolean {\r\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\r\n    }\r\n\r\n    GetDefaultData(): EquipmentItemData {\r\n        return DefaultValues.equipmentItemData();\r\n    }\r\n\r\n    ExtractTranslation(fileName?: string) {\r\n        if (!DataImporter.jsoni18n) {\r\n            return;\r\n        }\r\n\r\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\r\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\r\n        this.entryTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\r\n    }\r\n\r\n    async ParseEquipments(equipments) {\r\n        const items = [];\r\n\r\n        for (const equipment of equipments) {\r\n            if (DataImporter.unsupportedEntry(equipment)) {\r\n                continue;\r\n            }\r\n\r\n            // Replace / as it's used as a separator in GetFolderAtPath.\r\n            const category = ImportHelper.TranslateCategory(ImportHelper.StringValue(equipment, 'category'), this.categoryTranslations).replace('/', ' ');\r\n            let categoryFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR5.Gear')}/${category}`, true);\r\n\r\n            const item = this.GetDefaultData();\r\n            item.name = ImportHelper.StringValue(equipment, 'name');\r\n            item.name = ImportHelper.MapNameToTranslation(this.entryTranslations, item.name);\r\n\r\n            item.system.description.source = `${ImportHelper.StringValue(equipment, 'source')} ${ImportHelper.MapNameToPageSource(this.entryTranslations, ImportHelper.StringValue(equipment, 'name'), ImportHelper.StringValue(equipment, 'page'))}`;\r\n            item.system.technology.rating = ImportHelper.IntValue(equipment, 'rating', 0);\r\n            item.system.technology.availability = ImportHelper.StringValue(equipment, 'avail');\r\n            item.system.technology.cost = ImportHelper.IntValue(equipment, 'cost', 0);\r\n\r\n            //@ts-ignore\r\n            item.folder = categoryFolder.id;\r\n\r\n            Helpers.injectActionTestsIntoChangeData(item.type, item, item);\r\n\r\n            //@ts-ignore\r\n            items.push(item);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    FilterJsonObjects(jsonObject) {\r\n        const unsupportedCategories = [\r\n            'Ammunition',\r\n            'Commlinks',\r\n            'Cyberdecks',\r\n            'Hacking Programs',\r\n            'Rigger Command Consoles',\r\n            'Custom'\r\n        ]\r\n\r\n        return jsonObject['gears']['gear'].filter(gear => !unsupportedCategories.includes(ImportHelper.StringValue(gear, 'category', '')));\r\n    }\r\n\r\n    async Parse(jsonObject: object): Promise<Item> {\r\n        const equipments = this.FilterJsonObjects(jsonObject);\r\n\r\n        const items = await this.ParseEquipments(equipments);\r\n\r\n        // @ts-ignore // TODO: TYPE: Remove this.\r\n        return await Item.create(items);\r\n    }\r\n}", "import { WeaponImporter } from '../importer/WeaponImporter';\r\nimport { ArmorImporter } from '../importer/ArmorImporter';\r\nimport { DataImporter } from '../importer/DataImporter';\r\nimport { AmmoImporter } from '../importer/AmmoImporter';\r\nimport { ModImporter } from '../importer/ModImporter';\r\nimport { SpellImporter } from '../importer/SpellImporter';\r\nimport { QualityImporter } from '../importer/QualityImporter';\r\nimport { ComplexFormImporter } from '../importer/ComplexFormImporter';\r\nimport { WareImporter } from '../importer/WareImporter';\r\nimport { CritterPowerImporter } from '../importer/CritterPowerImporter';\r\nimport { ImportHelper, ImportMode } from '../helper/ImportHelper';\r\nimport {DeviceImporter} from \"../importer/DeviceImporter\";\r\nimport {EquipmentImporter} from \"../importer/EquipmentImporter\";\r\n\r\n\r\nexport class Import extends Application {\r\n    private supportedDataFiles: string[] = [];\r\n    private dataFiles: File[] = [];\r\n    private langDataFile: File;\r\n    private parsedFiles: string[] = [];\r\n    private disableImportButton: boolean = true;\r\n    private currentParsedFile: string;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.collectDataImporterFileSupport();\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-data-import';\r\n        options.classes = ['app', 'window-app', 'filepicker'];\r\n        options.title = 'Chummer/Data Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/compendium-import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData(options?: any) {\r\n        const data = super.getData(options) as any;\r\n\r\n        data.dataFiles = {};\r\n        this.supportedDataFiles.forEach((supportedFileName: string) => {\r\n            const missing = !this.dataFiles.some((dataFile) => supportedFileName === dataFile.name);\r\n            const parsed = this.parsedFiles.some((parsedFileName) => supportedFileName === parsedFileName);\r\n            const parsing = supportedFileName === this.currentParsedFile;\r\n\r\n            data.dataFiles[supportedFileName] = {\r\n                name: supportedFileName,\r\n                missing,\r\n                parsed,\r\n                parsing\r\n            };\r\n        });\r\n        data.langDataFile = this.langDataFile ? this.langDataFile.name : '';\r\n        data.finishedOverallParsing = this.supportedDataFiles.length === this.parsedFiles.length;\r\n        data.disableImportButton = this.disableImportButton;\r\n\r\n        return { ...data };\r\n    }\r\n\r\n    private collectDataImporterFileSupport() {\r\n        this.supportedDataFiles = [];\r\n        Import.Importers.forEach(importer => {\r\n            if (this.supportedDataFiles.some(supported => importer.files.includes(supported))) {\r\n                return;\r\n            }\r\n            this.supportedDataFiles = this.supportedDataFiles.concat(importer.files);\r\n        });\r\n    }\r\n\r\n    private clearParsingStatus() {\r\n        this.parsedFiles = [];\r\n    }\r\n\r\n    //Order is important, ex. some weapons need mods to fully import\r\n    static Importers: DataImporter[] = [\r\n        new ModImporter(),\r\n        new WeaponImporter(),\r\n        new ArmorImporter(),\r\n        new AmmoImporter(),\r\n        new SpellImporter(),\r\n        new ComplexFormImporter(),\r\n        new QualityImporter(),\r\n        new WareImporter(),\r\n        new CritterPowerImporter(),\r\n        new DeviceImporter(),\r\n        new EquipmentImporter()\r\n    ];\r\n\r\n    async parseXML(xmlSource, fileName) {\r\n        let jsonSource = await DataImporter.xml2json(xmlSource);\r\n        ImportHelper.SetMode(ImportMode.XML);\r\n\r\n        for (const di of Import.Importers) {\r\n            if (di.CanParse(jsonSource)) {\r\n                di.ExtractTranslation(fileName);\r\n                await di.Parse(jsonSource);\r\n            }\r\n        }\r\n    }\r\n\r\n    async parseXmli18n(xmlSource) {\r\n        if (!xmlSource) {\r\n            return;\r\n        }\r\n        let jsonSource = await DataImporter.xml2json(xmlSource);\r\n\r\n        if (DataImporter.CanParseI18n(jsonSource)) {\r\n            DataImporter.ParseTranslation(jsonSource);\r\n        }\r\n    }\r\n\r\n    isDataFile = (file: File): boolean => {\r\n        return this.supportedDataFiles.some((supported) => supported === file.name);\r\n    };\r\n\r\n    isLangDataFile = (file: File): boolean => {\r\n        const pattern = /[a-zA-Z]{2}-[a-zA-Z]{2}_data\\.xml/;\r\n        return file.name.match(pattern) !== null;\r\n    };\r\n\r\n    activateListeners(html) {\r\n        html.find(\"button[type='submit']\").on('click', async (event) => {\r\n            event.preventDefault();\r\n\r\n            this.clearParsingStatus();\r\n            this.disableImportButton = true;\r\n\r\n            await this.render();\r\n\r\n            if (this.langDataFile) {\r\n                const text = await this.langDataFile.text();\r\n                await this.parseXmli18n(text);\r\n            }\r\n\r\n            // Use 'for of'-loop to allow await to actually pause.\r\n            // don't use .forEach as it won't await for async callbacks.\r\n            // iterate over supportedDataFiles to adhere to Importer order\r\n            for (const supportedFile of this.supportedDataFiles) {\r\n                // Only try supported files.\r\n                const dataFile = this.dataFiles.find((dataFile) => dataFile.name === supportedFile);\r\n                if (dataFile) {\r\n                    const text = await dataFile.text();\r\n\r\n                     // Show status for current parsing progression.\r\n                    this.currentParsedFile = dataFile.name;\r\n                    await this.render();\r\n\r\n\r\n                    await this.parseXML(text, dataFile.name);\r\n\r\n                    // Store status to show parsing progression.\r\n                    if (!this.parsedFiles.some((parsedFileName) => parsedFileName === dataFile.name)) {\r\n                        this.parsedFiles.push(dataFile.name);\r\n                    }\r\n\r\n                    await this.render();\r\n                }\r\n            }\r\n\r\n            this.disableImportButton = false;\r\n\r\n            await this.render();\r\n        });\r\n\r\n        html.find(\"input[type='file'].langDataFileDrop\").on('change', async (event) => {\r\n            Array.from(event.target.files).forEach((file: File) => {\r\n                if (this.isLangDataFile(file)) {\r\n                    this.langDataFile = file;\r\n                    this.render();\r\n                }\r\n            });\r\n            return true;\r\n        });\r\n\r\n        html.find(\"input[type='file'].filedatadrop\").on('change', async (event) => {\r\n            Array.from(event.target.files).forEach((file: File) => {\r\n                if (this.isDataFile(file)) {\r\n                    // Allow user to overwrite an already added file, they have their reasons.\r\n                    const existingIdx = this.dataFiles.findIndex((dataFile) => dataFile.name === file.name);\r\n                    if (existingIdx === -1) {\r\n                        this.dataFiles.push(file);\r\n                    } else {\r\n                        this.dataFiles[existingIdx] = file;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.dataFiles.length > 0) {\r\n                this.disableImportButton = false;\r\n            }\r\n\r\n            this.render();\r\n        });\r\n    }\r\n}\r\n", "import {FLAGS, SYSTEM_NAME} from \"../constants\";\r\n\r\nexport class ChangelogApplication extends Application {\r\n    get template(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/changelog.html';\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = game.i18n.localize('SR5.ChangelogApplication.Title');\r\n        options.width = 500;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    render(force?: boolean, options?: Application.RenderOptions) {\r\n        ChangelogApplication.setRenderForCurrentVersion();\r\n        return super.render(force, options);\r\n    }\r\n\r\n    // Let the async operation happen in background.\r\n    private static setRenderForCurrentVersion() {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        game.user?.setFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion, game.system.version);\r\n    }\r\n\r\n    static get showApplication(): boolean {\r\n        if (!game.user?.isGM || !game.user?.isTrusted) return false;\r\n\r\n        const shownForVersion = game.user?.getFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion);\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        return shownForVersion !== game.system.version;\r\n    }\r\n}", "import { SR5Actor } from \"../actor/SR5Actor\";\r\nimport { SYSTEM_NAME } from \"../constants\";\r\nimport { Helpers } from \"../helpers\";\r\nimport { ModifiableDocumentTypes, DocumentSituationModifiers } from \"../rules/DocumentSituationModifiers\";\r\n\r\nimport EnvironmentalModifierLevels = Shadowrun.EnvironmentalModifierLevels;\r\nimport EnvironmentalModifierCategories = Shadowrun.EnvironmentalModifierCategories;\r\n\r\n\r\ninterface SituationalModifiersTemplateData extends FormApplication.Data<{}> {\r\n    targetType: string\r\n    targetName: string\r\n    modifiers: DocumentSituationModifiers\r\n    environmentalLevels: EnvironmentalModifierLevels\r\n}\r\n\r\n\r\n/**\r\n * General abstract handler for sheet actions for a specific situational modifier category.\r\n */\r\n abstract class ModifiersHandler {\r\n    app: SituationModifiersApplication\r\n\r\n    constructor(situationModifiersApp: SituationModifiersApplication) {\r\n        this.app = situationModifiersApp;\r\n    }\r\n\r\n    /**\r\n     * Provide template data fields necessary for the extending modifier type to be added to a\r\n     * general template data object.\r\n     */\r\n    abstract getData(options?: object): any;\r\n    /**\r\n     * Define what event listeners to register for the extending modifier type.\r\n     */\r\n    abstract activateListeners(html: JQuery<HTMLElement>): void;\r\n    /**\r\n     * Define what token hud buttons to register for the extending modifier type.\r\n     * \r\n     * NOTE: TypeScript doesn't support abstract static method definitions as of yet.\r\n     */\r\n    static addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR5Actor, modifiers: DocumentSituationModifiers): void {\r\n        console.error(`Shadowrun5e | Class ${this.constructor.name} must implement static method onRenderTokenHUD`);\r\n    };\r\n}\r\n\r\n/**\r\n * Handle all sheet action for environmental modifiers.\r\n */\r\nclass EnvironmentalModifiersHandler extends ModifiersHandler {\r\n    getData(options?: object | undefined) {\r\n        return {}\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>) {\r\n        console.log(`Shadowrun5e | Registering modifier handler ${this.constructor.name} listeners`);\r\n        $(html).find('button.env-modifier').on('click', this._handleModifierChange.bind(this));\r\n    }\r\n\r\n    static addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR5Actor, modifiers: DocumentSituationModifiers): void {\r\n        console.log(`${SYSTEM_NAME} | Environmental modifier HUD on renderTokenHUD`);\r\n\r\n        // Setup and connect tokenHUD elements.\r\n        const modifier = $('<div class=\"modifier-row\"></div>');\r\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-matrix\">${modifiers.environmental.applied.total}</div>`);\r\n        const modifierDescription = $(`<div class=\"modifier-description open-matrix-modifier\">${game.i18n.localize(\"SR5.ModifierTypes.Environmental\")}</div>`);\r\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'environmental'));\r\n\r\n        modifierColumn.append(modifier);\r\n        modifier.append(modifierValue);\r\n        modifier.append(modifierDescription);\r\n    }\r\n\r\n    async _handleModifierChange(event: Event) {\r\n        event.preventDefault();\r\n\r\n        // Retrieve data from HTML datasets.\r\n        const element = event.currentTarget as HTMLElement;\r\n        if (!element.dataset.category || !element.dataset.value) return;\r\n\r\n        const category = element.dataset.category as keyof EnvironmentalModifierCategories;\r\n        const value = Number(element.dataset.value);\r\n\r\n        this.app.modifiers.environmental.toggleSelection(category, value);\r\n        await this.app.modifiers.updateDocument();\r\n\r\n        // this._updateTokenHUDTotalDisplay();\r\n\r\n        await this.app.render();\r\n    }\r\n\r\n    async _handleRemoveModifiersFromTarget(event: Event) {\r\n        event.preventDefault();\r\n\r\n        this.app.modifiers.environmental.clear();\r\n        await this.clearModifiersOnTarget();\r\n\r\n        // this._updateTokenHUDTotalDisplay();\r\n\r\n        await this.app.render();\r\n    }\r\n\r\n    async clearModifiersOnTarget() {\r\n        await DocumentSituationModifiers.clearEnvironmentalOn(this.app.target);\r\n        // Refresh modifiers. This can be necessary for Actor targets without modifiers when Scene modifiers are present.\r\n        this.app.modifiers = this.app._getModifiers();\r\n    }\r\n\r\n    /** Updates opened tokenHUD modifier values.\r\n     *\r\n     * Doing it this way is just easier as relying on any update / hook workflow.\r\n     */\r\n     _updateTokenHUDTotalDisplay() {\r\n        console.error('FIXME: TokenHUD Update is disabled');\r\n        \r\n        // if (this.app.target instanceof SR5Actor) {\r\n        //     $('.modifier-value-environmental').each((index, element) => {\r\n        //         $(element).html(this.app.modifiers.environmental.total.toString());\r\n        //     });\r\n        // }\r\n    }\r\n}\r\n\r\n\r\nclass MatrixModifiersHandler extends ModifiersHandler {\r\n    getData(options?: object | undefined) {\r\n        return {}\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>) {\r\n    }\r\n\r\n    static addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR5Actor, modifiers: DocumentSituationModifiers): void {\r\n        console.log(`${SYSTEM_NAME} | Matrix modifier HUD on renderTokenHUD`);\r\n\r\n        // Setup and connect tokenHUD elements.\r\n        const modifier = $('<div class=\"modifier-row\"></div>');\r\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-matrix\">${modifiers.noise.applied.total}</div>`);\r\n        const modifierDescription = $(`<div class=\"modifier-description open-matrix-modifier\">${game.i18n.localize(\"SR5.ModifierTypes.Matrix\")}</div>`);\r\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'matrix'));\r\n\r\n        modifierColumn.append(modifier);\r\n        modifier.append(modifierValue);\r\n        modifier.append(modifierDescription);\r\n    }\r\n}\r\n\r\nclass MagicModifiersHandler extends ModifiersHandler {\r\n    getData(options?: object | undefined) {\r\n        return {}\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>) {\r\n        html.find('.remove-magical-from-target').on('click', this.handleClearMagicModifiers.bind(this));\r\n    }\r\n\r\n    static addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR5Actor, modifiers: DocumentSituationModifiers): void {\r\n        console.log(`${SYSTEM_NAME} | Magic modifier HUD on renderTokenHUD`);\r\n\r\n        // Don't add awakend modifiers to token hud for mundane actors.\r\n        if (!actor.isAwakened) return;\r\n\r\n        // Setup and connect tokenHUD elements.\r\n        const modifier = $('<div class=\"modifier-row\"></div>');\r\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-magic\">${modifiers.background_count.applied.total}</div>`);\r\n        const modifierDescription = $(`<div class=\"modifier-description open-magic-modifier\">${game.i18n.localize(\"SR5.ModifierTypes.Magic\")}</div>`);\r\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'magic'));\r\n\r\n        modifierColumn.append(modifier);\r\n        modifier.append(modifierValue);\r\n        modifier.append(modifierDescription);\r\n    }\r\n\r\n    async handleClearMagicModifiers(event) {\r\n        event.preventDefault();\r\n\r\n        this.app.modifiers = await DocumentSituationModifiers.clearCategoryOnDocument(this.app.target, 'background_count');\r\n        this.app.render();\r\n    }\r\n}\r\n\r\n/**\r\n * Give a GM and user access all situational modifiers.\r\n * \r\n * A situational modifiers is anything that doesn't directly depend on the actor but what 'situation' that actor is in:\r\n * - matrix noise\r\n * - magic background noise\r\n * - environmental\r\n * - ...\r\n */\r\nexport class SituationModifiersApplication extends FormApplication {\r\n    // Static Handlers contain the class references used for both static method calls and to setup the instance handlers.\r\n    static _staticHandlers: typeof ModifiersHandler[] = [\r\n        MatrixModifiersHandler, \r\n        MagicModifiersHandler,\r\n        EnvironmentalModifiersHandler\r\n    ];\r\n    // The default sheet tab to open.\r\n    static _defaultTabId: string = 'physical';\r\n    \r\n    // Manage modifiers stored on this target document. This might not be the document meant for those modifiers to be applied to.\r\n    // While a scene can store modifiers, actors have them applied\r\n    target: ModifiableDocumentTypes\r\n    // The modifiers as stored onto the target document.\r\n    modifiers: DocumentSituationModifiers\r\n    // Instance handlers contain all functionality for modifier categories as not to clutter the general application.\r\n    handlers: ModifiersHandler[]\r\n\r\n    constructor(target: ModifiableDocumentTypes) {\r\n        super(target);\r\n        \r\n        this.target = target;\r\n        this.modifiers = this._getModifiers();\r\n        this.handlers = this._prepareHandlers();\r\n    }\r\n\r\n    /**\r\n     * Prepare all handlers used for the different modifer categories.\r\n     */\r\n    _prepareHandlers(): ModifiersHandler[] {\r\n        //@ts-ignore The implementing class is used, not the abstract one.\r\n        return SituationModifiersApplication._staticHandlers.map(staticHandler => new staticHandler(this));\r\n    }\r\n\r\n    get template() {\r\n        return 'systems/shadowrun5e/dist/templates/apps/situational-modifiers.hbs';\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n\r\n        options.classes = ['sr5'];\r\n        options.id = 'situational-modifiers-application';\r\n        options.title = game.i18n.localize('SR5.SituationalModifiersApplication.Title');\r\n\r\n        //@ts-ignore\r\n        options.width = 'auto';\r\n        options.height = 'auto';\r\n        options.resizable = false;\r\n\r\n        options.tabs = [\r\n            {\r\n                navSelector: '.tabs',\r\n                contentSelector: '.sheetbody',\r\n                initial: SituationModifiersApplication._defaultTabId\r\n            },\r\n        ];\r\n\r\n        options.submitOnChange = true;\r\n        options.closeOnSubmit = false;\r\n\r\n        return options;\r\n    }\r\n\r\n    async getData(options?: any): Promise<SituationalModifiersTemplateData> {\r\n        // Update all modifiers before displaying.\r\n        this.modifiers.applyAll();\r\n\r\n        return {\r\n            ...await super.getData(options),\r\n            \r\n            targetType: this._targetTypeLabel,\r\n            targetName: this.target.name || 'Unkown target',\r\n\r\n            modifiers: this.modifiers,\r\n            environmentalLevels: this.modifiers.environmental.levels\r\n        }\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html);\r\n\r\n        this.handlers.forEach(handler => handler.activateListeners(html));\r\n\r\n        html.find('.form-group-element-numerical button').on('click', this.applyModifierDelta.bind(this));\r\n        html.find('.remove-modifiers-from-target').on('click', this.clearModifierData.bind(this));\r\n        html.find('.remove-token-modifiers-from-scene').on('click', this.clearTokenModifiersData.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Apply a formData change based on a custom numerical input element.\r\n     */\r\n    async applyModifierDelta(event) {\r\n        event.preventDefault();\r\n\r\n        // Expect the element group to siblings.\r\n        // Triggering DOMElement should contain the delta...\r\n        const triggerElement = event.target;\r\n        if (!triggerElement || !triggerElement.dataset.hasOwnProperty('delta')) \r\n            return console.error('Shadowrun5e | Expected a DOMElement with a different structure');\r\n\r\n        const delta = Number(triggerElement.dataset['delta']);\r\n        if (delta === 0) return;\r\n\r\n        // Value DOMElement should contain the data key...\r\n        const valueElement = $(triggerElement).siblings().closest('input');\r\n        if (!valueElement || !valueElement.attr('name')) \r\n            return console.error('Shadowrun5e | Expected a DOMElement with a name attribute');\r\n\r\n        // Extract value from data using value DOMElement data key...\r\n        const sourceKey = valueElement.attr('name') as string;\r\n        const appliedKey = sourceKey.includes('source') ? sourceKey.replace('source', 'applied') : sourceKey;\r\n\r\n        const currentValue = foundry.utils.getProperty(this, appliedKey) ?? 0;\r\n        if (isNaN(currentValue)) \r\n            return console.error('Shadowrun5e | Expected data property is not a number', sourceKey, currentValue);\r\n            \r\n        const value = currentValue + delta;\r\n\r\n        const formData = {\r\n            [sourceKey]: value\r\n        }\r\n        \r\n        // Update active modifiers.\r\n        await this._updateObject(event, formData);\r\n        // Update total modifiers.\r\n        this.modifiers.applyAll();\r\n        // Show new modifiers\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Clear all modifiers from this document\r\n     */\r\n    async clearModifierData() {\r\n        await this.modifiers.clearAll();\r\n        this.render(true);\r\n    }\r\n\r\n    /**\r\n     * Clear all modifiers from all tokens on this scene.\r\n     */\r\n    async clearTokenModifiersData() {\r\n        await this.modifiers.clearAllTokensOnScene();\r\n        this.render(true);\r\n    }\r\n\r\n    async _updateObject(event: Event, formData?: object | undefined): Promise<void> {\r\n            if (!formData) return;\r\n\r\n            for (const [key, value] of Object.entries(formData)) {\r\n                foundry.utils.setProperty(this, key, value);\r\n            }\r\n\r\n            // Save source selection\r\n            await DocumentSituationModifiers.setDocumentModifiers(this.target, this.modifiers.source);\r\n    }\r\n\r\n    /**\r\n     * Override _onChangeInput to include a render on changing modifier values.\r\n     */\r\n    async _onChangeInput(event) {\r\n        await super._onChangeInput(event);\r\n        this.render(true);\r\n    }\r\n\r\n    _getModifiers(): DocumentSituationModifiers {\r\n        return DocumentSituationModifiers.fromDocument(this.target);\r\n    }\r\n\r\n    get _targetTypeLabel(): string {\r\n        if (this.target instanceof Scene) {\r\n            return game.i18n.localize('DOCUMENT.Scene');\r\n        }\r\n        if (this.target instanceof SR5Actor) {\r\n            return game.i18n.localize('DOCUMENT.Actor');\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    static getControl() {\r\n        return {\r\n            name: 'situational-modifiers-application',\r\n            title: 'CONTROLS.SR5.SituationalModifiers',\r\n            icon: 'fas fa-list',\r\n            onClick: SituationModifiersApplication.openForCurrentScene,\r\n            button: true\r\n        }\r\n    }\r\n\r\n    // TODO: Implement system wide token HUD management...\r\n    /**\r\n     * Add buttons to both show and open global modifiers currently applied to this token when showing the\r\n     * tokenHUD.\r\n     */\r\n    static onRenderTokenHUD(app: TokenHUD, html: JQuery, data: any) {\r\n        if (!data._id) return;\r\n\r\n        // Generate general structure for ModifierHandlers to connect to.\r\n        const token = Helpers.getToken(data._id);\r\n        if (!token) return;\r\n\r\n        const actor = token.actor as SR5Actor;\r\n        const modifiers = actor.getSituationModifiers();\r\n        modifiers.applyAll();\r\n\r\n        // Setup and connect tokenHUD elements.\r\n        const container = $('<div class=\"col far-right sr-modifier-container\"></div>');\r\n        const column = $('<div class=\"col modifier-column\"></div>');\r\n\r\n        container.append(column);\r\n\r\n        // Connect SR-FoundryVTT tokenHUD elements to FoundryVTT tokenHUD column structure.\r\n        html.find('.col.right').after(container);\r\n\r\n        // Hand DOM element over and let ModifierHandlers add their TokenHUDElments.\r\n        SituationModifiersApplication._staticHandlers.forEach(handler => handler.addTokenHUDElements(column, data._id, actor, modifiers));\r\n    }\r\n\r\n    static openForCurrentScene() {\r\n        if (!canvas || !canvas.ready || !canvas.scene) return;\r\n        new SituationModifiersApplication(canvas.scene).render(true);\r\n    }\r\n\r\n    /** \r\n     * Part of the tokenHUD workflow makes it necessary to have the token id piped in\r\n     * @param tokenId\r\n     */\r\n    static openForTokenHUD(tokenId: string, tab?: string) {\r\n        const token = Helpers.getToken(tokenId);\r\n\r\n        // When the token hud control is activated, this inline handler will be called with it.\r\n        return async (event) => {\r\n            event.preventDefault();\r\n\r\n            if (!token || !token.actor) return;\r\n            const app = new SituationModifiersApplication(token.actor);\r\n            // Use async render as activateTab needs tabs to bind to rendered result.\r\n            await app._render(true);\r\n            //@ts-ignore\r\n            // if (tab) app.activateTab(tab);\r\n        }   \r\n    }\r\n\r\n    /**\r\n     * Open the application when the system registered keybinding has been pressed.\r\n     * \r\n     * If the user is a player => open selection or character\r\n     * If the user is a gm => open selection or scene\r\n     */\r\n    static openForKeybinding() {\r\n        console.debug(`Shadowrun 5e | Trying to open ${this.name}`);\r\n\r\n        let document: ModifiableDocumentTypes|null = null;\r\n\r\n        const controlledActors = Helpers.getControlledTokenActors();\r\n        // Only open on selection for a single token.\r\n        if (controlledActors.length === 1) document = controlledActors[0];\r\n        \r\n        // For GMs try scene for no selection.\r\n        if (!document && game.user?.isGM) {\r\n            document = canvas.scene;\r\n        } \r\n\r\n        // Try user character as last fallback.\r\n        if (!document) {\r\n            document = game.user?.character as SR5Actor;\r\n        }\r\n\r\n        if (!document) return console.debug(`Shadowrun 5e | ...aborting, as no suitable document could be found`);\r\n        console.debug(`Shadowrun 5e | ...opening with document ${document.uuid}`, document);\r\n\r\n        const app = new SituationModifiersApplication(document);\r\n        // Force, as it may already be open.\r\n        app.render(true);\r\n    }\r\n}", "import SkillEditFormData = Shadowrun.SkillEditFormData;\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {SR5} from \"../../config\";\r\n\r\nexport class SkillEditSheet extends DocumentSheet {\r\n    skillId: string;\r\n\r\n    get document(): SR5Actor {\r\n        return super.document as SR5Actor;\r\n    }\r\n\r\n    constructor(actor, options, skillId) {\r\n        super(actor, options);\r\n        this.skillId = skillId;\r\n    }\r\n\r\n    _updateString() {\r\n        return `system.skills.active.${this.skillId}`;\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        // @ts-ignore\r\n        return mergeObject(options, {\r\n            id: 'skill-editor',\r\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\r\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\r\n            width: 300,\r\n            height: 'auto',\r\n            submitOnClose: true,\r\n            submitOnChange: true,\r\n            closeOnSubmit: false,\r\n            resizable: true,\r\n        });\r\n    }\r\n\r\n    get title(): string {\r\n        const label = this.document.getSkillLabel(this.skillId);\r\n        return `${game.i18n.localize('SR5.EditSkill')} - ${game.i18n.localize(label)}`;\r\n    }\r\n\r\n    _onUpdateObject(event, formData, updateData) {\r\n        // get skill name.\r\n        // NOTE: This differs from the skill id, which is used to identify the skill internally.\r\n        const name = formData['skill.name'];\r\n\r\n        // get attribute name\r\n        const attribute = formData['skill.attribute'];\r\n\r\n        // get base value\r\n        const base = formData['skill.base'];\r\n\r\n        // get can default\r\n        const canDefault = formData['skill.canDefault'];\r\n\r\n        // process specializations\r\n        const specsRegex = /skill\\.specs\\.(\\d+)/;\r\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\r\n            const found = key.match(specsRegex);\r\n            if (found && found[0]) {\r\n                running.push(val);\r\n            }\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        // process bonuses\r\n        const bonusKeyRegex = /skill\\.bonus\\.(\\d+).key/;\r\n        const bonusValueRegex = /skill\\.bonus\\.(\\d+).value/;\r\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\r\n            const foundKey = key.match(bonusKeyRegex);\r\n            const foundVal = key.match(bonusValueRegex);\r\n            if (foundKey && foundKey[0] && foundKey[1]) {\r\n                const index = foundKey[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].key = value;\r\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\r\n                const index = foundVal[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].value = value;\r\n            }\r\n\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        updateData[this._updateString()] = {\r\n            specs,\r\n            bonus,\r\n            name,\r\n            attribute,\r\n            canDefault\r\n        };\r\n\r\n        // Avoid re-applying active effects without actual base level changes.\r\n        // An actual base level change will come without an active effect, since it's user input.\r\n        if (event.currentTarget.name === 'skill.base') updateData[this._updateString()].base = base;\r\n    }\r\n\r\n\r\n    /** @override */\r\n    // @ts-ignore // SkillEditSheet vs DocumentSheet typing, I don't quite get it...\r\n    async _updateObject(event, formData) {\r\n        // Without an actual input field used, avoid a unneeded update...\r\n        // ...the update would happen due to how _onUpdateObject works.\r\n        if (event.currentTarget) {\r\n            const updateData = {};\r\n            this._onUpdateObject(event, formData, updateData);\r\n            await this.document.update(updateData);\r\n        }\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\r\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\r\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\r\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\r\n    }\r\n\r\n    async _addNewBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const skill = this.getData().skill;\r\n        if (!skill) return;\r\n        const { bonus = [] } = skill;\r\n        // add blank line for new bonus\r\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\r\n        await this.document.update(updateData);\r\n    }\r\n\r\n    async _removeBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().skill;\r\n        if (data?.bonus) {\r\n            const { bonus } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                bonus.splice(index, 1);\r\n                updateData[`${this._updateString()}.bonus`] = bonus;\r\n                await this.document.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _addNewSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().skill;\r\n        if (data?.specs) {\r\n            // add a blank line to specs\r\n            const { specs } = data;\r\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\r\n        }\r\n        await this.document.update(updateData);\r\n    }\r\n\r\n    async _removeSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().skill;\r\n        if (data?.specs) {\r\n            const { specs } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                specs.splice(index, 1);\r\n                updateData[`${this._updateString()}.specs`] = specs;\r\n                await this.document.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Enhance attribute selection by an empty option to allow newly created skills to have no attribute selected.\r\n     */\r\n    _getSkillAttributesForSelect() {\r\n        return {...SR5.attributes, '': ''};\r\n    }\r\n\r\n    _allowSkillNameEditing(): boolean {\r\n        const skill = this.document.getSkill(this.skillId);\r\n        // Typescript sees string here? Double negate for boolean type cast...\r\n        return !!((!skill?.name && !skill?.label) || (skill?.name && !skill?.label));\r\n    }\r\n\r\n    // @ts-ignore // Missing DocumentSheetData typing\r\n    getData(): SkillEditFormData {\r\n        const data = super.getData();\r\n\r\n        //@ts-ignore TODO: foundry-vtt-types v10'\r\n        // skill property will hold a direct skill reference\r\n        data['skill'] = foundry.utils.getProperty(data.data, this._updateString());\r\n        data['editable_name'] = this._allowSkillNameEditing();\r\n        data['editable_canDefault'] = true;\r\n        data['editable_attribute'] = true;\r\n        data['attributes'] = this._getSkillAttributesForSelect();\r\n        return data as unknown as SkillEditFormData;\r\n    }\r\n}\r\n", "import { SkillEditSheet } from './SkillEditSheet';\r\nimport SkillEditFormData = Shadowrun.SkillEditFormData;\r\n\r\nexport class LanguageSkillEditSheet extends SkillEditSheet {\r\n    _updateString() {\r\n        return `system.skills.language.value.${this.skillId}`;\r\n    }\r\n\r\n    getData() {\r\n        return mergeObject(super.getData(), {\r\n            editable_name: true,\r\n            editable_canDefault: false,\r\n            editable_attribute: false\r\n        } as SkillEditFormData);\r\n    }\r\n\r\n    /** @override */\r\n    _onUpdateObject(event, formData, updateData) {\r\n        super._onUpdateObject(event, formData, updateData);\r\n        const name = formData['skill.name'];\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            name,\r\n        };\r\n    }\r\n}\r\n", "import { LanguageSkillEditSheet } from './LanguageSkillEditSheet';\r\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\r\n\r\nexport class KnowledgeSkillEditSheet extends LanguageSkillEditSheet {\r\n    category: KnowledgeSkillCategory;\r\n    constructor(actor, options, skillId, category) {\r\n        super(actor, options, skillId);\r\n        this.category = category;\r\n    }\r\n    _updateString() {\r\n        return `system.skills.knowledge.${this.category}.value.${this.skillId}`;\r\n    }\r\n}\r\n", "import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\n\r\n/**\r\n * Show a list of the SR5Actor inventories to the user and let them choose one.\r\n *\r\n * @returns The inventory name selected.\r\n */\r\nexport class MoveInventoryDialog extends FormDialog {\r\n    /**\r\n     * @param actor Use this actor's inventories to select from.\r\n     * @param sourceInventory The currently selected inventory, which won't be displayed.\r\n     * @param options\r\n     */\r\n    constructor(actor: SR5Actor, sourceInventory: string, options?) {\r\n        const dialogData = MoveInventoryDialog.getDialogData(actor, sourceInventory) as unknown as FormDialogData;\r\n\r\n        super(dialogData, options);\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'move-inventory-application';\r\n        options.classes = ['sr5', 'form-dialog'];\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    static getDialogData(actor: SR5Actor, sourceInventory: string) {\r\n        // Get all inventories, excluding the currently shown one.\r\n        const inventories = Object.values(actor.data.data.inventories)\r\n                                  .filter(inventory => inventory.name !== sourceInventory);\r\n        // Add the default inventories for selection when necessary.\r\n        if (sourceInventory !== actor.defaultInventory.name) inventories.unshift(actor.defaultInventory);\r\n\r\n        return {\r\n            title: game.i18n.localize('SR5.MoveInventoryDialog.Title'),\r\n            buttons: {\r\n                move: {\r\n                    label: game.i18n.localize('SR5.MoveInventoryDialog.Move')\r\n                },\r\n                cancel: {\r\n                    label: game.i18n.localize('SR5.MoveInventoryDialog.Cancel')\r\n                }\r\n            },\r\n            default: 'cancel',\r\n            templateData: {inventories},\r\n            templatePath: 'systems/shadowrun5e/dist/templates/apps/dialogs/move-inventory-dialog.html',\r\n            onAfterClose: async html => {\r\n                return html.find('input[name=\"inventories\"]:checked').val();\r\n            }\r\n        }\r\n    }\r\n}", "import {_mergeWithMissingSkillFields} from \"../../actor/prep/functions/SkillsPrep\";\r\n\r\n/**\r\n * Parses all non-item character information from a chummer character object.\r\n */\r\nexport class CharacterInfoUpdater {\r\n\r\n    /**\r\n     *  Maps the chummer attribute name to our sr5-foundry attribute name\r\n     *  @param attName name of the chummer attribute\r\n     */\r\n    parseAttName = (attName) =>  {\r\n        if (attName.toLowerCase() === 'bod') {\r\n            return 'body';\r\n        }\r\n        if (attName.toLowerCase() === 'agi') {\r\n            return 'agility';\r\n        }\r\n        if (attName.toLowerCase() === 'rea') {\r\n            return 'reaction';\r\n        }\r\n        if (attName.toLowerCase() === 'str') {\r\n            return 'strength';\r\n        }\r\n        if (attName.toLowerCase() === 'cha') {\r\n            return 'charisma';\r\n        }\r\n        if (attName.toLowerCase() === 'int') {\r\n            return 'intuition';\r\n        }\r\n        if (attName.toLowerCase() === 'log') {\r\n            return 'logic';\r\n        }\r\n        if (attName.toLowerCase() === 'wil') {\r\n            return 'willpower';\r\n        }\r\n        if (attName.toLowerCase() === 'edg') {\r\n            return 'edge';\r\n        }\r\n        if (attName.toLowerCase() === 'mag') {\r\n            return 'magic';\r\n        }\r\n        if (attName.toLowerCase() === 'res') {\r\n            return 'resonance';\r\n        }\r\n    };\r\n\r\n    getArray = (value) => {\r\n        return Array.isArray(value) ? value : [value];\r\n    };\r\n\r\n\r\n    /**\r\n     *  Converts the chummer attribute value to our sr5-foundry attribute value\r\n     *  @param att the chummer attribute\r\n     */\r\n    parseAttBaseValue = (att) => {\r\n        if (att.name.toLowerCase() === 'edg') {\r\n            // The edge attribute value is stored in the \"base\" field instead of the total field\r\n            // In chummer, the \"total\" field is used for the amount of edge remaining to a character\r\n            return parseInt(att.base);\r\n        }\r\n        else {\r\n            return parseInt(att.total);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses the actor data from the chummer file and returns an updated clone of the actor data.\r\n     * @param {*} actorSource The actor data (actor.data not actor.system) that is used as the basis for the import. Will not be changed.\r\n     * @param {*} chummerChar The chummer character to parse.\r\n     */\r\n    async update(actorSource, chummerChar) {\r\n\r\n        const clonedActorSource = duplicate(actorSource);\r\n\r\n        // Name is required, so we need to always set something (even if the chummer field is empty)\r\n        if (chummerChar.alias) {\r\n            clonedActorSource.name = chummerChar.alias;\r\n        }\r\n        else {\r\n            clonedActorSource.name = chummerChar.name ? chummerChar.name : '[Name not found]';\r\n        }\r\n\r\n        this.importBasicData(clonedActorSource.system, chummerChar);\r\n        await this.importBio(clonedActorSource.system, chummerChar);\r\n        this.importAttributes(clonedActorSource.system, chummerChar)\r\n        this.importInitiative(clonedActorSource.system, chummerChar);\r\n        this.importSkills(clonedActorSource.system, chummerChar);\r\n\r\n        return clonedActorSource;\r\n    }\r\n\r\n    importBasicData(system, chummerChar) {\r\n\r\n        try {\r\n            if (chummerChar.metatype) {\r\n                system.metatype = chummerChar.metatype;\r\n            }\r\n            if (chummerChar.sex) {\r\n                system.sex = chummerChar.sex;\r\n            }\r\n            if (chummerChar.age) {\r\n                system.age = chummerChar.age;\r\n            }\r\n            if (chummerChar.height) {\r\n                system.height = chummerChar.height;\r\n            }\r\n            if (chummerChar.weight) {\r\n                system.weight = chummerChar.weight;\r\n            }\r\n            if (chummerChar.calculatedstreetcred) {\r\n                system.street_cred = chummerChar.calculatedstreetcred;\r\n            }\r\n            if (chummerChar.calculatednotoriety) {\r\n                system.notoriety = chummerChar.calculatednotoriety;\r\n            }\r\n            if (chummerChar.calculatedpublicawareness) {\r\n                system.public_awareness = chummerChar.calculatedpublicawareness;\r\n            }\r\n            if (chummerChar.karma) {\r\n                system.karma.value = chummerChar.karma;\r\n            }\r\n            if (chummerChar.totalkarma) {\r\n                system.karma.max = chummerChar.totalkarma;\r\n            }\r\n            if (chummerChar.technomancer && chummerChar.technomancer.toLowerCase() === 'true') {\r\n                system.special = 'resonance';\r\n            }\r\n            if (\r\n                (chummerChar.magician && chummerChar.magician.toLowerCase() === 'true') ||\r\n                (chummerChar.adept && chummerChar.adept.toLowerCase() === 'true')\r\n            ) {\r\n                system.special = 'magic';\r\n                let attr = [];\r\n                if (\r\n                    chummerChar.tradition &&\r\n                    chummerChar.tradition.drainattribute &&\r\n                    chummerChar.tradition.drainattribute.attr\r\n                ) {\r\n                    attr = chummerChar.tradition.drainattribute.attr;\r\n                } else if (chummerChar.tradition && chummerChar.tradition.drainattributes) {\r\n                    attr = chummerChar.tradition.drainattributes\r\n                        .split('+')\r\n                        .map((item) => item.trim());\r\n                }\r\n                attr.forEach((att) => {\r\n                    const attName = this.parseAttName(att);\r\n                    if (attName !== 'willpower') system.magic.attribute = att;\r\n                });\r\n            }\r\n            if (chummerChar.totaless) {\r\n                system.attributes.essence.value = chummerChar.totaless;\r\n            }\r\n            if (chummerChar.nuyen) {\r\n                system.nuyen = parseInt(chummerChar.nuyen.replace(',', ''));\r\n            }\r\n        } catch (e) {\r\n            console.error(`Error while parsing character information ${e}`);\r\n        }\r\n    }\r\n\r\n    async importBio(system, chummerChar) {\r\n        system.description.value = '';\r\n\r\n        // Adding the option async.true is necessary for the pdf-pager module not to cause an error on import.\r\n\r\n        // Chummer outputs html and wraps every section in <p> tags,\r\n        // so we just concat everything with an additional linebreak in between\r\n        if (chummerChar.description) {\r\n            system.description.value += await TextEditor.enrichHTML(chummerChar.description + '<br/>', {async: true});\r\n        }\r\n\r\n        if (chummerChar.background) {\r\n            system.description.value += await TextEditor.enrichHTML(chummerChar.background + '<br/>', {async: true});\r\n        }\r\n\r\n        if (chummerChar.concept) {\r\n            system.description.value += await TextEditor.enrichHTML(chummerChar.concept + '<br/>', {async: true});\r\n        }\r\n\r\n        if (chummerChar.notes) {\r\n            system.description.value += await TextEditor.enrichHTML(chummerChar.notes + '<br/>', {async: true});\r\n        }\r\n    }\r\n\r\n    importAttributes(system, chummerChar) {\r\n        const atts = chummerChar.attributes[1].attribute;\r\n        atts.forEach((att) => {\r\n            try {\r\n                const attName = this.parseAttName(att.name);\r\n                if (attName) {\r\n                    system.attributes[attName].base = this.parseAttBaseValue(att);\r\n                }\r\n\r\n            } catch (e) {\r\n                console.error(`Error while parsing attributes ${e}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    // TODO: These modifiers are very unclear in how they're used here and where they come from.\r\n    importInitiative(system, chummerChar) {\r\n        try {\r\n            system.modifiers.meat_initiative = chummerChar.initbonus;\r\n\r\n            // 'initdice' contains the total amount of initiative dice, not just the bonus.\r\n            system.modifiers.meat_initiative_dice = chummerChar.initdice - 1;\r\n        } catch (e) {\r\n            console.error(`Error while parsing initiative ${e}`);\r\n        }\r\n    }\r\n\r\n    importSkills(system, chummerChar) {\r\n        const chummerSkills = chummerChar.skills.skill;\r\n        for (let i = 0; i < chummerSkills.length; i++) {\r\n            try {\r\n                const chummerSkill = chummerSkills[i];\r\n                // NOTE: taMiF here: I have no idea what the general islanguage check has been added for.\r\n                //                   it MIGHT be in order to exclude skill groups or some such, but I haven't found a reason\r\n                //                   for it. Since it's working with it, I'll leave it to the pile. Warm your hands.\r\n                if ((chummerSkill.rating > 0 ||chummerSkill.isnativelanguage === 'True') && chummerSkill.islanguage) {\r\n                    let determinedGroup = 'active';\r\n                    let parsedSkill = null;\r\n\r\n                    // Either find an active skill are prepare knowledge skills.\r\n                    if (chummerSkill.islanguage && chummerSkill.islanguage.toLowerCase() === 'true') {\r\n                        const id = randomID(16);\r\n                        parsedSkill = {};\r\n                        system.skills.language.value[id] = parsedSkill;\r\n                        determinedGroup = 'language';\r\n\r\n                        // Transform native rating into max rating.\r\n                        if (chummerSkill.isnativelanguage === 'True') {\r\n                            chummerSkill.rating = 6;\r\n                        }\r\n                    }\r\n                    else if (chummerSkill.knowledge && chummerSkill.knowledge.toLowerCase() === 'true') {\r\n                        const id = randomID(16);\r\n                        const category = chummerSkill.skillcategory_english;\r\n                        parsedSkill = {};\r\n\r\n                        // Determine the correct knowledge skill category and assign the skill to it\r\n                        let skillCategory;\r\n                        if (category) {\r\n                            const cat = category.toLowerCase();\r\n                            if (cat === 'street')\r\n                                skillCategory = system.skills.knowledge.street.value;\r\n                            if (cat === 'academic')\r\n                                skillCategory = system.skills.knowledge.academic.value;\r\n                            if (cat === 'professional')\r\n                                skillCategory = system.skills.knowledge.professional.value;\r\n                            if (cat === 'interest')\r\n                                skillCategory = system.skills.knowledge.interests.value;\r\n                            if (skillCategory)\r\n                                skillCategory[id] = parsedSkill;\r\n                        }\r\n                        else {\r\n                            if (chummerSkill.attribute.toLowerCase() === 'int') {\r\n                                system.skills.knowledge.street.value[id] = parsedSkill;\r\n                            }\r\n                            if (chummerSkill.attribute.toLowerCase() === 'log') {\r\n                                system.skills.knowledge.professional.value[id] = parsedSkill;\r\n                            }\r\n                        }\r\n                        determinedGroup = 'knowledge';\r\n                    }\r\n                    else {\r\n                        let name = chummerSkill.name\r\n                            .toLowerCase()\r\n                            .trim()\r\n                            .replace(/\\s/g, '_')\r\n                            .replace(/-/g, '_');\r\n                        if (name.includes('exotic') && name.includes('_weapon'))\r\n                            name = name.replace('_weapon', '');\r\n                        if (name === 'pilot_watercraft')\r\n                            name = 'pilot_water_craft';\r\n                        parsedSkill = system.skills.active[name];\r\n                    }\r\n\r\n                    // Fill the found skill with a base rating.\r\n                    if (!parsedSkill) {\r\n                        console.error(`Couldn't parse skill ${chummerSkill.name}`);\r\n\r\n                    } else {\r\n                        if (determinedGroup !== 'active')\r\n                            parsedSkill.name = chummerSkill.name;\r\n                        parsedSkill.base = parseInt(chummerSkill.rating);\r\n\r\n                        if (chummerSkill.skillspecializations) {\r\n                            parsedSkill.specs = this.getArray(\r\n                                chummerSkill.skillspecializations.skillspecialization.name\r\n                            );\r\n                        }\r\n\r\n                        // Precaution to later only deal with complete SkillField data models.\r\n                        _mergeWithMissingSkillFields(parsedSkill);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n", "import { DefaultValues } from \"../../data/DataDefaults\";\r\n\r\nexport const getValues = (val) => {\r\n    const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\r\n    const l = val.match(regex);\r\n    return l || ['0'];\r\n};\r\n\r\nexport const getArray = (value) => {\r\n    return Array.isArray(value) ? value : [value];\r\n};\r\n\r\n/**\r\n *  Creates the description data from the chummer entry\r\n *  @param chummerEntry The chummer entry (the item)\r\n */\r\nexport const parseDescription = (chummerEntry) => {\r\n    const parsedDescription = DefaultValues.descriptionData();\r\n\r\n    if (chummerEntry.source && chummerEntry.page) {\r\n        parsedDescription.source = `${chummerEntry.source} ${chummerEntry.page}`\r\n    }\r\n\r\n    if (chummerEntry.description) {\r\n        parsedDescription.value = TextEditor.enrichHTML(chummerEntry.description);\r\n    }\r\n\r\n    return parsedDescription\r\n}\r\n\r\n/**\r\n *  Creates the technology data from the chummer entry\r\n *  @param chummerEntry The chummer entry (the item)\r\n */\r\nexport const parseTechnology = (chummerEntry) => {\r\n    const parsedTechnology = DefaultValues.technologyData();\r\n\r\n    if (chummerEntry.rating) {\r\n        parsedTechnology.rating = chummerEntry.rating;\r\n    }\r\n\r\n    if (chummerEntry.avail) {\r\n        parsedTechnology.availability = chummerEntry.avail;\r\n    }\r\n\r\n    if (chummerEntry.qty) {\r\n        parsedTechnology.quantity = chummerEntry.qty;\r\n    }\r\n\r\n    if (chummerEntry.cost) {\r\n        parsedTechnology.cost = parseFloat(chummerEntry.cost.replace(/[^\\d\\.\\-]/g, \"\"));\r\n    }\r\n\r\n    if (chummerEntry.equipped && chummerEntry.equipped.toLowerCase() === 'true') {\r\n        parsedTechnology.equipped = true;\r\n    }\r\n\r\n    if (chummerEntry.conditionmonitor) {\r\n        parsedTechnology.condition_monitor.max = Number(chummerEntry.conditionmonitor);\r\n    }\r\n\r\n    if (chummerEntry.conceal) {\r\n        parsedTechnology.conceal.base = Number(chummerEntry.conceal);\r\n    }\r\n\r\n    return parsedTechnology\r\n}\r\n\r\nexport const createItemData = (name, type, system) => {\r\n    return {\r\n        name: name,\r\n        _id: '',\r\n        folder: '',\r\n        flags: {},\r\n        img: 'icons/svg/mystery-man.svg',\r\n        type: type,\r\n        system,\r\n        permission: {\r\n            default: 2,\r\n        },\r\n    };\r\n}\r\n\r\n\r\n", "import { parseDescription, parseTechnology } from \"../BaseParserFunctions.js\"\r\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\r\nimport {DefaultValues} from \"../../../data/DataDefaults\";\r\n\r\n\r\n/**\r\n * Parses a certain class of gear (depending on the implementation).\r\n */\r\nexport interface GearParser {\r\n    /**\r\n     * Parses a gear entry and returns the corresponding foundry sr item data.\r\n     * @param chummerGear A chummer gear entry\r\n     */\r\n    parse(chummerGear : any) : any\r\n}\r\n\r\n/**\r\n * Base class for all gear parsers. Parses common information across all gear.\r\n */\r\nexport class BaseGearParser implements GearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear = this.getDefaultData();\r\n        parsedGear.name = chummerGear.name;\r\n        if (chummerGear.extra)\r\n        {\r\n            parsedGear.name += ` (${chummerGear.extra})`;\r\n        }\r\n\r\n        parsedGear.system.technology = parseTechnology(chummerGear);\r\n        parsedGear.system.description = parseDescription(chummerGear);\r\n\r\n        return parsedGear;\r\n    }\r\n\r\n    private getDefaultData() : EquipmentItemData {\r\n        return {\r\n            name: '',\r\n            type: 'equipment',\r\n            system: DefaultValues.equipmentData(),\r\n        } as EquipmentItemData;\r\n    }\r\n}\r\n\r\n", "import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses SINs and the attached licenses.\r\n * Licenses that are not attached to a SIN are not handled.\r\n */\r\nexport class SinParser extends BaseGearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'sin';\r\n\r\n        // Create licenses if there are any\r\n        if (chummerGear.children) {\r\n\r\n            // \"gear\" is either  a single gear entry or an array of gear entries depending on the number of licenses\r\n            const chummerLicenses : any[] = [];\r\n            if (!Array.isArray(chummerGear.children.gear)) {\r\n                chummerLicenses.push(chummerGear.children.gear)\r\n            }\r\n            else {\r\n                chummerLicenses.push(...chummerGear.children.gear);\r\n            }\r\n\r\n            parsedGear.system.licenses = this.parseLicenses(chummerLicenses);\r\n        }\r\n        return parsedGear;\r\n    }\r\n\r\n    private parseLicenses(chummerLicenses : any) : any[] {\r\n        const parsedLicenses : any[] = []; \r\n\r\n        chummerLicenses.forEach(chummerLicense => {\r\n            if (chummerLicense.category === 'ID/Credsticks')\r\n            {\r\n                parsedLicenses.push(\r\n                    {\r\n                        name: chummerLicense.extra, // 'extra' holds the type of license from chummer\r\n                        rtg: chummerLicense.rating,\r\n                        description: ''\r\n                    }\r\n                );\r\n            }\r\n        });\r\n\r\n        return parsedLicenses;\r\n    }\r\n}\r\n", "import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses devices (commlinks and decks)\r\n */\r\nexport class DeviceParser extends BaseGearParser {\r\n   \r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'device';\r\n        parsedGear.system.technology.rating = chummerGear.devicerating;\r\n\r\n        parsedGear.system.atts = {\r\n            att1:\r\n            {\r\n                value: chummerGear.attack,\r\n                att: 'attack'\r\n            },\r\n\r\n            att2:\r\n            {\r\n                value: chummerGear.sleaze,\r\n                att: 'sleaze'\r\n            },\r\n\r\n            att3:\r\n            {\r\n                value: chummerGear.systemprocessing,\r\n                att: 'data_processing'\r\n            },\r\n\r\n            att4:\r\n            {\r\n                value: chummerGear.firewall,\r\n                att: 'firewall'\r\n            } \r\n        };\r\n\r\n        if (chummerGear.category === 'Cyberdecks')\r\n        {\r\n            parsedGear.system.category = 'cyberdeck';\r\n        }\r\n\r\n        if (chummerGear.category === 'Commlinks')\r\n        {\r\n            parsedGear.system.category = 'commlink';\r\n        }\r\n\r\n        if (chummerGear.category === 'Rigger Command Consoles')\r\n        {\r\n            // We are handling rccs as commlinks for the moment since we have no support for rigger command consoles yet.\r\n            parsedGear.system.category = 'commlink'; \r\n        }\r\n\r\n        return parsedGear;\r\n    }\r\n}", "import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses common, hacking and agent programs.\r\n */\r\nexport class ProgramParser extends BaseGearParser {\r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'program';\r\n\r\n        if (chummerGear.category === 'Common Programs')\r\n        {\r\n            parsedGear.system.type = 'common_program'\r\n        }\r\n        else if (chummerGear.category === 'Hacking Programs')\r\n        {\r\n            parsedGear.system.type = 'hacking_program'\r\n        } \r\n        else if (chummerGear.category === 'Software')\r\n        {\r\n            parsedGear.system.type = 'agent'\r\n        }\r\n\r\n        return parsedGear;\r\n    }\r\n}", "import { BaseGearParser } from \"./BaseGearParser\"\r\n\r\n/**\r\n * Parses ammunition\r\n */\r\nexport class AmmoParser extends BaseGearParser {\r\n   \r\n    parse(chummerGear : any) : any {\r\n        const parsedGear =  super.parse(chummerGear);\r\n        parsedGear.type = 'ammo';\r\n\r\n        if (chummerGear.weaponbonusap) {\r\n            parsedGear.system.ap = parseInt(chummerGear.weaponbonusap);\r\n        }\r\n\r\n        if (chummerGear.weaponbonusdamage) {\r\n            parsedGear.system.damage = parseInt(chummerGear.weaponbonusdamage);\r\n\r\n            if (chummerGear.weaponbonusdamage.includes('P')) {\r\n                parsedGear.system.damageType = 'physical';\r\n            } else if (chummerGear.weaponbonusdamage.includes('S')) {\r\n                parsedGear.system.damageType = 'stun';\r\n            } else if (chummerGear.weaponbonusdamage.includes('M')) {\r\n                parsedGear.system.damageType = 'matrix';\r\n            }\r\n            else {\r\n                parsedGear.system.damageType = 'physical';\r\n            }\r\n        }\r\n\r\n        return parsedGear;\r\n    }\r\n}", "import { GearParser, BaseGearParser } from \"./BaseGearParser\";\r\nimport { SinParser } from \"./SinParser\";\r\nimport { DeviceParser } from \"./DeviceParser\";\r\nimport { ProgramParser } from \"./ProgramParser\";\r\nimport { AmmoParser } from \"./AmmoParser\";\r\n\r\n/**\r\n * Responsible for selecting the correct GearParser depending on the gear.\r\n */\r\nexport class ParserSelector {\r\n\r\n    /**\r\n     * Selects the correct GearParser depending on the gear.\r\n     * @param chummerGear The gear that needs to be parsed\r\n     * The correct GearParser for this gear entry.\r\n     */ \r\n    select(chummerGear : any) : GearParser {\r\n        if (chummerGear.issin === 'True')\r\n        {\r\n            return new SinParser();\r\n        }\r\n\r\n        if (chummerGear.iscommlink === 'True')\r\n        {\r\n            return new DeviceParser();\r\n        }\r\n\r\n        if (chummerGear.isammo === 'True')\r\n        {\r\n            return new AmmoParser();\r\n        }\r\n\r\n        if (chummerGear.category === 'Common Programs' || \r\n            chummerGear.category === 'Hacking Programs' || \r\n            chummerGear.category === 'Software')\r\n        {\r\n            return new ProgramParser();\r\n        }\r\n\r\n        return new BaseGearParser();\r\n    }\r\n}", "import { ParserSelector } from \"./ParserSelector\";\r\n\r\n/**\r\n * Parses all gear from a chummer character file and turns them into foundry sr item data objects\r\n */\r\nexport class GearsParser {\r\n\r\n    /**\r\n     * Parses all chummer gear entries\r\n     * @param chummerGears Array of chummer gear entries\r\n     */\r\n    parseGears(chummerGears : any) : any {\r\n        let items : any[] = [];\r\n\r\n        chummerGears.forEach((chummerGear) => {\r\n            try {\r\n                // First filter out gear entries, that we do not want to handle.\r\n                if (!this.gearShouldBeParsed(chummerGear)) {\r\n                    return;\r\n                }\r\n\r\n                const itemsData = this.parseGearEntry(chummerGear);\r\n                items.push(itemsData);\r\n            }\r\n\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return items;\r\n    }\r\n\r\n    private parseGearEntry(chummerGear : any) : any {\r\n        const parserSelector = new ParserSelector();\r\n        const parser = parserSelector.select(chummerGear);\r\n        return parser.parse(chummerGear);\r\n    }\r\n\r\n    private gearShouldBeParsed(chummerGear : any) : boolean {\r\n        // We do not handle grenades and rockets here since they are also in the weapons section with more info.\r\n        const englishGearName = (chummerGear.name_english as string).toLowerCase();\r\n        if (englishGearName.startsWith('grenade') || \r\n            englishGearName.startsWith('minigrenade') || \r\n            englishGearName.startsWith('rocket'))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import { parseDescription, getArray, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\r\n\r\nexport class ArmorParser {\r\n   \r\n    parseArmors(chummerChar) {\r\n        const armors = getArray(chummerChar.armors.armor);\r\n        const parsedArmors = [];\r\n        armors.forEach((chummerArmor) => {\r\n            try {\r\n                const itemData = this.parseArmor(chummerArmor);\r\n                parsedArmors.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedArmors;\r\n    }\r\n\r\n    parseArmor(chummerArmor) {\r\n        const system = {};\r\n        const armor = {};\r\n        system.armor = armor;\r\n\r\n        let desc = '';\r\n        armor.mod = chummerArmor.armor.includes('+');\r\n        armor.value = parseInt(chummerArmor.armor.replace('+', ''));\r\n        if (chummerArmor.description)\r\n            desc = chummerArmor.description;\r\n\r\n        console.log(chummerArmor);\r\n        if (chummerArmor.armormods && chummerArmor.armormods.armormod) {\r\n            armor.fire = 0;\r\n            armor.electricity = 0;\r\n            armor.cold = 0;\r\n            armor.acid = 0;\r\n            armor.radiation = 0;\r\n\r\n            const modDesc = [];\r\n            const mods = getArray(chummerArmor.armormods.armormod);\r\n            mods.forEach((mod) => {\r\n                if (mod.name.toLowerCase().includes('fire resistance')) {\r\n                    armor.fire += parseInt(mod.rating);\r\n                } else if (mod.name.toLowerCase().includes('nonconductivity')) {\r\n                    armor.electricity += parseInt(mod.rating);\r\n                } else if (mod.name.toLowerCase().includes('insulation')) {\r\n                    armor.cold += parseInt(mod.rating);\r\n                } else if (mod.name.toLowerCase().includes('radiation shielding')) {\r\n                    armor.radiation += parseInt(mod.rating);\r\n                }\r\n                if (mod.rating !== '') {\r\n                    modDesc.push(`${mod.name} R${mod.rating}`);\r\n                } else {\r\n                    modDesc.push(mod.name);\r\n                }\r\n            });\r\n            if (modDesc.length > 0) {\r\n                // add desc to beginning\r\n                desc = `${modDesc.join(',')}\\n\\n${desc}`;\r\n            }\r\n        }\r\n\r\n        system.technology = parseTechnology(chummerArmor);\r\n        system.description = parseDescription(chummerArmor);\r\n        \r\n        return createItemData(chummerArmor.name, 'armor', system);\r\n    }\r\n}", "import { parseDescription, getArray, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\r\n\r\nexport class CyberwareParser {\r\n   \r\n    parseCyberwares(chummerChar) {\r\n        const chummerCyberwares = getArray(chummerChar.cyberwares.cyberware);\r\n        const parsedCyberware = [];\r\n        chummerCyberwares.forEach((chummerCyber) => {\r\n            try {\r\n                const itemData = this.parseCyberware(chummerCyber);\r\n                parsedCyberware.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedCyberware;\r\n    }\r\n\r\n    parseCyberware(chummerCyber) {\r\n        const system = {};\r\n        system.description = parseDescription(chummerCyber);\r\n        system.technology = parseTechnology(chummerCyber);\r\n        \r\n        // Cyberware has no equipped flag in chummer so it cannot be parsed - we consider it as always equipped\r\n        system.technology.equipped = true;\r\n        system.essence = chummerCyber.ess;\r\n        system.grade = chummerCyber.grade;\r\n\r\n        return createItemData(chummerCyber.name, 'cyberware', system);\r\n    }\r\n}", "import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\r\nimport { DefaultValues } from \"../../data/DataDefaults\";\r\n\r\nexport class QualityParser {\r\n\r\n    parseQualities(chummerChar) {\r\n        const qualities = getArray(chummerChar.qualities.quality);\r\n        const parsedQualities = [];\r\n\r\n        qualities.forEach((chummerQuality) => {\r\n            try {\r\n                const itemData = this.parseQuality(chummerQuality);\r\n                parsedQualities.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedQualities;\r\n    }\r\n\r\n    parseQuality(chummerQuality) {\r\n        const system = DefaultValues.qualityData();\r\n        system.type = chummerQuality.qualitytype.toLowerCase();\r\n        system.description = parseDescription(chummerQuality);\r\n\r\n        return createItemData(chummerQuality.name, 'quality', system);\r\n    }\r\n}", "import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\r\n\r\nexport class PowerParser {\r\n\r\n    parsePowers(chummerChar) {\r\n        const powers = getArray(chummerChar.powers.power);\r\n        const parsedPowers = [];\r\n\r\n        powers.forEach((chummerPower) => {\r\n            const itemData = this.parsePower(chummerPower);\r\n            parsedPowers.push(itemData);\r\n        });\r\n\r\n        return parsedPowers;\r\n    }\r\n\r\n    parsePower(chummerPower) {\r\n        const system = {};\r\n        system.description = parseDescription(chummerPower);\r\n\r\n        system.level = parseInt(chummerPower.rating);\r\n        system.pp = parseFloat(chummerPower.totalpoints);\r\n        return createItemData(chummerPower.fullname, 'adept_power', system);\r\n    }\r\n}", "import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\r\nimport { DefaultValues } from \"../../data/DataDefaults\";\r\n\r\nexport class SpellParser {\r\n    parseSpells(chummerChar) {\r\n        const spells = getArray(chummerChar.spells.spell);\r\n        const parsedSpells = [];\r\n        spells.forEach((chummerSpell) => {\r\n            try {\r\n                if (chummerSpell.alchemy.toLowerCase() !== 'true') {\r\n                    const itemData = this.parseSpell(chummerSpell);\r\n                    parsedSpells.push(itemData);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedSpells;\r\n    }\r\n\r\n    parseSpell(chummerSpell) {\r\n        const action = {};\r\n        const system = {};\r\n        system.action = action;\r\n        system.category = chummerSpell.category.toLowerCase().replace(/\\s/g, '_');\r\n        system.name = chummerSpell.name;\r\n        system.type = chummerSpell.type === 'M' ? 'mana' : 'physical';\r\n        system.range =\r\n            chummerSpell.range === 'T'\r\n                ? 'touch'\r\n                : chummerSpell.range\r\n                        .toLowerCase()\r\n                        .replace(/\\s/g, '_')\r\n                        .replace('(', '')\r\n                        .replace(')', '');\r\n        system.drain = parseInt(chummerSpell.dv.replace('F', ''));\r\n        system.description = parseDescription(chummerSpell);\r\n\r\n        let description = '';\r\n        if (chummerSpell.descriptors) description = chummerSpell.descriptors;\r\n        if (chummerSpell.description) description += `\\n${chummerSpell.description}`;\r\n        system.description.value = TextEditor.enrichHTML(description);\r\n\r\n        if (chummerSpell.duration.toLowerCase() === 's') system.duration = 'sustained';\r\n        else if (chummerSpell.duration.toLowerCase() === 'i')\r\n            system.duration = 'instant';\r\n        else if (chummerSpell.duration.toLowerCase() === 'p')\r\n            system.duration = 'permanent';\r\n\r\n        action.type = 'varies';\r\n        action.skill = 'spellcasting';\r\n        action.attribute = 'magic';\r\n        action.damage = DefaultValues.damageData();\r\n        action.damage.type.base = '';\r\n        action.damage.type.value = '';\r\n\r\n        if (chummerSpell.descriptors) {\r\n            const desc = chummerSpell.descriptors.toLowerCase();\r\n            if (chummerSpell.category.toLowerCase() === 'combat') {\r\n                system.combat = {};\r\n                if (desc.includes('indirect')) {\r\n                    system.combat.type = 'indirect';\r\n                    action.opposed = {\r\n                        type: 'defense',\r\n                    };\r\n                } else {\r\n                    system.combat.type = 'direct';\r\n                    if (system.type === 'mana') {\r\n                        action.damage.type.base = 'stun';\r\n                        action.damage.type.value = 'stun';\r\n                        action.opposed = {\r\n                            type: 'soak',\r\n                            attribute: 'willpower',\r\n                        };\r\n                    } else if (system.type === 'physical') {\r\n                        action.damage.type.base = 'physical';\r\n                        action.damage.type.value = 'physical';\r\n                        action.opposed = {\r\n                            type: 'soak',\r\n                            attribute: 'body',\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            if (chummerSpell.category.toLowerCase() === 'detection') {\r\n                system.detection = {};\r\n                const split = desc.split(',');\r\n                split.forEach((token) => {\r\n                    token = token || '';\r\n                    token = token.replace(' detection spell', '');\r\n                    if (!token) return;\r\n                    if (token.includes('area')) return;\r\n\r\n                    if (token.includes('passive'))\r\n                        system.detection.passive = true;\r\n                    else if (token.includes('active'))\r\n                        system.detection.passive = false;\r\n                    else if (token)\r\n                        system.detection.type = token.toLowerCase();\r\n                });\r\n                if (!system.detection.passive) {\r\n                    action.opposed = {\r\n                        type: 'custom',\r\n                        attribute: 'willpower',\r\n                        attribute2: 'logic',\r\n                    };\r\n                }\r\n            }\r\n            if (chummerSpell.category.toLowerCase() === 'illusion') {\r\n                system.illusion = {};\r\n                const split = desc.split(',');\r\n                split.forEach((token) => {\r\n                    token = token || '';\r\n                    token = token.replace(' illusion spell', '');\r\n                    if (!token) return;\r\n                    if (token.includes('area')) return;\r\n\r\n                    if (token.includes('sense'))\r\n                        system.illusion.sense = token.toLowerCase();\r\n                    else if (token)\r\n                        system.illusion.type = token.toLowerCase();\r\n                });\r\n                if (system.type === 'mana') {\r\n                    action.opposed = {\r\n                        type: 'custom',\r\n                        attribute: 'willpower',\r\n                        attribute2: 'logic',\r\n                    };\r\n                } else {\r\n                    action.opposed = {\r\n                        type: 'custom',\r\n                        attribute: 'intuition',\r\n                        attribute2: 'logic',\r\n                    };\r\n                }\r\n            }\r\n            if (chummerSpell.category.toLowerCase() === 'manipulation') {\r\n                system.manipulation = {};\r\n                if (desc.includes('environmental'))\r\n                    system.manipulation.environmental = true;\r\n                if (desc.includes('physical'))\r\n                    system.manipulation.physical = true;\r\n                if (desc.includes('mental'))\r\n                    system.manipulation.mental = true;\r\n                // TODO figure out how to parse damaging\r\n\r\n                if (system.manipulation.mental) {\r\n                    action.opposed = {\r\n                        type: 'custom',\r\n                        attribute: 'willpower',\r\n                        attribute2: 'logic',\r\n                    };\r\n                }\r\n                if (system.manipulation.physical) {\r\n                    action.opposed = {\r\n                        type: 'custom',\r\n                        attribute: 'body',\r\n                        attribute2: 'strength',\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        return createItemData(chummerSpell.name, 'spell', system);\r\n    }\r\n}", "import { parseDescription, getArray, getValues, parseTechnology, createItemData } from \"./BaseParserFunctions.js\"\r\n\r\nexport class WeaponParser {\r\n    parseDamage = (val) => {\r\n        const damage = {\r\n            damage: 0,\r\n            type: 'physical',\r\n            radius: 0,\r\n            dropoff: 0,\r\n        };\r\n        const split = val.split(',');\r\n        if (split.length > 0) {\r\n            const l = split[0].match(/(\\d+)(\\w+)/);\r\n            if (l && l[1]) damage.damage = parseInt(l[1]);\r\n            if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\r\n        }\r\n        for (let i = 1; i < split.length; i++) {\r\n            const l = split[i].match(/(-?\\d+)(.*)/);\r\n            if (l && l[2]) {\r\n                if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\r\n                else damage.radius = parseInt(l[1]);\r\n            }\r\n        }\r\n        return damage;\r\n    };\r\n\r\n    parseWeapons(chummerChar) {\r\n        const weapons = getArray(chummerChar.weapons.weapon);\r\n        const parsedWeapons = [];\r\n\r\n        weapons.forEach((chummerWeapon) => {\r\n            try {\r\n                const itemData = this.parseWeapon(chummerWeapon);\r\n                parsedWeapons.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedWeapons;\r\n    }\r\n\r\n    parseWeapon(chummerWeapon) {\r\n        const system = {};\r\n        const action = {};\r\n        const damage = {};\r\n        action.damage = damage;\r\n        system.action = action;\r\n\r\n        system.description = parseDescription(chummerWeapon);\r\n        system.technology = parseTechnology(chummerWeapon);\r\n\r\n        damage.ap = {\r\n            base: parseInt(getValues(chummerWeapon.ap)[0])\r\n        };\r\n        action.type = 'varies';\r\n\r\n        // Transform Chummer skill naming schema to shadowrun5e naming schema.\r\n        // NOTE: chummerWeapon.skill CAN be null. Don't rely on it.\r\n        if (chummerWeapon.skill) {\r\n            action.skill = chummerWeapon.skill.toLowerCase().replace(/\\s/g, '_');\r\n        // Instead of direct skill, rely on a category mapping by the rules.\r\n        } else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('exotic')) {\r\n            action.skill = chummerWeapon.category\r\n                .toLowerCase()\r\n                .replace(' weapons', '')\r\n                .replace(/\\s/g, '_');\r\n        } else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('laser weapons')) {\r\n            action.skill = 'exotic_range';\r\n        }\r\n\r\n        if (action.skill.includes('exotic')) {\r\n            action.skill = action.skill.replace('_weapon', '');\r\n        }\r\n\r\n        action.attribute = 'agility';\r\n        action.limit = {\r\n            base: parseInt(getValues(chummerWeapon.accuracy)[0])\r\n        };\r\n\r\n        if (chummerWeapon.type.toLowerCase() === 'melee') {\r\n            action.type = 'complex';\r\n            system.category = 'melee';\r\n            const melee = {};\r\n            system.melee = melee;\r\n            melee.reach = parseInt(chummerWeapon.reach);\r\n        } else if (chummerWeapon.type.toLowerCase() === 'ranged') {\r\n            system.category = 'range';\r\n            if (action.skill.toLowerCase().includes('throw')) {\r\n                system.category = 'thrown';\r\n            }\r\n            const range = {};\r\n            system.range = range;\r\n            range.rc = {\r\n                base: parseInt(getValues(chummerWeapon.rc)[0]),\r\n            };\r\n            if (chummerWeapon.mode) {\r\n                // HeroLab export doesn't have mode\r\n                const lower = chummerWeapon.mode.toLowerCase();\r\n                range.modes = {\r\n                    single_shot: lower.includes('ss'),\r\n                    semi_auto: lower.includes('sa'),\r\n                    burst_fire: lower.includes('bf'),\r\n                    full_auto: lower.includes('fa'),\r\n                };\r\n            }\r\n            if (chummerWeapon.clips != null && chummerWeapon.clips.clip != null) {\r\n                // HeroLab export doesn't have clips\r\n                const clips = Array.isArray(chummerWeapon.clips.clip)\r\n                    ? chummerWeapon.clips.clip\r\n                    : [chummerWeapon.clips.clip];\r\n                clips.forEach((clip) => {\r\n                    console.log(clip);\r\n                });\r\n            }\r\n            if (chummerWeapon.ranges &&\r\n                chummerWeapon.ranges.short &&\r\n                chummerWeapon.ranges.medium &&\r\n                chummerWeapon.ranges.long &&\r\n                chummerWeapon.ranges.extreme) {\r\n                console.log(chummerWeapon.ranges);\r\n                range.ranges = {\r\n                    short: parseInt(chummerWeapon.ranges.short.split('-')[1]),\r\n                    medium: parseInt(chummerWeapon.ranges.medium.split('-')[1]),\r\n                    long: parseInt(chummerWeapon.ranges.long.split('-')[1]),\r\n                    extreme: parseInt(chummerWeapon.ranges.extreme.split('-')[1]),\r\n                };\r\n            }\r\n\r\n        } else if (chummerWeapon.type.toLowerCase() === 'thrown') {\r\n            system.category = 'thrown';\r\n        }\r\n        {\r\n            // TODO handle raw damage if present\r\n            const d = this.parseDamage(chummerWeapon.damage_english);\r\n            damage.base = d.damage;\r\n            damage.type = {};\r\n            damage.type.base = d.type;\r\n            if (d.dropoff || d.radius) {\r\n                const thrown = {};\r\n                system.thrown = thrown;\r\n                thrown.blast = {\r\n                    radius: d.radius,\r\n                    dropoff: d.dropoff,\r\n                };\r\n            }\r\n        }\r\n\r\n        const itemData = createItemData(chummerWeapon.name, 'weapon', system);\r\n        return itemData;\r\n    }\r\n}", "import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\r\nimport {SR5} from \"../../config\"\r\n\r\nexport class LifestyleParser {\r\n    parseLifestyles(chummerChar) {\r\n        \r\n        const chummerLifestyle = getArray(chummerChar.lifestyles.lifestyle);\r\n        const parsedLifestyle = [];\r\n\r\n        chummerLifestyle.forEach((chummerLifestyle) => {\r\n            try {\r\n                const itemData = this.parseLifestyle(chummerLifestyle);\r\n                parsedLifestyle.push(itemData);\r\n            }\r\n             catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedLifestyle;\r\n    }\r\n\r\n    parseLifestyle(chummerLifestyle) {\r\n        const system = {};\r\n\r\n        // Advanced lifestyles and lifestyle qualities are not supported at the moment\r\n        // Map the chummer lifestyle type to our sr5 foundry type. \r\n        const chummerLifestyleType = chummerLifestyle.baselifestyle.toLowerCase();\r\n        if ((chummerLifestyleType in SR5.lifestyleTypes)) {\r\n            system.type = chummerLifestyleType;\r\n        }\r\n        else {\r\n            // This is necessary because of a typo in SR5 config.\r\n            if (chummerLifestyleType === 'luxury') {\r\n                system.type = 'luxory';\r\n            }\r\n            else {\r\n                system.type = 'other';\r\n            }\r\n        }\r\n\r\n        system.cost = chummerLifestyle.totalmonthlycost;\r\n        system.permanent = chummerLifestyle.purchased;\r\n        system.description = parseDescription(chummerLifestyle);\r\n\r\n        // The name of the lifestyle is optional, so we use a fallback here.\r\n        const itemName = chummerLifestyle.name ? chummerLifestyle.name : chummerLifestyle.baselifestyle;\r\n        const itemData = createItemData(itemName, 'lifestyle', system);\r\n        return itemData;\r\n    }\r\n}", "import { parseDescription, getArray, createItemData } from \"./BaseParserFunctions.js\"\r\n\r\nexport class ContactParser {\r\n    parseContacts(chummerChar) {\r\n        \r\n        const chummerContacts = getArray(chummerChar.contacts.contact);\r\n        const parsedContacts = [];\r\n\r\n        chummerContacts.forEach((chummerContact) => {\r\n            try {\r\n                const itemData = this.parseContact(chummerContact);\r\n                parsedContacts.push(itemData);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        });\r\n\r\n        return parsedContacts;\r\n    }\r\n\r\n    parseContact(chummerContact) {\r\n        const system = {};\r\n        system.type = chummerContact.role;\r\n\r\n        // Group contacts are stored in chummer as 'Group(connectionRating)', e.g. 'Group(5)'\r\n        // We handle group contacts as normal contacts until they are supported in the codebase.\r\n        if (chummerContact.connection.toLowerCase().includes('group')) {\r\n            system.connection = chummerContact.connection\r\n                .toLowerCase()\r\n                .replace('group(', '')\r\n                .replace(')', '');\r\n        }\r\n        else {\r\n            system.connection = chummerContact.connection;\r\n        }\r\n\r\n        system.loyalty = chummerContact.loyalty;\r\n        system.family = (chummerContact.family.toLowerCase() === 'true');\r\n        system.blackmail = (chummerContact.blackmail.toLowerCase() === 'true');\r\n        system.description = parseDescription(chummerContact);\r\n\r\n        const itemName = chummerContact.name ? chummerContact.name : '[Unnamed connection]';\r\n        const itemData = createItemData(itemName, 'contact', system);\r\n        return itemData;\r\n    }\r\n}", "import { getArray } from \"./BaseParserFunctions.js\"\r\nimport { GearsParser } from \"./gearImport/GearsParser\"\r\nimport { ArmorParser } from \"./ArmorParser\";\r\nimport { CyberwareParser } from \"./CyberwareParser\";\r\nimport { QualityParser } from \"./QualityParser\";\r\nimport { PowerParser } from \"./PowerParser\";\r\nimport { SpellParser } from \"./SpellParser\";\r\nimport { WeaponParser } from \"./WeaponParser\";\r\nimport { LifestyleParser } from \"./LifestyleParser\";\r\nimport { ContactParser } from \"./ContactParser\";\r\n\r\n/**\r\n * Parses all items (qualities, weapons, gear, ...) from a chummer character.\r\n */\r\nexport class ItemsParser {\r\n\r\n    /**\r\n     * Parses all items from a chummer char and returns an array of the corresponding foundry items.\r\n     * @param {*} chummerChar The chummer char holding the items\r\n     * @param {*} importOptions Additional import option that specify what items will be imported.\r\n     */\r\n    parse(chummerChar, importOptions) {\r\n        const parsedItems = [];\r\n\r\n        if (importOptions.qualities && chummerChar.qualities && chummerChar.qualities.quality) {\r\n            const parsedQualities = new QualityParser().parseQualities(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedQualities);\r\n        }\r\n\r\n        if (importOptions.weapons && chummerChar.weapons != null && chummerChar.weapons.weapon != null) {\r\n            const parsedWeapons = new WeaponParser().parseWeapons(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedWeapons);\r\n        }\r\n\r\n        if (importOptions.armor && chummerChar.armors && chummerChar.armors.armor) {\r\n            const parsedArmors = new ArmorParser().parseArmors(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedArmors);\r\n        }\r\n\r\n        if (importOptions.cyberware && chummerChar.cyberwares && chummerChar.cyberwares.cyberware) {\r\n            const parsedCyberware = new CyberwareParser().parseCyberwares(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedCyberware);\r\n        }\r\n\r\n        if (importOptions.powers && chummerChar.powers && chummerChar.powers.power) {\r\n            const parsedPowers = new PowerParser().parsePowers(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedPowers);\r\n        }\r\n\r\n        if (importOptions.equipment && chummerChar.gears && chummerChar.gears.gear) {\r\n            const gears = getArray(chummerChar.gears.gear);\r\n            const allGearData = new GearsParser().parseGears(gears);\r\n            Array.prototype.push.apply(parsedItems, allGearData);\r\n        }\r\n\r\n        if (importOptions.spells && chummerChar.spells && chummerChar.spells.spell) {\r\n            const parsedSpells = new SpellParser().parseSpells(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedSpells);\r\n        }\r\n\r\n        if (importOptions.contacts && chummerChar.contacts && chummerChar.contacts.contact) {\r\n            const parsedContacts = new ContactParser().parseContacts(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedContacts);\r\n        }\r\n\r\n        if (importOptions.lifestyles && chummerChar.lifestyles && chummerChar.lifestyles.lifestyle) {\r\n            const parsedLifestyles = new LifestyleParser().parseLifestyles(chummerChar);\r\n            Array.prototype.push.apply(parsedItems, parsedLifestyles);\r\n        }\r\n\r\n        return parsedItems;\r\n    }\r\n}\r\n", "import {CharacterInfoUpdater} from \"./CharacterInfoUpdater\"\r\nimport {ItemsParser} from \"./ItemsParser\"\r\n\r\n/**\r\n * Imports characters from other tools into an existing foundry actor.\r\n */\r\nexport class CharacterImporter {\r\n\r\n    /**\r\n     * Imports a chummer character into an existing actor. The actor will be updated. This might lead to duplicate items.\r\n     * @param {*} actor The actor that will be updated with the chummer character.\r\n     * @param {*} chummerFile The complete chummer file as json object. The first character will be selected for import.\r\n     * @param {*} importOptions Additional import option that specify what parts of the chummer file will be imported.\r\n     */\r\n    async importChummerCharacter(actor, chummerFile, importOptions) {\r\n        console.log('Importing the following character file content:');\r\n        console.log(chummerFile);\r\n\r\n        console.log('Using the following import options:')\r\n        console.log(importOptions);\r\n\r\n        if (!chummerFile.characters || !chummerFile.characters.character) {\r\n            console.log('Did not find a valid character to import  - aborting import');\r\n            return;\r\n        }\r\n\r\n        const chummerCharacter = chummerFile.characters.character;\r\n        const characterInfoUpdater = new CharacterInfoUpdater();\r\n        const updatedActorData = await characterInfoUpdater.update(actor._source, chummerCharacter);\r\n        const items = new ItemsParser().parse(chummerCharacter, importOptions);\r\n\r\n\r\n        await actor.update(updatedActorData);\r\n        await actor.createEmbeddedDocuments('Item', items);\r\n    }\r\n}", "import {_mergeWithMissingSkillFields} from \"../actor/prep/functions/SkillsPrep\";\r\nimport {CharacterImporter} from \"./characterImport/CharacterImporter\"\r\n\r\nexport class ChummerImportForm extends FormApplication {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-import';\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = 'Chummer/Hero Lab Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        return {};\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.submit-chummer-import').click(async (event) => {\r\n            event.preventDefault();\r\n\r\n            const chummerFile = JSON.parse($('.chummer-text').val());\r\n            const importOptions = {\r\n                weapons: $('.weapons').is(':checked'),\r\n                armor: $('.armor').is(':checked'),\r\n                cyberware: $('.cyberware').is(':checked'),\r\n                equipment: $('.gear').is(':checked'),\r\n                qualities: $('.qualities').is(':checked'),\r\n                powers: $('.powers').is(':checked'),\r\n                spells: $('.spells').is(':checked'),\r\n                contacts: $('.contacts').is(':checked'),\r\n                lifestyles: $('.lifestyles').is(':checked'),\r\n            }\r\n\r\n            const importer = new CharacterImporter();\r\n            await importer.importChummerCharacter(this.object, chummerFile, importOptions);\r\n\r\n            ui.notifications?.info(\r\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\r\n            );\r\n            this.close();\r\n        });\r\n    }\r\n}\r\n", "import { SituationModifier, SituationModifierCategory } from './../../rules/modifiers/SituationModifier';\r\nimport { SituationModifiersApplication } from './../../apps/SituationModifiersApplication';\r\nimport {Helpers} from \"../../helpers\";\r\nimport {SR5Item} from \"../../item/SR5Item\";\r\nimport {onManageActiveEffect, prepareActiveEffectCategories} from \"../../effects\";\r\nimport {SR5} from \"../../config\";\r\nimport {SkillEditSheet} from \"../../apps/skills/SkillEditSheet\";\r\nimport {SR5Actor} from \"../SR5Actor\";\r\nimport {KnowledgeSkillEditSheet} from \"../../apps/skills/KnowledgeSkillEditSheet\";\r\nimport {LanguageSkillEditSheet} from \"../../apps/skills/LanguageSkillEditSheet\";\r\nimport {MoveInventoryDialog} from \"../../apps/dialogs/MoveInventoryDialog\";\r\nimport {ChummerImportForm} from '../../apps/chummer-import-form';\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport Skills = Shadowrun.Skills;\r\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\r\nimport DeviceData = Shadowrun.DeviceData;\r\nimport KnowledgeSkills = Shadowrun.KnowledgeSkills;\r\n\r\n\r\n/**\r\n * Designed to work with Item.toObject() but it's not fully implementing all ItemData fields.\r\n */\r\nexport interface SheetItemData {\r\n    type: string,\r\n    name: string,\r\n    data: Shadowrun.ShadowrunItemDataData\r\n    properties: any,\r\n    description: any\r\n}\r\n\r\nexport interface InventorySheetData {\r\n    name: string,\r\n    label: string,\r\n    types: {\r\n        [type: string]: {\r\n            type: string,\r\n            label: string,\r\n            items: SheetItemData[]\r\n        }\r\n    }\r\n}\r\n\r\nexport type InventoriesSheetData = Record<string, InventorySheetData>;\r\n\r\n// Use SR5ActorSheet._showSkillEditForm to only ever render one SkillEditSheet instance.\r\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\r\n// when opened in succession, causing SkillEditSheet to wrongfully overwrite the wrong data.\r\nlet globalSkillAppId: number = -1;\r\n\r\n\r\nconst sortByName = (i1, i2) => {\r\n            if (i1.name > i2.name) return 1;\r\n            if (i1.name < i2.name) return -1;\r\n            return 0;\r\n        };\r\nconst sortByEquipped = (left, right) => {\r\n    const leftEquipped = left.data?.technology?.equipped;\r\n    const rightEquipped = right.data?.technology?.equipped;\r\n    if (leftEquipped && !rightEquipped) return -1;\r\n    if (rightEquipped && !leftEquipped) return 1;\r\n    if (left.name > right.name) return 1;\r\n    if (left.name < right.name) return -1;\r\n    return 0;\r\n};\r\nconst sortyByQuality = (a: any, b: any) => {\r\n    if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\r\n    if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\r\n    return a.name < b.name ? -1 : 1;\r\n}\r\n\r\nexport interface SR5BaseSheetDelays {\r\n    skills: ReturnType<typeof setTimeout>|null;\r\n}\r\n\r\n\r\n\r\n/**\r\n * This class should not be used directly but be extended for each actor type.\r\n *\r\n */\r\nexport class SR5BaseActorSheet extends ActorSheet {\r\n    // What document description is shown on sheet. Allow displaying multiple descriptions at the same time.\r\n    _shownDesc: string[] = [];\r\n    // If something needs filtering, store those filters here.\r\n    _filters: SR5SheetFilters = {\r\n            skills: '', // filter based on user input and skill name/label.\r\n            showUntrainedSkills: true, // filter based on pool size.\r\n        };\r\n    // Used together with _filters to delay textinput\r\n    _delays: SR5BaseSheetDelays = {\r\n        skills: null\r\n    }\r\n    // Used to store the scroll position on rerender. Needed as Foundry fully re-renders on Document update.\r\n    _scroll: string;\r\n    // Store the currently selected inventory.\r\n    selectedInventory: string;\r\n\r\n\r\n    constructor(...args) {\r\n        // @ts-ignore // Since we don't need any actual data, don't define args to avoid breaking changes.\r\n        super(...args);\r\n\r\n        // Preselect default inventory.\r\n        this.selectedInventory = this.document.defaultInventory.name;\r\n    }\r\n\r\n    /**\r\n     * All actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected somewhere.\r\n     *\r\n     * @return A string of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        return ['action'];\r\n    }\r\n\r\n    /**\r\n     * All actors will always show these in their 'inventory'.\r\n     * The inventory might be named differently for each actor.\r\n     *\r\n     * All other item types will only be shown when they've been added to that actor.\r\n     * This allows all players/GMs to add item types to each actor that the system may not find useful\r\n     * but the players/GMs might.\r\n     *\r\n     * @return An array of item types from the template.json Item section.\r\n     */\r\n    getInventoryItemTypes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * These item types aren't allowed to be created on this actor sheet.\r\n     *\r\n     * This includes dropping them onto this actor.\r\n     */\r\n    getForbiddenItemTypes(): string[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Extend and override the default options used by the 5e Actor Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'actor'],\r\n            width: 905,\r\n            height: 690,\r\n            tabs: [\r\n                {\r\n                    navSelector: '.tabs',\r\n                    contentSelector: '.sheetbody',\r\n                    initial: 'skills',\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Decide which template to render both for actor types and user permissions.\r\n     *\r\n     *\r\n     * This could also be done within individual ActorType sheets, however, for ease of use, it's\r\n     * centralized here.\r\n     *\r\n     * @override\r\n     */\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates';\r\n\r\n        if (this.actor.limited) {\r\n            return `${path}/actor-limited/${this.actor.type}.html`;\r\n        }\r\n\r\n        return `${path}/actor/${this.actor.type}.html`;\r\n    }\r\n\r\n    /** SheetData used by _all_ actor types! */\r\n    async getData(options) {\r\n        // Remap Foundry default v8/v10 mappings to better match systems legacy foundry versions mapping accross it's templates.\r\n        // NOTE: If this is changed, you'll have to match changes on all actor sheets.\r\n        let data = super.getData() as any;\r\n        const actorData = this.actor.toObject(false);\r\n\r\n        data = {\r\n            ...data,\r\n            // @ts-ignore TODO: foundry-vtt-types v10\r\n            data: actorData.system,\r\n            // @ts-ignore TODO: foundry-vtt-types v10\r\n            system: actorData.system\r\n        }\r\n\r\n        // Sheet related general purpose fields. These aren't persistent.\r\n        data.config = SR5;\r\n        data.filters = this._filters;\r\n\r\n        this._prepareActorAttributes(data);\r\n        this._prepareActorModifiers(data);\r\n\r\n        // Valid data fields for all actor types.\r\n        this._prepareActorTypeFields(data);\r\n        this._prepareSpecialFields(data);\r\n        this._prepareSkillsWithFilters(data);\r\n\r\n        data.itemType = this._prepareItemTypes(data);\r\n        data.effects = prepareActiveEffectCategories(this.document.effects);  // All actor types have effects.\r\n        data.inventories = this._prepareItemsInventory();\r\n        data.inventory = this._prepareSelectedInventory(data.inventories);\r\n        data.hasInventory = this._prepareHasInventory(data.inventories);\r\n        data.selectedInventory = this.selectedInventory;\r\n\r\n        data.situationModifiers = this._prepareSituationModifiers();\r\n\r\n        // @ts-ignore TODO: foundry-vtt-types v10\r\n        data.biographyHTML = await TextEditor.enrichHTML(actorData.system.description.value, {\r\n            // secrets: this.actor.isOwner,\r\n            // rollData: this.actor.getRollData.bind(this.actor),\r\n            // @ts-ignore TODO: foundry-vtt-types v10\r\n            async: true,\r\n            relativeTo: this.actor\r\n          });\r\n\r\n        return data;\r\n    }\r\n\r\n    /** Listeners used by _all_ actor types! */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        Helpers.setupCustomCheckbox(this, html)\r\n\r\n        // Active Effect management\r\n        html.find(\".effect-control\").on('click',event => onManageActiveEffect(event, this.document));\r\n\r\n        // General item CRUD management...\r\n        html.find('.item-create').on('click', this._onItemCreate.bind(this));\r\n        html.find('.item-edit').on('click', this._onItemEdit.bind(this));\r\n        html.find('.item-delete').on('click', this._onItemDelete.bind(this));\r\n\r\n        // General item header/list actions...\r\n        html.find('.item-qty').on('change', this._onListItemChangeQuantity.bind(this));\r\n        html.find('.item-rtg').on('change', this._onListItemChangeRating.bind(this));\r\n        html.find('.item-equip-toggle').on('click', this._onListItemToggleEquipped.bind(this));\r\n\r\n        // Item list description display handling...\r\n        html.find('.hidden').hide();\r\n        html.find('.has-desc').on('click', this._onListItemToggleDescriptionVisibility.bind(this));\r\n\r\n        // General item test rolling...\r\n        html.find('.item-roll').on('click', this._onItemRoll.bind(this));\r\n        html.find('.Roll').on('click', this._onRoll.bind(this));\r\n\r\n        // Actor inventory handling....\r\n        html.find('.inventory-inline-create').on('click', this._onInventoryCreate.bind(this));\r\n        html.find('.inventory-remove').on('click', this._onInventoryRemove.bind(this));\r\n        html.find('.inventory-edit').on('click', this._onInplaceInventoryEdit.bind(this));\r\n        html.find('.inventory-input-cancel').on('click', this._onInplaceInventoryEditCancel.bind(this));\r\n        html.find('.inventory-input-save').on('click', this._onInplaceInventoryEditSave.bind(this));\r\n        html.find('input#input-inventory').on('keydown', this._onInplaceInventoryEditCancel.bind(this));\r\n        html.find('input#input-inventory').on('keydown', this._onInplaceInventoryEditSave.bind(this));\r\n        html.find('input#input-inventory').on('change', this._onInventoryChangePreventSheetSubmit.bind(this));\r\n        html.find('#select-inventory').on('change', this._onSelectInventory.bind(this));\r\n        html.find('.inventory-item-move').on('click', this._onItemMoveToInventory.bind(this));\r\n\r\n        // Condition monitor track handling...\r\n        html.find('.horizontal-cell-input .cell').on('click', this._onSetConditionTrackCell.bind(this));\r\n        html.find('.horizontal-cell-input .cell').on('contextmenu', this._onClearConditionTrack.bind(this));\r\n\r\n        // Matrix data handling...\r\n        html.find('.marks-qty').on('change', this._onMarksQuantityChange.bind(this));\r\n        html.find('.marks-add-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, 1));\r\n        html.find('.marks-remove-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, -1));\r\n        html.find('.marks-delete').on('click', this._onMarksDelete.bind(this));\r\n        html.find('.marks-clear-all').on('click', this._onMarksClearAll.bind(this));\r\n\r\n        // Skill Filter handling...\r\n        html.find('.skill-header').find('.item-name').on('click', this._onFilterUntrainedSkills.bind(this));\r\n        html.find('.skill-header').find('.skill-spec-item').on('click', this._onFilterUntrainedSkills.bind(this));\r\n        html.find('.skill-header').find('.rtg').on('click', this._onFilterUntrainedSkills.bind(this));\r\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\r\n\r\n        // Skill CRUD handling...\r\n        html.find('.skill-edit').on('click', this._onShowEditSkill.bind(this));\r\n        html.find('.knowledge-skill-edit').on('click', this._onShowEditKnowledgeSkill.bind(this));\r\n        html.find('.language-skill-edit').on('click', this._onShowEditLanguageSkill.bind(this));\r\n        html.find('.add-knowledge').on('click', this._onAddKnowledgeSkill.bind(this));\r\n        html.find('.add-language').on('click', this._onAddLanguageSkill.bind(this));\r\n        html.find('.add-active').on('click', this._onAddActiveSkill.bind(this));\r\n        html.find('.remove-knowledge').on('click', this._onRemoveKnowledgeSkill.bind(this));\r\n        html.find('.remove-language').on('click', this._onRemoveLanguageSkill.bind(this));\r\n        html.find('.remove-active').on('click', this._onRemoveActiveSkill.bind(this));\r\n\r\n        // Attribute test rolling...\r\n        html.find('.attribute-roll').on('click', this._onRollAttribute.bind(this));\r\n\r\n        // Conditon monitor test rolling...\r\n        html.find('.cell-input-roll').on('click', this._onRollCellInput.bind(this));\r\n\r\n        // Skill test rolling...\r\n        html.find('.skill-roll').on('click', this._onRollSkill.bind(this));\r\n        html.find('.knowledge-skill').on('click', this._onRollSkill.bind(this));\r\n        html.find('.language-skill').on('click', this._onRollSkill.bind(this));\r\n        html.find('.skill-spec-roll').on('click', this._onRollSkillSpec.bind(this));\r\n\r\n        // Misc. actor actions...\r\n        html.find('.show-hidden-skills').on('click', this._onShowHiddenSkills.bind(this));\r\n        html.find('.open-source').on('click', this._onOpenSource.bind(this));\r\n        html.find('.list-item').each(this._addDragSupportToListItemTemplatePartial.bind(this));\r\n        html.find('.import-character').on('click', this._onShowImportCharacter.bind(this));\r\n\r\n        // Misc. item type actions...\r\n        html.find('.reload-ammo').on('click', this._onReloadAmmo.bind(this));\r\n        html.find('.matrix-att-selector').on('change', this._onMatrixAttributeSelected.bind(this));\r\n\r\n        // Situation modifiers application\r\n        html.find('.show-situation-modifiers-application').on('click', this._onShowSituationModifiersApplication.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handle display of item types within the actors inventory section.\r\n     *\r\n     * Unexpected means there is no use for this type but the user added it anyway.\r\n     * Inventory types means they should always be shown, even if there are none.\r\n     * All other item types will be collected at some tab / place on the sheet.\r\n     */\r\n    _addInventoryItemTypes(inventory) {\r\n        // Show all item types but remove empty unexpected item types.\r\n        const inventoryTypes = this.getInventoryItemTypes();\r\n        for (const type of Object.keys(inventory.types)) {\r\n            if (inventoryTypes.includes(type)) continue;\r\n            if (inventory.types[type].items.length === 0) delete inventory.types[type];\r\n        }\r\n\r\n        return inventory;\r\n    }\r\n\r\n    /**\r\n     * Add any item type to the inventory display that's configured for this actor sheet type.\r\n     *\r\n     * @param inventory The inventory to check and add types to.\r\n     */\r\n    _addInventoryTypes(inventory) {\r\n        for (const type of this.getInventoryItemTypes()) {\r\n            if (inventory.types.hasOwnProperty(type)) continue;\r\n\r\n            inventory.types[type] = {\r\n                type: type,\r\n                label: SR5.itemTypes[type],\r\n                items: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @override Default drag start handler to add Skill support\r\n     * @param event\r\n     */\r\n    async _onDragStart(event) {\r\n        // Create drag data\r\n        const dragData = {\r\n            actorId: this.actor.id,\r\n            sceneId: this.actor.isToken ? canvas.scene?.id : null,\r\n            tokenId: this.actor.isToken ? this.actor.token?.id : null,\r\n            type: '',\r\n            data: {}\r\n        };\r\n\r\n        // Handle different item type data transfers.\r\n        // These handlers depend on behavior of the template partial ListItem.html.\r\n        const element = event.currentTarget;\r\n        switch (element.dataset.itemType) {\r\n            // Skill data transfer. (Active and language skills)\r\n            case 'skill':\r\n                // Prepare data transfer\r\n                dragData.type = 'Skill';\r\n                dragData.data = {\r\n                    skillId: element.dataset.itemId,\r\n                    skill: this.actor.getSkill(element.dataset.itemId)\r\n                };\r\n\r\n                // Set data transfer\r\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\r\n\r\n                return;\r\n\r\n            // Knowlege skill data transfer\r\n            case 'knowledgeskill':\r\n                // Knowledge skills have a multi purpose id built: <id>.<knowledge_category>\r\n                const skillId = element.dataset.itemId.includes('.') ? element.dataset.itemId.split('.')[0] : element.dataset.itemId;\r\n\r\n                dragData.type = 'Skill';\r\n                dragData.data = {\r\n                    skillId,\r\n                    skill: this.actor.getSkill(skillId)\r\n                };\r\n\r\n                // Set data transfer\r\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\r\n\r\n                return;\r\n\r\n            // All default Foundry data transfer.\r\n            default:\r\n                // Let default Foundry handler deal with default drag cases.\r\n                return super._onDragStart(event);\r\n        }\r\n    }\r\n\r\n    /** Handle all document drops onto all actor sheet types.\r\n     *\r\n     * @param event\r\n     */\r\n    // @ts-ignore\r\n    async _onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (!event.dataTransfer) return;\r\n        // Keep upstream document created for actions base on it.\r\n        const documents = await super._onDrop(event);\r\n\r\n        // Handle specific system drop events.\r\n        // const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n\r\n        // Add any created items to the selected inventory.\r\n        if (Array.isArray(documents)) {\r\n            const items = documents.filter(document => document instanceof SR5Item);\r\n            await this.document.inventory.addItems(this.selectedInventory, items);\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Enhance Foundry state restore on rerender by more user interaction state.\r\n     * @override\r\n     */\r\n    async _render(...args) {\r\n        const focus = this._saveInputCursorPosition();\r\n        this._saveScrollPositions();\r\n\r\n        await super._render(...args);\r\n\r\n        this._restoreScrollPositions();\r\n        this._restoreInputCursorPosition(focus);\r\n    }\r\n\r\n    /**\r\n     * Use together with _restoreInputCursorPosition during render calls.\r\n     * Without this the cursor will always be on the first character, causing writing in reverse.\r\n     */\r\n    _saveInputCursorPosition(): any|null {\r\n        const focusList = $(this.element).find('input:focus');\r\n        return focusList.length ? focusList[0] : null;\r\n    }\r\n\r\n    /**\r\n     * Use together with _restoreInputCursorPosition during render calls.\r\n     */\r\n    _restoreInputCursorPosition(focus) {\r\n        if (focus && focus.name) {\r\n            if (!this.form) return;\r\n\r\n            const element = this.form[focus.name];\r\n            if (element) {\r\n                // Set general focus for allem input types.\r\n                element.focus();\r\n\r\n                // Set selection range for supported input types.\r\n                if (['checkbox', 'radio'].includes(element.type)) return;\r\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\r\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Used together with _restoreScrollPositions during render calls.\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used together with _storeScrollPositions during render calls.\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return scroll area of the currently opened tab.\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    async _onItemCreate(event) {\r\n        event.preventDefault();\r\n        const type = Helpers.listItemId(event);\r\n\r\n        // TODO: Add translation for item names...\r\n        const itemData = {\r\n            name: `New ${type}`,\r\n            type: type,\r\n        };\r\n        const items = await this.actor.createEmbeddedDocuments('Item',  [itemData], {renderSheet: true}) as SR5Item[];\r\n        if (!items) return;\r\n\r\n        // Add the item to the selected inventory.\r\n        if (this.selectedInventory !== this.document.defaultInventory.name)\r\n            await this.document.inventory.addItems(this.selectedInventory, items);\r\n    }\r\n\r\n    async _onItemEdit(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        if (item) await item.sheet?.render(true);\r\n    }\r\n\r\n    async _onItemDelete(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        if (!item) return;\r\n        await this.actor.inventory.removeItem(item);\r\n\r\n        return await this.actor.deleteEmbeddedDocuments('Item', [iid]);\r\n    }\r\n\r\n    async _onItemRoll(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        if (item) {\r\n            await item.castAction(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup all general system rolls after clicking on their roll on the sheet.\r\n     *\r\n     * @param event Must contain a currentTarget with a rollId dataset\r\n     */\r\n    async _onRoll(event) {\r\n        event.preventDefault();\r\n\r\n        // look for roll id data in the current line\r\n        let rollId = $(event.currentTarget).data()?.rollId;\r\n        // if that doesn't exist, look for a prent with RollId name\r\n        rollId = rollId ?? $(event.currentTarget).parent('.RollId').data().rollId;\r\n\r\n        const split = rollId.split('.');\r\n        const options = { event };\r\n        switch (split[0]) {\r\n            case 'prompt-roll':\r\n                await this.actor.promptRoll();\r\n                break;\r\n            case 'armor':\r\n                await this.actor.rollGeneralAction('armor', options);\r\n                break;\r\n            case 'fade':\r\n                await this.actor.rollGeneralAction('fade', options);\r\n                break;\r\n            case 'drain':\r\n                await this.actor.rollGeneralAction('drain', options);\r\n                break;\r\n            case 'defense':\r\n                // await this.actor.rollAttackDefense(options);\r\n                await this.actor.rollGeneralAction('physical_defense', options);\r\n                break;\r\n            case 'damage-resist':\r\n                await this.actor.rollGeneralAction('physical_damage_resist', options);\r\n                break;\r\n\r\n            // attribute only rolls\r\n            case 'composure':\r\n                await this.actor.rollGeneralAction('composure', options);\r\n                break;\r\n            case 'judge-intentions':\r\n                await this.actor.rollGeneralAction('judge_intentions', options);\r\n                break;\r\n            case 'lift-carry':\r\n                await this.actor.rollGeneralAction('lift_carry', options);\r\n                break;\r\n            case 'memory':\r\n                await this.actor.rollGeneralAction('memory', options);\r\n                break;\r\n\r\n            case 'vehicle-stat':\r\n                console.log('roll vehicle stat', rollId);\r\n                break;\r\n\r\n            case 'drone':\r\n                const droneRoll = split[1];\r\n                switch (droneRoll) {\r\n                    case 'perception':\r\n                        await this.actor.rollGeneralAction('drone_perception', options);\r\n                        break;\r\n                    case 'infiltration':\r\n                        await this.actor.rollGeneralAction('drone_infiltration', options);\r\n                        break;\r\n                    case 'pilot-vehicle':\r\n                        await this.actor.rollGeneralAction('drone_pilot_vehicle', options);\r\n                        break;\r\n                }\r\n                break;\r\n            // end drone\r\n\r\n            case 'attribute': {\r\n                const attribute = split[1];\r\n                if (attribute) {\r\n                    await this.actor.rollAttribute(attribute, options);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 'skill': {\r\n                const skillId = split[2];\r\n                await this.actor.rollSkill(skillId, options);\r\n                break;\r\n            }\r\n\r\n            case 'matrix':\r\n                const matrixRoll = split[1];\r\n                switch (matrixRoll) {\r\n                    case 'attribute':\r\n                        const attr = split[2];\r\n                        await this.actor.rollAttribute(attr, options);\r\n                        break;\r\n                    case 'device-rating':\r\n                        await this.actor.rollDeviceRating(options);\r\n                        break;\r\n                }\r\n\r\n                break;\r\n            // end matrix\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set any kind of condition monitor to a specific cell value.\r\n     *\r\n     * @event Most return a currentTarget with a value dataset\r\n     */\r\n    async _onSetConditionTrackCell(event) {\r\n        event.preventDefault();\r\n\r\n        const value = Number(event.currentTarget.dataset.value);\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = value;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = value;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = value;\r\n        } else if (cmId === 'matrix') {\r\n            // Sprites don't have a matrix device, but still use the matrix condition monitor, not matrix track.\r\n            return await this.actor.setMatrixDamage(value);\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    /**\r\n     * Reset all condition tracks to zero values.\r\n     * @param event\r\n     */\r\n    async _onClearConditionTrack(event) {\r\n        event.preventDefault();\r\n\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun') {\r\n            data[`data.track.stun.value`] = 0;\r\n        }\r\n        // Clearing the physical monitor should also clear the overflow.\r\n        else if (cmId === 'physical') {\r\n            data[`data.track.physical.value`] = 0;\r\n            data['data.track.physical.overflow.value'] = 0;\r\n\r\n        } else if (cmId === 'edge') {\r\n            data[`data.attributes.edge.uses`] = 0;\r\n\r\n        } else if (cmId === 'overflow') {\r\n            data['data.track.physical.overflow.value'] = 0;\r\n\r\n        } else if (cmId === 'matrix') {\r\n            await this.actor.setMatrixDamage(0);\r\n        }\r\n\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    /**\r\n     * Special fields are shared across all actor types.\r\n     * \r\n     * These are used as indicators about what kind of 'special' a character might be.\r\n     *\r\n     * @param data ActorSheetData as created within getData method\r\n     */\r\n    _prepareSpecialFields(data: SR5ActorSheetData) {\r\n        data.awakened = data.system.special === 'magic';\r\n        data.emerged = data.system.special === 'resonance';\r\n    }\r\n\r\n    /**\r\n     * Pretty up display of zero value actor modifiers.\r\n     *\r\n     * @param data ActorSheetData as created within getData method\r\n     */\r\n    _prepareActorModifiers(data: SR5ActorSheetData) {\r\n         // Empty zero value modifiers for display purposes.\r\n        const { modifiers } = data.system;\r\n        for (let [key, value] of Object.entries(modifiers)) {\r\n            if (value === 0) modifiers[key] = '';\r\n        }\r\n\r\n        data.woundTolerance = 3 + (Number(modifiers['wound_tolerance']) || 0);\r\n    }\r\n\r\n    _prepareActorAttributes(data: SR5ActorSheetData) {\r\n        // Clear visible, zero value attributes temporary modifiers so they appear blank.\r\n        const attributes = data.system.attributes;\r\n        for (let [, attribute] of Object.entries(attributes)) {\r\n            if (!attribute.hidden) {\r\n                if (attribute.temp === 0) delete attribute.temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    _prepareMatrixAttributes(data: SR5ActorSheetData) {\r\n        //@ts-ignore Since we're field checking, we can ignore typing...\r\n        const { matrix } = data.system;\r\n        if (matrix) {\r\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\r\n                const att = matrix[attribute];\r\n                if (att) {\r\n                    if (!att.mod) att.mod = [];\r\n                    if (att.temp === 0) delete att.temp;\r\n                }\r\n            };\r\n\r\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare Actor Sheet Inventory display.\r\n     *\r\n     * Each item can  be in one custom inventory or the default inventory.\r\n     */\r\n    _prepareItemsInventory() {\r\n        // All custom and default actor inventories.\r\n        const inventories: InventoriesSheetData = {};\r\n        // Simple item to inventory mapping.\r\n        const itemIdInventory = {};\r\n\r\n        // Default inventory for items without a defined one.\r\n        // Add first for display purposes on sheet.\r\n        inventories[this.document.defaultInventory.name] = {\r\n            name: this.document.defaultInventory.name,\r\n            label: this.document.defaultInventory.label,\r\n            types: {}\r\n        };\r\n        this._addInventoryTypes(inventories[this.document.defaultInventory.name]);\r\n\r\n        // Build all inventories, group items by their types.\r\n        Object.values(this.document.system.inventories).forEach(({name, label, itemIds}) => {\r\n            inventories[name] = {\r\n                name,\r\n                label,\r\n                types: {}\r\n            }\r\n            // Add default inventory types for this sheet type first, so they appear on top.\r\n            this._addInventoryTypes(inventories[name]);\r\n\r\n            itemIds.forEach(id => {\r\n                if (itemIdInventory[id]) console.warn(`Shadowrun5e | Item id ${id} has been added to both ${name} and ${itemIdInventory[id]}. Will only show in ${name}`);\r\n                itemIdInventory[id] = name;\r\n            });\r\n        });\r\n\r\n        const handledTypes = this.getHandledItemTypes();\r\n\r\n        // Fill all inventories with items grouped by their type.\r\n        this.document.items.forEach(item => {\r\n            // Handled types are on the sheet outside the inventory.\r\n            if (handledTypes.includes(item.type)) return;\r\n\r\n            const sheetItem = this._prepareSheetItem(item);\r\n\r\n            // TODO: isStack property isn't used elsewhere. Remove if unnecessary.\r\n            // @ts-ignore\r\n            // sheetItem.isStack = sheetItem.data.quantity ? item.data.quantity > 1 : false;\r\n\r\n            // Determine what inventory the item sits in.\r\n            const inventoryName = itemIdInventory[item.id] || this.document.defaultInventory.name;\r\n            const inventory = inventories[inventoryName];\r\n\r\n            // Should an item of an abnormal type have been added, build type structure.\r\n            if (!inventory.types[item.type]) {\r\n                inventory.types[item.type] = {\r\n                    type: item.type,\r\n                    label: SR5.itemTypes[item.type],\r\n                    items: []\r\n                };\r\n            }\r\n\r\n            // Add the item to this inventory.\r\n            // @ts-ignore\r\n            inventory.types[item.type].items.push(sheetItem as SheetItemData);\r\n        });\r\n\r\n        Object.values(inventories).forEach(inventory => {\r\n            this._addInventoryItemTypes(inventory);\r\n\r\n            // Sort the items.\r\n            Object.values(inventory.types).forEach((type) => {\r\n                // TODO: Check if some / all should be sort by equipped.\r\n                type.items.sort(sortByName);\r\n            })\r\n        });\r\n\r\n        return inventories;\r\n    }\r\n\r\n    /**\r\n     * Choose the selected inventory to actually display.\r\n     *\r\n     * @param inventories\r\n     */\r\n    _prepareSelectedInventory(inventories: InventoriesSheetData) {\r\n        return inventories[this.selectedInventory];\r\n    }\r\n\r\n    /**\r\n     * Show if any items are in the inventory or if the actor is supposed to have an inventory.\r\n     *\r\n     * A sheet is supposed to show an inventory if there are item types defined or an item of some\r\n     * type exists in any of its inventories.\r\n     *\r\n     * @param inventories\r\n     */\r\n    _prepareHasInventory(inventories: InventoriesSheetData) {\r\n        if(this.getInventoryItemTypes().length > 0) return true;\r\n\r\n        for (const inventory of Object.values(inventories)) {\r\n            if (Object.keys(inventory.types).length > 0) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Enhance an SR5Item by sheet data.\r\n     *\r\n     */\r\n    _prepareSheetItem(item: SR5Item): SheetItemData {\r\n        const sheetItem = item.toObject() as unknown as SheetItemData;\r\n\r\n        const chatData = item.getChatData();\r\n        sheetItem.description = chatData.description;\r\n        // @ts-ignore\r\n        sheetItem.properties = chatData.properties;\r\n\r\n        return sheetItem as unknown as SheetItemData;\r\n    }\r\n\r\n    /**\r\n     * Prepare Actor Sheet data with item data.\r\n     * @param data An object containing Actor Sheet data, as would be returned by ActorSheet.getData\r\n     */\r\n    _prepareItemTypes(data) {\r\n        const itemType: Record<string, SheetItemData[]> = {};\r\n\r\n        // Add all item types in system.\r\n        Object.keys(CONFIG.Item.typeLabels).forEach(type => {\r\n            itemType[type] = [];\r\n        });\r\n\r\n        // Add existing items to their types as sheet items\r\n        this.document.items.forEach((item: SR5Item) => {\r\n            const sheetItem = this._prepareSheetItem(item);\r\n            itemType[sheetItem.type].push(sheetItem);\r\n        });\r\n\r\n        // Sort items for each type.\r\n        Object.entries(itemType).forEach(([type, items]) => {\r\n            switch (type) {\r\n                case 'quality':\r\n                    items.sort(sortyByQuality);\r\n                    break;\r\n                case 'program':\r\n                    items.sort(sortByEquipped);\r\n                    break;\r\n                default:\r\n                    items.sort(sortByName);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return itemType\r\n    }\r\n\r\n    /**\r\n     * @param data An object containing Actor Sheet data, as would be returned by ActorSheet.getData\r\n     */\r\n    _prepareActorTypeFields(data) {\r\n        data.isCharacter = this.actor.isCharacter();\r\n        data.isSpirit = this.actor.isSpirit();\r\n        data.isCritter = this.actor.isCritter();\r\n        data.hasSkills = this.actor.hasSkills;\r\n        data.hasSpecial = this.actor.hasSpecial;\r\n        data.hasFullDefense = this.actor.hasFullDefense;\r\n    }\r\n\r\n    async _onMarksQuantityChange(event) {\r\n        event.stopPropagation();\r\n\r\n        if (this.object.isIC() && this.object.hasHost()) {\r\n            return ui.notifications?.info(game.i18n.localize('SR5.Infos.CantModifyHostContent'));\r\n        }\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const markedDocuments = Helpers.getMarkIdDocuments(markId);\r\n        if (!markedDocuments) return;\r\n        const {scene, target, item} = markedDocuments;\r\n        if (!scene || !target) return; // item can be undefined.\r\n\r\n        const marks = parseInt(event.currentTarget.value);\r\n        await this.object.setMarks(target, marks, {scene, item, overwrite: true});\r\n    }\r\n\r\n    async _onMarksQuantityChangeBy(event, by: number) {\r\n        event.stopPropagation();\r\n\r\n        if (this.object.isIC() && this.object.hasHost()) {\r\n            return ui.notifications?.info(game.i18n.localize('SR5.Infos.CantModifyHostContent'));\r\n        }\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const markedDocuments = Helpers.getMarkIdDocuments(markId);\r\n        if (!markedDocuments) return;\r\n        const {scene, target, item} = markedDocuments;\r\n        if (!scene || !target) return; // item can be undefined.\r\n\r\n        await this.object.setMarks(target, by, {scene, item});\r\n    }\r\n\r\n    async _onMarksDelete(event) {\r\n        event.stopPropagation();\r\n\r\n        if (this.object.isIC() && this.object.hasHost()) {\r\n            return ui.notifications?.info(game.i18n.localize('SR5.Infos.CantModifyHostContent'));\r\n        }\r\n\r\n        const markId = event.currentTarget.dataset.markId;\r\n        if (!markId) return;\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.object.clearMark(markId);\r\n    }\r\n\r\n    async _onMarksClearAll(event) {\r\n        event.stopPropagation();\r\n\r\n        if (this.object.isIC() && this.object.hasHost()) {\r\n            return ui.notifications?.info(game.i18n.localize('SR5.Infos.CantModifyHostContent'));\r\n        }\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.object.clearMarks();\r\n    }\r\n\r\n    _prepareSkillsWithFilters(data: SR5ActorSheetData) {\r\n        this._filterActiveSkills(data);\r\n        this._filterKnowledgeSkills(data);\r\n        this._filterLanguageSkills(data);\r\n    }\r\n\r\n    _filterSkills(data: SR5ActorSheetData, skills: Skills) {\r\n        const filteredSkills = {};\r\n        for (let [key, skill] of Object.entries(skills)) {\r\n            // Don't show hidden skills.\r\n            if (skill.hidden) {\r\n                continue;\r\n            }\r\n            // Filter visible skills.\r\n            if (this._showSkill(key, skill, data)) {\r\n                filteredSkills[key] = skill;\r\n            }\r\n        }\r\n\r\n        return Helpers.sortSkills(filteredSkills);\r\n    }\r\n\r\n     _showSkill(key, skill, data) {\r\n        if (this._showMagicSkills(key, skill, data)) {\r\n            return true;\r\n        }\r\n        if (this._showResonanceSkills(key, skill, data)) {\r\n            return true;\r\n        }\r\n\r\n        return this._showGeneralSkill(key, skill);\r\n    }\r\n\r\n    _showGeneralSkill(skillId, skill: SkillField) {\r\n        return !this._isSkillMagic(skillId, skill) && !this._isSkillResonance(skill) && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _showMagicSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\r\n        return this._isSkillMagic(skillId, skill) && data.system.special === 'magic' && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _showResonanceSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\r\n        return this._isSkillResonance(skill) && data.system.special === 'resonance' && this._isSkillFiltered(skillId, skill);\r\n    }\r\n\r\n    _isSkillFiltered(skillId, skill) {\r\n        // a newly created skill shouldn't be filtered, no matter what.\r\n        // Therefore disqualify empty skill labels/names from filtering and always show them.\r\n        const isFilterable = this._getSkillLabelOrName(skill).length > 0;\r\n        const isHiddenForText = !this._doesSkillContainText(skillId, skill, this._filters.skills);\r\n        const isHiddenForUntrained = !this._filters.showUntrainedSkills && skill.value === 0;\r\n\r\n        return !(isFilterable && (isHiddenForUntrained || isHiddenForText));\r\n    }\r\n\r\n    _getSkillLabelOrName(skill) {\r\n        return Helpers.getSkillLabelOrName(skill);\r\n    }\r\n\r\n    _doesSkillContainText(key, skill, text) {\r\n        if (!text) {\r\n            return true;\r\n        }\r\n\r\n        // Search both english keys, localized labels and all specializations.\r\n        const name = this._getSkillLabelOrName(skill);\r\n        const searchKey = skill.name === undefined ? key : '';\r\n        // some \"specs\" were a string from old code I think\r\n        const specs = skill.specs !== undefined && Array.isArray(skill.specs) ? skill.specs.join(' ') : '';\r\n        let searchString = `${searchKey} ${name} ${specs}`;\r\n\r\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\r\n    }\r\n\r\n    _filterKnowledgeSkills(data: SR5ActorSheetData) {\r\n        // Knowledge skill have separate sub-categories.\r\n        Object.keys(SR5.knowledgeSkillCategories).forEach((category) => {\r\n            if (!data.system.skills.knowledge.hasOwnProperty(category)) {\r\n                console.warn(`Knowledge Skill doesn't provide configured category ${category}`);\r\n                return;\r\n            }\r\n            data.system.skills.knowledge[category].value = this._filterSkills(data, data.system.skills.knowledge[category].value);\r\n        });\r\n    }\r\n\r\n    _filterLanguageSkills(data: SR5ActorSheetData) {\r\n        // Language Skills have no sub-categories.\r\n        data.system.skills.language.value = this._filterSkills(data, data.system.skills.language.value);\r\n    }\r\n\r\n    _filterActiveSkills(data: SR5ActorSheetData) {\r\n        // Handle active skills directly, as it doesn't use sub-categories.\r\n        data.system.skills.active = this._filterSkills(data, data.system.skills.active);\r\n    }\r\n\r\n    _isSkillMagic(id, skill) {\r\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\r\n    }\r\n\r\n    _isSkillResonance(skill) {\r\n        return skill.attribute === 'resonance';\r\n    }\r\n\r\n    /** Setup untrained skill filter within getData */\r\n    async _onFilterUntrainedSkills(event) {\r\n        event.preventDefault();\r\n        this._filters.showUntrainedSkills = !this._filters.showUntrainedSkills;\r\n        await this.render();\r\n    }\r\n\r\n    /** \r\n     * Parameterize skill filtering within getData and implement a general delay around it.\r\n     * \r\n     * NOTE: Be aware of UTF-8/16 multi character input languages, using mulitple separate input symbol to form a single alphabet character.\r\n     * NOTE: This is ONLY necessary as shadowrun5e filters through the render -> getData -> template chain instead of \r\n     *       hiding HTML elements based on their text.\r\n     */\r\n    async _onFilterSkills(event) {\r\n        if (this._delays.skills) \r\n            clearTimeout(this._delays.skills);\r\n        \r\n        this._delays.skills = setTimeout(() => {\r\n            this._filters.skills = event.currentTarget.value;\r\n            this.render();\r\n            //@ts-ignore TODO: foundry-vtt-types v10. Add to typing.\r\n        }, game.shadowrun5e.inputDelay);\r\n    }\r\n\r\n    async _onRollSkill(event) {\r\n        event.preventDefault();\r\n        const itemId = Helpers.listItemId(event);\r\n        // NOTE: Knowledge skills still use a combined id in order for the legacy skill editing dialog to work.\r\n        const skillId = itemId.includes('.') ? itemId.split('.')[0] : itemId;\r\n        if (!skillId) return console.error(`Shadowrun 5e | Rolling skill with item id (${itemId}). But (${skillId}) doesn't seem to be an id`);\r\n        return this.actor.rollSkill(skillId, {event});\r\n    }\r\n\r\n    async _onRollSkillSpec(event) {\r\n        event.preventDefault();\r\n        const itemId = Helpers.listItemId(event);\r\n        // NOTE: Knowledge skills still use a combined id in order for the legacy skill editing dialog to work.\r\n        const skillId = itemId.includes('.') ? itemId.split('.')[0] : itemId;\r\n        return this.actor.rollSkill(skillId, {event, specialization: true});\r\n    }\r\n\r\n    async _onShowEditSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        \r\n        if (!skill) {\r\n            return console.error(`Shadowrun 5e | Editing knowledge skill failed due to missing skill ${skill} id`);\r\n        }\r\n\r\n        // new SkillEditSheet(this.actor, skill, { event: event }).render(true);\r\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skill);\r\n    }\r\n\r\n    /** Keep track of each SkillEditSheet instance and close before opening another.\r\n     *\r\n     * @param skillEditFormImplementation Any extending class! of SkillEditSheet\r\n     * @param actor\r\n     * @param options\r\n     * @param args Collect arguments of the different renderWithSkill implementations.\r\n     */\r\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR5Actor, options: object, ...args) {\r\n        await this._closeOpenSkillApp();\r\n\r\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\r\n        globalSkillAppId = skillEditForm.appId;\r\n        await skillEditForm.render(true);\r\n    }\r\n\r\n    _onShowEditKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skill, category] = Helpers.listItemId(event).split('.');\r\n\r\n        if (!skill || !category) {\r\n            return console.error(`Shadowrun 5e | Editing knowledge skill failed due to missing skill ${skill} or category id ${category}`);\r\n        }\r\n\r\n        this._showSkillEditForm(\r\n            KnowledgeSkillEditSheet,\r\n            this.actor,\r\n            {\r\n                event: event,\r\n            },\r\n            skill,\r\n            category,\r\n        );\r\n    }\r\n\r\n    async _onShowEditLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n\r\n        if (!skill) {\r\n            return console.error(`Shadowrun 5e | Editing knowledge skill failed due to missing skill ${skill} id`);\r\n        }\r\n\r\n        // new LanguageSkillEditSheet(this.actor, skill, { event: event }).render(true);\r\n        await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, { event: event }, skill);\r\n    }\r\n\r\n    async _closeOpenSkillApp() {\r\n        if (globalSkillAppId !== -1) {\r\n            if (ui.windows[globalSkillAppId]) {\r\n                await ui.windows[globalSkillAppId].close();\r\n            }\r\n            globalSkillAppId = -1;\r\n        }\r\n    }\r\n\r\n    async _onAddLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skillId = await this.actor.addLanguageSkill({ name: '' });\r\n        if (!skillId) return;\r\n\r\n        // NOTE: Causes issues with adding knowledge skills (category undefined)\r\n        // await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, {event}, skillId);\r\n    }\r\n\r\n    async _onRemoveLanguageSkill(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const skillId = Helpers.listItemId(event);\r\n        await this.actor.removeLanguageSkill(skillId);\r\n    }\r\n\r\n    async _onAddKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const category = Helpers.listItemId(event) as keyof KnowledgeSkills;\r\n        const skillId = await this.actor.addKnowledgeSkill(category);\r\n        if (!skillId) return;\r\n\r\n        // NOTE: Causes issues with adding knowledge skills (category undefined)\r\n        // await this._showSkillEditForm(KnowledgeSkillEditSheet, this.actor, {event}, skillId);\r\n    }\r\n\r\n    async _onRemoveKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const [skillId, category] = Helpers.listItemId(event).split('.') as [string, keyof KnowledgeSkills];\r\n        await this.actor.removeKnowledgeSkill(skillId, category);\r\n    }\r\n\r\n    /** Add an active skill and show the matching edit application afterwards.\r\n     *\r\n     * @param event The HTML event from which the action resulted.\r\n     */\r\n     async _onAddActiveSkill(event: Event) {\r\n        event.preventDefault();\r\n        const skillId = await this.actor.addActiveSkill();\r\n        if (!skillId) return;\r\n\r\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skillId);\r\n    }\r\n\r\n    async _onRemoveActiveSkill(event: Event) {\r\n         event.preventDefault();\r\n\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        const skillId = Helpers.listItemId(event);\r\n        await this.actor.removeActiveSkill(skillId);\r\n    }\r\n\r\n    async _onRollAttribute(event) {\r\n        event.preventDefault();\r\n        const attribute = event.currentTarget.closest('.attribute').dataset.attribute;\r\n        return this.actor.rollAttribute(attribute, {event: event});\r\n    }\r\n\r\n    /**\r\n     * Handle interaction with a damage track title.\r\n     * @param event\r\n     */\r\n    async _onRollCellInput(event) {\r\n        event.preventDefault();\r\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n\r\n        switch (track) {\r\n            case 'stun':\r\n                await this.actor.rollGeneralAction('natural_recovery_stun', {event});\r\n                break;\r\n            case 'physical':\r\n                await this.actor.rollGeneralAction('natural_recovery_physical', {event});\r\n                break;\r\n            case 'edge':\r\n                await this.actor.rollAttribute('edge', {event});\r\n                break;\r\n        }\r\n    }\r\n\r\n    async _onShowHiddenSkills(event) {\r\n        event.preventDefault();\r\n\r\n        await this.actor.showHiddenSkills();\r\n    }\r\n\r\n    _onOpenSource(event) {\r\n        event.preventDefault();\r\n        const field = $(event.currentTarget).parents('.list-item');\r\n        const iid = $(field).data().itemId;\r\n        const item = this.actor.items.get(iid);\r\n        if (item) {\r\n            item.openSource();\r\n        }\r\n    }\r\n    /**\r\n     * Augment each item of the ListItem template partial with drag support.\r\n     * @param i\r\n     * @param item\r\n     */\r\n    _addDragSupportToListItemTemplatePartial(i, item) {\r\n        if (item.dataset && item.dataset.itemId) {\r\n            item.setAttribute('draggable', true);\r\n            item.addEventListener('dragstart', this._onDragStart.bind(this), false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the quantity on an item shown within a sheet item list.\r\n     * \r\n     * @param event A DOM mouse/touch event\r\n     */\r\n    async _onListItemChangeQuantity(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        const quantity = parseInt(event.currentTarget.value);\r\n\r\n        // Inform users about issues with templating or programming.\r\n        if (item?.system.technology === undefined || !(item && quantity && item.system.technology)) {\r\n            return console.error(`Shadowrun 5e | Tried alterting technology quantity on an item without technology data: ${item?.id}`, item);\r\n        }\r\n        \t\r\n        await item.update({ 'system.technology.quantity': quantity });\r\n    }\r\n\r\n    /**\r\n     * Change the rating on an item shown within a sheet item list.\r\n     */\r\n    async _onListItemChangeRating(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        const rtg = parseInt(event.currentTarget.value);\r\n        if (item && rtg) {\r\n            await item.update({ 'data.technology.rating': rtg });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the equipped status of an item shown within a sheet item list.\r\n     */\r\n    async _onListItemToggleEquipped(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        if (item) {\r\n            const newItems = [] as any[];\r\n\r\n            // Handle the equipped state.\r\n            if (item.isDevice) {\r\n                // Only allow one equipped device item. Unequip all other.\r\n                for (const item of this.actor.items.filter(actorItem => actorItem.isDevice)) {\r\n                    newItems.push({\r\n                        '_id': item.id,\r\n                        'system.technology.equipped': item.id === iid,\r\n                    });\r\n                }\r\n\r\n            } else {\r\n                // Toggle equip status.\r\n                newItems.push({\r\n                    '_id': iid,\r\n                    'system.technology.equipped': !item.isEquipped(),\r\n                });\r\n            }\r\n\r\n            // Handle active effects based on equipped status.\r\n            // NOTE: This is commented out for later ease of enabling effects based on equip status AND if they are\r\n            //       meant to enable on eqiup or not.\r\n            // this.actor.effects.forEach(effect => {\r\n            //     if (effect.data.origin !== item.uuid) return;\r\n            //\r\n            //     // @ts-ignore\r\n            //     effect.disable(item.isEquipped());\r\n            // })\r\n\r\n            await this.actor.updateEmbeddedDocuments('Item', newItems);\r\n\r\n            this.actor.render(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show / hide the items description within a sheet item l ist.\r\n     */\r\n    async _onListItemToggleDescriptionVisibility(event) {\r\n        event.preventDefault();\r\n        const item = $(event.currentTarget).parents('.list-item');\r\n        const iid = $(item).data().item;\r\n        const field = item.next();\r\n        field.toggle();\r\n        if (iid) {\r\n            if (field.is(':visible')) this._shownDesc.push(iid);\r\n            else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an inventory place on the actor for gear organization.\r\n     */\r\n    async _onInventoryCreate(event) {\r\n        event.preventDefault();\r\n\r\n        // Overwrite currently selected inventory.\r\n        $('#input-inventory').val('');\r\n        await this._onInplaceInventoryEdit(event, 'create');\r\n    }\r\n\r\n    /**\r\n     * Remove the currently selected inventory.\r\n     * @param event\r\n     */\r\n    async _onInventoryRemove(event) {\r\n        event.preventDefault();\r\n\r\n        // TODO: Allow for options overwriting title/message and so forth.\r\n        const userConsented = await Helpers.confirmDeletion();\r\n        if (!userConsented) return;\r\n\r\n        await this.document.inventory.remove(this.selectedInventory);\r\n\r\n        // Preselect default instead of none.\r\n        this.selectedInventory = this.document.defaultInventory.name;\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Hide inventory selection and show inline editing instead.\r\n     *\r\n     * @param event\r\n     * @param action What action to take during later saving event.\r\n     */\r\n    async _onInplaceInventoryEdit(event, action:'edit'|'create'='edit') {\r\n        event.preventDefault();\r\n\r\n        // Disallow editing of default inventory.\r\n        if (action === 'edit' && this.selectedInventory === this.document.defaultInventory.name)\r\n            return ui.notifications?.warn(game.i18n.localize('SR5.Warnings.CantEditDefaultInventory'));\r\n\r\n\r\n        $('.selection-inventory').hide();\r\n        $('.inline-input-inventory').show();\r\n\r\n        // Mark action and pre-select.\r\n        $('#input-inventory')\r\n            .data('action', action)\r\n            .select();\r\n    }\r\n\r\n    /**\r\n     * Hide inline inventory editing and show inventory selection instead.\r\n     *\r\n     * Cancel edit workflow and do nothing.\r\n     *\r\n     * @param event Can be an event of type click or keydown.\r\n     */\r\n    async _onInplaceInventoryEditCancel(event) {\r\n        if (event.type === 'keydown' && event.code !== 'Escape') return;\r\n\r\n        event.preventDefault();\r\n\r\n        $('.selection-inventory').show();\r\n        $('.inline-input-inventory').hide();\r\n\r\n        // Reset to selected inventory for next try.\r\n        $('#input-inventory')\r\n            .data('action', undefined)\r\n            .val(this.selectedInventory);\r\n    }\r\n\r\n    /**\r\n     * Complete inline editing and either save changes or create a missing inventory.\r\n     *\r\n     * @param event Either a click or keydown event.\r\n     */\r\n    async _onInplaceInventoryEditSave(event) {\r\n        if (event.type === 'keydown' && event.code !== 'Enter') return;\r\n\r\n        event.preventDefault();\r\n\r\n        const inputElement = $('#input-inventory');\r\n        const action = inputElement.data('action');\r\n        let inventory: string|void = String(inputElement.val());\r\n        if (!inventory) return;\r\n\r\n        switch (action) {\r\n            case 'edit':\r\n                inventory = await this.document.inventory.rename(this.selectedInventory, inventory);\r\n                break;\r\n            case 'create':\r\n                inventory = await this.document.inventory.create(inventory);\r\n                break;\r\n        }\r\n\r\n        await this._onInplaceInventoryEditCancel(event);\r\n\r\n        if (!inventory) return;\r\n\r\n        // Preselect the new or previous inventory.\r\n        this.selectedInventory = inventory;\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Change selected inventory for this sheet.\r\n     *\r\n     * @param event\r\n     */\r\n    async _onSelectInventory(event) {\r\n        event.preventDefault();\r\n\r\n        const inventory = String($(event.currentTarget).val());\r\n\r\n        if (inventory)\r\n            this.selectedInventory = inventory;\r\n\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Move an item between two inventories.\r\n     * @param event\r\n     */\r\n    async _onItemMoveToInventory(event) {\r\n        event.preventDefault();\r\n\r\n        const itemId = Helpers.listItemId(event);\r\n        const item = this.document.items.get(itemId);\r\n        if (!item) return;\r\n\r\n        // Ask user about what inventory to move the item to.\r\n        const dialog = new MoveInventoryDialog(this.document, this.selectedInventory);\r\n        const inventory = await dialog.select();\r\n        if (dialog.canceled) return;\r\n\r\n        await this.document.inventory.addItems(inventory, item);\r\n    }\r\n\r\n    /**\r\n     * When editing an existing or new inventory on a new actor for the frist time,\r\n     * the initial change event (by leaving the element focus, i.e. leaving or clicking on submit)\r\n     * will cause a general form submit (Foundry FormApplication onChangeSubmit), causing a render\r\n     * and removing the inventory input box.\r\n     * \r\n     * Note: This ONLY happens on new actors and NOT on inventory changes on old actors. The root cause\r\n     * is unclear.\r\n     * \r\n     * As the inventory inpunt box lives outside of Foundries default form handling, prevent\r\n     * this by stopping propagation into Foundries onChange listeners.\r\n     * \r\n     * @param event Any event\r\n     */\r\n    _onInventoryChangePreventSheetSubmit(event: Event) {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * Initiative a reload from a sheet event.\r\n     *\r\n     * @param event\r\n     */\r\n     async _onReloadAmmo(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.items.get(iid);\r\n        if (item) return item.reloadAmmo();\r\n    }\r\n\r\n    /**\r\n     * Sync matrix attribute changes (order) made on the actor sheet into item data of the selected cyberdeck.\r\n     *\r\n     * This is done whenever a user changes matrix attribute order directly from the actor sheet matrix section.\r\n     * It's intent is to also order matrix attribute order on the selected matrix device of that actor.\r\n     * \r\n     * @param event A mouse/pointer event\r\n     */\r\n    async _onMatrixAttributeSelected(event) {\r\n        if (!(\"matrix\" in this.actor.system)) return;\r\n\r\n        let iid = this.actor.system.matrix.device;\r\n        let item = this.actor.items.get(iid);\r\n        if (!item) {\r\n            console.error('could not find item');\r\n            return;\r\n        }\r\n        // grab matrix attribute (sleaze, attack, etc.)\r\n        let att = event.currentTarget.dataset.att;\r\n        // grab device attribute (att1, att2, ...)\r\n        let deviceAtt = event.currentTarget.value;\r\n\r\n        // get current matrix attribute on the device\r\n        const deviceData = item.system as DeviceData;\r\n        let oldVal = deviceData.atts[deviceAtt].att;\r\n        let data = {\r\n            _id: iid,\r\n        };\r\n\r\n        // go through atts on device, setup matrix attributes on it\r\n        for (let i = 1; i <= 4; i++) {\r\n            let tmp = `att${i}`;\r\n            let key = `data.atts.att${i}.att`;\r\n            if (tmp === deviceAtt) {\r\n                data[key] = att;\r\n            } else if (deviceData.atts[`att${i}`].att === att) {\r\n                data[key] = oldVal;\r\n            }\r\n        }\r\n        await this.actor.updateEmbeddedDocuments('Item', [data]);\r\n    }\r\n\r\n    /**\r\n     * Open the Chummer Character import handling.\r\n     * @param event\r\n     */\r\n    _onShowImportCharacter(event) {\r\n        event.preventDefault();\r\n        const options = {\r\n            name: 'chummer-import',\r\n            title: 'Chummer Import',\r\n        };\r\n        new ChummerImportForm(this.actor, options).render(true);\r\n    }\r\n\r\n    _setupCustomCheckbox(html) {\r\n        const setContent = (el) => {\r\n            const checkbox = $(el).children('input[type=checkbox]');\r\n            const checkmark = $(el).children('.checkmark');\r\n            if ($(checkbox).prop('checked')) {\r\n                $(checkmark).addClass('fa-check-circle');\r\n                $(checkmark).removeClass('fa-circle');\r\n            } else {\r\n                $(checkmark).addClass('fa-circle');\r\n                $(checkmark).removeClass('fa-check-circle');\r\n            }\r\n        };\r\n        html.find('label.checkbox').each(function () {\r\n            setContent(this);\r\n        });\r\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\r\n        html.find('.submit-checkbox').change((event) => this._onSubmit(event));\r\n    }\r\n\r\n    /**\r\n     * Prepare applied Situation Modifiers for display (read-only) on any actor sheet.\r\n     * \r\n     * Some modifiers might be hidden, when the document doesn't fullfill criterea for it.\r\n     * \r\n     * @returns List of prepare sit. mod data\r\n     */\r\n    _prepareSituationModifiers(): {category: string, label: string, value: number, hidden: boolean}[] {\r\n        const modifiers = this.document.getSituationModifiers();\r\n        if (!modifiers) return [];\r\n\r\n        return Object.entries(modifiers.handlers).map(([category, modifier]: [SituationModifierCategory, SituationModifier]) => {\r\n            const hidden = this._hideSituationModifier(category);\r\n\r\n            const label = SR5.modifierTypes[category];\r\n            return {category, value: modifier.total, hidden, label};\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determine if a situation modifier category should be hidden from an actor sheet.\r\n     * \r\n     * @param category Modifier category to maybe hide\r\n     * @returns true, hide this category from the actors sheet.\r\n     */\r\n    _hideSituationModifier(category: SituationModifierCategory): boolean {\r\n        switch (category) {\r\n            case 'background_count':\r\n                return !this.document.isAwakened;\r\n            case 'environmental':\r\n                return this.document.isSprite();\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show the situation modifiers application for this actor doucment\r\n     * \r\n     * @param event \r\n     */\r\n    _onShowSituationModifiersApplication(event) {\r\n        new SituationModifiersApplication(this.document).render(true);\r\n    }\r\n}", "import {SR5BaseActorSheet} from \"./SR5BaseActorSheet\";\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport {SR5Item} from \"../../item/SR5Item\";\r\nimport MarkedDocument = Shadowrun.MarkedDocument;\r\n\r\ninterface ICActorSheetData extends SR5ActorSheetData {\r\n    host: SR5Item|undefined\r\n    markedDocuments: MarkedDocument[]\r\n    disableMarksEdit: boolean\r\n}\r\n\r\nexport class SR5ICActorSheet extends SR5BaseActorSheet {\r\n    /**\r\n     * IC actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected within the gear tab.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        return super.getHandledItemTypes();\r\n    }\r\n\r\n\r\n    async getData(options) {\r\n        const data = await super.getData(options) as ICActorSheetData;\r\n\r\n        // Fetch a connected host.\r\n        data.host = this.object.getICHost();\r\n\r\n        // Display Matrix Marks\r\n        data.markedDocuments = this.object.getAllMarkedDocuments();\r\n        data.disableMarksEdit = this.object.hasHost();\r\n\r\n        return data;\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        html.find('.entity-remove').on('click', this._removeHost.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Remove a connected host from the shown IC actor type.\r\n     * @param event\r\n     */\r\n    async _removeHost(event) {\r\n        event.stopPropagation();\r\n        await this.object.removeICHost();\r\n    }\r\n\r\n    async _onDrop(event: DragEvent) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // Nothing to be dropped...\r\n        if (!event.dataTransfer) return;\r\n\r\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n\r\n        // Handle IC type actor cases.\r\n        switch(dropData.type) {\r\n            case 'Item':\r\n                // We don't have to narrow down type here, the SR5Actor will handle this for us.\r\n                return await this.object.addICHost(dropData.uuid);\r\n        }\r\n\r\n        // Let Foundry handle default cases.\r\n        return super._onDrop(event);\r\n    }\r\n}", "export class SR5ActiveEffectConfig extends ActiveEffectConfig {\r\n    get template(): string {\r\n        return 'systems/shadowrun5e/dist/templates/effect/active-effect-config.html';\r\n    }\r\n\r\n    getData(options?: Application.RenderOptions): Promise<ActiveEffectConfig.Data> | ActiveEffectConfig.Data {\r\n        const data = super.getData(options) as any;\r\n        data.modes = {...data.modes, 0: game.i18n.localize('SR5.ActiveEffect.Modes.Modify')};\r\n        return data;\r\n    }\r\n}", "import {SR5BaseActorSheet} from \"./SR5BaseActorSheet\";\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport {SR5Actor} from \"../SR5Actor\";\r\n\r\ninterface VehicleSheetDataFields {\r\n    driver: SR5Actor|undefined\r\n}\r\n\r\ninterface VehicleActorSheetData extends SR5ActorSheetData {\r\n    vehicle: VehicleSheetDataFields\r\n}\r\n\r\n\r\nexport class SR5VehicleActorSheet extends SR5BaseActorSheet {\r\n    /**\r\n     * Vehicle actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected within the gear tab.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        let itemTypes = super.getHandledItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'program',\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Vehicle actors will always show these item types.\r\n     *\r\n     * For more info see into super.getInventoryItemTypes jsdoc.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getInventoryItemTypes(): string[] {\r\n        const itemTypes = super.getInventoryItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'weapon',\r\n            'ammo',\r\n            'armor',\r\n            'bioware',\r\n            'cyberware',\r\n            'device',\r\n            'equipment',\r\n            'modification'\r\n        ];\r\n    }\r\n\r\n    async getData(options) {\r\n        const data = await super.getData(options);\r\n\r\n        // Vehicle actor type specific fields.\r\n        data.vehicle = this._prepareVehicleFields();\r\n\r\n        return data;\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        super.activateListeners(html);\r\n\r\n        // Vehicle Sheet related handlers...\r\n        html.find('.driver-remove').on('click', this._handleRemoveVehicleDriver.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Vehicle specific drop events\r\n     * @param event A DataTransferEvent containing some form of FoundryVTT Document / Data\r\n     */\r\n    async _onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (!event.dataTransfer) return;\r\n\r\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n\r\n        // Handle specific system drop events.\r\n        switch (dropData.type) {\r\n            case \"Actor\":\r\n                return await this.actor.addVehicleDriver(dropData.uuid)\r\n        }\r\n\r\n        // Handle none specific drop events.\r\n        return super._onDrop(event);\r\n    }\r\n\r\n    _prepareVehicleFields(): VehicleSheetDataFields {\r\n        const driver = this.actor.getVehicleDriver();\r\n\r\n        return {\r\n            driver\r\n        };\r\n    }\r\n\r\n    async _handleRemoveVehicleDriver(event) {\r\n        event.preventDefault();\r\n        await this.actor.removeVehicleDriver();\r\n    }\r\n}", "import {SR5BaseActorSheet} from \"./SR5BaseActorSheet\";\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport MarkedDocument = Shadowrun.MarkedDocument;\r\n\r\n\r\nexport interface CharacterSheetData extends SR5ActorSheetData {\r\n    awakened: boolean\r\n    emerged: boolean\r\n    woundTolerance: number\r\n    markedDocuments: MarkedDocument[]\r\n    handledItemTypes: string[]\r\n    inventory: Record<string, any>\r\n}\r\n\r\n\r\nexport class SR5CharacterSheet extends SR5BaseActorSheet {\r\n    /**\r\n     * Character actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected within the gear tab.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        let itemTypes = super.getHandledItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'program',\r\n            'sin',\r\n            'lifestyle',\r\n            'contact',\r\n            'spell',\r\n            'adept_power',\r\n            'complex_form',\r\n            'quality',\r\n            'critter_power'\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Character actors will always show these item types.\r\n     *\r\n     * For more info see into super.getInventoryItemTypes jsdoc.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getInventoryItemTypes(): string[] {\r\n        const itemTypes = super.getInventoryItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'weapon',\r\n            'ammo',\r\n            'armor',\r\n            'bioware',\r\n            'cyberware',\r\n            'device',\r\n            'equipment',\r\n            'modification'\r\n        ];\r\n    }\r\n\r\n    async getData(options) {\r\n        const data = await super.getData(options) as CharacterSheetData;\r\n\r\n        // Character actor types are matrix actors.\r\n        super._prepareMatrixAttributes(data);\r\n        data['markedDocuments'] = this.object.getAllMarkedDocuments();\r\n\r\n        return data;\r\n    }\r\n}", "import {SR5BaseActorSheet} from \"./SR5BaseActorSheet\";\r\n\r\n\r\nexport class SR5SpiritActorSheet extends SR5BaseActorSheet {\r\n    /**\r\n     * Spirit actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected within the gear tab.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        let itemTypes = super.getHandledItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'critter_power',\r\n            'spell',\r\n            'quality'\r\n        ];\r\n    }\r\n}", "import {SR5BaseActorSheet} from \"./SR5BaseActorSheet\";\r\n\r\n\r\nexport class SR5SpriteActorSheet extends SR5BaseActorSheet {\r\n    /**\r\n     * Sprite actors will handle these item types specifically.\r\n     *\r\n     * All others will be collected within the gear tab.\r\n     *\r\n     * @returns An array of item types from the template.json Item section.\r\n     */\r\n    getHandledItemTypes(): string[] {\r\n        let itemTypes = super.getHandledItemTypes();\r\n\r\n        return [\r\n            ...itemTypes,\r\n            'sprite_power'\r\n        ];\r\n    }\r\n}", "import { SR } from \"../constants\";\r\nimport { Helpers } from \"../helpers\";\r\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\r\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\r\n\r\n/**\r\n * Shadowrun5e rules applying to ranged weapons in general.\r\n */\r\nexport const RangedWeaponRules = {\r\n    /**\r\n     * Apply a distance to a selected target to the configured ranges of the used ranged weapon\r\n     * to determine which range matches the distance.\r\n     * \r\n     * Apply ranges according to SR5#175 section 'Range'.\r\n     * Assume that a distance matches a range up until it's farthest and lowest given value\r\n     * in the 'Range Table' SR5#185 (i.e. the weapon item range configuration).\r\n     * \r\n     * @param distance Distance from the ranged weapon to the target in meters.\r\n     * @param ranges Configured weapon ranges in meters taken from the weapon item configuration.\r\n     * @returns The matching weapon range for the given distance.\r\n     */\r\n    getRangeForTargetDistance(distance: number, ranges: RangesTemplateData): RangeTemplateData {\r\n        // Assume ranges to be in ASC order and to define their max range.\r\n        // Should no range be found, assume distance to be out of range.\r\n        const rangeKey = Object.keys(ranges).find(range => distance <= ranges[range].distance);\r\n        if (rangeKey) {\r\n            return ranges[rangeKey];\r\n        } else {\r\n            const {extreme} = ranges;\r\n            return Helpers.createRangeDescription('SR5.OutOfRange', extreme.distance, SR.combat.environmental.range_modifiers.out_of_range);\r\n        }\r\n    }\r\n}", "import FireModeData = Shadowrun.FireModeData;\r\nimport FiringModeData = Shadowrun.FiringModeData;\r\nimport { SR5 } from \"../config\";\r\n\r\nexport const FireModeRules = {\r\n    /**\r\n     * Give a defense modifier according to rounds consumed and SR5#180.\r\n     *\r\n     * If given and not enough ammunition is available reduced defense modifier rules\r\n     * will be applied.\r\n     *\r\n     * @param fireMode The selected fireMode \r\n     * @param ammo How many rounds can be fired\r\n     *\r\n     * @returns a negative defense modifier value\r\n     */\r\n    fireModeDefenseModifier: function(fireMode: FireModeData, ammo: number=0): number {\r\n        // For negative rounds use a sane default.\r\n        const rounds = fireMode.value < 0 ? fireMode.value * -1 : fireMode.value;\r\n        // Due to legecy value, sometimes a string numerical sneaks in...\r\n        const modifier = Number(fireMode.defense);\r\n        // Zero modifier can't be further reduced by missing ammunition.\r\n        if (modifier === 0) return 0;\r\n\r\n        // Reduce modifier by avaiable ammunition.\r\n        if (ammo <= 0) ammo = rounds;\r\n        if (ammo >= rounds) return modifier;\r\n\r\n        // Reduce negative modifier by one for each missing unit.\r\n        return Math.min(modifier + rounds - ammo, 0);\r\n    },\r\n\r\n    /**\r\n     * Calculate the recoil attack modifier according to SR5#175\r\n     *\r\n     * NOTE: Reducing recoil compensation here is a bit unintuitive and might be easier to read\r\n     *       with its own rule function.\r\n     *\r\n     * @param fireMode The chosen fire mode\r\n     * @param compensation Remaining recoil compensation\r\n     * @param ammo Amount of ammunition available\r\n     *\r\n     * @return compensation Amount of compensation left.\r\n     * @return recoilModifier Attack modifier to be applied on the attack.\r\n     */\r\n    recoilAttackModifier: function(fireMode: FireModeData, compensation: number, ammo: number = 0): { compensation: number, recoilModifier: number } {\r\n        // Some firemodes don't cause recoil.\r\n        if (!fireMode.recoil) return {compensation, recoilModifier: 0};\r\n        // Sanitze negative ammo values by pretending not to shoot\r\n        if (fireMode.value < 0) return {compensation, recoilModifier: 0};\r\n        // Sanitaze negative ammo values by pretending to have just enough.\r\n        if (ammo <= 0) ammo = fireMode.value;\r\n\r\n        // Only fire amount of rounds available.\r\n        const rounds = Math.min(fireMode.value, ammo);\r\n        // Compensate recoil to get modifier.\r\n        const recoilModifier = Math.min(compensation - rounds, 0);\r\n        // Reduce compensation for additional attacks this combat turn.\r\n        compensation = Math.max(compensation - rounds, 0);\r\n\r\n        return {compensation, recoilModifier};\r\n    },\r\n\r\n    /**\r\n     * Available firemodes for a weapon\r\n     * @param rangedWeaponModes The weapon modes on the actual gun \r\n     * @param rounds The amount of rounds left. If not given, all firemodes will returned.\r\n     * \r\n     * @returns A list of firemodes sorted by weapon mode and rounds necessary.\r\n     */\r\n    availableFireModes: function (rangedWeaponModes: FiringModeData, rounds?: number): FireModeData[] {\r\n        // Reduce all fire modes to what's available on weapon\r\n        // TODO: rounds check\r\n        return SR5.fireModes\r\n            .filter(fireMode => rangedWeaponModes[fireMode.mode])\r\n            .sort((modeA, modeB) => {\r\n            // Same modes, ascending spent rounds.\r\n            if (modeA.mode === modeB.mode) {\r\n                // Numerical values can be substracted to 1 / -1 aprox.\r\n                return modeA.value - modeB.value;\r\n            }\r\n            \r\n            const modeAIndex = SR5.rangeWeaponMode.indexOf(modeA.mode);\r\n            const modeBIndex = SR5.rangeWeaponMode.indexOf(modeB.mode);\r\n            return modeAIndex > modeBIndex ? 1 : -1;\r\n        });\r\n    }\r\n}", "import { RangedWeaponRules } from './../rules/RangedWeaponRules';\r\nimport {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {LENGTH_UNIT, SR} from \"../constants\";\r\nimport {SR5} from \"../config\";\r\nimport {DocumentSituationModifiers} from \"../rules/DocumentSituationModifiers\";\r\nimport {FireModeRules} from \"../rules/FireModeRules\";\r\nimport { SR5Item } from \"../item/SR5Item\";\r\nimport { TestCreator } from './TestCreator';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\r\nimport TargetRangeTemplateData = Shadowrun.TargetRangeTemplateData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\nexport interface RangedAttackTestData extends SuccessTestData {\r\n    damage: DamageData\r\n    fireModes: FireModeData[]\r\n    fireMode: FireModeData\r\n    // index of selceted fireMode in fireModes\r\n    fireModeSelected: number\r\n    recoilCompensation: number\r\n    ranges: RangesTemplateData\r\n    range: number\r\n    targetRanges: TargetRangeTemplateData[]\r\n    // index of selected target range in targetRanges\r\n    targetRangesSelected: number\r\n}\r\n\r\n/**\r\n * TODO: Handle near misses (3 hits attacker, 3 hits defender) => No hit, but also no failure.\r\n * TODO: Move rules into CombatRules\r\n */\r\nexport class RangedAttackTest extends SuccessTest {\r\n    public data: RangedAttackTestData;\r\n    public item: SR5Item;\r\n\r\n    _prepareData(data, options): RangedAttackTestData {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.fireModes = [];\r\n        data.fireMode = {value: 0, defense: 0, label: ''};\r\n        data.ranges = {};\r\n        data.range = 0;\r\n        data.targetRanges = [];\r\n        data.targetRangesSelected = 0;\r\n        data.recoilCompensation = 0;\r\n        data.damage = data.damage || DefaultValues.damageData();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    get showSuccessLabel(): boolean {\r\n        return this.success;\r\n    }\r\n\r\n    _prepareFireMode() {        \r\n        // No firemodes selectable on dialog for invalid item provided.\r\n        const weapon = this.item.asWeapon;\r\n        if (!weapon) return;\r\n\r\n        //@ts-ignore // TODO: foundry-vtt-types v10 \r\n        this.data.fireModes = FireModeRules.availableFireModes(weapon.system.range.modes);\r\n\r\n        // To avoid problems when no firemode is configured on the weapon, add at least one to what's available\r\n        if (this.data.fireModes.length === 0) {\r\n            this.data.fireModes.push(SR5.fireModes[0]);\r\n            ui.notifications?.warn('SR5.Warnings.NoFireModeConfigured', {localize: true});\r\n        }\r\n\r\n        // Current firemode selected\r\n        const lastFireMode = this.item.getLastFireMode() || DefaultValues.fireModeData();\r\n        // Try pre-selection based on last fire mode.\r\n        this.data.fireModeSelected = this.data.fireModes.findIndex(available => lastFireMode.label === available.label);\r\n        if (this.data.fireModeSelected == -1) this.data.fireModeSelected = 0;\r\n        this.data.fireMode = this.data.fireModes[this.data.fireModeSelected];\r\n    }\r\n\r\n    async _prepareWeaponRanges() {\r\n        // Don't let missing weapon ranges break test.\r\n        const weapon = this.item?.asWeapon;\r\n        if (!weapon) return;\r\n\r\n        // Transform weapon ranges to something usable\r\n        const {ranges} = weapon.system.range;\r\n        const {range_modifiers} = SR.combat.environmental;\r\n        const newRanges = {} as RangesTemplateData;\r\n        for (const [key, value] of Object.entries(ranges)) {\r\n            const distance = value as number;\r\n            newRanges[key] = Helpers.createRangeDescription(SR5.weaponRanges[key], distance, range_modifiers[key]);\r\n        }\r\n        this.data.ranges = newRanges;\r\n\r\n        // Get currently active range modifier.\r\n        const actor = this.actor;\r\n        if (!actor) return;\r\n\r\n        const modifiers = actor.getSituationModifiers();\r\n        // If no range is active, set to zero.\r\n        this.data.range = modifiers.environmental.applied.active.range || 0;\r\n    }\r\n\r\n    /**\r\n     * Prepare distances between attacker and targeted tokens.\r\n     */\r\n    async _prepareTargetRanges() {\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        if (foundry.utils.isEmpty(this.data.ranges)) return;\r\n        if (!this.actor) return;\r\n        if (!this.hasTargets) return;\r\n\r\n        const attacker = this.actor.getToken();\r\n\r\n        if (!attacker) {\r\n            ui.notifications?.warn(game.i18n.localize('SR5.TargetingNeedsActorWithToken'));\r\n            return [];\r\n        }\r\n\r\n        // Build target ranges for template display.\r\n        this.data.targetRanges = this.targets.map(target => {\r\n            const distance = Helpers.measureTokenDistance(attacker, target);\r\n            const range = RangedWeaponRules.getRangeForTargetDistance(distance, this.data.ranges);\r\n            return {\r\n                uuid: target.uuid,\r\n                name: target.name || '',\r\n                unit: LENGTH_UNIT,\r\n                range,\r\n                distance,\r\n            };\r\n        });\r\n\r\n        // Sort targets by ascending distance from attacker.\r\n        this.data.targetRanges = this.data.targetRanges.sort((a, b) => {\r\n            if (a.distance < b.distance) return -1;\r\n            if (a.distance > b.distance) return 1;\r\n            return 0;\r\n        });\r\n\r\n        // if no range is active, set to first target selected.\r\n        const modifiers = this.actor.getSituationModifiers();\r\n        this.data.range = modifiers.environmental.applied.active.range || this.data.targetRanges[0].range.modifier;\r\n    }\r\n\r\n    _prepareRecoilCompensation() {\r\n        this.data.recoilCompensation = this.item?.getRecoilCompensation(true) || 0;\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds', 'environmental'];\r\n    }\r\n\r\n    async prepareDocumentData(){\r\n        await this._prepareWeaponRanges();\r\n        await this._prepareTargetRanges();\r\n        this._prepareFireMode();\r\n        this._prepareRecoilCompensation();\r\n\r\n        await super.prepareDocumentData();\r\n    }\r\n\r\n    get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/ranged-attack-test-dialog.html';\r\n    }\r\n\r\n    /**\r\n     * If a supression fire mode is used, ignore action opposed test configuration.\r\n     */\r\n    get _opposedTestClass() {\r\n        if (this.data.fireMode.suppression) return TestCreator._getTestClass(SR5.supressionDefenseTest);\r\n        return super._opposedTestClass;\r\n    }\r\n\r\n    async saveUserSelectionAfterDialog() {\r\n        if (!this.item) return;\r\n\r\n        // Store for next usage.\r\n        await this.item.setLastFireMode(this.data.fireMode);\r\n\r\n        /**\r\n         * RANGE\r\n         */\r\n\r\n        if (!this.actor) return;\r\n\r\n        const modifiers = await this.actor.getSituationModifiers();\r\n        modifiers.environmental.setActive('range', this.data.range);\r\n        await this.actor.setSituationModifiers(modifiers);\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        if (!this.actor) return;\r\n        if (!this.item) return;\r\n\r\n        const poolMods = new PartsList(this.data.modifiers.mod);\r\n\r\n        // Apply recoil modification to general modifiers before calculating base values.\r\n        // TODO: Actual recoil calculation with consumption of recoil compensation.\r\n        const {fireModes, fireModeSelected, recoilCompensation} = this.data;\r\n\r\n        // Use selection for actual fireMode, overwriting possible previous selection for item.\r\n        // TODO: Suppression fire mode causes dice pool modifiers against all actions. Add an active effect to the chat message.\r\n        this.data.fireMode = fireModes[fireModeSelected];\r\n\r\n        // Alter fire mode by ammunition constraints.\r\n        this.data.fireMode.defense = FireModeRules.fireModeDefenseModifier(this.data.fireMode, this.item.ammoLeft);\r\n        // Alter recoil modifier by ammunition constraints.\r\n        const {compensation, recoilModifier} = FireModeRules.recoilAttackModifier(this.data.fireMode, recoilCompensation, this.item.ammoLeft);\r\n\r\n        poolMods.addUniquePart('SR5.Recoil', recoilModifier);\r\n\r\n        // Get range modifier from selected target instead of selected range.\r\n        if (this.hasTargets) {\r\n            // Cast select options string to integer index.\r\n            this.data.targetRangesSelected = Number(this.data.targetRangesSelected);\r\n            const target = this.data.targetRanges[this.data.targetRangesSelected];\r\n            this.data.range = target.range.modifier;\r\n\r\n            this.data.targetActorsUuid = this.data.targetActorsUuid.filter(uuid => uuid === target.uuid);\r\n        }\r\n\r\n        // Alter test data for range.\r\n        this.data.range = Number(this.data.range);\r\n\r\n        // Apply altered environmental modifiers\r\n        const range = this.hasTargets ? this.data.targetRanges[this.data.targetRangesSelected].range.modifier : this.data.range;\r\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(this.actor);\r\n        \r\n        // Locally set env modifier temporarily.\r\n        modifiers.environmental.setActive('range', Number(range));\r\n        modifiers.environmental.apply({reapply: true});\r\n\r\n        poolMods.addUniquePart(SR5.modifierTypes.environmental, modifiers.environmental.total);\r\n\r\n        super.prepareBaseValues();\r\n    }\r\n\r\n    /**\r\n     * Ennough ressources according to test configuration?\r\n     * \r\n     * Ranged weapons need ammunition in enough quantity.\r\n     * \r\n     * NOTE: In this case it's only checked if at least ONE bullet exists.\r\n     *       It's done this way as no matter the fire mode, you can fire it.\r\n     */\r\n    canConsumeDocumentRessources() {\r\n        if (!this.item.isRangedWeapon) return true;\r\n        \r\n        // Ammo consumption\r\n        const fireMode = this.data.fireMode;\r\n        if (fireMode.value === 0) return true;\r\n\r\n        if (!this.item.hasAmmo(1)) {\r\n            ui.notifications?.error('SR5.MissingRessource.Ammo', {localize: true});\r\n            return false;\r\n        }\r\n\r\n        return super.canConsumeDocumentRessources();\r\n    }\r\n\r\n    /**\r\n     * Ranged Attacks not only can consume edge but also reduce ammunition.\r\n     * \r\n     */\r\n    async consumeDocumentRessources() {        \r\n        if (!await super.consumeDocumentRessources()) return false;\r\n        if (!await this.consumeWeaponAmmo()) return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Reduce ranged weapon ammunition according to the fire mode used.\r\n     */\r\n    async consumeWeaponAmmo(): Promise<boolean> {\r\n        if (!this.item) return true;\r\n        if (!this.item.isRangedWeapon) return true;\r\n\r\n        const fireMode = this.data.fireMode;\r\n        if (fireMode.value === 0) return true;\r\n\r\n        // Notify user about some but not no ammo. Still fire though.\r\n        if (!this.item.hasAmmo(fireMode.value)) {\r\n            ui.notifications?.warn('SR5.MissingRessource.SomeAmmo', {localize: true});\r\n        }\r\n\r\n        await this.item.useAmmo(fireMode.value);\r\n\r\n        return true;\r\n    }\r\n}", "import {FormDialog, FormDialogData} from \"./FormDialog\";\r\nimport {SR5Actor} from \"../../actor/SR5Actor\";\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {Helpers} from \"../../helpers\";\r\nimport {SkillFlow} from \"../../actor/flows/SkillFlow\";\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport ModList = Shadowrun.ModList;\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport SkillDialogOptions = Shadowrun.SkillDialogOptions;\r\nimport CombatData = Shadowrun.CombatData;\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {SR5} from \"../../config\";\r\n\r\nexport class ShadowrunActorDialogs {\r\n    static async createDefenseDialog(actor: SR5Actor, options: DefenseRollOptions, partsProps: ModList<number>): Promise<FormDialog> {\r\n        const defenseDialogData = ShadowrunActorDialogs.getDefenseDialogData(actor, options, partsProps);\r\n\r\n        return new FormDialog(defenseDialogData);\r\n    }\r\n\r\n    static async createSoakDialog(options: SoakRollOptions, soakParts: PartsList<number>): Promise<FormDialog> {\r\n        const soakDialogData = ShadowrunActorDialogs.getSoakDialogData(options, soakParts);\r\n        return new FormDialog(soakDialogData);\r\n    }\r\n\r\n    static async createSkillDialog(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): Promise<FormDialog> {\r\n        const skillDialogData = ShadowrunActorDialogs.getSkillDialogData(actor, options, partsProps);\r\n\r\n        return new FormDialog(skillDialogData);\r\n    }\r\n\r\n    static getDefenseDialogData(actor: SR5Actor,  options: DefenseRollOptions, partsProps: ModList<number>): FormDialogData {\r\n        const title = game.i18n.localize('SR5.Defense');\r\n\r\n        const activeDefenses = {\r\n            full_defense: {\r\n                label: 'SR5.FullDefense',\r\n                value: actor.getFullDefenseAttribute()?.value,\r\n                initMod: -10,\r\n            },\r\n            dodge: {\r\n                label: 'SR5.Dodge',\r\n                value: actor.findActiveSkill('gymnastics')?.value,\r\n                initMod: -5,\r\n            },\r\n            block: {\r\n                label: 'SR5.Block',\r\n                value: actor.findActiveSkill('unarmed_combat')?.value,\r\n                initMod: -5,\r\n            },\r\n        };\r\n\r\n        const equippedMeleeWeapons = actor.getEquippedWeapons().filter((w) => w.isMeleeWeapon);\r\n        let defenseReach = 0;\r\n        equippedMeleeWeapons.forEach((weapon) => {\r\n            activeDefenses[`parry-${weapon.name}`] = {\r\n                label: 'SR5.Parry',\r\n                weapon: weapon.name,\r\n                value: actor.findActiveSkill(weapon.getActionSkill())?.value,\r\n                init: -5,\r\n            };\r\n            defenseReach = Math.max(defenseReach, weapon.getReach());\r\n        });\r\n\r\n        const parts = new PartsList(partsProps);\r\n        actor._addDefenseParts(parts);\r\n\r\n        // if we are defending a melee attack\r\n        if (options.attack?.reach) {\r\n            const incomingReach = options.attack.reach;\r\n            const netReach = defenseReach - incomingReach;\r\n            if (netReach !== 0) {\r\n                parts.addUniquePart('SR5.Reach', netReach);\r\n            }\r\n        }\r\n\r\n        const buttons = {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n\r\n        const onAfterClose = (html) => {\r\n            const cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\r\n            const special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\r\n            // Zero to indicate no initiative result change.\r\n            const combat: CombatData = {};\r\n\r\n            if (cover) {\r\n                parts.addUniquePart('SR5.Cover', cover)\r\n            }\r\n            if (special) {\r\n                // Defense pool modifier\r\n                const defense = activeDefenses[special];\r\n                parts.addUniquePart(defense.label, defense.value);\r\n\r\n                // Combat initiative modifier\r\n                combat.initiative = defense.initMod;\r\n            }\r\n\r\n            return {cover, special, parts, combat};\r\n        }\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\r\n        const templateData = {\r\n            parts: parts.getMessageOutput(),\r\n            cover: options.cover,\r\n            activeDefenses\r\n        };\r\n\r\n        return {\r\n            title,\r\n            templateData,\r\n            templatePath,\r\n            buttons,\r\n            onAfterClose\r\n        } as unknown as FormDialogData;\r\n    }\r\n\r\n\r\n    static getSoakDialogData(soakRollOptions: SoakRollOptions, soakParts : PartsList<number>): FormDialogData {\r\n        const title = game.i18n.localize('SR5.DamageResistanceTest');\r\n\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\r\n        const templateData = {\r\n            damage: soakRollOptions?.damage,\r\n            parts: soakParts.getMessageOutput(),\r\n            elementTypes: SR5.elementTypes,\r\n            damageTypes: SR5.damageTypes\r\n        };\r\n\r\n        const buttons =  {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n\r\n        const onAfterClose = (html: JQuery) => {\r\n            const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\r\n            const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\r\n            const element = Helpers.parseInputToString($(html).find('[name=element]').val());\r\n            const damageType = Helpers.parseInputToString($(html).find('[name=damageType]').val()) as DamageType;\r\n\r\n            return {incomingDamage, damageType, ap, element};\r\n        }\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            buttons,\r\n            onAfterClose\r\n        } as unknown as FormDialogData;\r\n    }\r\n\r\n    static getSkillDialogData(actor: SR5Actor, options: SkillDialogOptions, partsProps: PartsList<number>): FormDialogData {\r\n        const title = game.i18n.localize(options.skill.label || options.skill.name);\r\n        const templatePath = 'systems/shadowrun5e/dist/templates/rolls/skill-roll.html';\r\n\r\n        const attributes = actor.getAttributes();\r\n        const attribute = actor.getAttribute(options.attribute ? options.attribute : options.skill.attribute);\r\n        const limits = actor.getLimits();\r\n\r\n        const templateData = {\r\n            attribute: options.skill.attribute,\r\n            attributes: Helpers.filter(attributes, ([, value]) => value.value > 0),\r\n            limit: attribute.limit,\r\n            limits\r\n        }\r\n\r\n\r\n        const buttons = {\r\n            roll: {\r\n                label: game.i18n.localize('SR5.NormalSkillButton'),\r\n                callback: () => {},\r\n            },\r\n        };\r\n        // add specializations to dialog as buttons\r\n        if (options.skill.specs?.length) {\r\n            options.skill.specs.forEach(\r\n                (spec) =>\r\n                    (buttons[spec] = {\r\n                        label: spec,\r\n                        callback: () => {},\r\n                    }),\r\n            );\r\n        }\r\n\r\n        const onAfterClose = (html: JQuery, selectedButton) => {\r\n            const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\r\n            const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\r\n            const attribute = actor.getAttribute(newAtt);\r\n            const limit = actor.getLimit(newLimit);\r\n            // Legacy skills have a label, but no name. Custom skills have a name but no label.\r\n            const skillLabel = game.i18n.localize(options.skill.label || options.skill.name);\r\n            const attributeLabel = game.i18n.localize(SR5.attributes[newAtt]);\r\n            const testLabel = game.i18n.localize('SR5.Test')\r\n\r\n            const skillTestTitle = `${skillLabel} + ${attributeLabel} ${testLabel}`;\r\n\r\n            partsProps.addUniquePart(attribute.label, attribute.value);\r\n\r\n            SkillFlow.handleDefaulting(options.skill, partsProps);\r\n\r\n            // Possible specialization based on button label.\r\n            const isSpecialization = options.skill.specs.includes(selectedButton);\r\n            if (isSpecialization) {\r\n                partsProps.addUniquePart('SR5.Specialization', 2);\r\n            }\r\n\r\n            return {\r\n                title: skillTestTitle,\r\n                attribute,\r\n                limit,\r\n                skill: options.skill,\r\n                parts: partsProps\r\n            }\r\n        }\r\n\r\n        return {\r\n            title,\r\n            templatePath,\r\n            templateData,\r\n            buttons,\r\n            onAfterClose\r\n        } as unknown as FormDialogData;\r\n    }\r\n}", "import {SR5Actor} from \"../SR5Actor\";\r\nimport {Helpers} from '../../helpers';\r\nimport {PartsList} from \"../../parts/PartsList\";\r\nimport {DefaultValues} from \"../../data/DataDefaults\";\r\nimport {ShadowrunActorDialogs} from '../../apps/dialogs/ShadowrunActorDialogs';\r\nimport {SR5Item} from '../../item/SR5Item';\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport ModList = Shadowrun.ModList;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport DamageType = Shadowrun.DamageType;\r\n\r\nexport class SoakFlow {\r\n\r\n    /**\r\n     * Runs the soak flow with user interaction\r\n     * @param actor The actor doing the soaking\r\n     * @param soakRollOptions Information about the incoming damage (if it is already known)\r\n     * @param partsProps Optional modifiers for the soak test\r\n     */\r\n    async runSoakTest(actor: SR5Actor, soakRollOptions: SoakRollOptions, partsProps: ModList<number> = []): Promise<void> {\r\n        // const initialDamageData = soakRollOptions.damage ? soakRollOptions.damage : DefaultValues.damageData();\r\n        // const previewSoakDefenseParts = new PartsList<number>(duplicate(partsProps) as ModList<number>);\r\n        // SoakRules.applyAllSoakParts(previewSoakDefenseParts, actor, initialDamageData);\r\n        //\r\n        // // Ask the user for the damage data / update the incoming damage data\r\n        // const damageDataOrUndef = await this.promptDamageData(soakRollOptions, previewSoakDefenseParts);\r\n        // if (!damageDataOrUndef) {\r\n        //     return;\r\n        // }\r\n        //\r\n        // const damageData = damageDataOrUndef;\r\n        // const finalSoakDefenseParts = new PartsList<number>(duplicate(partsProps) as ModList<number>);\r\n        // SoakRules.applyAllSoakParts(finalSoakDefenseParts, actor, damageData);\r\n\r\n        // Query user for roll options and do the actual soak test.\r\n        // const title = game.i18n.localize('SR5.SoakTest');\r\n        // const roll = await ShadowrunRoller.advancedRoll({\r\n        //     event: soakRollOptions?.event,\r\n        //     extended: false,\r\n        //     actor,\r\n        //     parts: finalSoakDefenseParts.list,\r\n        //     title,\r\n        //     wounds: false,\r\n        //     hideRollMessage: true\r\n        // });\r\n\r\n        // if (!roll) return;\r\n\r\n        // Modify damage and reduce damage by net hits and show result\r\n        // const incoming = duplicate(damageData) as DamageData;\r\n        // let modified = SoakRules.modifyDamageType(incoming, actor);\r\n        // modified = SoakRules.reduceDamage(actor, modified, roll.hits).modified;\r\n        // const incAndModDamage = {incoming, modified};\r\n        //\r\n        // const options = {title, roll, actor, damage: incAndModDamage};\r\n        // if (this.knocksDown(modified, actor)) {\r\n        //     options[\"knockedDown\"] = true;\r\n        // }\r\n        // await createRollChatMessage(options);\r\n        //\r\n        // return roll;\r\n    }\r\n\r\n\r\n    knocksDown(damage: DamageData, actor:SR5Actor) {\r\n        // TODO: SR5 195 Called Shot Knock Down (Melee Only), requires attacker STR and actually announcing that called shot.\r\n        const gelRoundsEffect = this.isDamageFromGelRounds(damage) ? -2 : 0;  // SR5 434\r\n        const impactDispersionEffect = this.isDamageFromImpactDispersion(damage) ? -2 : 0  // FA 52\r\n        const limit = actor.getLimit('physical');\r\n        const effectiveLimit = limit.value + gelRoundsEffect + impactDispersionEffect\r\n        // SR5 194\r\n        const knockedDown = damage.value > effectiveLimit || damage.value >= 10;\r\n\r\n        console.log(`Shadowrun5e | Determined target ${actor.id} knocked down status as: ${knockedDown}`, damage, actor);\r\n\r\n        return knockedDown;\r\n    }\r\n\r\n    isDamageFromGelRounds(damage: DamageData) {\r\n        if (damage.source && damage.source.actorId && damage.source.itemId) {\r\n            const attacker = game.actors?.find(actor => actor.id == damage.source?.actorId);\r\n            if (attacker) {\r\n                const item = attacker.items.find(item => item.id == damage.source?.itemId) as SR5Item;\r\n                if (item) {\r\n                    return item.items\r\n                        .filter(mod => mod.getTechnologyData()?.equipped)\r\n                        .filter(tech => tech.name == game.i18n.localize(\"SR5.AmmoGelRounds\")).length > 0;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isDamageFromImpactDispersion(damage: DamageData) {\r\n        // TODO: FA 52. Ammo currently cannot have mods, so not sure how to implement Alter Ballistics idiomatically.\r\n        return false;\r\n    }\r\n\r\n    private async promptDamageData(soakRollOptions: SoakRollOptions, soakDefenseParts: PartsList<number>)\r\n        : Promise<DamageData | undefined> {\r\n\r\n        // Ask user for incoming damage, ap and element\r\n        const damageDataDialog = await ShadowrunActorDialogs.createSoakDialog(soakRollOptions, soakDefenseParts);\r\n        const userData = await damageDataDialog.select();\r\n        if (damageDataDialog.canceled) return;\r\n\r\n        // Update damage with the user input\r\n        const initialDamageData: DamageData = soakRollOptions?.damage\r\n                ? soakRollOptions.damage\r\n                : DefaultValues.damageData();\r\n\r\n        return this.updateDamageWithUserData(initialDamageData, userData.incomingDamage, userData.damageType, userData.ap, userData.element);\r\n    }\r\n\r\n    private updateDamageWithUserData(initialDamageData: DamageData, incomingDamage : number, damageType : DamageType, ap: number, element: string) {\r\n        const damageData = duplicate(initialDamageData) as DamageData;\r\n\r\n        // Update damage data, diff changes instead of simply replacing\r\n        const totalDamage = Helpers.calcTotal(damageData);\r\n        if (totalDamage !== incomingDamage) {\r\n            const diff = incomingDamage - totalDamage;\r\n            damageData.mod = PartsList.AddUniquePart(damageData.mod, 'SR5.UserInput', diff);\r\n            damageData.value = Helpers.calcTotal(damageData);\r\n        }\r\n\r\n        if (initialDamageData.type.base !== damageType) {\r\n            damageData.type.base = damageType;\r\n            damageData.type.value = damageType;\r\n        }\r\n\r\n        // Update ap, diff changes instead of simply replacing\r\n        const totalAp = Helpers.calcTotal(damageData.ap);\r\n        if (totalAp !== ap) {\r\n            const diff = ap - totalAp;\r\n            damageData.ap.mod = PartsList.AddUniquePart(damageData.ap.mod, 'SR5.UserInput', diff);\r\n            damageData.ap.value = Helpers.calcTotal(damageData.ap);\r\n        }\r\n\r\n        if (element) {\r\n            damageData.element.value = element as DamageElement;\r\n        }\r\n\r\n        return damageData;\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {CombatRules} from \"../rules/CombatRules\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {PhysicalDefenseTestData} from \"./PhysicalDefenseTest\";\r\nimport {SoakFlow} from \"../actor/flows/SoakFlow\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\n\r\nexport interface PhysicalResistTestData extends SuccessTestData {\r\n    // The original test this resistance is taking its data from.\r\n    following: PhysicalDefenseTestData\r\n    // The damage BEFORE this test is done.\r\n    incomingDamage: DamageData\r\n    // The damage AFTER this test is done.\r\n    modifiedDamage: DamageData\r\n    // Determine if an actor should be knockedDown after a defense.\r\n    knockedDown: boolean\r\n}\r\n\r\n\r\n/**\r\n * A physical resist test handles SR5#173 Defend B\r\n *\r\n * Physical resist specifically handles physical damage dealt by ranged, melee and physical spell attacks.\r\n */\r\nexport class PhysicalResistTest extends SuccessTest {\r\n    data: PhysicalResistTestData\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        // Get incoming damage from test before or default.\r\n        data.incomingDamage = foundry.utils.duplicate(data.following?.modifiedDamage || DefaultValues.damageData());\r\n        data.modifiedDamage = duplicate(data.incomingDamage);\r\n\r\n        return data;\r\n    }\r\n\r\n    get _chatMessageTemplate() {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/defense-test-message.html';\r\n    }\r\n\r\n    get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/physical-resist-test-dialog.html';\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            'attribute': 'body',\r\n            'armor': true\r\n        };\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['soak'];\r\n    }\r\n\r\n    applyPoolModifiers() {\r\n        super.applyPoolModifiers();\r\n        this.applyArmorPoolModifier();\r\n    }\r\n\r\n    /**\r\n     * Resisting against damage on the physical plane includes the modified armor value.\r\n     */\r\n    applyArmorPoolModifier() {\r\n        if (this.data.action.armor) {\r\n            if (this.actor) {\r\n                const armor = this.actor.getArmor(this.data.incomingDamage);\r\n                this.data.pool.mod = PartsList.AddUniquePart(this.data.pool.mod,'SR5.Armor', armor.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n\r\n        // Calculate damage values in case of user dialog interaction.\r\n        Helpers.calcTotal(this.data.incomingDamage, {min: 0});\r\n        Helpers.calcTotal(this.data.incomingDamage.ap);\r\n\r\n        // Remove user override and resulting incoming damage as base.\r\n        this.data.modifiedDamage = foundry.utils.duplicate(this.data.incomingDamage);\r\n        this.data.modifiedDamage.base = this.data.incomingDamage.value;\r\n        this.data.modifiedDamage.mod = [];\r\n        delete this.data.modifiedDamage.override;\r\n        this.data.modifiedDamage.ap.base = this.data.incomingDamage.ap.value;\r\n        this.data.modifiedDamage.ap.mod = [];\r\n        delete this.data.modifiedDamage.ap.override;\r\n\r\n        Helpers.calcTotal(this.data.modifiedDamage);\r\n        Helpers.calcTotal(this.data.modifiedDamage.ap);\r\n    }\r\n\r\n    get canSucceed() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Resist Test success means ALL damage has been soaked.\r\n     */\r\n    get success() {\r\n        return this.data.incomingDamage.value <= this.hits.value;\r\n    }\r\n\r\n    get successLabel() {\r\n        return 'SR5.ResistedAllDamage';\r\n    }\r\n\r\n    get failureLabel() {\r\n        return 'SR5.ResistedSomeDamage';\r\n    }\r\n\r\n    async processResults() {\r\n        await super.processResults();\r\n\r\n        if (!this.actor) return;\r\n\r\n        // Handle damage modification.\r\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterResist(this.actor, this.data.modifiedDamage, this.hits.value);\r\n\r\n        // Handle Knock Down Rules with legacy flow handling.\r\n        this.data.knockedDown = new SoakFlow().knocksDown(this.data.modifiedDamage, this.actor);\r\n    }\r\n}", "import { EnvironmentalModifier } from './../rules/modifiers/EnvironmentalModifier';\r\nimport {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport { SR5Actor } from \"../actor/SR5Actor\";\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\nimport EnvironmentalModifiersSourceData = Shadowrun.EnvironmentalModifiersSourceData;\r\n\r\nexport interface MeleeAttackData extends SuccessTestData {\r\n    reach: number\r\n}\r\n\r\nexport class MeleeAttackTest extends SuccessTest {\r\n    data: MeleeAttackData;\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.damage = data.damage || DefaultValues.damageData();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n     get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds', 'environmental'];\r\n    }\r\n\r\n     get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/melee-attack-test-dialog.html';\r\n    }\r\n\r\n    get showSuccessLabel(): boolean {\r\n        return this.success;\r\n    }\r\n\r\n    async prepareDocumentData() {\r\n        if (!this.item || !this.item.isMeleeWeapon) return;\r\n\r\n        this.data.reach = this.item.getReach();\r\n\r\n        await super.prepareDocumentData();\r\n    }\r\n\r\n    /**\r\n     * Remove unneeded environmental modifier categories for melee tests.\r\n     * \r\n     * See SR5#187 'Environmental Modifiers'\r\n     * \r\n     * @param actor \r\n     * @param type \r\n     */\r\n     async prepareActorModifier(actor: SR5Actor, type: ModifierTypes): Promise<{ name: string; value: number; }> {\r\n        if (type !== 'environmental') return await super.prepareActorModifier(actor, type);\r\n\r\n        // Only light and visibility apply.\r\n        const modifiers = actor.getSituationModifiers();\r\n        modifiers.environmental.apply({applicable: ['light', 'visibility']});\r\n\r\n        const name = this._getModifierTypeLabel(type);\r\n        const value = modifiers.environmental.total;\r\n\r\n        return {name, value};\r\n    }\r\n}", "/**\r\n * Shadowrun 5 rules related to magic / spellcasting.\r\n */\r\nexport class SpellcastingRules {\r\n    /**\r\n     * Calculate spellcasting drain value without its damage type\r\n     *\r\n     * As defined in SR5#282 - Step 6 Resist Drain.\r\n     *\r\n     * @param force The force the spell is cast with.\r\n     * @param drainModifier The drain modifier defined within the spells action configuration.\r\n     * @param reckless Set this to true should the spell be cast recklessly as defined in SR5#281 Cast Spell.\r\n     */\r\n    static calculateDrain(force: number, drainModifier: number, reckless: boolean = false): number {\r\n        const recklessModifier = reckless ? this.recklessDrainModifier : 0;\r\n        const drain = force + drainModifier + recklessModifier;\r\n        return Math.max(this.minimalDrain, drain);\r\n    }\r\n\r\n    /**\r\n     * As defined in SR5#282 - Step 6 Resist Drain\r\n     */\r\n    static get minimalDrain(): number {\r\n        return 2;\r\n    }\r\n\r\n    /**\r\n     * As defined in SR5#281 - Step 4 Cast Spell.\r\n     *\r\n     * Reckless spellcasting will alter drain damage.\r\n     */\r\n    static get recklessDrainModifier(): number {\r\n        return 3;\r\n    }\r\n\r\n    /**\r\n     * Based on the minimal drain value use this as the minimal usable force value.\r\n     * @param drainModifier The drain modifier defined within the spells action configuration.\r\n     */\r\n    static calculateMinimalForce(drainModifier: number): number {\r\n        return Math.max(1, this.minimalDrain - drainModifier);\r\n    }\r\n\r\n    /**\r\n     * Calculate spell casting limit based on the force chosen.\r\n     *\r\n     * As defined in SR5#281 - Step 3 Choose Spell Force\r\n     *\r\n     * @param force The spell force chosen by test configuration.\r\n     * @returns The limit value to be applied.\r\n     */\r\n    static calculateLimit(force: number): number {\r\n        return force;\r\n    }\r\n}", "/**\r\n * Handle all rules related to Shadowrun 5 magic drain.\r\n */\r\nimport DamageData = Shadowrun.DamageData;\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {Helpers} from \"../helpers\";\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\nexport class DrainRules {\r\n    /**\r\n     * Calculate spell casting drain damage according to SR5#281-282\r\n     *\r\n     * @param drain The drain value\r\n     * @param force The force value used to cast\r\n     * @param magic The magic attribute level of the caster\r\n     * @param hits Spellcasting test hits\r\n     */\r\n    static calcDrainDamage(drain: number, force: number, magic: number, hits: number): DamageData {\r\n        if (force < 0) force = 1;\r\n        if (magic < 0) magic = 1;\r\n        if (hits < 0) hits = 0;\r\n\r\n        const damage = DefaultValues.damageData();\r\n        damage.base = drain;\r\n        Helpers.calcTotal(damage, {min: 0});\r\n        damage.type.base = damage.type.value = DrainRules.calcDrainDamageType(hits, magic);\r\n\r\n        return damage;\r\n    }\r\n\r\n    /**\r\n     * Get the drain damage type according to SR5#281 'Step 3'\r\n     * @param hits The spell casting test hits AFTER limit\r\n     * @param magic The magic attribute level of the caster\r\n     */\r\n    static calcDrainDamageType(hits: number, magic: number): DamageType {\r\n        if (hits < 0) hits = 0;\r\n        if (magic < 0) magic = 1;\r\n        return hits > magic ? 'physical' : 'stun';\r\n    }\r\n\r\n    /**\r\n     * Modify the drain damage after the spell casting test has been completed.\r\n     *\r\n     * @param drainDamage The base drain damage after force / drain has been chosen.\r\n     * @param hits The spell casting test hits\r\n     */\r\n    static modifyDrainDamage(drainDamage: DamageData, hits: number) {\r\n        if (hits < 0) hits = 0;\r\n\r\n        drainDamage = foundry.utils.duplicate(drainDamage);\r\n\r\n        PartsList.AddUniquePart(drainDamage.mod, 'SR5.Hits', -hits);\r\n        Helpers.calcTotal(drainDamage, {min: 0});\r\n\r\n        return drainDamage;\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {SpellcastingRules} from \"../rules/SpellcastingRules\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {DrainRules} from \"../rules/DrainRules\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\n\r\nexport interface SpellCastingTestData extends SuccessTestData {\r\n    force: number\r\n    drain: number\r\n    reckless: boolean\r\n\r\n    drainDamage: DamageData\r\n}\r\n\r\n\r\n/**\r\n * Spellcasting tests as described on SR5#281 in the spellcasting chapter.\r\n *\r\n */\r\nexport class SpellCastingTest extends SuccessTest {\r\n    data: SpellCastingTestData\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.force = data.force || 0;\r\n        data.drain = data.drain || 0;\r\n        data.reckless = data.reckless || false;\r\n        data.drainDamage = data.drainDamage || DefaultValues.damageData();\r\n\r\n        return data;\r\n    }\r\n\r\n    get _dialogTemplate()  {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/spellcasting-test-dialog.html';\r\n    }\r\n\r\n    get _chatMessageTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/spellcasting-test-message.html';\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            skill: 'spellcasting',\r\n            attribute: 'magic'\r\n        };\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds', 'background_count'];\r\n    }\r\n\r\n    async prepareDocumentData() {\r\n        this.prepareInitialForceValue();\r\n\r\n        await super.prepareDocumentData();\r\n    }\r\n\r\n    /**\r\n     * Set a force value based on the items history or viable suggestions.\r\n     */\r\n    prepareInitialForceValue() {\r\n        if (!this.item) return;\r\n\r\n        const lastUsedForce = this.item.getLastSpellForce();\r\n        const suggestedForce = SpellcastingRules.calculateMinimalForce(this.item.getDrain);\r\n        this.data.force = lastUsedForce.value || suggestedForce;\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        super.prepareBaseValues();\r\n        this.prepareLimitValue();\r\n    }\r\n\r\n    prepareLimitValue() {\r\n        const force = Number(this.data.force);\r\n        this.data.limit.mod = PartsList.AddUniquePart(\r\n            this.data.limit.mod,\r\n            'SR5.Force',\r\n            SpellcastingRules.calculateLimit(force));\r\n    }\r\n\r\n    // /**\r\n    //  * Overwrite range from environmental modifiers for indirect combat spells.\r\n    //  * \r\n    //  * @param actor \r\n    //  * @param type \r\n    //  */\r\n    // async prepareActorModifier(actor: SR5Actor, type: ModifierTypes): Promise<{ name: string; value: number; }> {\r\n    //     if (type !== 'environmental' && !this.item?.isIndirectCombatSpell()) return await super.prepareActorModifier(actor, type);\r\n\r\n    //     const modifiers = actor.getSituationModifiers();\r\n    // }\r\n\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n        this.calculateDrainValue();\r\n    }\r\n\r\n    /**\r\n     * Precalculate drain for user display.\r\n     */\r\n    calculateDrainValue() {\r\n        const force = Number(this.data.force);\r\n        const drain = Number(this.item?.getDrain);\r\n        const reckless = this.data.reckless;\r\n        this.data.drain = SpellcastingRules.calculateDrain(force, drain, reckless);\r\n    }\r\n\r\n    /**\r\n     * Derive the actual drain damage from spellcasting values.\r\n     */\r\n    calcDrainDamage() {\r\n        if (!this.actor) return DefaultValues.damageData();\r\n\r\n        const force = Number(this.data.force);\r\n        const drain = Number(this.data.drain);\r\n        const magic = this.actor.getAttribute('magic').value;\r\n\r\n        this.data.drainDamage = DrainRules.calcDrainDamage(drain, force, magic, this.hits.value);\r\n    }\r\n\r\n    async processResults() {\r\n        this.calcDrainDamage();\r\n\r\n        await super.processResults();\r\n    }\r\n\r\n    /**\r\n     * Allow the currently used force value of this spell item to be reused next time.\r\n     */\r\n    async saveUserSelectionAfterDialog() {\r\n        if (!this.item) return;\r\n\r\n        await this.item.setLastSpellForce({value: this.data.force, reckless: false});\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {SpellCastingTest, SpellCastingTestData} from \"./SpellCastingTest\";\r\nimport {DrainRules} from \"../rules/DrainRules\";\r\nimport {Helpers} from \"../helpers\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\nimport GenericValueField = Shadowrun.GenericValueField;\r\n\r\nexport interface DrainTestData extends SuccessTestData {\r\n    incomingDrain: DamageData\r\n    modifiedDrain: DamageData\r\n\r\n    against: SpellCastingTestData\r\n}\r\n\r\n\r\n/**\r\n * Implement a Drain Test as is defined in SR5#282 'Step 6 - Resist Drain'\r\n * \r\n * Drain defines it's incoming drain and modifies it to it's modified drain,\r\n * both of which the user can apply.\r\n */\r\nexport class DrainTest extends SuccessTest {\r\n    data: DrainTestData\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.against = data.against || new SpellCastingTest({}, {}, options).data;\r\n\r\n        data.incomingDrain = foundry.utils.duplicate(data.against.drainDamage);\r\n        data.modifiedDrain = foundry.utils.duplicate(data.incomingDrain);\r\n\r\n        return data;\r\n    }\r\n\r\n    get _dialogTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/drain-test-dialog.html';\r\n    }\r\n\r\n    get _chatMessageTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/drain-test-message.html';\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            'attribute2': 'willpower'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'drain']\r\n    }\r\n\r\n    static async _getDocumentTestAction(item, actor) {\r\n        const documentAction = await super._getDocumentTestAction(item, actor);\r\n\r\n        if (!actor.isAwakened) {\r\n            console.error(`Shadowrun 5e | A ${this.name} expected an awakened actor but got this`, actor);\r\n            return documentAction;\r\n        }\r\n\r\n        // Get magic school attribute.\r\n        const attribute = actor.system.magic.attribute;\r\n        foundry.utils.mergeObject(documentAction, {attribute});\r\n\r\n        // Return the school attribute based on actor configuration.\r\n        return documentAction;\r\n    }\r\n\r\n    /**\r\n     * Re-calculate incomingDrain in case of user input\r\n     */\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n\r\n        Helpers.calcValue<typeof this.data.incomingDrain.type.base>(this.data.incomingDrain.type as GenericValueField);\r\n\r\n        // Don't duplicate incomingDrain to avoild using a override, only transfer needed values.\r\n        this.data.modifiedDrain = foundry.utils.duplicate(this.data.incomingDrain);\r\n        this.data.modifiedDrain.base = Helpers.calcTotal(this.data.incomingDrain, {min: 0});\r\n    }\r\n\r\n    /**\r\n     * A drain test is successful whenever it has more hits than drain damage\r\n     */\r\n    get success(): boolean {\r\n        return this.data.modifiedDrain.value <= 0;\r\n    }\r\n\r\n    get successLabel(): string {\r\n        return 'SR5.ResistedAllDamage';\r\n    }\r\n\r\n    get failureLabel(): string {\r\n        return 'SR5.ResistedSomeDamage'\r\n    }\r\n\r\n    async processResults() {\r\n        // Don't use incomingDrain as it might have a user value override applied.\r\n        this.data.modifiedDrain = DrainRules.modifyDrainDamage(this.data.modifiedDrain, this.hits.value);\r\n\r\n        await super.processResults();\r\n    }\r\n}", "import DamageData = Shadowrun.DamageData;\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {CombatRules} from \"./CombatRules\";\r\nimport CombatSpellType = Shadowrun.CombatSpellType;\r\nimport SpellType = Shadowrun.SpellType;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport { SR5Actor } from \"../actor/SR5Actor\";\r\n\r\nexport class CombatSpellRules {\r\n    /**\r\n     * Calculate combat spell damage as defined in SR5#283 Combat Spells Direct section.\r\n     *\r\n     * This includes only the attack portion of damage calculation.\r\n     *\r\n     * @param damage The DamageData so far.\r\n     */\r\n    static calculateDirectDamage(damage: DamageData): DamageData {\r\n        return foundry.utils.duplicate(damage);\r\n    }\r\n\r\n    /**\r\n     * Calculate combat spell damage as defined in SR5#283 Combat Spells Indirect section.\r\n     *\r\n     * This includes only the attack portion of damage calculation.\r\n     *\r\n     * @param damage The DamageData so far.\r\n     * @param force The force used during combat spell.\r\n     */\r\n    static calculateIndirectDamage(damage: DamageData, force: number): DamageData {\r\n        damage = foundry.utils.duplicate(damage);\r\n\r\n        const ap = -force;\r\n        damage.ap.mod = PartsList.AddUniquePart(damage.ap.mod, 'SR5.Force', ap);\r\n        damage.mod = PartsList.AddUniquePart(damage.mod, 'SR5.Force', force);\r\n\r\n        // Armor piercing can both be a negative and positive value.\r\n        Helpers.calcTotal(damage.ap);\r\n        Helpers.calcTotal(damage, {min: 0});\r\n\r\n        return damage;\r\n    }\r\n\r\n    /**\r\n     * Modify incoming direct combat spell damage as defined in SR5#283 Combat Spell direct section.\r\n     *\r\n     * @param defender The active defender\r\n     * @param damage Incoming damage including base damage values.\r\n     * @param attackerHits The attackers hits achieved\r\n     * @param defenderHits The defenders hits achieved\r\n     */\r\n    static modifyDirectDamageAfterHit(defender: SR5Actor, damage: DamageData, attackerHits: number, defenderHits: number): DamageData {\r\n        return CombatRules.modifyDamageAfterHit(defender, attackerHits, defenderHits, damage);\r\n    }\r\n\r\n    static modifyIndirectDamageAfterHit(defender: SR5Actor, damage: DamageData, attackerHits: number, defenderHits): DamageData {\r\n        return CombatRules.modifyDamageAfterHit(defender, attackerHits, defenderHits, damage);\r\n    }\r\n\r\n    static modifyDamageAfterMiss(damage: DamageData): DamageData {\r\n        return CombatRules.modifyDamageAfterMiss(damage);\r\n    }\r\n\r\n    /**\r\n     * Should a damage resist test be allowed according to SR5#283 section 'Combat Spells'\r\n     * @param type The general combat spell type.\r\n     * @returns When true, a damage resist test should be cast.\r\n     */\r\n    static allowDamageResist(type: CombatSpellType): boolean {\r\n        return type === 'indirect';\r\n    }\r\n\r\n    /**\r\n     * Calculate base damage for all combat spell types.\r\n     *\r\n     * This will not include net hits after defense.\r\n     *\r\n     * @param type The combat spell type\r\n     * @param damage The incoming damage\r\n     * @param force Used force value during original spellcasting\r\n     * @returns A modified damage resulting\r\n     */\r\n    static calculateBaseDamage(type: CombatSpellType, damage: DamageData, force: number): DamageData {\r\n        switch (type) {\r\n            case 'indirect':\r\n                return CombatSpellRules.calculateIndirectDamage(damage, force);\r\n            case 'direct':\r\n                return CombatSpellRules.calculateDirectDamage(damage);\r\n        }\r\n\r\n        return foundry.utils.duplicate(damage);\r\n    }\r\n\r\n    /**\r\n     * Modify incoming damage for a combat spell after the spell hit the defending target according to SR5#283 Section 'Combat Defense'\r\n     *\r\n     * @param defender The active defender\r\n     * @param spellType The general spell type.\r\n     * @param combatType The combat spell type.\r\n     * @param damage The incoming damage.\r\n     * @param attackerHits Hits achieved by the spell attack aster.\r\n     * @param defenderHits Hits achieved by the defender against the spell attack.\r\n     */\r\n    static modifyDamageAfterHit(defender: SR5Actor, spellType: SpellType, combatType: CombatSpellType, damage: DamageData, attackerHits: number, defenderHits: number): DamageData {\r\n\r\n        if (spellType === 'mana' && combatType === 'direct') {\r\n            return CombatSpellRules.modifyDirectDamageAfterHit(\r\n                defender,\r\n                damage,\r\n                attackerHits,\r\n                defenderHits);\r\n        }\r\n        if (spellType === 'physical' && combatType === 'direct') {\r\n            return CombatSpellRules.modifyDirectDamageAfterHit(\r\n                defender,\r\n                damage,\r\n                attackerHits,\r\n                defenderHits);\r\n        }\r\n        if (combatType === 'indirect') {\r\n            return CombatSpellRules.modifyIndirectDamageAfterHit(\r\n                defender,\r\n                damage,\r\n                attackerHits,\r\n                defenderHits);\r\n        }\r\n\r\n        return foundry.utils.duplicate(damage);\r\n    }\r\n\r\n    /**\r\n     * Return a testable action for combat spell defense based on SR5#283 Section 'Combat Defense'\r\n     *\r\n     * @param spellType The general spell type.\r\n     * @param combatType The combat spell type.\r\n     */\r\n    static defenseTestAction(spellType: SpellType, combatType: CombatSpellType): MinimalActionData {\r\n        if (spellType === '' || combatType === '')\r\n            console.warn(`Shadowrun5e | The given spell or combat spell types are empty and won't form a complete defense test action`);\r\n\r\n        const itemAction = DefaultValues.minimalActionData();\r\n\r\n        if (spellType === 'mana' && combatType === 'direct') {\r\n            itemAction.attribute = 'willpower';\r\n        }\r\n        if (spellType === 'physical' && combatType === 'direct') {\r\n            itemAction.attribute = 'body';\r\n        }\r\n        if (combatType === 'indirect') {\r\n            itemAction.attribute = 'reaction';\r\n            itemAction.attribute2 = 'intuition';\r\n        }\r\n\r\n        return itemAction;\r\n    }\r\n}", "import {DefenseTest, DefenseTestData} from \"./DefenseTest\";\r\nimport {SpellCastingTest, SpellCastingTestData} from \"./SpellCastingTest\";\r\nimport {SR5Item} from \"../item/SR5Item\";\r\nimport {SR5Actor} from \"../actor/SR5Actor\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {CombatSpellRules} from \"../rules/CombatSpellRules\";\r\nimport {TestCreator} from \"./TestCreator\";\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\nexport interface CombatSpellDefenseTestData extends DefenseTestData {\r\n    against: SpellCastingTestData\r\n}\r\n\r\nexport class CombatSpellDefenseTest extends DefenseTest {\r\n    data: CombatSpellDefenseTestData\r\n    against: SpellCastingTest\r\n\r\n    /**\r\n     * A combat spell defense test changes it's behaviour based on the spell it's defending against.\r\n     *\r\n     * @param item A spell item.\r\n     * @param actor The actor to defend with.\r\n     */\r\n    static async _getDocumentTestAction(item: SR5Item, actor: SR5Actor): Promise<MinimalActionData> {\r\n        const action = DefaultValues.minimalActionData(await super._getDocumentTestAction(item, actor));\r\n\r\n        const spellData = item.asSpell\r\n        if (!spellData) return action;\r\n\r\n        const itemAction = CombatSpellRules.defenseTestAction(spellData.system.type, spellData.system.combat.type);\r\n        return TestCreator._mergeMinimalActionDataInOrder(action, itemAction);\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        super.prepareBaseValues();\r\n        this.calculateCombatSpellDamage();\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        const spell = this.item?.asSpell;\r\n        if (!spell) return ['global'];\r\n\r\n        if (spell.system.type === 'mana' && spell.system.combat.type === 'direct') {\r\n            return ['global'];\r\n        }\r\n        if (spell.system.type === 'physical' && spell.system.combat.type === 'direct') {\r\n            return ['global'];\r\n        }\r\n        if (spell.system.combat.type === 'indirect') {\r\n            return ['global', 'defense', 'wounds'];\r\n        }\r\n\r\n        return ['global'];\r\n    }\r\n\r\n    /**\r\n     * A combat spells damage depends on\r\n     */\r\n    calculateCombatSpellDamage() {\r\n        const spell = this.item?.asSpell;\r\n        if (!spell) return;\r\n\r\n        this.data.incomingDamage = CombatSpellRules.calculateBaseDamage(spell.system.combat.type, this.data.incomingDamage, this.data.against.force);\r\n    }\r\n\r\n\r\n    /**\r\n     * A success on a defense test is a MISS on the initial attack.\r\n     */\r\n    async processSuccess() {\r\n        this.data.modifiedDamage = CombatSpellRules.modifyDamageAfterMiss(this.data.incomingDamage);\r\n\r\n        await super.processSuccess();\r\n    }\r\n\r\n    /**\r\n     * A failure on a defense test is a HIT on the initial attack.\r\n     */\r\n    async processFailure() {\r\n        const spell = this.item?.asSpell;\r\n        if (!spell) return;\r\n        if (!this.actor) return;\r\n\r\n        this.data.modifiedDamage = CombatSpellRules.modifyDamageAfterHit(this.actor, spell.system.type, spell.system.combat.type,\r\n            this.data.incomingDamage, this.against.hits.value, this.hits.value);\r\n\r\n        await super.processFailure();\r\n    }\r\n\r\n    /**\r\n     * Combat Spell Defense allows a resist test for the defending actor.\r\n     */\r\n    async afterFailure() {\r\n        const spell = this.item?.asSpell;\r\n        if (!spell) return;\r\n\r\n        // Only allow a defense test for in\r\n        if (CombatSpellRules.allowDamageResist(spell.system.combat.type)) {\r\n            const test = await TestCreator.fromOpposedTestResistTest(this, this.data.options);\r\n            if (!test) return;\r\n            await test.execute();\r\n        }\r\n\r\n    }\r\n}", "/**\r\n * Shadowrun 5 related rules to threading complex forms.\r\n */\r\nexport const ComplexFormRules = {\r\n    /**\r\n     * As defined in SR5#251-252 section Fading.\r\n     */\r\n    minimalFade: 2,\r\n    /**\r\n     * Based on the minimal level value use this as the minimal usable level value.\r\n     * @param fadeModifier The fade modifier defined within the complex forms action configuration.\r\n     */\r\n    calculateMinimalLevel: function(fadeModifier: number): number {\r\n        return Math.max(1, this.minimalFade - fadeModifier);\r\n    },\r\n\r\n    calculateLevel: function(level: number): number {\r\n        return Math.max(1, level);\r\n    },\r\n\r\n    /**\r\n     * The threading test limit as defined in SR5#250 Thread Complex Form action.\r\n     * @param level\r\n     */\r\n    calculateLimit: function(level: number): number {\r\n        return level;\r\n    },\r\n\r\n    /**\r\n     * Calculate fade for complex forms based on SR5#250\r\n     *\r\n     * @param level The level chosen to thread this complex form.\r\n     * @param fadeModifier The action modifier for fade damage.\r\n     */\r\n    calculateFade: function(level: number, fadeModifier: number): number {\r\n        const fade = level + fadeModifier;\r\n        return Math.max(this.minimalFade, fade);\r\n    }\r\n}", "import DamageData = Shadowrun.DamageData;\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport DamageType = Shadowrun.DamageType;\r\nimport {Helpers} from \"../helpers\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\nexport const FadeRules = {\r\n\r\n    /**\r\n     * Calculate fade damage according to SR5#251 section Fading\r\n     *\r\n     * @param fade The fade value after threading test\r\n     * @param hits The amount of hits during threading\r\n     * @param resonance The resonance attribute rating\r\n     */\r\n    calcFadeDamage: function (fade: number, hits: number, resonance: number): DamageData {\r\n        if (hits < 0) hits = 0;\r\n        if (resonance < 1) resonance = 1;\r\n\r\n        const damage = DefaultValues.damageData();\r\n        damage.base = fade;\r\n        Helpers.calcTotal(damage, {min: 0});\r\n\r\n        damage.type.base = damage.type.value = FadeRules.calcFadeDamageType(hits, resonance);\r\n\r\n        return damage;\r\n    },\r\n\r\n    /**\r\n     * Calculate the damage type for fade damage according to threading hits according to SR5#251 section Fading\r\n     * @param hits Threading test hits\r\n     * @param resonance attribute rating\r\n     */\r\n    calcFadeDamageType: function(hits: number, resonance: number): DamageType {\r\n        if (hits < 0) hits = 0;\r\n        if (resonance < 0) resonance = 1;\r\n        return hits > resonance ? 'physical' : 'stun';\r\n    },\r\n\r\n    /**\r\n     * Modify fade damage after a fade resist test according to SR5#251 section Fading\r\n     */\r\n    modifyFadeDamage: function(fadeDamage: DamageData, hits: number) {\r\n        if (hits < 0) hits = 0;\r\n\r\n        fadeDamage = foundry.utils.duplicate(fadeDamage);\r\n\r\n        PartsList.AddUniquePart(fadeDamage.mod, 'SR5.Hits', -hits);\r\n        Helpers.calcTotal(fadeDamage, {min: 0});\r\n\r\n        return fadeDamage;\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {DefaultValues} from \"../data/DataDefaults\";\r\nimport {ComplexFormRules} from \"../rules/ComplexFormRules\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\nimport {FadeRules} from \"../rules/FadeRules\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\nexport interface ComplexFormTestData extends SuccessTestData {\r\n    level: number\r\n    fade: number\r\n\r\n    fadeDamage: DamageData\r\n}\r\n\r\n/**\r\n * Handles threading complex forms as described on SR5#251.\r\n */\r\nexport class ComplexFormTest extends SuccessTest {\r\n    data: ComplexFormTestData\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.level =  data.level || 0;\r\n        data.fade = data.face || 0;\r\n        data.fadeDamage = DefaultValues.damageData();\r\n\r\n        return data;\r\n    }\r\n\r\n    get _dialogTemplate()  {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/complexform-test-dialog.html';\r\n    }\r\n\r\n    get _chatMessageTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/complexform-test-message.html';\r\n    }\r\n\r\n    /**\r\n     * This test type can't be extended.\r\n     */\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            skill: 'software',\r\n            attribute: 'resonance'\r\n        };\r\n    }\r\n\r\n    // TODO: Add missing modifiers (gitter) // SR5#251\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'wounds', 'noise'];\r\n    }\r\n\r\n    async prepareDocumentData() {\r\n        this.prepareInitialLevelValue();\r\n        await super.prepareDocumentData();\r\n    }\r\n\r\n    /**\r\n     * Set a level value based on the items history or viable suggestions.\r\n     */\r\n    prepareInitialLevelValue() {\r\n        if (!this.item) return;\r\n\r\n        const lastUsedLevel = this.item.getLastComplexFormLevel();\r\n        const suggestedLevel = ComplexFormRules.calculateMinimalLevel(this.item.getFade());\r\n        this.data.level = lastUsedLevel.value || suggestedLevel;\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        super.prepareBaseValues();\r\n        this.prepareLevelValue();\r\n        this.prepareLimitValue();\r\n    }\r\n\r\n    /**\r\n     * Assert user input doesn't create unusable level values.\r\n     */\r\n    prepareLevelValue() {\r\n        this.data.level = ComplexFormRules.calculateLevel(this.data.level);\r\n    }\r\n\r\n    /**\r\n     * Derive limit value based on complex form rules.\r\n     */\r\n    prepareLimitValue() {\r\n        const level = Number(this.data.level);\r\n        this.data.limit.mod = PartsList.AddUniquePart(\r\n            this.data.limit.mod,\r\n            'SR5.Level',\r\n            ComplexFormRules.calculateLimit(level)\r\n        )\r\n    }\r\n\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n        this.calculateFadeValue();\r\n    }\r\n\r\n    calculateFadeValue() {\r\n        const level = Number(this.data.level);\r\n        const fade = Number(this.item?.getFade() || 0);\r\n        this.data.fade = ComplexFormRules.calculateFade(level, fade);\r\n    }\r\n\r\n    calculateFadeDamage() {\r\n        if (!this.actor) return DefaultValues.valueData();\r\n\r\n        const fade = Number(this.data.fade);\r\n        const resonance = this.actor.getAttribute('resonance').value;\r\n\r\n        this.data.fadeDamage = FadeRules.calcFadeDamage(fade, this.hits.value, resonance);\r\n    }\r\n\r\n    async processResults() {\r\n        this.calculateFadeDamage();\r\n\r\n        await super.processResults();\r\n    }\r\n\r\n    async afterTestComplete() {\r\n        await this.saveLastUsedLevel();\r\n\r\n        await super.afterTestComplete();\r\n    }\r\n\r\n    /**\r\n     * Allow the currently used level value for this complex form item to be reused next time.\r\n     */\r\n    async saveLastUsedLevel() {\r\n        if (!this.item) return;\r\n\r\n        await this.item.setLastComplexFormLevel({value: this.data.level});\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\nexport class NaturalRecoveryStunTest extends SuccessTest {\r\n    prepareBaseValues() {\r\n        super.prepareBaseValues();\r\n        this.prepareThreshold();\r\n    }\r\n\r\n    /**\r\n     * A recovery test has its damage track as a threshold.\r\n     */\r\n    prepareThreshold() {\r\n        if (!this.actor) return;\r\n\r\n        const track = this.actor.getStunTrack();\r\n        const boxes = track?.value || 0;\r\n\r\n        const threshold = new PartsList(this.threshold.mod);\r\n        threshold.addUniquePart('SR5.StunTrack', boxes)\r\n    }\r\n\r\n    /**\r\n     * A recovery test will heal on each test iteration\r\n     */\r\n    async processResults() {\r\n        await super.processResults();\r\n\r\n        // Don't bother healing if the actor can't.\r\n        if (!this.actor) return;\r\n        if (!this.actor.hasNaturalRecovery) return;\r\n\r\n        // Don't bother healing without hits.\r\n        if (this.hits.value === 0) return;\r\n\r\n        await this.actor.healStunDamage(this.hits.value);\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\nimport {PartsList} from \"../parts/PartsList\";\r\n\r\nexport class NaturalRecoveryPhysicalTest extends SuccessTest {\r\n    async execute(): Promise<this> {\r\n        if (!this.actor) return this;\r\n        if (!this.actor.canRecoverPhysicalDamage) {\r\n            ui.notifications?.warn(game.i18n.localize('SR5.Warnings.CantRecoverPhysicalWithStunDamage'));\r\n            return this;\r\n        }\r\n\r\n        return super.execute();\r\n    }\r\n\r\n    prepareBaseValues() {\r\n        super.prepareBaseValues();\r\n        this.prepareThreshold();\r\n    }\r\n\r\n    /**\r\n     * A recovery test has its damage track as a threshold.\r\n     */\r\n    prepareThreshold() {\r\n        if (!this.actor) return;\r\n\r\n        const track = this.actor.getPhysicalTrack();\r\n        const boxes = track?.value || 0;\r\n\r\n        const threshold = new PartsList(this.threshold.mod);\r\n        threshold.addUniquePart('SR5.PhysicalTrack', boxes)\r\n    }\r\n\r\n    /**\r\n     * A recovery test will heal on each test iteration\r\n     */\r\n    async processResults() {\r\n        await super.processResults();\r\n\r\n        // Don't bother healing if the actor can't.\r\n        if (!this.actor) return;\r\n        if (!this.actor.hasNaturalRecovery) return;\r\n\r\n        // Don't bother healing without hits.\r\n        if (this.hits.value === 0) return;\r\n\r\n        await this.actor.healPhysicalDamage(this.hits.value);\r\n    }\r\n}", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\r\nimport {ComplexFormTest, ComplexFormTestData} from \"./ComplexFormTest\";\r\nimport {Helpers} from \"../helpers\";\r\nimport {FadeRules} from \"../rules/FadeRules\";\r\nimport DamageData = Shadowrun.DamageData;\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\nimport ModifierTypes = Shadowrun.ModifierTypes;\r\n\r\nexport interface FadeTestData extends SuccessTestData {\r\n    incomingFade: DamageData\r\n    modifiedFade: DamageData\r\n\r\n    against: ComplexFormTestData\r\n}\r\n\r\nexport class FadeTest extends SuccessTest {\r\n    data: FadeTestData\r\n    against: ComplexFormTest\r\n\r\n    _prepareData(data, options): any {\r\n        data = super._prepareData(data, options);\r\n\r\n        data.against = data.against || new ComplexFormTest({}, {}, options).data;\r\n\r\n        data.incomingFade = foundry.utils.duplicate(data.against.fadeDamage);\r\n        data.modifiedFade = foundry.utils.duplicate(data.incomingFade);\r\n\r\n        return data;\r\n    }\r\n\r\n    get _dialogTemplate() {\r\n        return 'systems/shadowrun5e/dist/templates/apps/dialogs/fade-test-dialog.html';\r\n    }\r\n\r\n    get _chatMessageTemplate(): string {\r\n        return 'systems/shadowrun5e/dist/templates/rolls/fade-test-message.html';\r\n    }\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            'attribute': 'resonance',\r\n            'attribute2': 'willpower'\r\n        };\r\n    }\r\n\r\n    get testModifiers(): ModifierTypes[] {\r\n        return ['global', 'fade']\r\n    }\r\n\r\n     get canBeExtended() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A drain test is successful whenever it has more hits than drain damage\r\n     */\r\n    get success(): boolean {\r\n        return this.data.modifiedFade.value <= 0;\r\n    }\r\n\r\n    get successLabel(): string {\r\n        return 'SR5.ResistedAllDamage';\r\n    }\r\n\r\n    get failureLabel(): string {\r\n        return 'SR5.ResistedSomeDamage'\r\n    }\r\n\r\n    /**\r\n     * Re-calculate incomingFade in case of user input\r\n     */\r\n    calculateBaseValues() {\r\n        super.calculateBaseValues();\r\n\r\n        // Avoid using a user defined value override.\r\n        this.data.modifiedFade.base = Helpers.calcTotal(this.data.incomingFade, {min: 0});\r\n    }\r\n\r\n    async processResults() {\r\n        // Don't use incomingDrain as it might have a user value override applied.\r\n        this.data.modifiedFade = FadeRules.modifyFadeDamage(this.data.modifiedFade, this.hits.value);\r\n\r\n        await super.processResults();\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\n\r\n/**\r\n * Test implementation for attack tests using weapon of category thrown.\r\n */\r\nexport class ThrownAttackTest extends SuccessTest {\r\n    get canBeExtended() {\r\n        return false;\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\n\r\nexport class PilotVehicleTest extends SuccessTest {\r\n    /**\r\n     * Piloting a vehicle will alter the kind of test that needs to be made based on a few factors.\r\n     *\r\n     * @param item The testing item to cast\r\n     * @param actor The vehicle actor to be casting with\r\n     */\r\n    static async _getDocumentTestAction(item, actor) {\r\n        // Both item and actor are needed to determine what to roll.\r\n        if (!item || !actor) return {};\r\n\r\n        const vehicleData = actor.asVehicle();\r\n        if (!vehicleData) {\r\n            await ui.notifications?.error(game.i18n.localize('SR5.ERROR.TestExpectsVehicleOnly'))\r\n            return {};\r\n        }\r\n\r\n        switch (vehicleData.data.controlMode) {\r\n            case \"autopilot\": {\r\n                const attribute = 'pilot';\r\n                const skill = actor.getVehicleTypeSkillName();\r\n                const limit = {attribute: vehicleData.data.environment};\r\n\r\n                return {attribute, skill, limit};\r\n            }\r\n\r\n            default:\r\n                const skillId = actor.getVehicleTypeSkillName();\r\n                return actor.skillActionData(skillId);\r\n        }\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\n\r\nexport class DronePerceptionTest extends SuccessTest {\r\n    static async _getDocumentTestAction(item, actor) {\r\n        // Both item and actor are needed to determine what to roll.\r\n        if (!item || !actor) return {};\r\n\r\n        const vehicleData = actor.asVehicle();\r\n        if (!vehicleData) {\r\n            await ui.notifications?.error(game.i18n.localize('SR5.ERROR.TestExpectsVehicleOnly'))\r\n            return {};\r\n        }\r\n\r\n        switch (vehicleData.data.controlMode) {\r\n            case \"autopilot\": {\r\n                const attribute = 'pilot';\r\n                const skill = 'perception';\r\n                const limit = 'sensor';\r\n\r\n                return {attribute, skill, limit};\r\n            }\r\n\r\n            default:\r\n                return actor.skillActionData('perception');\r\n        }\r\n    }\r\n}", "import {SuccessTest} from \"./SuccessTest\";\r\n\r\nexport class DroneInfiltrationTest extends SuccessTest {\r\n    static async _getDocumentTestAction(item, actor) {\r\n        // Both item and actor are needed to determine what to roll.\r\n        if (!item || !actor) return {};\r\n\r\n        const vehicleData = actor.asVehicle();\r\n        if (!vehicleData) {\r\n            await ui.notifications?.error(game.i18n.localize('SR5.ERROR.TestExpectsVehicleOnly'))\r\n            return {};\r\n        }\r\n\r\n        switch (vehicleData.data.controlMode) {\r\n            case \"autopilot\": {\r\n                const attribute = 'pilot';\r\n                const skill = 'sneaking';\r\n                const limit = 'sensor';\r\n\r\n                return {attribute, skill, limit};\r\n            }\r\n\r\n            default:\r\n                return actor.skillActionData('perception');\r\n        }\r\n    }\r\n}", "import { CombatRules } from \"../rules/CombatRules\";\r\nimport { PhysicalDefenseTest, PhysicalDefenseTestData } from \"./PhysicalDefenseTest\";\r\nimport MinimalActionData = Shadowrun.MinimalActionData;\r\n\r\n\r\nexport class SupressionDefenseTest extends PhysicalDefenseTest {\r\n    public data: PhysicalDefenseTestData;\r\n\r\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\r\n        return {\r\n            'attribute': 'reaction',\r\n            'attribute2': 'edge'\r\n        };\r\n    }\r\n\r\n    async processFailure() {\r\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterSupressionHit(this.data.incomingDamage);\r\n    }\r\n}", "import { FireModeRules } from './../module/rules/FireModeRules';\r\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\r\nimport { SR5 } from '../module/config';\r\n\r\nexport const shadowrunAttackTesting = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    before(async () => {})\r\n    after(async () => {})\r\n\r\n    describe('Fire Mode Rules', () => {\r\n        it('apply defense modifier per fire mode', () => {\r\n            // Check no modifier\r\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\r\n                label: \"SR5.WeaponModeSingleShot\",\r\n                value: 1,\r\n                recoil: false,\r\n                defense: 0,\r\n                suppression: false,\r\n                action: 'simple',\r\n                mode: 'single_shot'\r\n            }), 0);\r\n            // Check positive modifiers\r\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\r\n                label: \"SR5.WeaponModeSingleShot\",\r\n                value: 1,\r\n                recoil: false,\r\n                defense: 3,\r\n                suppression: false,\r\n                action: 'simple',\r\n                mode: 'single_shot'\r\n            }), 3);\r\n            // Check correct negative modifiers\r\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\r\n                label: \"SR5.WeaponModeSingleShot\",\r\n                value: 1,\r\n                recoil: false,\r\n                defense: -3,\r\n                suppression: false,\r\n                action: 'simple',\r\n                mode: 'single_shot'\r\n            }), -3);\r\n        })\r\n\r\n        it('reduce defense modifier per firemode by ammo available', () => {\r\n            // Check with enough ammo\r\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\r\n                label: \"SR5.WeaponModeSingleShot\",\r\n                value: 3,\r\n                recoil: false,\r\n                defense: -3,\r\n                suppression: false,\r\n                action: 'simple',\r\n                mode: 'single_shot'\r\n            }, 3), -3);\r\n\r\n            // Check with to little ammo\r\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\r\n                label: \"SR5.WeaponModeSingleShot\",\r\n                value: 6,\r\n                recoil: false,\r\n                defense: -6,\r\n                suppression: false,\r\n                action: 'simple',\r\n                mode: 'single_shot'\r\n            }, 3), -3);\r\n        })\r\n\r\n        it('apply attack modifier per fire mode', () => {\r\n            // A mode without recoil, shouldn't cause recoil modifiers.\r\n            assert.deepEqual(FireModeRules.recoilAttackModifier({\r\n                label: \"SR5.WeaponModeBurstFireLong\",\r\n                value: 6,\r\n                recoil: false,\r\n                defense: -5,\r\n                suppression: false,\r\n                action: 'complex',\r\n                mode: 'burst_fire',\r\n            }, 0), {compensation: 0, recoilModifier: 0});\r\n            \r\n            // No compensation should cause full recoil modifier\r\n            assert.deepEqual(FireModeRules.recoilAttackModifier({\r\n                label: \"SR5.WeaponModeBurstFireLong\",\r\n                value: 6,\r\n                recoil: true,\r\n                defense: -5,\r\n                suppression: false,\r\n                action: 'complex',\r\n                mode: 'burst_fire',\r\n            }, 0), {compensation: 0, recoilModifier: -6});\r\n\r\n            // recoil modifier should be reduced by compensation,\r\n            // compensation shouldbe reduced\r\n            assert.deepEqual(FireModeRules.recoilAttackModifier({\r\n                label: \"SR5.WeaponModeBurstFireLong\",\r\n                value: 6,\r\n                recoil: true,\r\n                defense: -5,\r\n                suppression: false,\r\n                action: 'complex',\r\n                mode: 'burst_fire',\r\n            }, 3), {compensation: 0, recoilModifier: -3});\r\n\r\n            // handle faulty value input gracefully, don't fire. Keep compensation.\r\n            assert.deepEqual(FireModeRules.recoilAttackModifier({\r\n                label: \"SR5.WeaponModeBurstFireLong\",\r\n                value: -6,\r\n                recoil: true,\r\n                defense: -5,\r\n                suppression: false,\r\n                action: 'complex',\r\n                mode: 'burst_fire',\r\n            }, 3), {compensation: 3, recoilModifier: 0});\r\n        })\r\n\r\n        it('reduce the available fire modes', () => {            \r\n            assert.lengthOf(FireModeRules.availableFireModes({\r\n                single_shot: true,\r\n                semi_auto: true,\r\n                burst_fire: true,\r\n                full_auto: true\r\n            }), SR5.fireModes.length);\r\n\r\n            assert.lengthOf(FireModeRules.availableFireModes({\r\n                single_shot: true,\r\n                semi_auto: false,\r\n                burst_fire: false,\r\n                full_auto: false\r\n            }), 1); // per default rules only one single shot mode\r\n\r\n            assert.lengthOf(FireModeRules.availableFireModes({\r\n                single_shot: false,\r\n                semi_auto: true,\r\n                burst_fire: false,\r\n                full_auto: false\r\n            }), 2); // per default rules only one single shot mode\r\n\r\n            assert.lengthOf(FireModeRules.availableFireModes({\r\n                single_shot: false,\r\n                semi_auto: false,\r\n                burst_fire: true,\r\n                full_auto: false\r\n            }), 2); // per default rules only one single shot mode\r\n\r\n            assert.lengthOf(FireModeRules.availableFireModes({\r\n                single_shot: false,\r\n                semi_auto: false,\r\n                burst_fire: false,\r\n                full_auto: true\r\n            }), 3); // per default rules only one single shot mode\r\n        })\r\n    })\r\n}", "export class SR5TestingDocuments<T extends foundry.abstract.Document<any, any>> {\r\n        documentClass: T;\r\n        documents: foundry.abstract.Document<any>[] = [];\r\n\r\n        constructor(documentClass) {\r\n            this.documentClass = documentClass;\r\n        }\r\n\r\n        async create(data): Promise<T> {\r\n            // @ts-ignore\r\n            const document = await this.documentClass.create({name: `#QUENCH_TEST_DOCUMENT_SHOULD_HAVE_BEEN_DELETED`, ...data, ...{folder: this.folder}});\r\n            this.documents.push(document);\r\n            return document;\r\n        }\r\n\r\n        async teardown() {\r\n            // @ts-ignore\r\n            this.documents.forEach(document => document.delete());\r\n        }\r\n    }", "import { BackgroundCountModifier } from './../module/rules/modifiers/BackgroundCountModifier';\r\nimport { NoiseModifier } from './../module/rules/modifiers/NoiseModifier';\r\nimport { EnvironmentalModifier } from './../module/rules/modifiers/EnvironmentalModifier';\r\n\r\nimport {DocumentSituationModifiers} from \"../module/rules/DocumentSituationModifiers\";\r\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\r\nimport { SituationModifier } from \"../module/rules/modifiers/SituationModifier\";\r\nimport { SR5TestingDocuments } from './utils';\r\nimport { SR5Actor } from '../module/actor/SR5Actor';\r\nimport { SR5Item } from '../module/item/SR5Item';\r\n\r\nexport const shadowrunRulesModifiers = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n    let testScene;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n        testScene = new SR5TestingDocuments(Scene);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n        await testScene.teardown();\r\n    })\r\n\r\n    const defaultSourceModifiers = {\r\n        environmental: {\r\n            active: {}\r\n        },\r\n        noise: {\r\n            active: {}\r\n        },\r\n        background_count: {\r\n            active: {}\r\n        }\r\n    };\r\n\r\n    describe('SR5 Modifiers', () => {\r\n        \r\n        describe('class SituationalModifiers', () => {\r\n            it('create valid applied modifiers without any input', () => {\r\n                const sitMod = new SituationModifier();\r\n\r\n                assert.deepEqual(sitMod.source, {active: {}});\r\n                assert.equal(sitMod.hasActive, false);\r\n                assert.equal(sitMod.total, 0);\r\n            });\r\n\r\n            it('determine if documents have been added to it', () => {\r\n                assert.equal(new SituationModifier().hasDocuments, false);\r\n                assert.equal(new SituationModifier(undefined, new DocumentSituationModifiers()).hasDocuments, true);\r\n            });\r\n\r\n            it('determine it has active modifiers', () => {\r\n                assert.equal(new SituationModifier({active: {a: 0}}).hasActive, true);\r\n            })\r\n\r\n            it('apply source active values to a sum of all active modifiers', () => {\r\n                const sitMod = new SituationModifier({\r\n                    active: {\r\n                        a: -1,\r\n                        b: -3\r\n                    }\r\n                });\r\n\r\n                // Result of -1 + -3\r\n                assert.equal(sitMod.total, -4);\r\n            });\r\n\r\n            it('apply source fixed value instead of the sum of all active modifiers', () => {\r\n                const sitMod = new SituationModifier({\r\n                    active: {\r\n                        a: -1,\r\n                        b: -3\r\n                    },\r\n                    fixed: 0\r\n                });\r\n\r\n                // Result of -1 + -3\r\n                assert.equal(sitMod.total, 0);\r\n                assert.equal(sitMod._calcActiveTotal(), -4);\r\n            });\r\n\r\n            it('correctly report the state of active modifier selections', () => {\r\n                const sitMod = new SituationModifier({\r\n                    active: {\r\n                        a: -1\r\n                    }\r\n                });\r\n\r\n                assert.equal(sitMod.isActive('a'), true);\r\n                assert.equal(sitMod.isActive('b'), false);\r\n                assert.equal(sitMod.isActive(''), false);\r\n            })\r\n\r\n            it('correctly active a modifier selection', () => {\r\n                const sitMod = new SituationModifier();\r\n                assert.equal(sitMod.source.active['a'], undefined);\r\n                \r\n                sitMod.setActive('a', 1);\r\n                assert.equal(sitMod.source.active['a'], 1);\r\n            })\r\n\r\n            it('correctly deactive a modifier selection', () => {\r\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}});\r\n                assert.equal(sitMod.isActive('a'), true)\r\n\r\n                sitMod.setInactive('a');\r\n                assert.equal(sitMod.isActive('a'), false); // Makre sure it's not active anymore.\r\n                assert.equal(sitMod.isActive('b'), true); // Make sure only a is touched.\r\n            });\r\n\r\n            it('correctly determine if a fixed modifier is set', () => {\r\n                const sitMod = new SituationModifier();\r\n                sitMod.apply({source: {fixed: 0, active: {}}});\r\n                assert.isTrue(sitMod.hasFixed);\r\n\r\n                sitMod.apply({source: {active: {}}});\r\n                assert.isFalse(sitMod.hasFixed);\r\n            });\r\n\r\n            it('correctly determine if an active modifier selection matches', () => {\r\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}});\r\n                \r\n                sitMod.apply();\r\n\r\n                assert.equal(sitMod.isMatching('a', 1), true); // matching\r\n                assert.equal(sitMod.isMatching('b', 1), false); // matching wrong value\r\n                assert.equal(sitMod.isMatching('c', 0), false); // matching wrong active\r\n            });\r\n\r\n            it('correctly clear an active set of selections', () => {\r\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}, fixed: 0});\r\n                assert.equal(sitMod.hasActive, true);\r\n\r\n                sitMod.clear();\r\n                assert.equal(sitMod.hasActive, false);\r\n            });\r\n\r\n            it('use a fixed user selection instead of suming up', () => {\r\n                const sitMod = new SituationModifier({active: {value: 3, a: 1, b: 3}});\r\n                sitMod.apply();\r\n\r\n                assert.equal(sitMod.total, 3);\r\n            });\r\n\r\n            it('use a fixed programmating value before a fixed user selection', () => {\r\n                const sitMod = new SituationModifier({active: {value: 3, a: 1, b: 3}, fixed: -3});\r\n                assert.equal(sitMod.total, -3);\r\n            });\r\n\r\n            it('should only apply applicable selections', () => {\r\n                const sitMod = new SituationModifier({active: {a: 1, b: 3, c: 4}});\r\n                sitMod.apply({applicable: ['a', 'c']});\r\n\r\n                assert.equal(sitMod.total, 5);\r\n            });\r\n        });\r\n\r\n        describe('class EnvironmentalModifier', () => {\r\n            it('apply higher level modifier for two same level selections', () => {\r\n                const envMod = new EnvironmentalModifier();\r\n                envMod.apply({source: {active: {light: 0, wind: 0}}});\r\n                assert.equal(envMod.total, 0);\r\n\r\n                envMod.apply({source: {active: {light: -1, wind: -1}}});\r\n                assert.equal(envMod.total, -3);\r\n\r\n                envMod.apply({source: {active: {light: -3, wind: -3}}});\r\n                assert.equal(envMod.total, -6);\r\n\r\n                envMod.apply({source: {active: {light: -6, wind: -6}}});\r\n                assert.equal(envMod.total, -10);\r\n            });\r\n\r\n            it('apply fixed modifier values instead of level selections', () => {\r\n                const envMod = new EnvironmentalModifier();\r\n                envMod.apply({source: {active: {light: 0, wind: 0, value: -3}}});\r\n                assert.equal(envMod.total, -3);\r\n\r\n                envMod.apply({source: {active: {light: -1, wind: -1, value: -1}}});\r\n                assert.equal(envMod.total, -1);\r\n            });\r\n        });\r\n        \r\n        describe('class DocumentSituationModifiers', () => {\r\n            it('create default modifier values', () => {\r\n                const modifiers = DocumentSituationModifiers._defaultModifiers;\r\n    \r\n                assert.deepEqual(modifiers, defaultSourceModifiers)\r\n            })\r\n\r\n            it('use default modifiers for faulty constructor params', () => {\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers({}).source, defaultSourceModifiers);\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers(undefined).source, defaultSourceModifiers);\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers(null).source, defaultSourceModifiers);\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers(0).source, defaultSourceModifiers);\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers(1).source, defaultSourceModifiers);\r\n                //@ts-ignore\r\n                assert.deepEqual(new DocumentSituationModifiers().source, defaultSourceModifiers);\r\n            })\r\n\r\n            it('Store data depending on document type', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n                let modifiers = actor.getSituationModifiers();\r\n\r\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\r\n\r\n                modifiers.source.noise.fixed = 1;\r\n                await modifiers.updateDocument();\r\n\r\n                assert.equal(modifiers.source.noise.fixed, 1);\r\n\r\n                const scene = await testScene.create() as Scene;\r\n                modifiers = DocumentSituationModifiers.fromDocument(scene);\r\n\r\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\r\n\r\n                modifiers.source.noise.fixed = 1;\r\n                await modifiers.updateDocument();\r\n\r\n                assert.equal(modifiers.source.noise.fixed, 1);\r\n            })\r\n\r\n            it('clear documents data to defaults', async () => {\r\n                \r\n                const actor = await testActor.create({\r\n                    type: 'character'}) as SR5Actor;\r\n\r\n                const modifiers = actor.getSituationModifiers();\r\n                \r\n                modifiers.source.noise.fixed = 1;\r\n                await modifiers.updateDocument();\r\n                assert.notDeepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\r\n\r\n                await modifiers.clearAll();\r\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\r\n            });\r\n        })\r\n    })\r\n}\r\n\r\n", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport {SR5TestingDocuments} from \"./utils\";\r\n\r\nexport const shadowrunSR5Item = (context: QuenchBatchContext) => {\r\n    /**\r\n     * Setup handling for all items within this test.\r\n     */\r\n        const {describe, it, assert, before, after} = context;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testItem.teardown();\r\n    })\r\n\r\n    describe('SR5Items', () => {\r\n        it('create a naked item of any type', async () => {\r\n            const item = await testItem.create({type: 'action'});\r\n\r\n            // Check basic foundry data integrity\r\n            assert.notStrictEqual(item.id, '');\r\n            assert.notStrictEqual(item.id, undefined);\r\n            assert.notStrictEqual(item.id, null);\r\n\r\n            // Check foundry item collection integrity\r\n            const itemFromCollection = game.items?.get(item.id);\r\n            assert.notStrictEqual(itemFromCollection, null);\r\n            assert.strictEqual(item.id, itemFromCollection?.id);\r\n        });\r\n\r\n        it('update an item of any type', async () => {\r\n            const item = await testItem.create({type: 'action'});\r\n\r\n            assert.notProperty(item.data.data, 'test');\r\n            await item.update({'data.test': true});\r\n\r\n            assert.property(item.data.data, 'test');\r\n            assert.propertyVal(item.data.data, 'test', true);\r\n        });\r\n\r\n        it('embedd a ammo into a weapon and not the global item collection', async () => {\r\n            const weapon = await testItem.create({type: 'weapon'}) as SR5Item;\r\n            const ammo = await testItem.create({type: 'ammo'}) as SR5Item;\r\n\r\n            await weapon.createNestedItem(ammo.data);\r\n\r\n            const embeddedItemDatas = weapon.getNestedItems();\r\n            assert.isNotEmpty(embeddedItemDatas);\r\n            assert.lengthOf(embeddedItemDatas, 1);\r\n\r\n            const embeddedAmmoData = embeddedItemDatas[0];\r\n            assert.strictEqual(embeddedAmmoData.type, ammo.data.type);\r\n\r\n            // An embedded item should NOT appear in the items collection.\r\n            const embeddedAmmoInCollection = game.items?.get(embeddedAmmoData._id);\r\n            assert.strictEqual(embeddedAmmoInCollection, undefined);\r\n        });\r\n\r\n        it('update a nested ammunition item', async () => {\r\n            const weapon = await testItem.create({type: 'weapon'}) as SR5Item;\r\n            const ammo = await testItem.create({type: 'ammo'}) as SR5Item;\r\n\r\n            // Embed the item and get\r\n            await weapon.createNestedItem(ammo.data);\r\n            const embeddedItemDatas = weapon.getNestedItems();\r\n            assert.lengthOf(embeddedItemDatas, 1);\r\n            const embeddedAmmoData = embeddedItemDatas[0];\r\n            const embeddedAmmo = weapon.getOwnedItem(embeddedAmmoData._id);\r\n\r\n            assert.notStrictEqual(embeddedAmmo, undefined);\r\n            assert.instanceOf(embeddedAmmo, SR5Item);\r\n            if (!embeddedAmmo) return; //type script gate...\r\n\r\n            // Set an unexsting random property and check for it to be set.\r\n            assert.notProperty(embeddedAmmo.system, 'test');\r\n            await embeddedAmmo.update({'system.test': true});\r\n            assert.property(embeddedAmmo.system, 'test');\r\n            assert.propertyVal(embeddedAmmo.system, 'test', true);\r\n        });\r\n\r\n        describe('Testing related data injection', () => {\r\n            it('Correctly add default test to spells', async () => {\r\n                // const item = await testItem.create({type: 'spell'});\r\n\r\n                // assert.equal(item.system.action.test, 'SpellCastingTest');\r\n                // assert.equal(item.system.action.followed.test, 'DrainTest');\r\n                // assert.equal(item.system.action.opposed.test, '');\r\n            });\r\n\r\n            it('Correctly add defense tests to spells', async () => {\r\n                const item = await testItem.create({type: 'spell'});\r\n\r\n                await item.update({'system.category': 'combat'});\r\n                assert.equal(item.system.action.test, 'SpellCastingTest');\r\n                assert.equal(item.system.action.followed.test, 'DrainTest');\r\n                assert.equal(item.system.action.opposed.test, 'CombatSpellDefenseTest');\r\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\r\n\r\n                await item.update({'system.category': 'detection'});\r\n                assert.equal(item.system.action.test, 'SpellCastingTest');\r\n                assert.equal(item.system.action.followed.test, 'DrainTest');\r\n                assert.equal(item.system.action.opposed.test, 'OpposedTest');\r\n                assert.equal(item.system.action.opposed.resist.test, '');\r\n            });\r\n            it('Correctly add default tests to melee weapons', async () => {\r\n                const item = await testItem.create({type: 'weapon'});\r\n\r\n                await item.update({'system.category': 'melee'});\r\n                assert.equal(item.system.action.test, 'MeleeAttackTest');\r\n                assert.equal(item.system.action.followed.test, '');\r\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\r\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\r\n            });\r\n            it('Correctly add default tests to range weapons', async () => {\r\n                const item = await testItem.create({type: 'weapon'});\r\n\r\n                await item.update({'system.category': 'range'});\r\n                assert.equal(item.system.action.test, 'RangedAttackTest');\r\n                assert.equal(item.system.action.followed.test, '');\r\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\r\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\r\n            });\r\n            it('Correctly add defense tests to complex forms', async () => {\r\n                const item = await testItem.create({type: 'complex_form'});\r\n\r\n                assert.equal(item.system.action.test, 'ComplexFormTest');\r\n                assert.equal(item.system.action.followed.test, 'FadeTest');\r\n                assert.equal(item.system.action.opposed.test, 'OpposedTest');\r\n                assert.equal(item.system.action.opposed.resist.test, '');\r\n            });\r\n            it('Correctly alter default test for weapon category changes', async () => {\r\n                const item = await testItem.create({type: 'weapon'});\r\n\r\n                await item.update({'system.category': 'range'});\r\n                assert.equal(item.system.action.test, 'RangedAttackTest');\r\n                assert.equal(item.system.action.followed.test, '');\r\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\r\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\r\n\r\n                await item.update({'system.category': ''});\r\n                assert.equal(item.system.action.test, '');\r\n                assert.equal(item.system.action.followed.test, '');\r\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\r\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\r\n            });\r\n            it('Correctly stop injection when mergeOptions recursive or diff are set to false', async () => {\r\n                /**\r\n                 * Foundry sometimes updates document data by replacing foundry data segements fully:\r\n                 * recusrive: true and sometimes diff: true\r\n                 * \r\n                 * In that case, injecting ANYthing into systemdata will replace ALL of system data\r\n                 * with what is meant to be injected.\r\n                 * \r\n                 * This is testing Helpers.injectActionTestsIntoChangeData which is connected to some \r\n                 * document lifecycle methods.\r\n                 */\r\n                const item = await testItem.create({type: 'complex_form'});\r\n                // Should not inject.\r\n                await item.update({'name': 'Test'}, {recursive: false});\r\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\r\n                await item.update({'name': 'Test2'}, {diff: false});\r\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\r\n                await item.update({'name': 'Test'}, {recursive: true});\r\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\r\n            });\r\n        });\r\n    });\r\n};", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\nimport {MatrixRules} from \"../module/rules/MatrixRules\";\r\n\r\nexport const shadowrunMatrix = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    describe('Matrix Rules', () => {\r\n        it('calculate IC device rating', () => {\r\n            let hostRating = 5;\r\n            assert.strictEqual(MatrixRules.getICDeviceRating(hostRating), hostRating);\r\n            // Negative values shouldn't break the system.\r\n            hostRating = -1;\r\n            assert.strictEqual(MatrixRules.getICDeviceRating(hostRating), 0);\r\n        });\r\n\r\n        it('calculate IC condition monitor', () => {\r\n            // 8 is the minimum value possible\r\n            assert.strictEqual(MatrixRules.getConditionMonitor(0), 8);\r\n            // Check round up\r\n            assert.strictEqual(MatrixRules.getConditionMonitor(1), 9);\r\n            // Check no rounding\r\n            assert.strictEqual(MatrixRules.getConditionMonitor(4), 10);\r\n            // Negative values shouldn't break the system.\r\n            assert.strictEqual(MatrixRules.getConditionMonitor(-1), 8);\r\n        });\r\n\r\n        it('calculate IC matrix initiative base', () => {\r\n            // 0 is the minimum value possible\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(0), 0);\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(-3), 0);\r\n            // Check expected value scaling\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(1), 2);\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(2), 4);\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(3), 6);\r\n            assert.strictEqual(MatrixRules.getICInitiativeBase(12), 24);\r\n        });\r\n\r\n        it('calculate IC matrix initiative dice', () => {\r\n            // 4 is the only value possible\r\n            assert.strictEqual(MatrixRules.getICInitiativeDice(), 4);\r\n        });\r\n\r\n        it('calculate meat attribute base with the host rating', () => {\r\n            // 0 is the minimum value possible\r\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(0), 0);\r\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(-3), 0);\r\n\r\n            // All other values should equal\r\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(3), 3);\r\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(27), 27);\r\n        });\r\n\r\n        it('disallow invalid marks counters', () => {\r\n            assert.isTrue(MatrixRules.isValidMarksCount(0));\r\n            assert.isTrue(MatrixRules.isValidMarksCount(1));\r\n            assert.isTrue(MatrixRules.isValidMarksCount(2));\r\n            assert.isTrue(MatrixRules.isValidMarksCount(3));\r\n\r\n            assert.isFalse(MatrixRules.isValidMarksCount(-1));\r\n            assert.isFalse(MatrixRules.isValidMarksCount(4));\r\n\r\n            assert.isFalse(MatrixRules.isValidMarksCount(1.5));\r\n        });\r\n\r\n        it('return valid marks counts', () => {\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(-1), MatrixRules.minMarksCount());\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(0), 0);\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(1), 1);\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(2), 2);\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(3), 3);\r\n            assert.strictEqual(MatrixRules.getValidMarksCount(4), MatrixRules.maxMarksCount());\r\n        });\r\n\r\n        it('return expected host matrix attribute ratings', () => {\r\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(1), [1, 2, 3, 4]);\r\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(2), [2, 3, 4, 5]);\r\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(10), [10, 11, 12, 13]);\r\n        });\r\n    })\r\n};", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport {SR5TestingDocuments} from \"./utils\";\r\n\r\nexport const shadowrunSR5Actor = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n    let  testActor;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n    })\r\n\r\n    describe('SR5Actor', () => {\r\n        it('create a naked actor of any type', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n\r\n            // Check basic foundry data integrity\r\n            assert.notStrictEqual(actor.id, '');\r\n            assert.notStrictEqual(actor.id, undefined);\r\n            assert.notStrictEqual(actor.id, null);\r\n\r\n            // Check foundry item collection integrity\r\n            const fromCollection = game.actors?.get(actor.id);\r\n            assert.isOk(fromCollection);\r\n            assert.strictEqual(actor.id, fromCollection?.id);\r\n        });\r\n\r\n        it('update an actor of any time', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n\r\n            assert.notProperty(actor.system, 'test');\r\n            await actor.update({'data.test': true});\r\n\r\n            assert.property(actor.system, 'test');\r\n            assert.propertyVal(actor.system, 'test', true);\r\n        });\r\n\r\n        it('embedd a weapon into an actor and not the global item colection', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n            const weapon = await testItem.create({type: 'weapon'});\r\n\r\n            await actor.createEmbeddedDocuments('Item', [weapon.data]);\r\n\r\n            const ownedItems = Array.from(actor.items) as SR5Item[];\r\n            assert.isNotEmpty(ownedItems);\r\n            assert.lengthOf(ownedItems, 1);\r\n\r\n            const ownedItem = ownedItems[0];\r\n            assert.strictEqual(ownedItem.type, weapon.data.type);\r\n\r\n            // An owned item should NOT appear in the items collection.\r\n            const ownedInCollection = game.items?.get(ownedItem.id as string);\r\n            assert.isNotOk(ownedInCollection);\r\n        });\r\n    });\r\n}", "import {SR5TestingDocuments} from \"./utils\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport {SR} from \"../module/constants\";\r\nimport CharacterActorData = Shadowrun.CharacterActorData;\r\nimport SpiritActorData = Shadowrun.SpiritActorData;\r\nimport SpriteActorData = Shadowrun.SpriteActorData;\r\nimport ICActorData = Shadowrun.ICActorData;\r\nimport VehicleActorData = Shadowrun.VehicleActorData;\r\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\n\r\nexport const shadowrunSR5ActorDataPrep = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n    })\r\n\r\n        describe('CharacterDataPrep', () => {\r\n            it('default attribute values', async () => {\r\n                const character = await testActor.create({type: 'character', 'system.metatype': 'human'});\r\n\r\n                // Check for attribute min values;\r\n                console.log('Physical attributes');\r\n                assert.strictEqual(character.system.attributes.body.value, SR.attributes.ranges['body'].min);\r\n                assert.strictEqual(character.system.attributes.agility.value, SR.attributes.ranges['agility'].min);\r\n                assert.strictEqual(character.system.attributes.reaction.value, SR.attributes.ranges['reaction'].min);\r\n                assert.strictEqual(character.system.attributes.strength.value, SR.attributes.ranges['strength'].min);\r\n                assert.strictEqual(character.system.attributes.willpower.value, SR.attributes.ranges['willpower'].min);\r\n                assert.strictEqual(character.system.attributes.logic.value, SR.attributes.ranges['logic'].min);\r\n                assert.strictEqual(character.system.attributes.intuition.value, SR.attributes.ranges['intuition'].min);\r\n                assert.strictEqual(character.system.attributes.charisma.value, SR.attributes.ranges['charisma'].min);\r\n\r\n                console.log('Comon special attributes');\r\n                assert.strictEqual(character.system.attributes.edge.value, SR.attributes.ranges['edge'].min);\r\n                assert.strictEqual(character.system.attributes.essence.value, SR.attributes.defaults['essence']);\r\n\r\n                console.log('Special special attributes');\r\n                assert.strictEqual(character.system.attributes.resonance.value, SR.attributes.ranges['resonance'].min);\r\n                assert.strictEqual(character.system.attributes.magic.value, SR.attributes.ranges['magic'].min);\r\n            });\r\n\r\n            it('monitor calculation', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                // Check default values.\r\n                assert.strictEqual(character.system.track.stun.max, 9); // 8 + round_up(1 / 2)\r\n                assert.strictEqual(character.system.track.physical.max, 9); // 8 + round_up(1 / 2)\r\n                assert.strictEqual(character.system.track.physical.overflow.max, SR.attributes.ranges.body.min); // body value\r\n\r\n                // Check calculated values after update.\r\n                await actor.update({\r\n                    'system.attributes.body.base': 6,\r\n                    'system.attributes.willpower.base': 6,\r\n                });\r\n\r\n                character = actor.asCharacter() as CharacterActorData;\r\n                assert.strictEqual(character.system.track.stun.max, 11); // 8 + round_up(6 / 2)\r\n                assert.strictEqual(character.system.track.physical.max, 11); // 8 + round_up(6 / 2)\r\n                assert.strictEqual(character.system.track.physical.overflow.max, 6); // body value\r\n            });\r\n\r\n            it('Matrix condition monitor track calculation with modifiers', async () => {\r\n                const actor = await testActor.create({type: 'character', 'system.modifiers.matrix_track': 1}) as SR5Actor;\r\n                await actor.createEmbeddedDocuments('Item', [{\r\n                    'name': 'Commlink',\r\n                    'type': 'device', \r\n                    'system.category': 'commlink', \r\n                    'system.technology.equipped': true\r\n                }]);\r\n                \r\n                const character = actor.asCharacter() as CharacterActorData;\r\n                assert.equal(character.system.matrix.condition_monitor.max, 10); // 9 + 1\r\n            });\r\n\r\n            it('initiative calculation', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                // Check default values.\r\n                console.log('Meatspace Ini');\r\n                assert.strictEqual(character.system.initiative.meatspace.base.base, 2); // REA+INT\r\n                assert.strictEqual(character.system.initiative.meatspace.dice.base, 1);\r\n                console.log('Matrix AR Ini');\r\n                assert.strictEqual(character.system.initiative.matrix.base.base, 1); // No matrix device\r\n                assert.strictEqual(character.system.initiative.matrix.dice.base, 3); // Cold SIM\r\n                console.log('Magic Ini');\r\n                assert.strictEqual(character.system.initiative.astral.base.base, 2); // INT+INT\r\n                assert.strictEqual(character.system.initiative.astral.dice.base, 2);\r\n            });\r\n\r\n            it('limit calculation', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.limits.physical.value, 2); // (STR*2 + BOD + REA) / 3\r\n                assert.strictEqual(character.system.limits.mental.value, 2);   // (LOG*2 + INT + WIL) / 3\r\n                assert.strictEqual(character.system.limits.social.value, 3);   // (CHA*2 + WILL + ESS) / 3\r\n\r\n                await actor.update({\r\n                    'system.attributes.strength.base': 6,\r\n                    'system.attributes.body.base': 6,\r\n                    'system.attributes.reaction.base': 6,\r\n                    'system.attributes.logic.base': 6,\r\n                    'system.attributes.intuition.base': 6,\r\n                    'system.attributes.willpower.base': 6,\r\n                    'system.attributes.charisma.base': 6,\r\n                    'system.attributes.essence.base': 6,\r\n                });\r\n\r\n                character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.limits.physical.value, 8);\r\n                assert.strictEqual(character.system.limits.mental.value, 8);\r\n                assert.strictEqual(character.system.limits.social.value, 8);\r\n            });\r\n\r\n            it('movement calculation', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.movement.walk.value, 2); // AGI * 2\r\n                assert.strictEqual(character.system.movement.run.value, 4);  // AGI * 4\r\n\r\n                await actor.update({\r\n                    'system.attributes.agility.base': 6\r\n                });\r\n\r\n                character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.movement.walk.value, 12);\r\n                assert.strictEqual(character.system.movement.run.value, 24);\r\n            });\r\n\r\n            it('skill calculation', async () => {\r\n                const actor = await testActor.create({\r\n                    type: 'character',\r\n                    'system.skills.active.arcana.base': 6,\r\n                    'system.skills.active.arcana.bonus': [{key: 'Test', value: 1}],\r\n                    'system.skills.active.arcana.specs': ['Test']\r\n                }) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.skills.active.arcana.value, 7);\r\n            });\r\n\r\n            it('damage application to wounds', async () => {\r\n                const actor = await testActor.create({type: 'character'}) as SR5Actor;\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.track.stun.value, 0);\r\n                assert.strictEqual(character.system.track.stun.wounds, 0);\r\n                assert.strictEqual(character.system.track.physical.value, 0);\r\n                assert.strictEqual(character.system.track.physical.wounds, 0);\r\n\r\n                assert.strictEqual(character.system.wounds.value, 0);\r\n\r\n                await actor.update({\r\n                    'system.track.stun.value': 3,\r\n                    'system.track.physical.value': 3,\r\n                });\r\n\r\n                character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.track.stun.value, 3);\r\n                assert.strictEqual(character.system.track.stun.wounds, 1);\r\n                assert.strictEqual(character.system.track.physical.value, 3);\r\n                assert.strictEqual(character.system.track.physical.wounds, 1);\r\n\r\n                assert.strictEqual(character.system.wounds.value, 2);\r\n            });\r\n\r\n            it('damage application with low pain/wound tolerance', async () => {\r\n                const actor = await testActor.create({\r\n                    type: 'character',\r\n                    'system.track.stun.value': 6,\r\n                    'system.track.physical.value': 6,\r\n                    'system.modifiers.wound_tolerance': -1\r\n                }) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.track.stun.value, 6);\r\n                assert.strictEqual(character.system.track.stun.wounds, 3); // would normally be 2\r\n                assert.strictEqual(character.system.track.physical.value, 6);\r\n                assert.strictEqual(character.system.track.physical.wounds, 3);\r\n            });\r\n\r\n            it('damage application with high pain tolerance / damage compensators', async () => {\r\n                const actor = await testActor.create({\r\n                    type: 'character',\r\n                    'system.track.stun.value': 9,\r\n                    'system.track.physical.value': 9,\r\n                    'system.modifiers.pain_tolerance_stun': 3,\r\n                    'system.modifiers.pain_tolerance_physical': 6\r\n                }) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                assert.strictEqual(character.system.track.stun.value, 9);\r\n                assert.strictEqual(character.system.track.stun.wounds, 2); // would normally be 3\r\n                assert.strictEqual(character.system.track.physical.value, 9);\r\n                assert.strictEqual(character.system.track.physical.wounds, 1); // would normally be 3\r\n            });\r\n\r\n            it('damage application with high AND low pain to lerance / damage compensators', async () => {\r\n                const actor = await testActor.create({\r\n                    type: 'character',\r\n                    'system.track.stun.value': 9,\r\n                    'system.track.physical.value': 9,\r\n                    'system.modifiers.pain_tolerance_stun': 3,\r\n                    'system.modifiers.pain_tolerance_physical': 6,\r\n                    'system.modifiers.wound_tolerance': -1\r\n\r\n                }) as SR5Actor;\r\n\r\n                let character = actor.asCharacter() as CharacterActorData;\r\n\r\n                /**\r\n                 * Wound tolerance should alter the amount of boxes of damage per wound\r\n                 * Pain tolerance should raise damage taken BEFORE wounds are derived from the remaining damage \r\n                 */\r\n                assert.strictEqual(character.system.track.stun.value, 9);\r\n                assert.strictEqual(character.system.track.stun.wounds, 3);\r\n                assert.strictEqual(character.system.track.physical.value, 9);\r\n                assert.strictEqual(character.system.track.physical.wounds, 1);\r\n            });\r\n        });\r\n        describe('SpiritDataPrep', () => {\r\n            it('Spirits are always magical', async () => {\r\n                const character = await testActor.create({type: 'spirit'}) as SR5Actor;\r\n\r\n                assert.strictEqual(character.system.special, 'magic');\r\n            });\r\n\r\n            it('Spirit default/overrides by example type', async () => {\r\n                const actor = await testActor.create({type: 'spirit', 'system.spiritType': 'air'}) as SR5Actor;\r\n                let spirit = actor.asSpirit() as SpiritActorData;\r\n\r\n                // Without adequate force there will be negative base values with minimum attribute values.\r\n                assert.strictEqual(spirit.system.attributes.body.base, -2);\r\n                assert.strictEqual(spirit.system.attributes.agility.base, 3);\r\n                assert.strictEqual(spirit.system.attributes.reaction.base, 4);\r\n                assert.strictEqual(spirit.system.attributes.strength.base, -3);\r\n                assert.strictEqual(spirit.system.attributes.intuition.base, 0);\r\n\r\n                assert.strictEqual(spirit.system.initiative.meatspace.base.base, 4); // force * 2 + override;\r\n\r\n                assert.strictEqual(spirit.system.skills.active.assensing.base, 0);\r\n\r\n                await actor.update({\r\n                    'system.force': 6\r\n                });\r\n\r\n                spirit = actor.asSpirit() as SpiritActorData;\r\n\r\n                assert.strictEqual(spirit.system.attributes.body.base, 4);\r\n                assert.strictEqual(spirit.system.attributes.agility.base, 9);\r\n                assert.strictEqual(spirit.system.attributes.reaction.base, 10);\r\n                assert.strictEqual(spirit.system.attributes.strength.base, 3);\r\n                assert.strictEqual(spirit.system.attributes.intuition.base, 6); // set by force without spirit type mods.\r\n\r\n                assert.strictEqual(spirit.system.initiative.meatspace.base.base, 16);\r\n\r\n                assert.strictEqual(spirit.system.skills.active.assensing.base, 6);\r\n                assert.strictEqual(spirit.system.skills.active.arcana.base, 0); // not for this spirit type.\r\n            });\r\n        });\r\n        describe('SpriteDataPrep', () => {\r\n            it('Sprites are always resonat', async () => {\r\n                const sprite = await testActor.create({type: 'sprite'});\r\n                assert.strictEqual(sprite.system.special, 'resonance');\r\n            });\r\n\r\n            it('Sprites default/override values by example type', async () => {\r\n                const actor = await testActor.create({type: 'sprite', 'system.spriteType': 'courier'}) as SR5Actor;\r\n                let sprite = actor.asSprite() as SpriteActorData;\r\n\r\n                assert.strictEqual(sprite.system.matrix.sleaze.base, 3);\r\n                assert.strictEqual(sprite.system.matrix.data_processing.base, 1);\r\n                assert.strictEqual(sprite.system.matrix.firewall.base, 2);\r\n                assert.strictEqual(sprite.system.matrix.sleaze.base, 3);\r\n\r\n                assert.strictEqual(sprite.system.initiative.matrix.base.base, 1);\r\n\r\n                assert.strictEqual(sprite.system.skills.active.hacking.base, 0);\r\n\r\n                await actor.update({\r\n                    'system.level': 6\r\n                });\r\n\r\n                sprite = actor.asSprite() as SpriteActorData;\r\n\r\n                assert.strictEqual(sprite.system.level, 6);\r\n\r\n                assert.strictEqual(sprite.system.matrix.sleaze.base, 9);\r\n                assert.strictEqual(sprite.system.matrix.data_processing.base, 7);\r\n                assert.strictEqual(sprite.system.matrix.firewall.base, 8);\r\n                assert.strictEqual(sprite.system.matrix.sleaze.base, 9);\r\n\r\n                assert.strictEqual(sprite.system.initiative.matrix.base.base, 13);\r\n                assert.strictEqual(sprite.system.initiative.matrix.dice.base, 4);\r\n\r\n                assert.strictEqual(sprite.system.skills.active.hacking.base, 6);\r\n                assert.strictEqual(sprite.system.skills.active.computer.base, 6); // all sprites\r\n                assert.strictEqual(sprite.system.skills.active.electronic_warfare.base, 0); // not set by sprite type.\r\n            })\r\n\r\n            it('Matrix condition monitor track calculation with modifiers', async () => {\r\n                const actor = await testActor.create({type: 'sprite'}) as SR5Actor;\r\n                \r\n                let sprite = actor.asSprite() as SpriteActorData;\r\n                assert.equal(sprite.system.matrix.condition_monitor.max, 8);\r\n\r\n                await actor.update({'system.modifiers.matrix_track': 1});\r\n                sprite = actor.asSprite() as SpriteActorData;\r\n                assert.equal(sprite.system.matrix.condition_monitor.max, 9);\r\n            });\r\n        });\r\n        describe('VehicleDataPrep', () => {\r\n                it('Matrix condition monitor track calculation with modifiers', async () => {\r\n                const actor = await testActor.create({type: 'vehicle'}) as SR5Actor;\r\n                \r\n                let vehicle = actor.asVehicle() as VehicleActorData;\r\n                assert.equal(vehicle.system.matrix.condition_monitor.max, 8);\r\n\r\n                await actor.update({'system.modifiers.matrix_track': 1});\r\n                vehicle = actor.asVehicle() as VehicleActorData;\r\n                assert.equal(vehicle.system.matrix.condition_monitor.max, 9);\r\n            });\r\n        });\r\n        describe('ICDataPrep', () => {\r\n            it('Matrix condition monitor track calculation with modifiers', async () => {\r\n                const actor = await testActor.create({type: 'ic'}) as SR5Actor;\r\n                \r\n                let ic = actor.asIC() as ICActorData;\r\n                assert.equal(ic.system.matrix.condition_monitor.max, 8);\r\n\r\n                await actor.update({'system.modifiers.matrix_track': 1});\r\n                ic = actor.asIC() as ICActorData;\r\n                assert.equal(ic.system.matrix.condition_monitor.max, 9);\r\n            });\r\n        });\r\n}", "import {SR5TestingDocuments} from \"./utils\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\n\r\nexport const shadowrunSR5ActiveEffect = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n    })\r\n\r\n    describe('SR5ActiveEffect', () => {\r\n        it('apply the custom modify mode', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n            const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\r\n                origin: actor.uuid,\r\n                disabled: false,\r\n                label: 'Test Effect'\r\n            }]);\r\n\r\n            await effect[0].update({\r\n                'changes': [{key: 'data.attributes.body.mod', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\r\n                    {key: 'data.attributes.body', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM}]\r\n            });\r\n\r\n            assert.deepEqual(actor.system.attributes.body.mod, [{\r\n                name: 'Test Effect',\r\n                value: 2\r\n            }, {name: 'Test Effect', value: 2}]);\r\n            assert.strictEqual(actor.system.attributes.body.value, 4);\r\n\r\n            await effect[0].update({\r\n                'changes': [{key: 'data.attributes.body.mod', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM},\r\n                    {key: 'data.attributes.body.mod', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM}]\r\n            });\r\n        });\r\n\r\n        it('apply custom modify mode, none ModifiableValue should work as the add mode', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n            const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\r\n                origin: actor.uuid,\r\n                disabled: false,\r\n                label: 'Test Effect'\r\n            }]);\r\n            await effect[0].update({\r\n                'changes': [{\r\n                    key: 'data.modifiers.global',\r\n                    value: 3,\r\n                    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM\r\n                }]\r\n            });\r\n\r\n            assert.strictEqual(actor.system.modifiers.global, 3);\r\n            assert.strictEqual(actor.system.modifiers.global.mod, undefined);\r\n            assert.strictEqual(actor.system.modifiers.global.override, undefined);\r\n\r\n\r\n            it('apply the custom override mode', async () => {\r\n                const actor = await testActor.create({type: 'character'});\r\n                const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\r\n                    origin: actor.uuid,\r\n                    disabled: false,\r\n                    label: 'Test Effect'\r\n                }]);\r\n                await effect[0].update({\r\n                    'changes': [{key: 'data.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE},\r\n                        {key: 'data.attributes.body.value', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE}]\r\n                });\r\n\r\n                assert.deepEqual(actor.system.attributes.body.override, {name: 'Test Effect', value: 3});\r\n                assert.deepEqual(actor.system.attributes.body.mod, []);\r\n                assert.strictEqual(actor.system.attributes.body.value, 3);\r\n            });\r\n\r\n            it('apply custom override mode, should override all existing .mod values', async () => {\r\n                it('apply the custom override mode', async () => {\r\n                    const actor = await testActor.create({type: 'character'});\r\n                    const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\r\n                        origin: actor.uuid,\r\n                        disabled: false,\r\n                        label: 'Test Effect'\r\n                    }]);\r\n                    await effect[0].update({\r\n                        'changes': [{key: 'data.attributes.body.mod', value: 5, mode: CONST.ACTIVE_EFFECT_MODES.ADD},\r\n                            {key: 'data.attributes.body.value', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE}]\r\n                    });\r\n\r\n                    assert.strictEqual(actor.system.attributes.body.mod.length, 1);\r\n                    assert.deepEqual(actor.system.attributes.body.override, {name: 'Test Effect', value: 3});\r\n                    assert.deepEqual(actor.system.attributes.body.mod, [{name: 'Test Effect', value: 5}]);\r\n                    assert.strictEqual(actor.system.attributes.body.value, 3);\r\n                });\r\n            });\r\n\r\n            it('apply custom override mode, none ModifiableValue should work without altering anything', async () => {\r\n                const actor = await testActor.create({type: 'character'});\r\n                const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\r\n                    origin: actor.uuid,\r\n                    disabled: false,\r\n                    label: 'Test Effect'\r\n                }]);\r\n                await effect[0].update({\r\n                    'changes': [{\r\n                        key: 'data.modifiers.global',\r\n                        value: 3,\r\n                        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE\r\n                    }]\r\n                });\r\n\r\n                assert.strictEqual(actor.system.modifiers.global, 3);\r\n                assert.strictEqual(actor.system.modifiers.global.mod, undefined);\r\n                assert.strictEqual(actor.system.modifiers.global.override, undefined);\r\n            });\r\n        });\r\n    });\r\n}", "import {SR5TestingDocuments} from \"./utils\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport {NetworkDeviceFlow} from \"../module/item/flows/NetworkDeviceFlow\";\r\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\n\r\nexport const shadowrunNetworkDevices = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, should, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n    let testScene;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n        testScene = new SR5TestingDocuments(Scene);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n        await testScene.teardown();\r\n    })\r\n\r\n    describe('Network Devices handling', () => {\r\n        // TODO: Redesign them with only necessary update methods in place. Instead start of with ActorData prefilled on create.\r\n        it('give a network link to given document class', async () => {\r\n            const actor = await testActor.create({'type': 'character'});\r\n            const link = NetworkDeviceFlow.buildLink(actor);\r\n\r\n            const nodes = link.split('.');\r\n\r\n            assert.strictEqual(nodes[0], 'Actor');\r\n            assert.strictEqual(nodes.length, 2); // Actor.<randomId>;\r\n        });\r\n\r\n        it('resolve a network link back to a sidebar document', async () => {\r\n            // Test collection Actor.\r\n            const actor = await testActor.create({'type': 'character'});\r\n\r\n            const link = NetworkDeviceFlow.buildLink(actor);\r\n            const resolvedActor = await NetworkDeviceFlow.resolveLink(link);\r\n\r\n            assert.isNotNull(resolvedActor);\r\n            assert.strictEqual(resolvedActor?.id, actor.id);\r\n        });\r\n\r\n        it('resolve a network link back to a embedded collection document', async () => {\r\n            const actor = await testActor.create({'type': 'character'});\r\n            const item = await testItem.create({type: 'weapon'});\r\n            const embeddedItems = await actor.createEmbeddedDocuments('Item', [item.data]);\r\n            const embeddedItem = embeddedItems[0];\r\n            // @ts-ignore // ignore undefined\r\n            const link = NetworkDeviceFlow.buildLink(embeddedItem);\r\n            const resolvedItem = await NetworkDeviceFlow.resolveLink(link)\r\n\r\n            assert.isNotNull(resolvedItem);\r\n            assert.strictEqual(resolvedItem?.id, embeddedItem?.id);\r\n        });\r\n\r\n        it('resolve a network link back to a token collection document', async () => {\r\n            // Test TokenDokument Actor\r\n            const scene = await testScene.create({name: 'Test'});\r\n            const actor = await testActor.create({'type': 'character'});\r\n            const token = await getDocumentClass('Token').create(await actor.getTokenData({x: 0, y: 0}), {parent: scene});\r\n\r\n            // @ts-ignore // ignore null\r\n            const link = NetworkDeviceFlow.buildLink(token);\r\n            const resolvedToken = await NetworkDeviceFlow.resolveLink(link);\r\n\r\n            assert.isNotNull(resolvedToken);\r\n            assert.strictEqual(token?.id, resolvedToken?.id);\r\n        });\r\n\r\n        it('connect a device controller to a network device', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const device = await testItem.create({type: 'weapon'});\r\n\r\n            await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n\r\n            assert.strictEqual(device.system.technology.networkController, controller.uuid);\r\n            assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.technology.networkController), controller);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, [device.uuid]);\r\n        });\r\n\r\n        it('connect a host controller to a network device', async () => {\r\n            const controller = await testItem.create({type: 'host'});\r\n            const device = await testItem.create({type: 'weapon'});\r\n\r\n            await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n\r\n            assert.strictEqual(device.system.technology.networkController, controller.uuid);\r\n            assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.technology.networkController), controller);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, [device.uuid]);\r\n        });\r\n\r\n        it('get all connected network devices of a controller as their Document', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const devices = [\r\n                await testItem.create({type: 'weapon'})\r\n            ];\r\n\r\n            for (const device of devices) {\r\n                await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n            }\r\n\r\n            const fetchedDevices = NetworkDeviceFlow.getNetworkDevices(controller);\r\n\r\n            // Check for structural equality.\r\n            assert.strictEqual(controller.system.networkDevices.length, 1);\r\n            assert.strictEqual(fetchedDevices.length, 1);\r\n\r\n            // Check for referential equality.\r\n            for (const fetched of fetchedDevices) {\r\n                assert.include(devices, fetched);\r\n            }\r\n        });\r\n\r\n        it('remove a device from a network', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const device = await testItem.create({type: 'weapon'});\r\n\r\n            await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n            await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, device.uuid);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, []);\r\n            assert.strictEqual(device.system.technology.networkController, '');\r\n        });\r\n\r\n        it('remove a device from a network when it is added to a new one', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const newController = await testItem.create({type: 'device'});\r\n            const device = await testItem.create({type: 'weapon'});\r\n\r\n            await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n            await NetworkDeviceFlow.addDeviceToNetwork(newController, device);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, []);\r\n            assert.deepEqual(newController.system.networkDevices, [device.uuid]);\r\n            assert.strictEqual(device.system.technology.networkController, newController.uuid);\r\n        });\r\n\r\n        it('remove a network device that doesnt exist anymore', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const device = await testItem.create({type: 'weapon'});\r\n            const deviceId = device.id;\r\n            await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n            // Simulate user deleting the network item.\r\n            await device.delete();\r\n\r\n            // Make sure item is actually deleted.\r\n            const collectionItem = game.items?.get(deviceId);\r\n            assert.strictEqual(collectionItem, undefined);\r\n\r\n            // However the device is still connected to the controller.\r\n            assert.strictEqual(controller.system.networkDevices.length, 1);\r\n            await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, controller.system.networkDevices[0]);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, []);\r\n        });\r\n\r\n        it('remove all devices from a controller', async () => {\r\n            const controller = await testItem.create({type: 'device'});\r\n            const devices = [\r\n                await testItem.create({type: 'weapon'})\r\n            ];\r\n\r\n            for (const device of devices) {\r\n                await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\r\n            }\r\n\r\n            await NetworkDeviceFlow.removeAllDevicesFromNetwork(controller);\r\n\r\n            assert.deepEqual(controller.system.networkDevices, []);\r\n            for (const device of devices) {\r\n                assert.strictEqual(device.system.technology.networkController, '');\r\n            }\r\n        });\r\n    });\r\n};", "import {SR5TestingDocuments} from \"./utils\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport {TestCreator} from \"../module/tests/TestCreator\";\r\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\n\r\nexport const shadowrunTesting = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n    })\r\n\r\n    describe('SuccessTest', () => {\r\n        it('evaluate a roll from action data', async () => {\r\n           const actionData = {\r\n                'system.action.test': 'SuccessTest',\r\n                'type': 'action',\r\n                'system.action.type': 'simple',\r\n                'system.action.attribute': 'body',\r\n                'system.action.skill': 'automatics',\r\n                'system.action.spec': false,\r\n                'system.action.limit': {\r\n                    base: 1,\r\n                    value: 1,\r\n                    attribute: 'physical',\r\n                },\r\n                'system.action.threshold': {\r\n                    base: 1,\r\n                    value: 1,\r\n                },\r\n                'system.action.damage': {\r\n                    ap: {value: 5, base: 5, mod: Array(0)},\r\n                    attribute: \"\",\r\n                    base: 5,\r\n                    base_formula_operator: \"add\",\r\n                    element: {value: '', base: ''},\r\n                    itemSource: {actorId: '', itemId: '', itemType: '', itemName: ''},\r\n                    mod: [],\r\n                    type: {value: 'physical', base: 'physical'},\r\n                    value: 5\r\n                }\r\n            };\r\n\r\n            const action = await testItem.create(actionData);\r\n\r\n            const actorData = {'type': 'character',\r\n                               'system.attributes.body.base': 5,\r\n                               'system.skills.active.automatics.base': 45};\r\n            const actor = await testActor.create(actorData);\r\n\r\n            const test = await TestCreator.fromItem(action, actor, {showMessage: false, showDialog: false});\r\n\r\n            // For a broken test just fail.v\r\n            if (!test) assert.strictEqual(true, false);\r\n\r\n            // Evaluate a working test.\r\n            if (test) {\r\n                await test.evaluate();\r\n\r\n                console.error(test.data);\r\n\r\n                assert.strictEqual(test.pool.value, 50); // 5 body, 45 automatics\r\n                assert.strictEqual(test.threshold.value, 1); // 1\r\n                assert.strictEqual(test.limit.value, 4); // 4 Physical + 1\r\n\r\n                // TODO: Implement mocking for SR5Roll to test none-random results\r\n            }\r\n        });\r\n\r\n        it('evaluate a roll from simple pool data', async () => {\r\n            const test = TestCreator.fromPool({pool: 10}, {showMessage: false, showDialog: false});\r\n            await test.evaluate();\r\n\r\n            assert.strictEqual(test.pool.value, 10);\r\n        });\r\n\r\n        it('evaluate an opposed roll from a opposed action', async () => {\r\n            const actionData = {\r\n                'type': 'action',\r\n                'data.action.test': 'SuccessTest',\r\n\r\n                'data.action.type': 'simple',\r\n                'data.action.attribute': 'body',\r\n                'data.action.skill': 'automatics',\r\n                'data.action.spec': false,\r\n                'data.action.limit': {\r\n                    base: 1,\r\n                    value: 1,\r\n                    attribute: 'physical',\r\n                },\r\n                'data.action.threshold': {\r\n                    base: 1,\r\n                    value: 1,\r\n                },\r\n                'data.action.opposed': {\r\n                    \"type\": \"custom\",\r\n                    // TODO: This could maybe simply be SuccessTest?\r\n                    \"test\": \"OpposedTest\",\r\n                    \"attribute\": \"reaction\",\r\n                    \"attribute2\": \"intuition\",\r\n                    \"skill\": \"\",\r\n                    \"mod\": 0,\r\n                    \"description\": \"\"\r\n                }\r\n            };\r\n\r\n            const action = await testItem.create(actionData);\r\n            const actorData = {'type': 'character',\r\n                               'data.attributes.body.base': 5,\r\n                               'data.skills.active.automatics.base': 45};\r\n            const actor = await testActor.create(actorData);\r\n\r\n            const test = await TestCreator.fromItem(action, actor, {showMessage: false, showDialog: false});\r\n\r\n            if (test) {\r\n                await test.toMessage();\r\n            }\r\n        });\r\n    });\r\n\r\n    describe('OpposedTest', () => {\r\n\r\n    });\r\n};", "import {SR5TestingDocuments} from \"./utils\";\r\nimport {SR5Actor} from \"../module/actor/SR5Actor\";\r\nimport {SR5Item} from \"../module/item/SR5Item\";\r\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\r\n\r\nexport const shadowrunInventoryFlow = (context: QuenchBatchContext) => {\r\n    const {describe, it, assert, should, before, after} = context;\r\n\r\n    let testActor;\r\n    let testItem;\r\n\r\n    before(async () => {\r\n        testActor = new SR5TestingDocuments(SR5Actor);\r\n        testItem = new SR5TestingDocuments(SR5Item);\r\n    })\r\n\r\n    after(async () => {\r\n        await testActor.teardown();\r\n        await testItem.teardown();\r\n    })\r\n\r\n    describe('InventoryFlow testing', () => {\r\n        it('create a new inventory and know of its existance', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n\r\n            await actor.inventory.create('test');\r\n\r\n            assert.deepEqual(actor.system.inventories, {\r\n                'test': {\r\n                    name: 'test',\r\n                    label: 'test',\r\n                    itemIds: []\r\n                }\r\n            });\r\n\r\n            assert.strictEqual(actor.inventory.exists('test'), true);\r\n        });\r\n\r\n        it('remove an inventory', async () => {\r\n            const inventoriesData = {test: {name: 'test', label: 'test', itemIds: []}};\r\n            const actor = await testActor.create({type: 'character', 'data.inventories': inventoriesData});\r\n\r\n            await actor.inventory.remove('test');\r\n\r\n            assert.deepEqual(actor.system.inventories, {});\r\n        });\r\n\r\n        it('add and remove an item to and from an inventory', async () => {\r\n            const inventoriesData = {test: {name: 'test', label: 'test', itemIds: []}};\r\n            const actor = await testActor.create({type: 'character', 'data.inventories': inventoriesData});\r\n            const item = await actor.createEmbeddedDocuments('Item', [{type: 'weapon', name: 'Test Weapon'}]);\r\n\r\n            await actor.inventory.addItems('test', item);\r\n            const itemIds = item.map(item => item.id);\r\n            assert.deepEqual(actor.system.inventories.test.itemIds, itemIds);\r\n\r\n            await actor.inventory.removeItem(item[0]);\r\n            assert.deepEqual(actor.system.inventories.test.itemIds, []);\r\n        });\r\n\r\n        it('rename an existing inventory', async () => {\r\n            const inventoriesData = {test: {name: 'test', label: 'test', itemIds: ['asd']}};\r\n            const actor = await testActor.create({type: 'character', 'data.inventories': inventoriesData});\r\n\r\n            await actor.inventory.rename('test', 'betterTest');\r\n\r\n            assert.deepEqual(actor.system.inventories, {\r\n                'betterTest': {\r\n                    name: 'betterTest',\r\n                    label: 'betterTest',\r\n                    itemIds: ['asd']\r\n                }\r\n            });\r\n        });\r\n\r\n        it('create and rename an inventory including prohibited foundry chars', async () => {\r\n            const actor = await testActor.create({type: 'character'});\r\n            \r\n            await actor.inventory.create('Test.');            \r\n            assert.deepEqual(actor.system.inventories, {\r\n                'Test': {\r\n                    name: 'Test',\r\n                    label: 'Test',\r\n                    itemIds: []\r\n                }\r\n            });\r\n\r\n            await actor.inventory.rename('Test', 'Test.');\r\n            assert.deepEqual(actor.system.inventories, {\r\n                'Test': {\r\n                    name: 'Test',\r\n                    label: 'Test',\r\n                    itemIds: []\r\n                }\r\n            });\r\n\r\n            await actor.inventory.remove('Test');\r\n            await actor.inventory.create('-=Fisch.');            \r\n            assert.deepEqual(actor.system.inventories, {\r\n                'Fisch': {\r\n                    name: 'Fisch',\r\n                    label: 'Fisch',\r\n                    itemIds: []\r\n                }\r\n            });\r\n        });\r\n    })\r\n}", "import { shadowrunAttackTesting } from './sr5.AttackTests.spec';\r\nimport {shadowrunRulesModifiers} from \"./sr5.Modifiers.spec\";\r\nimport {shadowrunSR5Item} from \"./sr5.SR5Item.spec\";\r\nimport {shadowrunMatrix} from \"./sr5.Matrix.spec\";\r\nimport {shadowrunSR5Actor} from \"./sr5.SR5Actor.spec\";\r\nimport {shadowrunSR5ActorDataPrep} from \"./sr5.ActorDataPrep.spec\";\r\nimport {shadowrunSR5ActiveEffect} from \"./sr5.ActiveEffect.spec\";\r\nimport {shadowrunNetworkDevices} from \"./sr5.NetworkDevices.spec\";\r\nimport {shadowrunTesting} from \"./sr5.Testing.spec\";\r\nimport {shadowrunInventoryFlow} from \"./sr5.Inventory.spec\";\r\nimport { Quench } from \"@ethaks/fvtt-quench\";\r\n\r\n\r\n/**\r\n * Register FoundryVTT Quench test batches...\r\n *\r\n * @params quench Quench unittest registry\r\n * https://github.com/Ethaks/FVTT-Quench\r\n */\r\nexport const quenchRegister = (quench: Quench) => {\r\n    if (!quench) return;\r\n\r\n    console.info('Shadowrun 5e | Registering quench unittests');\r\n    console.warn('Shadowrun 5e | Be aware that FoundryVTT will tank in update performance when a lot of documents are in collections. This is the case if you have all Chummer items imported and might cause tests to cross the 2000ms quench timeout threshold. Clear those collections in a test world. :)');\r\n\r\n    quench.registerBatch(\"shadowrun5e.rules.matrix\", shadowrunMatrix, {displayName: \"SHADOWRUN5e: Matrix Test\"});\r\n    quench.registerBatch(\"shadowrun5e.rules.modifiers\", shadowrunRulesModifiers, {displayName: \"SHADOWRUN5e: Modifiers Test\"});\r\n    quench.registerBatch(\"shadowrun5e.entities.items\", shadowrunSR5Item, {displayName: \"SHADOWRUN5e: SR5Item Test\"});\r\n    quench.registerBatch(\"shadowrun5e.entities.actors\", shadowrunSR5Actor, {displayName: \"SHADOWRUN5e: SR5Actor Test\"});\r\n    quench.registerBatch(\"shadowrun5e.entities.effects\", shadowrunSR5ActiveEffect, {displayName: \"SHADOWRUN5e: SR5ActiveEffect Test\"});\r\n    quench.registerBatch(\"shadowrun5e.data_prep.actor\", shadowrunSR5ActorDataPrep, {displayName: \"SHADOWRUN5e: SR5ActorDataPreparation Test\"});\r\n    quench.registerBatch(\"shadowrun5e.flow.networkDevices\", shadowrunNetworkDevices, {displayName: \"SHADOWRUN5e: Matrix Network Devices Test\"});\r\n    quench.registerBatch(\"shadowrun5e.flow.inventory\", shadowrunInventoryFlow, {displayName: \"SHADOWRUN5e: InventoryFlow Test\"});\r\n    quench.registerBatch(\"shadowrun5e.flow.tests\", shadowrunTesting, {displayName: \"SHADOWRUN5e: SuccessTest Test\"});\r\n    quench.registerBatch(\"shadowrun5e.flow.tests_attack\", shadowrunAttackTesting, {displayName: \"SHADOWRUN5e: Attack Test\"});\r\n};\r\n", "import { SR5Item } from './item/SR5Item';\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {Object} item     The item data\r\n * @param {number} slot     The hotbar slot to use\r\n * @returns {Promise}\r\n */\r\nimport {Helpers} from \"./helpers\";\r\nimport SkillField = Shadowrun.SkillField;\r\nimport {SR5Actor} from \"./actor/SR5Actor\";\r\n\r\n/**\r\n * Create a roll item action macro when an item is dropped from actor sheet onto the macro hotbar.\r\n * \r\n * @param dropData Foundry DropData\r\n * @param slot The slot to be dropped into on the Macro bar\r\n */\r\nexport async function createItemMacro(dropData, slot) {\r\n    if (!game || !game.macros) return;\r\n\r\n    const item = await SR5Item.fromDropData(dropData);\r\n    if (!(item instanceof SR5Item)) return console.error(`Shadowrun 5e | Macro Drop expected an item document but got a different document type`, item);\r\n\r\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\r\n    let macro = game.macros.contents.find((m) => m.name === item.name);\r\n    if (!macro) {\r\n        macro = await Macro.create(\r\n            {\r\n                //@ts-ignore\r\n                name: item.name,\r\n                type: 'script',\r\n                img: item.img,\r\n                command: command,\r\n                flags: { 'shadowrun5e.itemMacro': true },\r\n            },\r\n            { renderSheet: false },\r\n        );\r\n    }\r\n\r\n    if (macro) game.user?.assignHotbarMacro(macro, slot);\r\n}\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {string} itemName\r\n * @return {Promise}\r\n */\r\nexport function rollItemMacro(itemName) {\r\n    if (!game || !game.actors) return;\r\n\r\n    const speaker = ChatMessage.getSpeaker();\r\n    let actor;\r\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\r\n    if (!speaker.actor) return;\r\n    if (!actor) actor = game.actors.get(speaker.actor);\r\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\r\n    if (!item) {\r\n        return ui.notifications?.warn(`Your controlled Actor does not have an item named ${itemName}`);\r\n    }\r\n\r\n    return item.castAction();\r\n}\r\n\r\n/**\r\n * Create a macro from an skill drop.\r\n *\r\n * @param data A data object for skill macros.\r\n * @param slot The hotbar slot to use.\r\n */\r\nexport async function createSkillMacro(data: {skillId: string, skill: SkillField}, slot) {\r\n    if (!game.macros || !game.user) return;\r\n\r\n    const {skillId, skill} = data;\r\n\r\n    // Abort when skill macro already exists. This is done for consistency with createItemMacro behavior.\r\n    const name = Helpers.getSkillLabelOrName(skill);\r\n    // @ts-ignore\r\n    const existingMacro = game.macros.contents.find(macro => macro.name === name);\r\n    if (existingMacro) return;\r\n\r\n    // Setup macro data.\r\n    const command = `game.shadowrun5e.rollSkillMacro(\"${name}\");`;\r\n    const macro = await Macro.create({\r\n        name,\r\n        type: 'script',\r\n        command,\r\n        // TODO: Is flags needed here? See createItemMacro\r\n    });\r\n    if (macro) await game.user.assignHotbarMacro(macro, slot);\r\n}\r\n\r\n/**\r\n * Roll a skill test from a macro for an Actor.\r\n *\r\n * @param skillLabel Custom skill names must be supported and legacy skill names might be translated.\r\n */\r\nexport async function rollSkillMacro(skillLabel) {\r\n    if (!game || !game.actors) return;\r\n    if (!skillLabel) return;\r\n\r\n    // Fetch the actor from the current users token or the actor collection.\r\n    const speaker = ChatMessage.getSpeaker();\r\n    if (!speaker) return;\r\n    const actor =  (game.actors.tokens[speaker.token as string] || game.actors.get(speaker.actor as string)) as SR5Actor\r\n\r\n    if (!actor) return;\r\n    await actor.rollSkill(skillLabel, {byLabel: true});\r\n    // TODO: Macro for skills may need their own TestCreate.fromSkillMacro... as they need getSkill('Label', {byLabel: true});\r\n}", "import {SituationModifiersApplication} from './apps/SituationModifiersApplication';\r\nimport {OverwatchScoreTracker} from './apps/gmtools/OverwatchScoreTracker';\r\n/**\r\n * All systems keybindings should be registered here.\r\n * \r\n * This function is meant to be called during system setup.\r\n */\r\nexport const registerSystemKeybindings = () => {\r\n    game.keybindings.register(\"shadowrun5e\", \"show-situation-modifier-app\", {\r\n        name: \"SR5.Keybinding.ShowSituationModifiers.Label\",\r\n        hint: \"SR5.Keybinding.ShowSituationModifiers.Hint\",\r\n        editable: [{ key: \"KeyM\", modifiers: [] }],\r\n        onDown: () => SituationModifiersApplication.openForKeybinding(),\r\n    });\r\n\r\n    game.keybindings.register(\"shadowrun5e\", \"show-overwatch-tracker-app\", {\r\n        name: \"SR5.Keybinding.OverwatchScoreTracker.Label\",\r\n        hint: \"SR5.Keybinding.OverwatchScoreTracker.Hint\",\r\n        editable: [{ key: \"KeyO\", modifiers: [] }],\r\n        onDown: () => new OverwatchScoreTracker().render(true),\r\n    });\r\n}", "import {SR5} from './config';\r\nimport {Migrator} from './migrator/Migrator';\r\nimport {registerSystemSettings} from './settings';\r\nimport {FLAGS, SYSTEM_NAME, SYSTEM_SOCKET} from './constants';\r\nimport {SR5Actor} from './actor/SR5Actor';\r\nimport {SR5Item} from './item/SR5Item';\r\nimport {SR5ItemSheet} from './item/SR5ItemSheet';\r\nimport {SR5Token} from './token/SR5Token';\r\nimport {SR5ActiveEffect} from \"./effect/SR5ActiveEffect\";\r\nimport {_combatantGetInitiativeFormula, SR5Combat} from './combat/SR5Combat';\r\nimport {HandlebarManager} from './handlebars/HandlebarManager';\r\n\r\nimport {OverwatchScoreTracker} from './apps/gmtools/OverwatchScoreTracker';\r\nimport {Import} from './importer/apps/import-form';\r\nimport {ChangelogApplication} from \"./apps/ChangelogApplication\";\r\nimport { SituationModifiersApplication } from './apps/SituationModifiersApplication';\r\nimport {SR5ICActorSheet} from \"./actor/sheets/SR5ICActorSheet\";\r\nimport {SR5ActiveEffectConfig} from \"./effect/SR5ActiveEffectConfig\";\r\nimport {SR5VehicleActorSheet} from \"./actor/sheets/SR5VehicleActorSheet\";\r\nimport {SR5CharacterSheet} from \"./actor/sheets/SR5CharacterSheet\";\r\nimport {SR5SpiritActorSheet} from \"./actor/sheets/SR5SpiritActorSheet\";\r\nimport {SR5SpriteActorSheet} from \"./actor/sheets/SR5SpriteActorSheet\";\r\n\r\nimport {SR5Roll} from \"./rolls/SR5Roll\";\r\nimport {SuccessTest} from \"./tests/SuccessTest\";\r\nimport {OpposedTest} from \"./tests/OpposedTest\";\r\nimport {PhysicalDefenseTest} from \"./tests/PhysicalDefenseTest\";\r\nimport {RangedAttackTest} from \"./tests/RangedAttackTest\";\r\nimport {PhysicalResistTest} from \"./tests/PhysicalResistTest\";\r\nimport {MeleeAttackTest} from \"./tests/MeleeAttackTest\";\r\nimport {SpellCastingTest} from \"./tests/SpellCastingTest\";\r\nimport {DrainTest} from \"./tests/DrainTest\";\r\nimport {TestCreator} from \"./tests/TestCreator\";\r\nimport {CombatSpellDefenseTest} from \"./tests/CombatSpellDefenseTest\";\r\nimport {ComplexFormTest} from \"./tests/ComplexFormTest\";\r\nimport {AttributeOnlyTest} from \"./tests/AttributeOnlyTest\";\r\nimport {NaturalRecoveryStunTest} from \"./tests/NaturalRecoveryStunTest\";\r\nimport {NaturalRecoveryPhysicalTest} from \"./tests/NaturalRecoveryPhysicalTest\";\r\nimport {FadeTest} from \"./tests/FadeTest\";\r\nimport {ThrownAttackTest} from \"./tests/ThrownAttackTest\";\r\nimport {PilotVehicleTest} from \"./tests/PilotVehicleTest\";\r\nimport {DronePerceptionTest} from \"./tests/DronePerceptionTest\";\r\nimport {DroneInfiltrationTest} from \"./tests/DroneInfiltrationTest\";\r\nimport { SupressionDefenseTest } from './tests/SupressionDefenseTest';\r\nimport { quenchRegister } from '../test/quench';\r\nimport { createItemMacro, createSkillMacro, rollItemMacro, rollSkillMacro } from './macros';\r\n\r\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\r\nimport SocketMessageData = Shadowrun.SocketMessageData;\r\nimport SocketMessageHooks = Shadowrun.SocketMessageHooks;\r\nimport { NetworkDeviceFlow } from './item/flows/NetworkDeviceFlow';\r\nimport { registerSystemKeybindings } from './keybindings';\r\n\r\n// Redeclare SR5config as a global as foundry-vtt-types CONFIG with SR5 property causes issues.\r\nexport const SR5CONFIG = SR5;\r\n\r\nexport class HooksManager {\r\n    static registerHooks() {\r\n        console.log('Shadowrun 5e | Registering system hooks');\r\n        // Register your highest level hook callbacks here for a quick overview of what's hooked into.\r\n\r\n        Hooks.once('init', HooksManager.init);\r\n        Hooks.once('setup', HooksManager.setupAutocompleteInlinePropertiesSupport);\r\n\r\n        Hooks.on('canvasInit', HooksManager.canvasInit);\r\n        Hooks.on('ready', HooksManager.ready);\r\n        Hooks.on('hotbarDrop', HooksManager.hotbarDrop);\r\n        Hooks.on('renderSceneControls', HooksManager.renderSceneControls);\r\n        Hooks.on('getSceneControlButtons', HooksManager.getSceneControlButtons);\r\n        Hooks.on('getCombatTrackerEntryContext', SR5Combat.addCombatTrackerContextOptions);\r\n        Hooks.on('renderItemDirectory', HooksManager.renderItemDirectory);\r\n        // Hooks.on('renderTokenHUD', EnvModifiersApplication.addTokenHUDFields);\r\n        Hooks.on('renderTokenHUD', SituationModifiersApplication.onRenderTokenHUD);\r\n        Hooks.on('updateItem', HooksManager.updateIcConnectedToHostItem);\r\n        Hooks.on('deleteItem', HooksManager.removeDeletedItemsFromNetworks);\r\n        Hooks.on('getChatLogEntryContext', SuccessTest.chatMessageContextOptions);\r\n\r\n        Hooks.on(\"renderChatLog\", HooksManager.chatLogListeners);\r\n        Hooks.on('preUpdateCombatant', SR5Combat.onPreUpdateCombatant);\r\n\r\n        Hooks.on('quenchReady', quenchRegister);\r\n    }\r\n\r\n    static init() {\r\n        console.log(`Loading Shadowrun 5e System\r\n___________________\r\n ___________ _____ \r\n/  ___| ___ \\\\  ___|\r\n\\\\ \\`--.| |_/ /___ \\\\ \r\n \\`--. \\\\    /    \\\\ \\\\\r\n/\\\\__/ / |\\\\ \\\\/\\\\__/ /\r\n\\\\____/\\\\_| \\\\_\\\\____/ \r\n===================\r\n`);\r\n        // Create a shadowrun5e namespace within the game global\r\n        game['shadowrun5e'] = {\r\n            /**\r\n             * System level Document implementations.\r\n             */\r\n            SR5Actor,\r\n            SR5Item,\r\n            SR5ActiveEffect,\r\n            /**\r\n             * Macro hooks used when something's dropped onto the hotbar.\r\n             */\r\n            rollItemMacro,\r\n            rollSkillMacro,\r\n            /**\r\n             * Should you only really need dice handling, use this. If you need more complex testing behaviour,\r\n             * check the Test implementations.\r\n             */\r\n            SR5Roll,\r\n\r\n            /**\r\n             * You want to create a test from whatever source?\r\n             * Use this.\r\n             */\r\n            test: TestCreator,\r\n\r\n            /**\r\n             * .tests define what test implementation to use for each test type (key).\r\n             * Should you want to override default behaviour for SuccessTest types, overwrite\r\n             * the SuccessTest class reference here\r\n             */\r\n            tests: {\r\n                SuccessTest,\r\n                OpposedTest,\r\n                MeleeAttackTest,\r\n                RangedAttackTest,\r\n                ThrownAttackTest,\r\n                PhysicalDefenseTest,\r\n                SupressionDefenseTest,\r\n                PhysicalResistTest,\r\n                SpellCastingTest,\r\n                CombatSpellDefenseTest,\r\n                DrainTest,\r\n                FadeTest,\r\n                ComplexFormTest,\r\n                AttributeOnlyTest,\r\n                NaturalRecoveryStunTest,\r\n                NaturalRecoveryPhysicalTest,\r\n                PilotVehicleTest,\r\n                DronePerceptionTest,\r\n                DroneInfiltrationTest\r\n            },\r\n            /**\r\n             * Subset of tests meant to be used as the main, active test.\r\n             *\r\n             * These will show up on actions when defining the main test to be used.\r\n             */\r\n            activeTests: {\r\n                SuccessTest,\r\n                MeleeAttackTest,\r\n                RangedAttackTest,\r\n                ThrownAttackTest,\r\n                PhysicalResistTest,\r\n                SupressionDefenseTest,\r\n                SpellCastingTest,\r\n                ComplexFormTest,\r\n                PhysicalDefenseTest,\r\n                NaturalRecoveryStunTest,\r\n                NaturalRecoveryPhysicalTest,\r\n                DrainTest,\r\n                FadeTest,\r\n                PilotVehicleTest,\r\n                DronePerceptionTest,\r\n                DroneInfiltrationTest\r\n            },\r\n            /**\r\n             * Subset of tests meant to be used as opposed tests.\r\n             *\r\n             * These will show up on actions when defining an opposed test.\r\n             */\r\n            opposedTests: {\r\n                OpposedTest,\r\n                PhysicalDefenseTest,\r\n                SupressionDefenseTest,\r\n                CombatSpellDefenseTest\r\n            },\r\n            /**\r\n             * Subset of tests meant to be used as resist tests.\r\n             *\r\n             * Instead of showing on the action configuration these are connected to active or opposed test.\r\n             */\r\n            resistTests: {\r\n                PhysicalResistTest\r\n            },\r\n            /**\r\n             * Subset of tests meant to follow a main active test\r\n             */\r\n            followedTests: {\r\n                DrainTest,\r\n                FadeTest\r\n            },\r\n\r\n            /**\r\n             * Amount of delay used on user filter inputs.\r\n             * This came out of an unclear user issue regarding multi-char UTF symbol inputs, to allow\r\n             * 'interactive' changing of the delay on the user side until a sweetspot could be found.\r\n             */\r\n            inputDelay: 300\r\n        };\r\n\r\n        // Register document classes\r\n        CONFIG.Actor.documentClass = SR5Actor;\r\n        CONFIG.Item.documentClass = SR5Item;\r\n        CONFIG.Combat.documentClass = SR5Combat;\r\n        //@ts-ignore // TODO: foundry-vtt-types v10\r\n        CONFIG.ActiveEffect.documentClass = SR5ActiveEffect;\r\n        // Register object classes\r\n        CONFIG.Token.objectClass = SR5Token;\r\n\r\n        // Register initiative directly (outside of system.json) as DnD5e does it.\r\n        CONFIG.Combat.initiative.formula =  \"@initiative.current.base.value[Base] + @initiative.current.dice.text[Dice] - @wounds.value[Wounds]\";\r\n        // @ts-ignore\r\n        Combatant.prototype._getInitiativeFormula = _combatantGetInitiativeFormula;\r\n\r\n        // Register general SR5Roll for JSON serialization support.\r\n        CONFIG.Dice.rolls.push(SR5Roll);\r\n        // @ts-ignore // Register the SR5Roll dnd5e style.\r\n        CONFIG.Dice.SR5oll = SR5Roll;\r\n\r\n        // Add Shadowrun configuration onto general Foundry config for module access.\r\n        // @ts-ignore // TODO: Add declaration merging\r\n        CONFIG.SR5 = SR5;\r\n\r\n\r\n        registerSystemSettings();\r\n        registerSystemKeybindings();\r\n\r\n        // Register sheets for collection documents.\r\n        // NOTE: See dnd5e for a multi class approach for all actor types using the types array in Actors.registerSheet\r\n        Actors.unregisterSheet('core', ActorSheet);\r\n        Actors.registerSheet(SYSTEM_NAME, SR5CharacterSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true,\r\n            types: ['critter', 'character']\r\n        });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5ICActorSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true,\r\n            types: ['ic']\r\n        });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5VehicleActorSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true,\r\n            types: ['vehicle']\r\n        });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5SpiritActorSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true,\r\n            types: ['spirit']\r\n        });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5SpriteActorSheet, {\r\n            label: \"SR5.SheetActor\",\r\n            makeDefault: true,\r\n            types: ['sprite']\r\n        });\r\n\r\n\r\n        Items.unregisterSheet('core', ItemSheet);\r\n        Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, {\r\n            label: \"SR5.SheetItem\",\r\n            makeDefault: true\r\n        });\r\n\r\n        // Register configs for embedded documents.\r\n        DocumentSheetConfig.unregisterSheet(ActiveEffect, 'core', ActiveEffectConfig);\r\n        DocumentSheetConfig.registerSheet(ActiveEffect, SYSTEM_NAME, SR5ActiveEffectConfig, {\r\n            makeDefault: true\r\n        })\r\n\r\n        // Preload might reduce loading time during play.\r\n        HandlebarManager.loadTemplates();\r\n    }\r\n\r\n    static async ready() {\r\n        if (game.user?.isGM) {\r\n            // Prohibit migration on empty worlds...\r\n            if (Migrator.isEmptyWorld) {\r\n                await Migrator.InitWorldForMigration();\r\n                return;\r\n            }\r\n            \r\n            // On populated worlds, try migrating\r\n            await Migrator.BeginMigration();\r\n\r\n            if (ChangelogApplication.showApplication) {\r\n                await new ChangelogApplication().render(true);\r\n            }\r\n        }\r\n\r\n        // Connect chat dice icon to shadowrun basic success test roll.\r\n        const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\r\n        $(document).on('click', diceIconSelector, async () => await TestCreator.promptSuccessTest());\r\n        const diceIconSelectorNew = '#chat-controls .chat-control-icon .fa-dice-d20';\r\n        $(document).on('click', diceIconSelectorNew, async () => await TestCreator.promptSuccessTest());\r\n\r\n        Hooks.on('renderChatMessage', HooksManager.chatMessageListeners);\r\n        HooksManager.registerSocketListeners();\r\n    }\r\n\r\n    static canvasInit() {\r\n        if (!canvas?.ready) return;\r\n        // @ts-ignore // TODO: canvas.grid.diagonaleRule doesn't exist on  anymore... does this even work anymore?\r\n        canvas.grid.diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\r\n        //@ts-ignore // TODO: TYPE SquareGrid isn't typed.\r\n        SquareGrid.prototype.measureDistances = measureDistance;\r\n    }\r\n\r\n    /**\r\n     * Hanlde drop events on the hotbar creating different macros.\r\n     * \r\n     * NOTE: FoundryVTT Hook callbacks won't be resolved when returning a promise.\r\n     *       While this function calls async methods, it's order of operations isn't important.\r\n     *\r\n     * @param bar\r\n     * @param dropData\r\n     * @param slot\r\n     * @return false when callback has been handled, otherwise let Foundry default handling kick in\r\n     */\r\n    static hotbarDrop(bar, dropData, slot) {\r\n        switch (dropData.type) {\r\n            case 'Item':\r\n                createItemMacro(dropData, slot);\r\n                return false;\r\n            case 'Skill':\r\n                createSkillMacro(dropData.data, slot);\r\n                return false;\r\n        }\r\n    }\r\n\r\n    static renderSceneControls(controls, html) {\r\n        html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\r\n            event.preventDefault();\r\n            new OverwatchScoreTracker().render(true);\r\n        });\r\n    }\r\n\r\n    static getSceneControlButtons(controls) {\r\n        const tokenControls = controls.find((c) => c.name === 'token');\r\n\r\n        if (game.user?.isGM) {\r\n            tokenControls.tools.push({\r\n                name: 'overwatch-score-tracker',\r\n                title: 'CONTROLS.SR5.OverwatchScoreTracker',\r\n                icon: 'fas fa-network-wired',\r\n                button: true\r\n            });\r\n        }\r\n\r\n        tokenControls.tools.push(SituationModifiersApplication.getControl());\r\n    }\r\n\r\n    /**\r\n     * Register renderChatMessage Hooks using FoundryVTT Hooks.on for each registered test type.\r\n     *\r\n     * This will avoid calling the same method on different types twice.\r\n     *\r\n     * Must be called on 'ready' or after game.shadowrun is registered.\r\n     */\r\n    static renderChatMessage() {\r\n        console.debug('Shadowrun5e | Registering new chat messages related hooks');\r\n    }\r\n\r\n    static renderItemDirectory(app: Application, html: JQuery) {\r\n        const button = $('<button class=\"sr5 flex0\">Import Chummer Data</button>');\r\n        html.find('footer').before(button);\r\n        button.on('click', (event) => {\r\n            new Import().render(true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On each\r\n     * @param item\r\n     * @param data\r\n     * @param id\r\n     */\r\n    static async updateIcConnectedToHostItem(item: SR5Item, data: ShadowrunItemDataData, id: string) {\r\n        if (!canvas.ready || !game.actors) return;\r\n\r\n        if (item.isHost) {\r\n            // Collect actors from sidebar and active scene to update / rerender\r\n            let connectedIC = [\r\n                // All sidebar actors should also include tokens with linked actors.\r\n                ...game.actors.filter((actor: SR5Actor) => actor.isIC() && actor.hasHost()) as SR5Actor[],\r\n                // All token actors that aren't linked.\r\n                // @ts-ignore // TODO: foundry-vtt-types v10\r\n                ...canvas.scene.tokens.filter(token => !token.actorLink && token.actor?.isIC() && token.actor?.hasHost()).map(t => t.actor)\r\n            ];\r\n\r\n            // Update host data on the ic actor.\r\n            const host = item.asHost;\r\n            if (!host) return;\r\n            for (const ic of connectedIC) {\r\n                if (!ic) continue;\r\n                await ic._updateICHostData(host);\r\n            }\r\n        }\r\n    }\r\n\r\n    static async removeDeletedItemsFromNetworks(item: SR5Item, data: ShadowrunItemDataData, id: string) {\r\n        await NetworkDeviceFlow.handleOnDeleteItem(item, data, id);\r\n    }\r\n\r\n    /**\r\n     * This method is used as a simple place to register socket hook handlers for the system.\r\n     *\r\n     * You can use the SocketMessage\r\n     */\r\n    static registerSocketListeners() {\r\n        if (!game.socket || !game.user) return;\r\n        console.log('Registering Shadowrun5e system socket messages...');\r\n        const hooks: SocketMessageHooks = {\r\n            [FLAGS.addNetworkController]: [NetworkDeviceFlow._handleAddNetworkControllerSocketMessage],\r\n            [FLAGS.DoNextRound]: [SR5Combat._handleDoNextRoundSocketMessage],\r\n            [FLAGS.DoInitPass]: [SR5Combat._handleDoInitPassSocketMessage],\r\n        }\r\n\r\n        game.socket.on(SYSTEM_SOCKET, async (message: SocketMessageData) => {\r\n            console.log('Shadowrun 5e | Received system socket message.', message);\r\n\r\n            const handlers = hooks[message.type];\r\n            if (!handlers || handlers.length === 0) return console.warn('Shadowrun 5e | System socket message has no registered handler!', message);\r\n            // In case of targeted socket message only execute with target user (intended for GM usage)\r\n            if (message.userId && game.user?.id !== message.userId) return;\r\n            if (message.userId && game.user?.id) console.log('Shadowrun 5e | GM is handling system socket message');\r\n\r\n            for (const handler of handlers) {\r\n                console.log('Shadowrun 5e | Handover system socket message to handler', handler);\r\n                await handler(message);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add support for https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties module\r\n     * to give auto complete for active effect attribute keys.\r\n     *\r\n     * This is taken from: https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties/blob/master/CONTRIBUTING.md\r\n     * It partially uses: https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties/blob/master/package-config.mjs#L141\r\n     */\r\n    static setupAutocompleteInlinePropertiesSupport() {\r\n        // Module might not be installed.\r\n        const aipModule = game.modules.get(\"autocomplete-inline-properties\");\r\n        if (!aipModule) return;\r\n        // @ts-ignore\r\n        // API might be missing.\r\n        const api = aipModule.API;\r\n        if (!api) return;\r\n\r\n        console.log('Shadowrun 5e | Registering support for autocomplete-inline-properties');\r\n        // @ts-ignore\r\n        const DATA_MODE = api.CONST.DATA_MODE;\r\n\r\n        const config = {\r\n            packageName: \"shadowrun5e\",\r\n            sheetClasses: [{\r\n                name: \"ActiveEffectConfig\",\r\n                fieldConfigs: [\r\n                    { selector: `.tab[data-tab=\"effects\"] .key input[type=\"text\"]`, defaultPath: \"system\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.OWNING_ACTOR_DATA },\r\n                ]\r\n            }]\r\n        };\r\n\r\n        // @ts-ignore\r\n        api.PACKAGE_CONFIG.push(config);\r\n    }\r\n\r\n    static async chatMessageListeners(message: ChatMessage, html, data) {\r\n        await SuccessTest.chatMessageListeners(message, html, data);\r\n        await OpposedTest.chatMessageListeners(message, html, data);\r\n    }\r\n\r\n    static async chatLogListeners(chatLog: ChatLog, html, data) {\r\n        await SuccessTest.chatLogListeners(chatLog, html, data);\r\n        await OpposedTest.chatLogListeners(chatLog, html, data);\r\n    }\r\n\r\n}\r\n", "import { HandlebarManager } from './handlebars/HandlebarManager';\r\nimport {HooksManager} from \"./hooks\";\r\n\r\n/* -------------------------------------------- */\r\n/*  Foundry VTT Initialization                  */\r\n/* -------------------------------------------- */\r\n\r\n\r\nHooksManager.registerHooks();\r\nHandlebarManager.registerHelpers();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAyBA,KAAC,SAAS,GAAE,GAAE;AAAC,kBAAU,OAAO,WAAS,eAAa,OAAO,SAAO,OAAO,UAAQ,EAAE,IAAE,cAAY,OAAO,UAAQ,OAAO,MAAI,OAAO,CAAC,KAAG,IAAE,eAAa,OAAO,aAAW,aAAW,KAAG,MAAM,SAAO,EAAE;AAAA,IAAC,EAAE,SAAM,WAAU;AAAC;AAAa,eAAS,EAAEA,IAAEC,IAAE;AAAC,YAAIC,KAAE,OAAO,KAAKF,EAAC;AAAE,YAAG,OAAO,uBAAsB;AAAC,cAAIG,KAAE,OAAO,sBAAsBH,EAAC;AAAE,UAAAC,OAAIE,KAAEA,GAAE,OAAQ,SAASF,IAAE;AAAC,mBAAO,OAAO,yBAAyBD,IAAEC,EAAC,EAAE;AAAA,UAAU,CAAE,IAAGC,GAAE,KAAK,MAAMA,IAAEC,EAAC;AAAA,QAAC;AAAC,eAAOD;AAAA,MAAC;AAAC,eAAS,EAAED,IAAE;AAAC,iBAAQE,KAAE,GAAEA,KAAE,UAAU,QAAOA,MAAI;AAAC,cAAIC,KAAE,QAAM,UAAUD,MAAG,UAAUA,MAAG,CAAC;AAAE,UAAAA,KAAE,IAAE,EAAE,OAAOC,EAAC,GAAE,IAAE,EAAE,QAAS,SAASJ,IAAE;AAAC,cAAEC,IAAED,IAAEI,GAAEJ,GAAE;AAAA,UAAC,CAAE,IAAE,OAAO,4BAA0B,OAAO,iBAAiBC,IAAE,OAAO,0BAA0BG,EAAC,CAAC,IAAE,EAAE,OAAOA,EAAC,CAAC,EAAE,QAAS,SAASJ,IAAE;AAAC,mBAAO,eAAeC,IAAED,IAAE,OAAO,yBAAyBI,IAAEJ,EAAC,CAAC;AAAA,UAAC,CAAE;AAAA,QAAC;AAAC,eAAOC;AAAA,MAAC;AAAC,eAAS,EAAED,IAAEC,IAAEC,IAAE;AAAC,gBAAOD,KAAE,SAASD,IAAE;AAAC,cAAIC,KAAE,SAASD,IAAEC,IAAE;AAAC,gBAAG,YAAU,OAAOD,MAAG,SAAOA;AAAE,qBAAOA;AAAE,gBAAIE,KAAEF,GAAE,OAAO;AAAa,gBAAG,WAASE,IAAE;AAAC,kBAAIC,KAAED,GAAE,KAAKF,IAAEC,MAAG,SAAS;AAAE,kBAAG,YAAU,OAAOE;AAAE,uBAAOA;AAAE,oBAAM,IAAI,UAAU,8CAA8C;AAAA,YAAC;AAAC,oBAAO,aAAWF,KAAE,SAAO,QAAQD,EAAC;AAAA,UAAC,EAAEA,IAAE,QAAQ;AAAE,iBAAM,YAAU,OAAOC,KAAEA,KAAE,OAAOA,EAAC;AAAA,QAAC,EAAEA,EAAC,MAAKD,KAAE,OAAO,eAAeA,IAAEC,IAAE,EAAC,OAAMC,IAAE,YAAW,MAAG,cAAa,MAAG,UAAS,KAAE,CAAC,IAAEF,GAAEC,MAAGC,IAAEF;AAAA,MAAC;AAAC,YAAM,IAAE,CAACA,IAAEC,IAAEC,IAAEC,QAAKH,KAAE,KAAGA,IAAEC,KAAE,KAAGA,IAAEE,OAAIH,KAAEA,GAAE,KAAK,GAAEC,KAAEA,GAAE,KAAK,IAAGC,KAAEF,MAAGC,KAAED,GAAE,YAAY,KAAGC,GAAE,YAAY,IAAG,IAAE,CAACD,IAAEC,OAAID,MAAG,MAAM,QAAQA,EAAC,KAAGA,GAAE,IAAK,CAAAA,OAAG,EAAEA,IAAEC,EAAC,CAAE;AAAE,eAAS,EAAED,IAAEC,IAAE;AAAC,YAAIC,IAAEC,KAAE,CAAC;AAAE,aAAID,MAAKF;AAAE,UAAAC,GAAE,QAAQC,EAAC,IAAE,MAAIC,GAAED,MAAGF,GAAEE;AAAI,eAAOC;AAAA,MAAC;AAAC,eAAS,EAAEH,IAAE;AAAC,YAAIC,KAAE,SAAS,cAAc,KAAK;AAAE,eAAOD,GAAE,QAAQ,oBAAoB,SAASA,IAAE;AAAC,iBAAOC,GAAE,YAAUD,IAAEC,GAAE;AAAA,QAAS,CAAE;AAAA,MAAC;AAAC,eAAS,EAAED,IAAE;AAAC,eAAO,IAAI,YAAW,gBAAgBA,GAAE,KAAK,GAAE,WAAW,EAAE,KAAK;AAAA,MAAiB;AAAC,eAAS,EAAEA,IAAEC,IAAE;AAAC,aAAIA,KAAEA,MAAG,YAAWD,KAAEA,GAAEC,KAAE;AAAY,cAAG,KAAGD,GAAE;AAAS,mBAAOA;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAE;AAAC,eAAM,YAAU,OAAOA,KAAEA,GAAE,QAAQ,MAAK,OAAO,EAAE,QAAQ,MAAK,MAAM,EAAE,QAAQ,MAAK,MAAM,EAAE,QAAQ,MAAK,QAAQ,EAAE,QAAQ,QAAO,QAAQ,IAAEA;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAE;AAAC,YAAIC,KAAE,OAAO,UAAU,SAAS,KAAKD,EAAC,EAAE,MAAM,GAAG,EAAE,GAAG,MAAM,GAAE,EAAE;AAAE,eAAOA,OAAI,OAAOA,EAAC,KAAG,WAASC,MAAG,cAAYA,MAAG,YAAUA,MAAG,wBAAsBA;AAAA,MAAC;AAAC,eAAS,EAAED,IAAEC,IAAEC,IAAE;AAAC,iBAASC,GAAEH,IAAEC,IAAE;AAAC,mBAAQC,MAAKD;AAAE,gBAAGA,GAAE,eAAeC,EAAC,GAAE;AAAC,kBAAG,EAAED,GAAEC,GAAE,GAAE;AAAC,kBAAEF,GAAEE,GAAE,IAAEC,GAAEH,GAAEE,KAAGD,GAAEC,GAAE,IAAEF,GAAEE,MAAG,OAAO,OAAO,CAAC,GAAED,GAAEC,GAAE;AAAE;AAAA,cAAQ;AAAC,kBAAG,MAAM,QAAQD,GAAEC,GAAE,GAAE;AAAC,gBAAAF,GAAEE,MAAG,OAAO,OAAO,CAAC,GAAED,GAAEC,GAAE;AAAE;AAAA,cAAQ;AAAC,cAAAF,GAAEE,MAAGD,GAAEC;AAAA,YAAE;AAAA,QAAC;AAAC,eAAOF,cAAa,WAASA,KAAE,CAAC,IAAGG,GAAEH,IAAEC,EAAC,GAAEC,MAAGC,GAAEH,IAAEE,EAAC,GAAEF;AAAA,MAAC;AAAC,eAAS,IAAG;AAAC,cAAMA,KAAE,CAAC,GAAEC,KAAE,CAAC;AAAE,iBAAQC,MAAK;AAAU,mBAAQC,MAAKD;AAAE,cAAEC,EAAC,IAAEF,GAAEE,GAAE,WAASH,GAAE,KAAKG,EAAC,GAAEF,GAAEE,GAAE,SAAO,KAAGH,GAAE,SAASG,EAAC,KAAGH,GAAE,KAAKG,EAAC;AAAE,eAAOH;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAE;AAAC,eAAO,OAAO,UAAU,YAAU,YAAU,OAAOA,KAAEA,GAAE,UAAU,KAAK,EAAE,QAAQ,oBAAmB,EAAE,IAAE,SAAOA;AAAA,MAAC;AAAC,UAAI,IAAE,MAAI,6BAA6B,KAAK,UAAU,SAAS;AAAE,eAAS,IAAG;AAAC,gBAAO,CAAC,GAAG,IAAE,OAAK,OAAK,OAAK,OAAO,QAAQ,UAAU,CAAAA,QAAIA,KAAE,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC,EAAE,KAAG,MAAIA,KAAE,GAAG,SAAS,EAAE,CAAE;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAE;AAAC,eAAOA,MAAGA,GAAE,aAAWA,GAAE,UAAU,SAAS,KAAK,SAAS,WAAW,GAAG;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAEC,IAAE;AAAC,YAAIC,KAAE,OAAO,aAAa;AAAE,eAAOD,KAAEA,MAAGC,GAAE,WAAW,CAAC,GAAE,YAAU,OAAOF,OAAIA,KAAE,SAAS,eAAeA,EAAC,IAAGC,OAAIA,GAAE,eAAe,GAAEA,GAAE,WAAWD,EAAC,IAAGA;AAAA,MAAC;AAAC,eAAS,EAAEA,IAAEC,IAAEC,IAAE;AAAC,eAAOF,MAAGC,OAAID,GAAE,kBAAgBE,KAAED,KAAE,EAAE,CAAC,GAAED,GAAE,mBAAiB,CAAC,GAAEC,EAAC,IAAGD,GAAE,oBAAkB,QAAQ,KAAK,6BAA4BA,IAAEC,EAAC,GAAEA;AAAA,MAAE;AAAC,UAAI,IAAE,EAAC,YAAW,KAAI,SAAQ,MAAK,aAAY,SAAQ,SAAQ,IAAE,GAAE,WAAU,CAAC,GAAE,cAAa,MAAG,mBAAkB,MAAG,YAAW,OAAG,WAAU,CAAC,GAAE,WAAU,CAAC,GAAE,kBAAiB,OAAG,WAAU,MAAG,iBAAgB,OAAG,mBAAkB,MAAG,qBAAoB,cAAa,qBAAoB,CAAC,MAAK,IAAI,GAAE,WAAU,MAAG,aAAY,OAAG,aAAY,MAAG,UAAS,EAAC,QAAO,GAAE,aAAY,KAAE,GAAE,cAAa,MAAI;AAAA,MAAC,GAAE,MAAK,MAAG,MAAK,EAAC,eAAc,MAAE,GAAE,SAAQ,EAAC,gBAAe,OAAG,GAAE,cAAa,EAAC,SAAQ,MAAG,UAAS,MAAE,GAAE,YAAW,EAAC,WAAU,UAAS,SAAQ,eAAc,YAAW,kBAAiB,OAAM,iBAAgB,OAAM,iBAAgB,gBAAe,kBAAiB,YAAW,mBAAkB,eAAc,sBAAqB,cAAa,mBAAkB,YAAW,sBAAqB,WAAU,kBAAiB,OAAM,iBAAgB,cAAa,0BAAyB,UAAS,oBAAmB,iBAAgB,6BAA4B,gBAAe,4BAA2B,gBAAe,4BAA2B,cAAa,0BAAyB,oBAAmB,kCAAiC,oBAAmB,kCAAiC,gBAAe,6BAA4B,KAAI,eAAc,SAAQ,oBAAmB,MAAK,0BAAyB,YAAW,wBAAuB,YAAW,yBAAwB,UAAS,sBAAqB,SAAQ,oBAAmB,GAAE,UAAS,EAAC,WAAU,IAAG,SAAQ,GAAE,UAAS,IAAG,YAAW,CAAC,SAAQ,UAAU,GAAE,aAAY,MAAG,eAAc,OAAG,gBAAe,MAAG,qBAAoB,OAAG,gBAAe,OAAG,eAAc,MAAG,eAAc,MAAG,UAAS,OAAM,cAAa,KAAI,GAAE,OAAM,EAAC,iBAAgB,MAAI,QAAQ,QAAQ,GAAE,aAAY,MAAI,QAAQ,QAAQ,GAAE,iBAAgB,MAAI,QAAQ,QAAQ,EAAC,EAAC;AAAE,eAAS,IAAG;AAAC,aAAK,WAAS,CAAC;AAAE,iBAAQD,MAAK,KAAK;AAAU,eAAK,SAASA,MAAG,cAAY,OAAO,KAAK,UAAUA,MAAG,KAAK,UAAUA,IAAG,KAAK,IAAI,IAAE,KAAK,UAAUA;AAAG,aAAK,SAAS,KAAK;AAAA,MAAC;AAAC,UAAI,IAAE,EAAC,OAAM;AAAC,aAAK,IAAI,WAAS,KAAK,cAAc,YAAW,CAAC,KAAK,QAAQ,CAAC,GAAE,KAAK,IAAI,SAAS,UAAQ,KAAK,IAAI,SAAS,cAAc,8CAA8C;AAAA,MAAC,GAAE,eAAc;AAAC,eAAO,KAAK,IAAI,SAAS,cAAc,6CAA6C;AAAA,MAAC,GAAE,eAAc;AAAC,eAAO,KAAK,IAAI,SAAS,cAAc,6CAA6C;AAAA,MAAC,GAAE,wBAAuB;AAAC,eAAM,CAAC,GAAG,KAAK,IAAI,SAAS,QAAQ,iBAAiB,KAAK,SAAS,WAAW,oBAAoB,CAAC;AAAA,MAAC,GAAE,KAAKA,IAAE;AAAC,YAAIC,IAAEC,IAAEE,IAAEC,KAAE,KAAK,UAASC,KAAE,SAAOD,GAAE,QAAM,CAACA,GAAE,kBAAiBE,KAAE,CAACF,GAAE,aAAW,CAACA,GAAE,UAAU,QAAOG,KAAE,YAAUH,GAAE,SAAS;AAAS,YAAGL,KAAE,WAASA,KAAE,KAAK,MAAM,YAAUA,IAAE,EAAEO,MAAG,CAACD,MAAG,CAACD,GAAE,UAAU,uBAAqB,UAAKA,GAAE,SAAS,UAAQ,KAAK,MAAM,aAAW,KAAK,SAAS,WAAU;AAAC,cAAG,aAAa,KAAK,+BAA+B,GAAE,KAAK,qBAAmB,KAAK,SAAS,gBAAgBL,EAAC,GAAEA,MAAG,CAAC,KAAK,mBAAmB,WAAS,KAAK,QAAQ,oBAAmBA,EAAC,GAAEK,GAAE,UAAU,wBAAsBD,KAAEC,GAAE,UAAU,oBAAoB,KAAK,MAAK,EAAC,OAAML,GAAC,CAAC,KAAI,CAACI,IAAE;AAAC,gBAAG,KAAK,mBAAmB;AAAO,cAAAJ,MAAGM,MAAG,CAAC,KAAK,MAAM,QAAQ,SAAO,CAAC,EAAE,KAAK,mBAAmB,GAAG,OAAMN,EAAC,KAAG,KAAK,mBAAmB,QAAQ,EAAC,OAAMA,GAAC,CAAC;AAAA,iBAAM;AAAC,kBAAG,CAACA,MAAG,CAACM,MAAG,KAAK,MAAM,QAAQ;AAAM,uBAAO,KAAK,MAAM,aAAa,QAAQ,KAAK,IAAI,GAAE,KAAK,KAAK,SAAS,KAAK;AAAE,mBAAK,qBAAmB,CAAC,EAAC,OAAMN,GAAC,CAAC;AAAA,YAAC;AAAC,YAAAE,KAAE,MAAI,EAAED,KAAE,KAAK,mBAAmB,EAAE,IAAEA,GAAE,QAAMA,KAAGI,GAAE,gBAAcH,MAAG,KAAGA,GAAE,QAAQF,EAAC,KAAG,KAAK,MAAM,aAAa,QAAQ,KAAK,MAAKC,EAAC;AAAA,UAAC;AAAC,eAAK,SAAS,KAAKG,EAAC,GAAEC,GAAE,SAAS,kBAAgB,KAAK,SAAS,gBAAgB,KAAK,IAAI,SAAS,QAAQ,cAAcA,GAAE,WAAW,oBAAoB,CAAC,GAAE,KAAK,MAAM,SAAS,WAAS,WAAW,KAAK,SAAS,OAAO,QAAQ,KAAK,IAAI,CAAC,GAAE,KAAK,MAAM,SAAS,UAAQL,MAAG,MAAG,KAAK,MAAM,SAAS,QAAMA,IAAE,KAAK,kBAAkB,GAAEQ,MAAG,WAAY,MAAI;AAAC,iBAAK,SAAS,SAAS,GAAE,KAAK,SAAS,OAAO;AAAA,UAAC,CAAE,GAAE,WAAY,MAAI;AAAC,iBAAK,QAAQ,iBAAgB,KAAK,IAAI,QAAQ;AAAA,UAAC,CAAE;AAAA,QAAC;AAAA,MAAC,GAAE,KAAKR,IAAE;AAAC,YAAIC,KAAE,KAAK,KAAIC,KAAED,GAAE,OAAME,KAAEF,GAAE,UAASG,KAAE,YAAU,KAAK,SAAS,SAAS,YAAU,CAACJ;AAAE,YAAGG,MAAG,SAAS,KAAK,SAASA,EAAC,KAAG,CAACC;AAAE,iBAAO,OAAO,oBAAoB,UAAS,KAAK,SAAS,QAAQ,GAAE,KAAK,SAAS,OAAO,QAAQ,KAAK,MAAK,KAAE,GAAEF,GAAE,aAAa,iBAAgB,KAAE,GAAEC,GAAE,WAAW,YAAYA,EAAC,GAAE,WAAY,MAAI;AAAC,iBAAK,MAAM,SAAS,UAAQ;AAAA,UAAE,GAAG,GAAG,GAAE,KAAK,MAAM,SAAS,QAAM,KAAK,MAAM,aAAW,KAAK,MAAM,YAAU,KAAK,MAAM,YAAU,MAAK,KAAK,MAAM,OAAK,KAAK,MAAM,IAAI,MAAM,WAAS,KAAK,MAAM,YAAY,KAAK,MAAM,IAAI,cAAY,KAAK,MAAM,MAAK,KAAK,QAAQ,iBAAgBA,EAAC,GAAE;AAAA,MAAI,GAAE,OAAOH,IAAE;AAAC,aAAK,SAAS,KAAK,MAAM,SAAS,WAAS,CAACA,KAAE,SAAO,QAAQ;AAAA,MAAC,GAAE,SAAQ;AAAC,YAAIA,IAAEC,IAAEC,IAAEC,MAAGH,KAAE,KAAK,IAAI,WAAUE,KAAEF,GAAE,UAAU,IAAE,GAAG,MAAM,UAAQ,0CAAyC,SAAS,KAAK,YAAYE,EAAC,GAAED,KAAEC,GAAE,cAAaA,GAAE,WAAW,YAAYA,EAAC,GAAED,KAAGG,KAAE,KAAK;AAAS,eAAM,YAAU,OAAOA,GAAE,SAAS,WAASA,GAAE,SAAS,WAAS,KAAG,KAAK,IAAI,MAAM,aAAa,iBAAgB,IAAE,GAAE,SAAS,KAAK,SAAS,KAAK,IAAI,QAAQ,MAAI,KAAK,IAAI,SAAS,UAAU,IAAIA,GAAE,WAAW,cAAc,GAAE,KAAK,SAAS,SAASD,EAAC,GAAEC,GAAE,SAAS,aAAa,YAAY,KAAK,IAAI,QAAQ,GAAE,WAAY,MAAI,KAAK,IAAI,SAAS,UAAU,OAAOA,GAAE,WAAW,cAAc,CAAE,IAAG,QAAM;AAAA,MAAI,GAAE,KAAKJ,IAAE;AAAC,QAAAA,KAAE,YAAU,OAAOA,KAAEA,KAAE,KAAK,SAAS,eAAeA,MAAG,KAAK,kBAAkB;AAAE,YAAIC,IAAEC,KAAE,KAAK,SAAS,UAAU,gBAAgB,KAAK,MAAKF,EAAC;AAAE,aAAK,IAAI,SAAS,QAAQ,aAAWC,KAAEC,MAAGD,GAAE,QAAQ,iBAAgB,IAAI,EAAE,QAAQ,gBAAgB,CAACD,IAAEC,OAAIA,MAAG,GAAI,IAAE;AAAA,MAAE,GAAE,mBAAkB;AAAC,YAAID,KAAE,KAAK,SAAS,gBAAgB,KAAK,MAAM,SAAS,KAAK,GAAEC,KAAE,KAAK,cAAc,kBAAiB,CAACD,EAAC,CAAC,GAAEE,KAAE,KAAK,cAAc,kBAAiB,CAACF,EAAC,CAAC,GAAEG,KAAE,KAAK,SAAS,aAAa,GAAEC,KAAE,KAAK,SAAS,aAAa;AAAE,QAAAH,MAAGE,IAAG,WAAW,aAAaF,IAAEE,EAAC,GAAED,MAAGE,IAAG,WAAW,aAAaF,IAAEE,EAAC;AAAA,MAAC,GAAE,SAASJ,IAAE;AAAC,QAAAA,KAAEA,MAAG,KAAK,MAAM,SAAS,SAAO,IAAG,KAAK,qBAAmB,KAAK,SAAS,gBAAgBA,EAAC,GAAE,KAAK,SAAS,KAAK,GAAE,KAAK,mBAAmB,UAAQ,KAAK,SAAS,KAAK,GAAE,KAAK,QAAQ,oBAAmB,KAAK,IAAI,QAAQ;AAAA,MAAC,GAAE,SAASA,IAAE;AAAC,YAAIC,KAAE,KAAK,SAAS;AAAS,YAAG,YAAUA,GAAE,UAAS;AAAC,cAAIC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,KAAE,KAAK,IAAI,UAASC,KAAER,GAAE,YAAWS,KAAET,GAAE,iBAAe,SAAS,MAAKU,KAAED,KAAE,OAAO,cAAYT,GAAE,aAAa,WAAUW,KAAE,SAAS,qBAAmB,SAAS,2BAAyB,SAAS,iBAAgBC,KAAED,GAAE,cAAaE,KAAE,KAAK,IAAIF,GAAE,eAAa,GAAE,OAAO,cAAY,CAAC,IAAE,MAAIX,GAAE,WAAS,OAAMc,KAAE,KAAK,IAAI,WAASD,KAAE,UAAQ;AAAS,cAAGd,KAAEA,MAAGQ,GAAE,cAAa,KAAK,MAAM,SAAS,SAAQ;AAAC,gBAAG,UAAQM,MAAGV,MAAGF,KAAE,WAAU;AAAC,oBAAMF,KAAE,SAAS,aAAa;AAAE,kBAAGA,GAAE,YAAW;AAAC,sBAAMC,KAAED,GAAE,WAAW,CAAC,GAAEE,KAAED,GAAE,gBAAeE,KAAEF,GAAE;AAAY,oBAAIG,IAAEC;AAAE,oBAAGF,KAAE;AAAE,yBAAOE,KAAE,SAAS,YAAY,GAAEA,GAAE,SAASH,IAAEC,KAAE,CAAC,GAAEE,GAAE,OAAOH,IAAEC,EAAC,GAAEC,KAAEC,GAAE,sBAAsB,GAAE,EAAC,MAAKD,GAAE,OAAM,KAAIA,GAAE,KAAI,QAAOA,GAAE,OAAM;AAAE,oBAAGF,GAAE;AAAsB,yBAAOA,GAAE,sBAAsB;AAAA,cAAC;AAAC,qBAAM,EAAC,MAAK,OAAM,KAAI,MAAK;AAAA,YAAC,EAAE,GAAG,QAAOC,KAAED,GAAE,KAAIG,KAAEH,GAAE,MAAKI,KAAE,WAASC,KAAE,SAASP,IAAE;AAAC,uBAAQC,KAAE,GAAEC,KAAE,GAAEF,MAAGA,MAAGY;AAAG,gBAAAX,MAAGD,GAAE,cAAY,GAAEE,MAAGF,GAAE,aAAW,GAAEA,KAAEA,GAAE;AAAW,qBAAM,EAAC,MAAKC,IAAE,KAAIC,GAAC;AAAA,YAAC,EAAED,GAAE,YAAY,GAAEE,MAAGD,KAAEa,GAAE,sBAAsB,GAAG,MAAIR,GAAE,KAAIH,KAAEF,GAAE,SAAO,IAAEK,GAAE,KAAIF,KAAEH,GAAE,OAAKK,GAAE,MAAKD,KAAEJ,GAAE,QAAM,OAAM,CAACQ,IAAE;AAAC,kBAAIV,KAAE,WAAU;AAAC,yBAAQA,KAAE,GAAEE,KAAED,GAAE,aAAa,YAAWC;AAAG,kBAAAF,MAAGE,GAAE,aAAW,GAAEA,KAAEA,GAAE;AAAW,uBAAOF;AAAA,cAAC,EAAE;AAAE,cAAAG,MAAGH,IAAEI,MAAGJ;AAAA,YAAC;AAAC,YAAAG,KAAE,KAAK,MAAMA,EAAC,GAAEC,KAAE,KAAK,KAAKA,EAAC,GAAEK,KAAE,WAASA,KAAEI,KAAEX,GAAE,SAAOF,KAAES,IAAED,GAAE,MAAM,UAAQ,WAASH,KAAE,OAAO,eAAa,eAAaC,KAAE,OAAKG,KAAE,WAASN,KAAEQ,MAAG,OAAK,WAASP,KAAEO,MAAG,OAAMH,GAAE,aAAa,aAAYC,KAAE,QAAM,QAAQ,GAAED,GAAE,aAAa,YAAWM,EAAC;AAAA,UAAC;AAAA,QAAC;AAAA,MAAC,GAAE,QAAO,EAAC,UAAS;AAAC,YAAId,KAAE,EAAE,UAAU,SAAO,KAAG,WAAS,UAAU,OAAK,UAAU;AAAG,YAAIC,KAAE,KAAK,SAAS,OAAO,WAAUC,KAAE,KAAK,UAAU,WAAS,KAAK,UAAU,YAAU,EAAC,UAAS,KAAK,SAAS,SAAS,KAAK,MAAK,IAAI,GAAE,WAAUD,GAAE,UAAU,KAAK,IAAI,GAAE,aAAYA,GAAE,YAAY,KAAK,IAAI,GAAE,cAAaA,GAAE,aAAa,KAAK,IAAI,GAAE,SAAQA,GAAE,QAAQ,KAAK,IAAI,GAAE,UAASA,GAAE,SAAS,KAAK,IAAI,EAAC,GAAEE,KAAEH,KAAE,qBAAmB;AAAsB,oBAAU,KAAK,SAAS,SAAS,aAAW,SAASG,IAAG,UAASD,GAAE,UAAS,IAAE,GAAE,OAAOC,IAAG,UAASD,GAAE,QAAQ,GAAE,OAAOC,IAAG,WAAUD,GAAE,SAAS,IAAG,KAAK,IAAI,SAASC,IAAG,aAAYD,GAAE,WAAW,GAAE,KAAK,IAAI,SAASC,IAAG,cAAaD,GAAE,YAAY,GAAE,KAAK,IAAI,SAASC,IAAG,aAAYD,GAAE,OAAO,GAAE,KAAK,IAAI,SAAS,QAAQC,IAAG,UAASD,GAAE,QAAQ;AAAA,MAAC,GAAE,WAAU,EAAC,UAAUF,IAAE;AAAC,YAAG,KAAK,MAAM,YAAU,CAAC,KAAK,MAAM,WAAU;AAAC,cAAIC,KAAE,KAAK,IAAI,SAAS,cAAc,KAAK,SAAS,WAAW,0BAA0B,GAAEC,KAAE,KAAK,SAAS,wBAAwBD,EAAC;AAAE,kBAAOD,GAAE,KAAI;AAAA,YAAC,KAAI;AAAA,YAAY,KAAI;AAAA,YAAU,KAAI;AAAA,YAAO,KAAI;AAAK,cAAAA,GAAE,eAAe;AAAE,kBAAIG,KAAE,KAAK,SAAS,sBAAsB,GAAEC,KAAE,aAAWJ,GAAE,OAAK,QAAMA,GAAE;AAAI,cAAAC,OAAIA,KAAE,KAAK,SAAS,oBAAoBA,IAAE,CAACG,EAAC,IAAGH,MAAGA,GAAE,QAAQ,KAAK,SAAS,WAAW,oBAAoB,MAAIA,KAAEE,GAAEC,KAAED,GAAE,SAAO,IAAE,KAAI,KAAK,SAAS,gBAAgBF,IAAE,IAAE;AAAE;AAAA,YAAM,KAAI;AAAA,YAAS,KAAI;AAAM,mBAAK,SAAS,KAAK;AAAE;AAAA,YAAM,KAAI;AAAa,kBAAG,KAAK,MAAM,QAAQ;AAAU;AAAA,YAAO,KAAI;AAAM,kBAAG,SAAO,KAAK,SAAS,QAAMA,MAAG,CAAC,KAAK,SAAS,aAAa,YAAU,CAAC,KAAK,MAAM,SAAQ;AAAC,gBAAAD,GAAE,eAAe;AAAE,oBAAIK,KAAE,KAAK,SAAS,eAAeH,EAAC;AAAE,uBAAO,KAAK,MAAM,aAAa,IAAI,KAAK,MAAKG,EAAC,GAAE;AAAA,cAAE;AAAC,qBAAM;AAAA,YAAG,KAAI;AAAQ,cAAAL,GAAE,eAAe,GAAE,KAAK,SAAS,MAAM,gBAAgBA,IAAE,EAAC,QAAO,MAAK,SAAQE,IAAE,eAAcD,GAAC,CAAC,EAAE,KAAM,MAAI;AAAC,oBAAGA;AAAE,yBAAO,KAAK,SAAS,aAAaA,EAAC,GAAEA,KAAE,KAAK,SAAS,oBAAoBA,IAAE,CAACG,EAAC,GAAE,KAAK,KAAK,SAAS,gBAAgBH,EAAC;AAAE,qBAAK,SAAS,KAAK,GAAE,SAAO,KAAK,SAAS,QAAM,KAAK,QAAQ,KAAK,MAAM,UAAU,KAAK,GAAE,IAAE;AAAA,cAAC,CAAE,EAAE,MAAO,CAAAD,OAAGA,EAAE;AAAE;AAAA,YAAM,KAAI,aAAY;AAAC,kBAAG,SAAO,KAAK,SAAS,QAAM,KAAK,MAAM,QAAQ;AAAM;AAAO,oBAAMA,KAAE,KAAK,MAAM,IAAI,KAAK,IAAI;AAAE,oBAAIA,MAAG,QAAMA,GAAE,WAAW,CAAC,MAAI,SAAK,KAAK,SAAS,YAAU,KAAK,WAAW,IAAE,UAAQ,KAAK,SAAS,aAAW,WAAW,KAAK,QAAQ,KAAK,IAAI,GAAE,CAAC;AAAA,YAAE;AAAA,UAAC;AAAA,QAAC;AAAA,MAAC,GAAE,YAAYA,IAAE;AAAC,YAAIC,KAAED,GAAE,OAAO,QAAQ,KAAK,SAAS,WAAW,oBAAoB;AAAE,QAAAC,MAAG,KAAK,SAAS,gBAAgBA,EAAC;AAAA,MAAC,GAAE,aAAaD,IAAE;AAAC,aAAK,SAAS,gBAAgB;AAAA,MAAC,GAAE,QAAQA,IAAE;AAAC,YAAG,KAAGA,GAAE,UAAQA,GAAE,UAAQ,KAAK,IAAI,YAAUA,GAAE,UAAQ,KAAK,IAAI,SAAS,SAAQ;AAAC,cAAIC,KAAED,GAAE,OAAO,QAAQ,KAAK,SAAS,WAAW,oBAAoB,GAAEE,KAAE,KAAK,SAAS,wBAAwBD,EAAC;AAAE,eAAK,MAAM,QAAQ,eAAa,MAAG,WAAY,MAAI,KAAK,MAAM,QAAQ,eAAa,OAAI,EAAE,GAAE,KAAK,SAAS,MAAM,gBAAgBD,IAAE,EAAC,QAAO,MAAK,SAAQE,IAAE,eAAcD,GAAC,CAAC,EAAE,KAAM,MAAI;AAAC,YAAAA,KAAE,KAAK,SAAS,aAAaA,IAAED,EAAC,IAAE,KAAK,SAAS,KAAK;AAAA,UAAC,CAAE,EAAE,MAAO,CAAAA,OAAG,QAAQ,KAAKA,EAAC,CAAE;AAAA,QAAC;AAAA,MAAC,GAAE,SAASA,IAAE;AAAC,YAAIC,KAAED,GAAE,QAAOE,KAAED,GAAE,aAAWA,GAAE,eAAaA,GAAE,WAAW,gBAAc;AAAI,aAAK,QAAQ,mBAAkB,EAAC,YAAW,KAAK,MAAMC,EAAC,EAAC,CAAC;AAAA,MAAC,EAAC,EAAC,GAAE,wBAAwBF,IAAE;AAAC,YAAIC,KAAED,MAAGA,GAAE,aAAa,OAAO;AAAE,eAAO,KAAK,mBAAmB,KAAM,CAAAA,OAAGA,GAAE,SAAOC,EAAE,KAAG;AAAA,MAAI,GAAE,oBAAoBD,IAAE;AAAC,YAAIC,KAAE,EAAE,UAAU,SAAO,KAAG,WAAS,UAAU,OAAK,UAAU;AAAG,YAAIC,KAAE,KAAK,SAAS,sBAAsB,GAAEC,KAAED,GAAE,UAAW,CAAAD,OAAGA,OAAID,EAAE;AAAE,eAAOC,KAAEC,GAAEC,KAAE,KAAGD,GAAEC,KAAE;AAAA,MAAE,GAAE,gBAAgBH,IAAEC,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK,SAAS,WAAW;AAAmB,YAAG,KAAK,MAAM,cAAY,KAAK,MAAM,UAAU,UAAU,OAAOA,EAAC,GAAE,KAAK,MAAM,UAAU,gBAAgB,eAAe,IAAG,CAACH;AAAE,iBAAO,KAAK,MAAM,aAAW,MAAK,KAAK,MAAM,YAAU,MAAK,KAAK,KAAK,MAAM,aAAa,QAAQ,KAAK,IAAI;AAAE,QAAAE,KAAE,KAAK,SAAS,wBAAwBF,EAAC,GAAE,KAAK,MAAM,aAAWE,IAAE,KAAK,MAAM,YAAUF,IAAEA,GAAE,UAAU,IAAIG,EAAC,GAAEH,GAAE,aAAa,iBAAgB,IAAE,GAAEC,OAAID,GAAE,WAAW,YAAUA,GAAE,eAAaA,GAAE,YAAUA,GAAE,WAAW,eAAc,KAAK,SAAS,iBAAe,KAAK,MAAM,aAAa,QAAQ,KAAK,MAAKE,EAAC,GAAE,KAAK,SAAS,SAAS;AAAA,MAAE,GAAE,aAAaF,IAAEC,IAAE;AAAC,YAAIC,KAAE,KAAK,SAAS,UAASC,KAAED,GAAE,eAAcE,KAAEF,GAAE;AAAc,YAAG,CAACF;AAAE,iBAAO,KAAK,QAAQ,KAAK,MAAM,WAAU,IAAE,GAAE,MAAKI,MAAG,KAAK,SAAS,KAAK;AAAG,QAAAH,KAAEA,MAAG,CAAC;AAAE,YAAII,KAAEL,GAAE,aAAa,OAAO,GAAEM,KAAE,aAAWD,IAAEE,KAAE,KAAK,mBAAmB,KAAM,CAAAP,QAAIA,GAAE,SAAOA,OAAIK,EAAE;AAAE,aAAK,QAAQ,mBAAkB,EAAC,MAAKE,IAAE,KAAIP,IAAE,OAAMC,GAAC,CAAC,GAAEI,OAAIE,MAAGD,OAAI,KAAK,MAAM,UAAQ,KAAK,cAAc,MAAK,EAAE,EAAC,WAAU,KAAE,GAAE,KAAK,cAAc,CAACC,EAAC,CAAC,EAAE,EAAE,CAAC,IAAE,KAAK,SAAO,KAAK,SAAS,OAAK,eAAa,WAAW,CAACA,MAAG,KAAK,MAAM,IAAI,KAAK,IAAI,CAAC,GAAEJ,EAAC,GAAE,KAAK,IAAI,MAAM,eAAa,WAAY,MAAI;AAAC,eAAK,IAAI,MAAM,MAAM,GAAE,KAAK,iBAAiB,IAAE,GAAE,KAAK,mBAAmB,OAAG,KAAK,IAAI,KAAK;AAAA,QAAC,CAAE,GAAEC,MAAG,WAAW,KAAK,SAAS,KAAK,KAAK,IAAI,CAAC,GAAEJ,GAAE,iBAAiB,iBAAiB,MAAI;AAAC,eAAK,SAAS,iBAAiB,GAAE,WAAY,MAAIA,GAAE,OAAO,GAAG,GAAG;AAAA,QAAC,GAAG,EAAC,MAAK,KAAE,CAAC,GAAEA,GAAE,UAAU,IAAI,KAAK,SAAS,WAAW,kBAAkB,MAAII,MAAG,WAAW,KAAK,SAAS,KAAK,KAAK,IAAI,CAAC;AAAA,MAAC,GAAE,UAAUJ,IAAE;AAAC,aAAK,mBAAmB,SAAO,GAAE,KAAK,SAAS,KAAK,GAAE,KAAK,SAAS,gBAAgB,EAAE;AAAE,YAAIC,KAAE,KAAK,SAAS,gBAAgB,EAAE;AAAE,eAAOD,OAAIC,KAAE,KAAK,MAAM,SAAS,cAAa,KAAK,QAAQA,IAAE,IAAE,GAAE;AAAA,MAAI,GAAE,gBAAgBD,IAAEC,IAAE;AAAC,YAAIC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,KAAE,KAAK,UAASC,KAAED,GAAE,UAASE,MAAGR,KAAEA,MAAG,CAAC,GAAE,CAAC,IAAGU,KAAE,CAAC,GAAEC,KAAEL,GAAE,WAAUO,KAAEN,GAAE,YAAU,IAAEA,GAAE,WAAS,IAAE,GAAEO,KAAEP,GAAE,YAAWQ,KAAE;AAAE,YAAG,EAAEhB,KAAE,YAAUO,GAAE,QAAM,KAAK,MAAM,UAAQ,KAAK,MAAM,GAAGA,GAAE,gBAAcP,KAAE,KAAGA,OAAI,CAACe,GAAE;AAAO,iBAAON,KAAED,GAAE,sBAAoBI,KAAEA,GAAE,OAAQ,CAAAZ,OAAG,CAAC,KAAK,eAAe,EAAEA,EAAC,IAAEA,GAAE,QAAMA,EAAC,CAAE,GAAE,KAAK,MAAM,SAAS,cAAYS,IAAEA,GAAE,MAAM,GAAEK,EAAC;AAAE,iBAASG,GAAEjB,IAAEC,IAAE;AAAC,iBAAOA,GAAE,YAAY,EAAE,MAAM,GAAG,EAAE,MAAO,CAAAA,OAAGD,GAAE,SAASC,GAAE,YAAY,CAAC,CAAE;AAAA,QAAC;AAAC,aAAIK,KAAEE,GAAE,gBAAc,KAAGR,MAAG,KAAGA,IAAG,YAAY,GAAEgB,KAAEJ,GAAE,QAAOI,MAAI;AAAC,cAAIhB,IAAEO;AAAE,UAAAL,KAAEU,GAAEI,eAAa,SAAOJ,GAAEI,MAAG,EAAC,OAAMJ,GAAEI,IAAE;AAAE,cAAIF,KAAE,CAAC,OAAO,KAAKZ,EAAC,EAAE,KAAM,CAAAF,OAAGe,GAAE,SAASf,EAAC,CAAE,IAAE,CAAC,OAAO,IAAEe;AAAE,UAAAP,GAAE,eAAa,CAACP,GAAE,SAAOG,KAAEU,GAAE,OAAQ,CAACd,IAAEC,OAAID,KAAE,OAAKE,GAAED,OAAI,KAAK,EAAE,EAAE,YAAY,EAAE,KAAK,GAAEO,GAAE,mBAAiBJ,KAAE,EAAEA,EAAC,GAAEE,KAAE,EAAEA,EAAC,IAAGN,KAAE,KAAGI,GAAE,QAAQE,EAAC,GAAEC,KAAEH,OAAIE,IAAEH,KAAEc,GAAEb,IAAEE,EAAC,MAAIN,KAAE,MAAGG,KAAEW,GAAE,KAAM,CAAAd,OAAG;AAAC,gBAAIG,KAAE,MAAID,GAAEF,OAAI;AAAI,mBAAOQ,GAAE,mBAAiBL,KAAE,EAAEA,EAAC,GAAEG,KAAE,EAAEA,EAAC,IAAGE,GAAE,kBAAgBL,KAAEA,GAAE,YAAY,IAAGI,KAAEJ,OAAIG,IAAEL,GAAE,QAAME,OAAIG,KAAE,KAAGH,GAAE,QAAQG,EAAC;AAAA,UAAC,CAAE,IAAGD,KAAE,CAACG,GAAE,uBAAqB,KAAK,eAAe,EAAEN,EAAC,IAAEA,GAAE,QAAMA,EAAC,GAAEC,MAAG,CAACE,OAAIE,MAAGP,KAAEW,GAAE,KAAKT,EAAC,IAAE,gBAAcM,GAAE,UAAQR,KAAES,GAAE,QAAQP,EAAC,IAAEO,GAAE,KAAKP,EAAC;AAAA,QAAE;AAAC,eAAO,KAAK,MAAM,SAAS,cAAYS,GAAE,OAAOF,EAAC,GAAE,cAAY,OAAOD,GAAE,SAAOA,GAAE,OAAOG,GAAE,OAAOF,EAAC,GAAEH,EAAC,IAAEK,GAAE,OAAOF,EAAC,EAAE,MAAM,GAAEK,EAAC;AAAA,MAAC,GAAE,eAAed,IAAE;AAAC,YAAIC,KAAE,KAAK,SAAS,SAAS;AAAW,eAAOA,KAAE,cAAY,OAAOA,KAAEA,GAAED,EAAC,IAAEA,GAAEC,OAAID,GAAE,QAAMA,GAAE;AAAA,MAAK,GAAE,eAAeA,IAAE;AAAC,eAAO,EAAE,CAAC,GAAEA,EAAC,EAAE,IAAK,CAACA,IAAEE,OAAI;AAAC,sBAAU,OAAOF,MAAG,YAAU,OAAOA,OAAIA,KAAE,EAAC,OAAMA,GAAC;AAAG,cAAIG,KAAE,KAAK,SAAS,eAAeH,EAAC;AAAE,iBAAOG,KAAE,YAAU,OAAOA,KAAE,EAAEA,EAAC,IAAEA,IAAE,KAAK,SAAS,UAAU,aAAa,MAAM,MAAK,CAAC,EAAE,EAAE,CAAC,GAAEH,EAAC,GAAE,CAAC,GAAE,EAAC,aAAYG,GAAC,CAAC,GAAE,IAAI,CAAC;AAAA,QAAC,CAAE,EAAE,KAAK,EAAE;AAAA,MAAC,EAAC;AAAE,YAAM,IAAE;AAAkB,UAAI,GAAE,IAAE,EAAC,OAAM,SAAQ,QAAO,2BAA0B,SAAQ,oBAAmB,WAAU,kBAAiB,YAAW,cAAa,GAAE,IAAE,EAAC,SAAQ,CAACH,IAAEC,OAAI,gBAAgBA,GAAE,WAAW,aAAaA,GAAE,OAAK,GAAGA,GAAE,WAAWA,GAAE,OAAK,YAAU,MAAMD,GAAE;AAAA,sBAAmCC,GAAE,WAAS,aAAW;AAAA,sBAA2BA,GAAE,WAAS,aAAW;AAAA,sBAA2BA,GAAE,WAAS,aAAW;AAAA,sBAA2B,aAAWA,GAAE,OAAK,uBAAqB;AAAA;AAAA,oBAA6D,CAACA,GAAE,YAAUA,GAAE,YAAU,oBAAkB,qCAAqCA,GAAE,eAAa,gCAAgCA,GAAE,eAAa;AAAA,yBAA+BA,GAAE,WAAW;AAAA;AAAA;AAAA,kCAAqH,SAAOA,GAAE;AAAA;AAAA,kBAA0D,IAAID,IAAEC,IAAE;AAAC,YAAIC,KAAED,GAAE;AAAS,eAAM,eAAeD,GAAE,SAAOA,GAAE;AAAA;AAAA;AAAA,gCAA8HE,GAAE,KAAK,gBAAc,IAAE;AAAA,6BAAmCA,GAAE,WAAW,OAAOF,GAAE,SAAO;AAAA,sBAA4B,KAAK,cAAcA,EAAC;AAAA,iCAAsCE,GAAE,WAAW;AAAA;AAAA,+BAAqGA,GAAE,WAAW,YAAYF,GAAEE,GAAE,gBAAcF,GAAE;AAAA;AAAA;AAAA,MAAkD,GAAE,SAASA,IAAE;AAAC,YAAIC,KAAED,GAAE,UAASE,KAAE,YAAUD,GAAE,UAASE,KAAE,GAAGH,GAAE,WAAW;AAAW,eAAM,eAAeE,KAAE,KAAGC,MAAKF,GAAE;AAAA,6EAAqID,GAAE,WAAW;AAAA;AAAA,MAAiD,GAAE,gBAAgBA,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAE,KAAK,MAAM,SAAS;AAAY,eAAM;AAAA,cAAiBD,GAAE,UAAU,eAAe,KAAK,MAAKC,EAAC;AAAA,cAAkBF;AAAA,cAAkBC,GAAE,UAAU,eAAe,KAAK,MAAKC,EAAC;AAAA;AAAA,MAAa,GAAE,aAAaF,IAAE;AAAC,eAAM,QAAQ,KAAK,cAAcA,EAAC;AAAA,6BAAiC,KAAK,SAAS,WAAW,gBAAgBA,GAAE,QAAMA,GAAE,QAAM;AAAA;AAAA,oCAA4EA,GAAE,eAAaA,GAAE;AAAA,MAAa,GAAE,eAAeA,IAAE;AAAC,eAAM,4DAA4D,KAAK,SAAS,WAAW;AAAA,MAA2B,GAAE,eAAeA,IAAE;AAAC,YAAIC,KAAED,GAAE,SAAO,KAAK,SAAS,SAAS;AAAS,eAAOC,KAAE,IAAE,4DAA4D,KAAK,SAAS,WAAW;AAAA,kBAAqCA;AAAA,yBAA2D;AAAA,MAAE,GAAE,qBAAoB,KAAI;AAAE,UAAI,IAAE,EAAC,gBAAe;AAAC,aAAK,iBAAiB,QAAS,CAAAD,OAAG;AAAC,eAAK,GAAGA,IAAE,KAAK,SAAS,UAAUA,GAAE;AAAA,QAAC,CAAE;AAAA,MAAC,GAAE,UAAS;AAAC,YAAIA,KAAE,EAAE,UAAU,SAAO,KAAG,WAAS,UAAU,OAAK,UAAU;AAAG,YAAIC,IAAEC,KAAE,KAAK,OAAO,WAAUC,KAAEH,KAAE,qBAAmB;AAAsB,YAAG,CAAC,KAAK,MAAM,cAAY,CAACA,IAAE;AAAC,mBAAQI,MAAK,KAAK,MAAM,aAAWJ,IAAEA,MAAG,CAAC,KAAK,UAAU,SAAO,KAAK,OAAO,WAAW,KAAK,IAAI,GAAE,KAAK,SAAS,kBAAgB,OAAO,KAAK,IAAI,aAAa,EAAE,GAAG,wBAAuB,KAAK,cAAc,KAAK,IAAI,CAAC,IAAGC,KAAE,KAAK,UAAU,OAAK,KAAK,UAAU,QAAM,EAAC,OAAM,CAAC,SAAQC,GAAE,YAAY,KAAK,IAAI,CAAC,GAAE,SAAQ,CAAC,SAAQA,GAAE,UAAU,KAAK,IAAI,CAAC,GAAE,OAAM,CAAC,SAAQA,GAAE,aAAa,KAAK,IAAI,CAAC,GAAE,UAAS,CAAC,SAAQA,GAAE,mBAAmB,KAAK,IAAI,CAAC,GAAE,OAAM,CAAC,SAAQA,GAAE,QAAQ,KAAK,IAAI,CAAC,GAAE,MAAK,CAAC,SAAQA,GAAE,OAAO,KAAK,IAAI,CAAC,GAAE,kBAAiB,CAAC,SAAQA,GAAE,mBAAmB,KAAK,IAAI,CAAC,GAAE,gBAAe,CAAC,SAAQA,GAAE,iBAAiB,KAAK,IAAI,CAAC,EAAC;AAAE,iBAAK,IAAID,GAAEG,IAAG,IAAID,IAAGC,IAAEH,GAAEG,IAAG,EAAE;AAAE,wBAAc,KAAK,UAAU,KAAK,kCAAkC,GAAE,KAAK,UAAU,KAAK,qCAAmC,YAAYF,GAAE,0BAA0B,KAAK,IAAI,GAAE,GAAG;AAAE,cAAIG,KAAE,KAAK,UAAU,KAAK,yBAAuB,IAAI,iBAAiBH,GAAE,iBAAiB,KAAK,IAAI,CAAC;AAAE,UAAAG,GAAE,WAAW,GAAE,SAAO,KAAK,SAAS,QAAMA,GAAE,QAAQ,KAAK,IAAI,OAAM,EAAC,WAAU,KAAE,CAAC;AAAA,QAAC;AAAA,MAAC,GAAE,WAAWL,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK,OAAO,WAAUC,KAAEH,KAAE,wBAAsB;AAAmB,YAAGA,MAAG,CAAC,KAAK,UAAU;AAAO,eAAIC,OAAK,KAAK,UAAU,SAAO,KAAK,aAAW,KAAK,UAAU,UAAQ,CAAC,EAAC,MAAK,KAAK,OAAK,YAAU,SAAQ,QAAO,KAAK,IAAI,OAAM,IAAGC,GAAE,KAAK,OAAK,cAAY,WAAW,KAAK,IAAI,EAAC,GAAE,EAAC,MAAK,WAAU,QAAO,QAAO,IAAGA,GAAE,gBAAgB,KAAK,IAAI,EAAC,GAAE,EAAC,MAAK,QAAO,QAAO,KAAK,IAAI,OAAM,IAAGA,GAAE,YAAY,KAAK,IAAI,EAAC,CAAC,GAAE,KAAK,UAAU;AAAQ,YAAAD,GAAE,OAAOE,IAAGF,GAAE,MAAKA,GAAE,EAAE;AAAA,MAAC,GAAE,eAAc;AAAC,aAAK,OAAO,WAAW,KAAK,MAAK,IAAE;AAAA,MAAC,GAAE,WAAU,EAAC,YAAYD,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAEF,GAAE,SAAO,KAAK,KAAKA,GAAE,OAAO,WAAW,IAAE,IAAGG,KAAE,KAAK,QAAQ,KAAKF,GAAE,cAAaG,KAAEJ,GAAE,MAAKK,KAAEJ,GAAE,SAAS,WAAS,GAAEK,KAAE,EAAC,eAAcN,GAAE,cAAa,GAAEO,KAAE,KAAK,MAAM,QAAQ,iBAAeF,MAAG,CAACJ,GAAE,SAAS,gBAAeO,KAAE,KAAK,MAAM,QAAQ,UAAQH,IAAEI,KAAET,GAAE,iBAAe,EAAE,KAAK,MAAKA,GAAE,aAAa,KAAG,KAAK,IAAI,MAAM,SAASA,GAAE,aAAa;AAAE,YAAG,UAAQI,IAAE;AAAC,cAAGJ,GAAE,kBAAgB,KAAK,IAAI;AAAM,mBAAO,KAAK,SAAS,KAAK,GAAE,KAAK,KAAK,IAAI,MAAM,MAAM;AAAE,eAAK,WAAW,GAAEC,GAAE,qBAAmB,KAAK,mBAAmB;AAAA,QAAC;AAAC,YAAG,CAACM,MAAG,CAACC;AAAE,cAAG,KAAK,MAAM,WAAS,WAASJ,MAAG,CAAC,IAAI,QAAK,KAAK,iBAAiB,KAAK,MAAM,QAAQ,GAAE,SAAOH,GAAE,MAAK;AAAC,gBAAG,WAASG;AAAE,qBAAO,KAAK,QAAQ,SAAQE,EAAC,GAAE,MAAK,MAAIL,GAAE,SAAS,WAASA,GAAE,aAAW,KAAK,SAAS,KAAK,KAAK,MAAM,SAAO,KAAG,MAAM;AAAG,sBAAQG,OAAI,KAAK,QAAQ,QAAOE,EAAC,GAAE,KAAK,QAAQ,KAAE,GAAE,YAAUL,GAAE,SAAOQ,OAAI,KAAK,WAAW,GAAEP,KAAE,KAAIC,OAAID,OAAIA,KAAE,MAAKA,MAAG,CAAC,KAAK,MAAM,QAAQ,gBAAcD,GAAE,gBAAc,KAAK,QAAQC,IAAE,IAAE,IAAG,KAAK,IAAI,MAAM,gBAAgB,OAAO,GAAE,KAAK,SAAS,KAAK;AAAA,UAAC;AAAK,uBAASE,KAAE,KAAK,QAAQ,SAAQE,EAAC,IAAE,UAAQN,GAAE,SAAO,KAAK,QAAQ,QAAOM,EAAC,GAAE,KAAK,QAAQ,KAAE,GAAE,KAAK,SAAS,KAAK,GAAE,KAAK,MAAM,SAAS,UAAQ,QAAO,KAAK,kBAAkB;AAAA,MAAE,GAAE,mBAAmBN,IAAE;AAAC,aAAK,MAAM,YAAU;AAAA,MAAE,GAAE,iBAAiBA,IAAE;AAAC,aAAK,MAAM,YAAU;AAAA,MAAE,GAAE,gBAAgBA,IAAE;AAAC,YAAIC,IAAEC,KAAE,SAAS;AAAc,YAAG,EAAE,KAAK,MAAKA,EAAC,KAAG,KAAK,IAAI,MAAM,SAAS,SAAS,aAAa;AAAE,kBAAOD,KAAEC,GAAE,oBAAmBF,GAAE,KAAI;AAAA,YAAC,KAAI;AAAY,mBAAK,SAAS,aAAW,KAAK,WAAWE,EAAC,IAAGD,MAAG,KAAK,IAAI,OAAO,MAAM;AAAG;AAAA,YAAM,KAAI;AAAQ,yBAAW,KAAK,QAAQ,KAAK,IAAI,GAAE,GAAEC,EAAC;AAAA,UAAC;AAAA,MAAC,GAAE,UAAUF,IAAE;AAAC,YAAIC,KAAE,KAAK;AAAS,YAAG,CAAC,KAAK,MAAM,aAAWA,GAAE,WAAU;AAAC,sBAAUA,GAAE,QAAMA,GAAE,oBAAkB,KAAK,MAAM,UAAQ,SAAOD,GAAE,OAAKA,GAAE,eAAe;AAAE,cAAIE,KAAE,KAAK,KAAKF,GAAE,OAAO,WAAW;AAAE,cAAG,KAAK,QAAQ,WAAU,EAAC,OAAMA,GAAC,CAAC,GAAE,SAAOC,GAAE,MAAK;AAAC,oBAAOD,GAAE,KAAI;AAAA,cAAC,KAAI;AAAA,cAAO,KAAI;AAAY,qBAAK,MAAM,QAAQ,YAAU;AAAG;AAAA,cAAM,KAAI;AAAA,cAAS,KAAI;AAAY,oBAAG,KAAK,MAAM;AAAQ;AAAO,oBAAIG,KAAE,SAAS,aAAa,GAAEC,KAAE,YAAUJ,GAAE,OAAKG,GAAE,iBAAeA,GAAE,WAAW,UAAQ,IAAGE,KAAEF,GAAE,WAAW,iBAAgBI,KAAE,KAAGJ,GAAE,WAAW,YAAU,CAACA,GAAE,gBAAcE,MAAG,KAAGA,GAAE,YAAUF,GAAE,WAAW;AAAgB,kBAAE,KAAK,IAAI,MAAM,SAAS;AAAE,oBAAIM,IAAEC,IAAEC,IAAEC,KAAE,KAAK,WAAW;AAAE,oBAAG,UAAQX,GAAE,aAAWM;AAAE,yBAAOE,KAAE,KAAGN,GAAE,WAAW,WAAS,OAAKA,GAAE,WAAW,wBAAuB,WAAW,KAAK,QAAQ,KAAK,IAAI,GAAE,GAAEM,EAAC,GAAE,KAAKT,GAAE,eAAe;AAAE,oBAAG,EAAE,KAAGO,cAAa;AAAQ,yBAAOI,KAAE,EAAEJ,EAAC,GAAEA,GAAE,aAAa,UAAU,KAAGA,GAAE,OAAO,GAAE,KAAK,IAAI,MAAM,MAAM,GAAE,KAAK,WAAY,MAAI;AAAC,yBAAK,oBAAoBI,EAAC,GAAE,KAAK,IAAI,MAAM,MAAM;AAAA,kBAAC,CAAE;AAAE,oBAAG,QAAMR,GAAE,WAAW;AAAS;AAAO,qBAAIC,MAAGG,OAAI,KAAGJ,GAAE,WAAW,WAASO,KAAE,KAAGP,GAAE,eAAaC,KAAEQ,GAAE,KAAG,OAAKA,GAAE,KAAK,IAAIA,GAAE,QAAOT,GAAE,YAAY,IAAE,KAAGC,KAAEM,KAAEP,GAAE,WAAW,qBAAmBI,cAAa,YAAUG,KAAEH,KAAG,KAAGJ,GAAE,WAAW,YAAU,CAACA,GAAE,WAAW,aAAWA,GAAE,WAAW,0BAAwBH,GAAE,eAAe,IAAGO,MAAGH,OAAI,CAACH,GAAE;AAAU,yBAAO,KAAKD,GAAE,eAAe;AAAE,oBAAG,WAASG,GAAE,QAAM,CAACA,GAAE,gBAAcA,GAAE,cAAY,KAAK,IAAI,SAAO,YAAUH,GAAE;AAAI,yBAAO,KAAKA,GAAE,eAAe;AAAE,oBAAG,WAASG,GAAE,QAAMO,MAAGA,GAAE,aAAa,UAAU;AAAE,yBAAO,KAAK,KAAK,oBAAoB,EAAEA,EAAC,CAAC;AAAE,6BAAa,CAAC,GAAE,IAAE,WAAY,MAAI;AAAC,sBAAIV,KAAE,SAAS,aAAa;AAAE,oBAAE,KAAK,IAAI,MAAM,SAAS,GAAE,CAACI,MAAGJ,GAAE,WAAW,iBAAgB,KAAK,QAAM,CAAC,EAAE,IAAI,KAAKY,IAAG,CAACZ,IAAEC,OAAI;AAAC,wBAAIC,KAAE,EAAEF,EAAC;AAAE,wBAAGA,GAAE,cAAYE,GAAE;AAAS,6BAAOA;AAAE,yBAAK,QAAQ,UAAS,EAAC,KAAIF,IAAE,OAAMC,IAAE,MAAKC,GAAC,CAAC;AAAA,kBAAC,CAAE,EAAE,OAAQ,CAAAF,OAAGA,EAAE;AAAA,gBAAC,GAAG,EAAE;AAAA,YAAC;AAAC,mBAAM;AAAA,UAAE;AAAC,kBAAOA,GAAE,KAAI;AAAA,YAAC,KAAI;AAAY,0BAAUC,GAAE,QAAMA,GAAE,oBAAkB,KAAK,MAAM,SAAO,KAAK,WAAW,IAAE,KAAK,MAAM,SAAS,WAAS,YAAUA,GAAE,SAAS,YAAU,MAAID,GAAE,OAAO,eAAa,QAAME,GAAE,WAAW,CAAC,MAAI,SAAKD,GAAE,YAAU,KAAK,WAAW,IAAE,UAAQA,GAAE,aAAW,WAAW,KAAK,QAAQ,KAAK,IAAI,GAAE,CAAC;AAAG;AAAA,YAAM,KAAI;AAAA,YAAM,KAAI;AAAS,kBAAG,KAAK,MAAM,SAAS;AAAQ;AAAO,cAAAD,GAAE,OAAO,KAAK;AAAE;AAAA,YAAM,KAAI;AAAA,YAAO,KAAI;AAAY,mBAAK,MAAM,SAAS,WAAS,KAAK,SAAS,KAAK;AAAE;AAAA,YAAM,KAAI,cAAa;AAAC,kBAAIA,KAAE,KAAK,MAAM,mBAAiB,KAAK,MAAM;AAAW,kBAAGA,MAAGC,GAAE,aAAa;AAAS,uBAAO,KAAK,KAAK,QAAQ,CAACD,EAAC,GAAE,IAAE;AAAE;AAAA,YAAK;AAAA,YAAC,KAAI,OAAM;AAAC,kBAAIG,KAAE,YAAUF,GAAE;AAAK,kBAAG,CAACC,MAAGC;AAAE,uBAAM;AAAG,cAAAH,GAAE,eAAe;AAAA,YAAC;AAAA,YAAC,KAAI;AAAQ,kBAAG,KAAK,MAAM,SAAS,WAAS,YAAUC,GAAE,SAAS;AAAS;AAAO,cAAAD,GAAE,eAAe,GAAE,WAAY,MAAI;AAAC,qBAAK,MAAM,SAAS,WAAS,KAAK,MAAM,QAAQ,gBAAc,KAAK,QAAQE,IAAE,IAAE;AAAA,cAAC,CAAE;AAAA,UAAC;AAAA,QAAC;AAAA,MAAC,GAAE,QAAQF,IAAE;AAAC,aAAK,WAAW;AAAE,YAAIC,KAAE,KAAK;AAAS,YAAG,SAAOA,GAAE;AAAK,iBAAO,KAAK,OAAO,UAAU,eAAe,KAAK,MAAKD,EAAC;AAAE,YAAIE,KAAE,KAAK,MAAM,UAAU,KAAK,IAAI,GAAEC,KAAED,GAAE,UAAQD,GAAE,SAAS,SAAQG,KAAE,EAAC,OAAMF,IAAE,UAAS,KAAK,IAAI,MAAK,GAAEG,KAAE,KAAK,YAAY,EAAC,OAAMH,GAAC,CAAC;AAAE,oBAAUD,GAAE,QAAM,KAAK,sBAAsBI,EAAC,GAAED,GAAE,UAAQC,IAAE,KAAK,MAAM,aAAWH,OAAI,KAAK,MAAM,IAAI,KAAK,MAAKA,IAAE,KAAE,GAAE,MAAIA,GAAE,OAAOD,GAAE,UAAU,IAAE,KAAK,QAAQC,EAAC,KAAG,KAAK,MAAM,IAAI,KAAK,IAAI,IAAED,GAAE,SAAS,WAAS,KAAG,KAAK,SAASE,KAAE,SAAO,QAAQD,EAAC,GAAE,KAAK,QAAQ,SAAQE,EAAC;AAAA,MAAE,GAAE,eAAeJ,IAAE;AAAC,YAAIC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,IAAEC,KAAE,KAAK,UAASC,KAAE,KAAK,MAAM,QAAOE,KAAE,KAAK,WAAW,GAAEC,KAAE,SAAS,uBAAuB,GAAEE,KAAE,OAAO,aAAa,EAAE,WAAW,CAAC,GAAEC,KAAE,CAAC,EAAE,IAAI,KAAKJ,IAAG,CAAAZ,OAAG,EAAEA,EAAC,EAAE,KAAM;AAAE,YAAG,2BAAyBA,GAAE,aAAW,EAAE,KAAG,KAAK,OAAO,UAAU,UAAU,KAAK,MAAK,EAAC,QAAOA,GAAE,QAAO,KAAI,YAAW,CAAC,GAAE,KAAK,MAAM,MAAM,EAAE,QAAS,CAAAA,OAAG;AAAC,UAAAA,GAAE,YAAU,CAACgB,GAAE,SAAShB,GAAE,KAAK,KAAGa,GAAE,YAAY,KAAK,cAAcb,EAAC,CAAC;AAAA,QAAC,CAAE,GAAEa,GAAE,WAAW,WAASE,GAAE,WAAWF,EAAC,GAAE,KAAK,mBAAmB,OAAGA,GAAE,SAAS,IAAGD,GAAE,UAAQF;AAAE,iBAAO,KAAK,QAAM,CAAC,EAAE,IAAI,KAAK,KAAK,WAAW,GAAG,CAAAV,OAAG,EAAEA,EAAC,CAAE,GAAE,KAAK,KAAK,OAAO,EAAC,oBAAmB,KAAE,CAAC;AAAE,YAAG,KAAK,WAAW;AAAE,iBAAM;AAAG,YAAG,OAAO,iBAAeM,KAAE,OAAO,aAAa,GAAG,aAAW,KAAG,KAAGA,GAAE,WAAW,UAAS;AAAC,eAAIS,KAAET,GAAE,WAAW,CAAC,EAAE,WAAW,GAAG,SAAS,IAAE,GAAES,GAAE,SAAST,GAAE,WAAU,CAAC,GAAEH,MAAGF,KAAEc,GAAE,SAAS,EAAE,MAAM,GAAEA,GAAE,SAAS,GAAG,MAAMN,GAAE,OAAO,EAAE,SAAO,IAAGP,KAAED,GAAE,MAAMQ,GAAE,OAAO,OAAKL,KAAEH,GAAE,MAAMA,GAAE,YAAYC,GAAEA,GAAE,SAAO,EAAE,CAAC,IAAGE,IAAE;AAAC,gBAAG,KAAK,MAAM,QAAQ,YAAU,OAAG,KAAK,MAAM,MAAI,EAAC,QAAOA,GAAE,MAAMK,GAAE,OAAO,EAAE,IAAG,OAAML,GAAE,QAAQK,GAAE,SAAQ,EAAE,EAAC,GAAE,KAAK,MAAM,IAAI,aAAWH,GAAE,aAAW,KAAK,MAAM,IAAI,MAAM,QAAOE,KAAE,KAAK,MAAM,IAAI,MAAM,MAAMC,GAAE,UAAU;AAAE,qBAAO,KAAK,MAAM,IAAI,QAAM,KAAK,MAAM,IAAI,MAAM,QAAQA,GAAE,YAAW,EAAE,GAAE,KAAK,MAAM,IAAI,aAAWD,GAAE,IAAG,KAAK,QAAQ,KAAK,MAAM,IAAI,OAAMC,GAAE,SAAS,aAAa,GAAE,KAAK,KAAK,SAAS,KAAK;AAAE,YAAAJ,KAAE,KAAK,MAAM,IAAI,MAAM,UAAQI,GAAE,SAAS;AAAQ,gBAAG;AAAC,cAAAF,MAAGA,KAAE,KAAK,MAAM,YAAY,KAAK,MAAM,IAAI,aAAa,UAAQ,KAAK,MAAM,IAAI,UAAQA,GAAE,MAAM,MAAI,KAAK,MAAM,IAAI,MAAM,IAAG,KAAK,MAAM,YAAY,KAAK,MAAM,IAAI,eAAa,CAAC,KAAK,MAAM,IAAI,SAAO,OAAO,KAAK,MAAM,YAAY,KAAK,MAAM,IAAI;AAAA,YAAW,SAAOP,IAAN;AAAA,YAAS;AAAC,aAACO,MAAGJ,KAAE,KAAK,MAAM,QAAQ,yBAAuBE,KAAE;AAAA,UAAG;AAAM,iBAAK,MAAM,cAAY,CAAC;AAAE,eAAK,MAAM,QAAQ,sBAAoBF;AAAA,QAAC;AAAC,mBAAY,MAAI;AAAC,eAAK,OAAO,EAAC,oBAAmB,KAAE,CAAC,GAAE,KAAK,QAAQ,SAAQ,EAAE,CAAC,GAAE,KAAK,MAAM,KAAI,EAAC,aAAY,KAAK,IAAI,MAAM,YAAW,CAAC,CAAC,GAAE,KAAK,MAAM,OAAK,KAAK,SAASE,KAAE,SAAO,QAAQ,KAAK,MAAM,IAAI,KAAK;AAAA,QAAC,GAAG,EAAE;AAAA,MAAC,GAAE,UAAUL,IAAE;AAAC,YAAIC,KAAE;AAAK,mBAAY,WAAU;AAAC,UAAAA,GAAE,OAAO,UAAU,QAAQ,KAAKA,IAAED,EAAC;AAAA,QAAC,CAAE;AAAA,MAAC,GAAE,4BAA2B;AAAC,aAAK,IAAI,cAAc,cAAY,KAAK,QAAQ,GAAE,KAAK,IAAI,cAAc,SAAO,KAAK,IAAI,cAAc,eAAa,KAAK,mBAAmB;AAAA,MAAC,GAAE,aAAaA,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAEF,GAAE,OAAO,QAAQ,MAAIC,GAAE,WAAW,GAAG,GAAEE,KAAE,CAAC,IAAI,SAAK,KAAK,MAAM;AAAS,YAAGH,GAAE,UAAQ,KAAK,IAAI,OAAM;AAAC,cAAG,CAACA,GAAE,OAAO,UAAU,SAASC,GAAE,WAAW,IAAI;AAAE,mBAAOC,MAAG,KAAK,QAAQ,SAAQ,EAAC,KAAIA,IAAE,OAAM,KAAK,aAAaA,EAAC,GAAE,MAAK,EAAEA,EAAC,GAAE,OAAMF,GAAC,CAAC,GAAE,MAAK,MAAIC,GAAE,YAAU,MAAIA,GAAE,SAAS,UAAQ,KAAK,OAAO,UAAU,mBAAmB,KAAK,MAAKD,EAAC,MAAI,MAAKA,GAAE,UAAQ,KAAK,IAAI,UAAQ,SAAOC,GAAE,QAAM,KAAK,yBAAyB,GAAEE,KAAE,OAAK,KAAK,MAAM,SAAS,UAAQ,KAAK,SAAS,KAAK,IAAE,MAAIF,GAAE,SAAS,WAAS,SAAOA,GAAE,QAAM,KAAK,SAAS,KAAK,KAAK,MAAM,SAAO,KAAG,MAAM,IAAE,YAAUA,GAAE,QAAM,MAAIA,GAAE,SAAS,WAAS,KAAK,MAAM,SAAS,WAAS,KAAK,SAAS,KAAK;AAAG,eAAK,WAAWD,GAAE,OAAO,UAAU;AAAA,QAAC;AAAM,eAAK,MAAM,YAAU,KAAK,IAAI,MAAM,MAAM;AAAA,MAAC,GAAE,QAAQA,IAAE;AAAC,QAAAA,GAAE,eAAe;AAAE,YAAIC,IAAEC,IAAEC,KAAE,KAAK;AAAS,YAAG,YAAUA,GAAE,QAAMA,GAAE,oBAAkB,CAACA,GAAE;AAAU,iBAAM;AAAG,QAAAA,GAAE,aAAWF,KAAED,GAAE,iBAAe,OAAO,eAAcE,KAAED,GAAE,QAAQ,MAAM,GAAEE,GAAE,MAAM,YAAYH,IAAE,EAAC,QAAO,MAAK,YAAWE,IAAE,eAAcD,GAAC,CAAC,EAAE,KAAM,CAAAA,OAAG;AAAC,qBAASA,OAAIA,KAAEC,KAAGD,OAAI,KAAK,cAAcA,IAAE,OAAO,aAAa,EAAE,WAAW,CAAC,CAAC,GAAE,SAAO,KAAK,SAAS,OAAK,KAAK,OAAO,UAAU,eAAe,KAAK,MAAKD,EAAC,IAAE,KAAK,SAAS,cAAY,KAAK,QAAQ,KAAK,MAAM,YAAUC,IAAE,IAAE,IAAE,KAAK,MAAM,YAAUA;AAAA,QAAE,CAAE,EAAE,MAAO,CAAAD,OAAGA,EAAE;AAAA,MAAE,GAAE,OAAOA,IAAE;AAAC,QAAAA,GAAE,eAAe;AAAA,MAAC,GAAE,eAAeA,IAAEC,IAAE;AAAC,YAAIC,KAAEF,GAAE,QAAQ,MAAI,KAAK,SAAS,WAAW,GAAG,GAAEG,KAAE,KAAK,aAAaD,EAAC,GAAEE,KAAE,EAAEF,EAAC,GAAEG,KAAE,KAAK,MAAM,UAAU,KAAK,MAAKL,EAAC,GAAEM,KAAE,EAAC,CAAC,KAAK,SAAS,cAAaD,IAAE,SAAQD,GAAE,QAAO,GAAEG,KAAE,KAAK,YAAYD,EAAC;AAAE,aAAK,sBAAsB,EAAEF,IAAEE,EAAC,CAAC,KAAG,SAAKN,GAAE,oBAAkBO,KAAE,OAAIL,GAAE,UAAU,OAAO,KAAK,SAAS,WAAW,YAAW,SAAKK,EAAC,GAAEH,GAAE,YAAUG,IAAEL,GAAE,QAAM,SAAKK,KAAEH,GAAE,SAAOA,GAAE,QAAMG,IAAEF,GAAE,UAAQ,KAAK,SAAS,SAAS,YAAU,KAAK,MAAM,YAAU,KAAK,MAAM,QAAQ,QAAMA,KAAG,KAAK,SAAS,KAAKA,EAAC,IAAG,KAAK,QAAQ,cAAa,EAAC,KAAIH,IAAE,OAAMC,IAAE,MAAK,EAAE,CAAC,GAAE,KAAK,MAAMA,KAAG,EAAC,UAASE,GAAC,CAAC,GAAE,OAAMJ,GAAC,CAAC;AAAA,MAAC,GAAE,eAAeD,IAAEC,IAAE;AAAC,YAAIC,MAAGD,GAAE,iBAAe,OAAO,eAAe,QAAQ,MAAM;AAAE,QAAAA,GAAE,eAAe;AAAE,YAAIE,KAAE,EAAED,EAAC;AAAE,aAAK,mBAAmB,OAAGC,EAAC;AAAA,MAAC,GAAE,eAAeH,IAAE;AAAC,aAAK,MAAM,UAAQ,EAAC,OAAMA,IAAE,OAAMA,GAAE,cAAc,mBAAmB,EAAC;AAAA,MAAC,GAAE,cAAcA,IAAE;AAAC,YAAG,KAAK,MAAM,YAAU,KAAK,iBAAiB,GAAE,KAAK,IAAI,MAAM,SAASA,EAAC,GAAE;AAAC,cAAIC,IAAEC,IAAEC,KAAE,KAAK,UAASC,KAAEJ,GAAE,QAAQ,MAAIG,GAAE,WAAW,GAAG,GAAEE,KAAE,KAAK,MAAM,UAAU,KAAK,MAAKL,EAAC,GAAEM,KAAE,EAAEF,EAAC,GAAEG,KAAED,GAAE,gBAAeE,KAAE,KAAK,sBAAsBF,EAAC,GAAEG,KAAE,KAAK,YAAY,EAAC,CAACN,GAAE,cAAaE,IAAE,SAAQC,GAAE,QAAO,CAAC;AAAE,cAAGD;AAAE,gBAAGG,IAAE;AAAC,kBAAGP,KAAE,KAAK,WAAW,GAAEC,KAAE,EAAE,CAAC,GAAEK,IAAE,EAAC,CAACJ,GAAE,cAAa,KAAK,KAAKE,EAAC,GAAE,WAAUI,GAAC,CAAC,GAAEN,GAAE,aAAa,KAAK,MAAKD,IAAEK,EAAC,GAAE,UAAME,MAAG,CAACR,MAAG,SAAKM,GAAE,cAAY,KAAK,YAAYL,EAAC,IAAG;AAAC,oBAAG,KAAK,QAAQ,WAAU,EAAC,MAAKA,IAAE,KAAIE,IAAE,SAAQK,GAAC,CAAC,GAAEN,GAAE,SAAS;AAAY;AAAO,gBAAAA,GAAE,kBAAgBD,GAAE,YAAUO,KAAEP,KAAEK;AAAA,cAAC;AAAM,gBAAAJ,GAAE,oBAAkB,OAAOD,GAAE,OAAM,OAAOA,GAAE,iBAAgB,OAAOA,GAAE;AAAO,mBAAK,cAAcE,IAAEF,EAAC;AAAA,YAAC;AAAM,mBAAK,cAAcE,IAAEG,EAAC;AAAA;AAAO,iBAAK,cAAcH,EAAC;AAAA,QAAC;AAAA,MAAC,GAAE,iBAAiBJ,IAAEC,IAAE;AAAC,YAAG,CAAC,KAAK,MAAM;AAAU,kBAAO,KAAK,QAAQ,gBAAe,EAAC,OAAMD,GAAC,CAAC,GAAEA,GAAE,KAAI;AAAA,YAAC,KAAI;AAAA,YAAM,KAAI;AAAS,cAAAC,GAAE,WAAW,aAAaA,GAAE,gBAAgB,gBAAeA,EAAC,GAAE,KAAK,MAAM,UAAQ;AAAA,YAAG,KAAI;AAAA,YAAQ,KAAI;AAAM,cAAAD,GAAE,eAAe,GAAEA,GAAE,OAAO,KAAK;AAAA,UAAC;AAAA,MAAC,GAAE,mBAAmBA,IAAE;AAAC,YAAIC,IAAEC,IAAEC,KAAEH,GAAE,OAAO,QAAQ,MAAI,KAAK,SAAS,WAAW,GAAG,GAAEI,KAAE,EAAED,EAAC,GAAEE,KAAE,KAAK;AAAS,QAAAF,MAAGE,GAAE,aAAW,UAAKD,GAAE,aAAWH,KAAEE,GAAE,UAAU,SAAS,KAAK,SAAS,WAAW,UAAU,GAAED,KAAEC,GAAE,aAAa,UAAU,GAAE,YAAUE,GAAE,QAAMA,GAAE,YAAUJ,MAAGC,MAAG,CAAC,KAAK,SAAS,YAAU,KAAK,QAAQC,EAAC,GAAE,KAAK,iBAAiB,IAAE,GAAE,KAAK,QAAQ,YAAW,EAAC,KAAIA,IAAE,OAAM,KAAK,aAAaA,EAAC,GAAE,MAAK,EAAEA,EAAC,EAAC,CAAC;AAAA,MAAE,GAAE,iBAAiBH,IAAE;AAAC,QAAAA,GAAE,QAAS,CAAAA,OAAG;AAAC,UAAAA,GAAE,WAAW,QAAS,CAAAA,OAAG;AAAC,gBAAG,qBAAmBA,GAAE;AAAU,cAAAA,GAAE,YAAY,SAAS,cAAc,IAAI,CAAC;AAAA,qBAAU,KAAGA,GAAE,YAAUA,GAAE,cAAc,KAAK,SAAS,WAAW,WAAW,GAAE;AAAC,kBAAIC,KAAE,SAAS,eAAe,EAAE;AAAE,mBAAGD,GAAE,WAAW,GAAG,YAAU,QAAMA,GAAE,gBAAgB,aAAWC,KAAE,SAAS,eAAe,IAAI,IAAGD,GAAE,YAAYC,IAAE,GAAG,CAAC,GAAGD,GAAE,UAAU,EAAE,MAAM,GAAE,EAAE,CAAC,GAAE,KAAK,oBAAoBC,EAAC;AAAA,YAAC,WAAS,EAAE,KAAK,MAAKD,EAAC,MAAI,KAAGA,GAAE,iBAAiB,YAAUA,GAAE,gBAAgB,eAAaA,GAAE,gBAAgB,OAAO,GAAEA,GAAE,mBAAiB,QAAMA,GAAE,gBAAgB,WAAU;AAAC,cAAAA,GAAE,gBAAgB,YAAY,UAAK;AAAE,kBAAIC,KAAED,GAAE,aAAYE,KAAE;AAAG,qBAAKD;AAAG,gBAAAC,MAAGD,GAAE,aAAYA,KAAEA,GAAE;AAAY,cAAAC,GAAE,KAAK,KAAG,KAAK,oBAAoBF,GAAE,eAAe;AAAA,YAAC;AAAA,UAAC,CAAE,GAAEA,GAAE,aAAa,QAAS,CAAAA,OAAG;AAAC,YAAAA,MAAG,QAAMA,GAAE,YAAU,EAAE,KAAK,MAAKC,EAAC,MAAI,KAAK,WAAWA,EAAC,GAAE,KAAK,yBAAyB;AAAA,UAAE,CAAE;AAAA,QAAC,CAAE;AAAE,YAAIA,KAAE,KAAK,IAAI,MAAM;AAAU,QAAAA,MAAG,MAAIA,GAAE,aAAWA,GAAE,OAAO,GAAEA,MAAG,QAAMA,GAAE,YAAU,KAAK,IAAI,MAAM,YAAY,SAAS,cAAc,IAAI,CAAC;AAAA,MAAC,EAAC,EAAC;AAAE,eAAS,EAAED,IAAEC,IAAE;AAAC,YAAG,CAACD,IAAE;AAAC,kBAAQ,KAAK,WAAU,2BAA0BA,EAAC;AAAE,gBAAMC,KAAE,IAAI,MAAM,MAAK,EAAC,KAAI,MAAI,MAAIA,GAAC,CAAC;AAAE,iBAAOA;AAAA,QAAC;AAAC,YAAGD,GAAE;AAAS,iBAAO,QAAQ,KAAK,YAAW,kEAAiEA,EAAC,GAAEA,GAAE;AAAS,YAAIE;AAAE,UAAE,MAAK,SAASF,IAAE;AAAC,cAAIC,KAAE,SAAS,eAAe,EAAE;AAAE,mBAASC,GAAEF,IAAEE,IAAEC,IAAE;AAAC,YAAAA,MAAGD,GAAE,MAAM,MAAM,EAAE,QAAS,CAAAA,OAAGD,GAAED,KAAE,iBAAiB,KAAKC,IAAEC,IAAEC,EAAC,CAAE;AAAA,UAAC;AAAC,iBAAM,EAAC,IAAIH,IAAEC,IAAE;AAAC,mBAAOC,GAAE,UAASF,IAAEC,EAAC,GAAE;AAAA,UAAI,GAAE,GAAGD,IAAEC,IAAE;AAAC,mBAAOA,MAAG,cAAY,OAAOA,MAAGC,GAAE,OAAMF,IAAEC,EAAC,GAAE;AAAA,UAAI,GAAE,QAAQC,IAAEC,IAAEC,IAAE;AAAC,gBAAIC;AAAE,gBAAGD,KAAEA,MAAG,EAAC,WAAU,KAAE,GAAEF;AAAE,kBAAGF,GAAE,SAAS;AAAe,4BAAUE,OAAIA,KAAE,cAAa,OAAOF,GAAE,IAAI,aAAa,EAAE,eAAeE,IAAE,CAACC,EAAC,CAAC;AAAA,mBAAM;AAAC,oBAAG;AAAC,sBAAIG,KAAE,YAAU,OAAOH,KAAEA,KAAE,EAAC,OAAMA,GAAC;AAAE,uBAAIG,KAAEF,GAAE,YAAU,EAAE,CAAC,GAAEE,EAAC,IAAEA,IAAG,SAAO,MAAKH,GAAE,UAAQG,GAAE,QAAM,KAAK,WAAWH,GAAE,KAAK,IAAGA,cAAa;AAAO,6BAAQI,MAAKJ;AAAE,sBAAAA,GAAEI,eAAa,gBAAcD,GAAEC,MAAGJ,GAAEI;AAAI,kBAAAF,KAAE,IAAI,YAAYH,IAAE,EAAC,QAAOI,GAAC,CAAC;AAAA,gBAAC,SAAON,IAAN;AAAS,0BAAQ,KAAKA,EAAC;AAAA,gBAAC;AAAC,gBAAAC,GAAE,cAAcI,EAAC;AAAA,cAAC;AAAA,UAAC,EAAC;AAAA,QAAC,EAAE,IAAI,CAAC,GAAE,KAAK,YAAU,iBAAiB,KAAK,UAAU,SAAS,KAAG,CAAC,aAAa,KAAK,UAAU,SAAS,GAAE,KAAK,OAAK,OAAO,SAAS,cAAaJ,KAAEA,MAAG,CAAC,GAAE,KAAK,oBAAkBC,KAAED,GAAE,IAAG,CAAAD,OAAG;AAAC,cAAIC,IAAEE,KAAE,MAAIH;AAAE,cAAG,KAAG,aAAa,QAAQ,IAAEE,KAAE,MAAK,CAAC;AAAE,gBAAG;AAAC,cAAAD,KAAE,KAAK,MAAM,aAAa,IAAEC,KAAEC,GAAE;AAAA,YAAC,SAAOH,IAAN;AAAA,YAAS;AAAC,iBAAOC;AAAA,QAAC,IAAG,KAAK,oBAAkB,CAAAD,OAAGA,MAAG,aAAa,QAAQ,IAAEA,KAAE,MAAK,CAAC,GAAE,CAACC,IAAEC,OAAI;AAAC,cAAIC,KAAE,MAAID,IAAEE,KAAE,KAAK,UAAUH,EAAC;AAAE,UAAAA,MAAGC,OAAI,aAAa,QAAQ,IAAEF,KAAEG,IAAEC,EAAC,GAAE,cAAc,IAAI,MAAM,SAAS,CAAC;AAAA,QAAE,KAAG,MAAI;AAAA,QAAC,GAAGH,GAAE,EAAE,GAAE,KAAK,sBAAoB,CAAAD,OAAG,CAAAC,OAAG;AAAC,gBAAMC,KAAE,IAAE,MAAIF,KAAE;AAAI,cAAGC;AAAE,yBAAa,WAAWC,KAAED,EAAC;AAAA;AAAO,qBAAQD,MAAK;AAAa,cAAAA,GAAE,SAASE,EAAC,KAAG,aAAa,WAAWF,EAAC;AAAA,QAAC,GAAGC,GAAE,EAAE,GAAE,KAAK,cAAcD,IAAEC,EAAC,GAAE,KAAK,QAAM,EAAC,WAAU,IAAG,SAAQ,OAAG,WAAU,OAAG,SAAQ,CAAC,GAAE,SAAQ,CAAC,GAAE,UAAS,CAAC,GAAE,aAAY,CAAC,EAAC,GAAE,KAAK,QAAM,CAAC,GAAE,KAAK,YAAU,CAAC,GAAE,KAAK,MAAI,CAAC,GAAE,KAAK,MAAMD,EAAC,GAAE,EAAE,KAAK,IAAI,GAAE,KAAK,WAAW,GAAE,KAAK,mBAAmB,GAAE,KAAK,OAAO,cAAc,KAAK,IAAI,GAAE,KAAK,OAAO,QAAQ,KAAK,IAAI,GAAEA,GAAE,aAAW,KAAK,IAAI,MAAM,MAAM,GAAEA,GAAE,WAAS;AAAA,MAAI;AAAC,aAAO,EAAE,YAAU,EAAC,WAAU,GAAE,SAAQ,EAAC,SAAQ,GAAE,sBAAqB,GAAE,MAAK,GAAE,UAAS,GAAE,WAAU,GAAE,YAAW,GAAE,QAAO,GAAE,mBAAkB,GAAE,QAAO,GAAE,WAAU,EAAC,GAAE,kBAAiB,CAAC,UAAS,OAAM,UAAS,WAAU,SAAQ,SAAQ,WAAU,SAAQ,QAAO,cAAa,qBAAoB,gBAAe,cAAa,gBAAe,iBAAgB,iBAAgB,mBAAkB,oBAAmB,oBAAmB,iBAAiB,GAAE,WAAU,CAAC,aAAY,aAAY,kBAAiB,kBAAiB,SAAS,GAAE,KAAKA,IAAE;AAAC,eAAO,KAAK,SAAS,QAAMA,MAAG,YAAU,OAAOA,KAAEA,GAAE,KAAK,IAAEA;AAAA,MAAC,GAAE,WAAU,GAAE,WAAU,GAAE,cAAcA,IAAEC,IAAE;AAAC,eAAO,GAAGD,KAAE,KAAK,SAAS,UAAUA,OAAIA,IAAG,MAAM,MAAKC,EAAC,CAAC;AAAA,MAAC,GAAE,IAAI,UAAUD,IAAE;AAAC,cAAMC,KAAED,MAAG,MAAM,QAAQA,EAAC;AAAE,aAAK,SAAS,YAAUC,KAAED,KAAE,CAAC,GAAE,KAAK,iBAAiBC,KAAED,KAAE,CAAC,GAAE,WAAW;AAAA,MAAC,GAAE,IAAI,YAAW;AAAC,eAAO,KAAK,SAAS;AAAA,MAAS,GAAE,uBAAuBA,IAAE;AAAC,iBAAQC,MAAKD,IAAE;AAAC,cAAIE,KAAED;AAAE,iBAAO,eAAeD,IAAEE,KAAE,YAAW,EAAC,MAAK;AAAC,mBAAM,MAAI,KAAKA,IAAG,MAAM,GAAG,EAAE;AAAA,UAAE,EAAC,CAAC;AAAA,QAAC;AAAA,MAAC,GAAE,cAAcF,IAAEE,IAAE;AAAC,UAAE,YAAU,KAAK;AAAU,YAAIC,KAAE,EAAE,CAAC,GAAE,GAAE,SAAOD,GAAE,OAAK,EAAC,UAAS,EAAC,UAAS,OAAM,EAAC,IAAE,CAAC,CAAC,GAAEE,KAAE,KAAK,WAAS,EAAE,CAAC,GAAED,IAAED,EAAC;AAAE,YAAGE,GAAE,WAASJ,GAAE,aAAa,UAAU,GAAEI,GAAE,WAASA,GAAE,YAAUJ,GAAE,aAAa,UAAU,GAAEI,GAAE,cAAY,EAAEJ,GAAE,aAAa,aAAa,KAAGI,GAAE,eAAa,EAAE,GAAEA,GAAE,WAASJ,GAAE,aAAa,UAAU,GAAE,KAAK,uBAAuBI,GAAE,UAAU,GAAE,WAASA,GAAE,SAAS,wBAAsBA,GAAE,SAAS,sBAAoBA,GAAE,aAAY,KAAK,SAAOA,GAAE,eAAa,QAAI,CAAC,aAAY,WAAW,EAAE,QAAS,CAAAH,OAAG;AAAC,cAAIC,KAAEF,GAAE,aAAa,UAAQC,EAAC;AAAE,UAAAC,OAAIA,KAAEA,GAAE,MAAME,GAAE,UAAU,cAAa,UAAQA,GAAEH,MAAGC;AAAA,QAAE,CAAE,GAAE,kBAAiBA,MAAG,CAAC,EAAEA,GAAE,YAAY,MAAIE,GAAE,eAAa,EAAE,cAAaA,GAAE,aAAa,UAAQF,GAAE,eAAc,SAAOE,GAAE,SAAOA,GAAE,UAAQA,GAAE,WAAS,KAAIA,GAAE,aAAa,WAAS,MAAGA,GAAE,aAAWF,GAAE,cAAY,MAAKE,GAAE,eAAa,CAACA,GAAE,SAAS,WAAW,SAASA,GAAE,WAAW,KAAGA,GAAE,SAAS,WAAW,KAAKA,GAAE,WAAW,IAAGJ,GAAE;AAAQ,cAAG;AAAC,YAAAI,GAAE,UAAQ,IAAI,OAAOJ,GAAE,OAAO;AAAA,UAAC,SAAOA,IAAN;AAAA,UAAS;AAAC,YAAGI,GAAE,YAAW;AAAC,UAAAA,GAAE,cAAYA,GAAE;AAAW,cAAG;AAAC,YAAAA,GAAE,aAAW,IAAI,OAAO,KAAK,SAAS,YAAW,GAAG;AAAA,UAAC,SAAOJ,IAAN;AAAA,UAAS;AAAA,QAAC;AAAC,QAAAI,GAAE,aAAWA,GAAE,YAAU,QAAI,KAAK,QAAM,EAAE,EAAE,CAAC,GAAE,CAAC,GAAEA,GAAE,SAAO,CAAC,CAAC,IAAG,YAAUA,GAAE,QAAMF,GAAE,UAAU,YAAUE,GAAE,cAAYA,GAAE,SAAS,UAAQ,IAAGA,GAAE,SAAS,eAAaF,GAAE,UAAU,gBAAc,SAAS;AAAK,YAAIG,KAAE,KAAK,iBAAiB,WAAW;AAAE,cAAM,QAAQA,EAAC,MAAI,KAAK,YAAU,MAAM,QAAQD,GAAE,SAAS,IAAE,EAAEA,GAAE,WAAUC,EAAC,IAAEA;AAAA,MAAE,GAAE,cAAcL,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK,oBAAoBF,EAAC,GAAEG,KAAE;AAAG,aAAIF,MAAKC;AAAE,UAAAC,MAAG,MAAIF,MAAG,WAASD,GAAEC,MAAG,KAAKC,GAAED,SAAM;AAAI,eAAOE;AAAA,MAAC,GAAE,oBAAoBH,IAAE;AAAC,YAAG,CAAC,EAAEA,EAAC;AAAE,iBAAM;AAAG,YAAIC,IAAEC,KAAE,CAAC;AAAE,aAAID,MAAKD;AAAE,kBAAMC,GAAE,MAAM,GAAE,CAAC,KAAG,WAASA,MAAGD,GAAE,eAAeC,EAAC,KAAG,WAASD,GAAEC,QAAKC,GAAED,MAAG,EAAED,GAAEC,GAAE;AAAG,eAAOC;AAAA,MAAC,GAAE,oBAAmB;AAAC,YAAIF,KAAE,OAAO,aAAa,GAAEC,KAAE,EAAC,cAAaD,GAAE,cAAa,YAAWA,GAAE,YAAW,OAAMA,GAAE,cAAYA,GAAE,cAAYA,GAAE,WAAW,CAAC,EAAC;AAAE,eAAO,KAAK,MAAM,YAAUC,IAAEA;AAAA,MAAC,GAAE,aAAY;AAAC,YAAID,KAAE,iBAAiB,KAAK,IAAI,OAAM,IAAI;AAAE,YAAIC;AAAE,aAAK,UAAQ,EAAC,oBAAmB,CAAAD,OAAG;AAAC,cAAIC,KAAED,GAAE;AAAM,iBAAM,OAAKA,GAAE,OAAK,MAAIC,KAAEA;AAAA,QAAC,GAAG,SAASD,IAAE;AAAC,cAAG,CAACA;AAAE,mBAAM,CAAC;AAAE,cAAIC,MAAGD,KAAEA,GAAE,KAAK,EAAE,MAAM,GAAG,EAAE,IAAI,MAAM,MAAM,EAAE,OAAQ,CAAAA,OAAGA,EAAE,EAAE,IAAI,EAAE,KAAK;AAAE,iBAAM,EAAC,OAAM,CAACA,GAAE,MAAMC,EAAC,EAAE,OAAQ,CAAAD,OAAGA,EAAE,EAAE,GAAG,KAAK,GAAE,MAAKC,GAAC;AAAA,QAAC,GAAGA,KAAE,uBAAsBD,GAAE,iBAAiB,OAAKC,EAAC,EAAE,CAAC,EAAC;AAAA,MAAC,GAAE,MAAMD,IAAE;AAAC,YAAIC,KAAE,KAAK;AAAI,aAAK,SAAS,QAAQ,cAAYA,GAAE,gBAAc,MAAKA,GAAE,QAAMD,IAAEC,GAAE,QAAMD,OAAIC,GAAE,gBAAcD,IAAEC,GAAE,yBAAuBD,GAAE,UAASC,GAAE,QAAM,KAAK,cAAc,WAAU,CAACD,IAAE,KAAK,QAAQ,CAAC,GAAEC,GAAE,QAAMA,GAAE,MAAM,cAAc,KAAK,SAAS,WAAW,aAAa,GAAED,GAAE,WAAW,aAAaC,GAAE,OAAMD,EAAC,GAAEA,GAAE,WAAS;AAAA,MAAG,GAAE,UAAS;AAAC,aAAK,OAAO,aAAa,KAAK,IAAI,GAAE,KAAK,IAAI,MAAM,WAAW,YAAY,KAAK,IAAI,KAAK,GAAE,KAAK,IAAI,cAAc,WAAS,KAAK,IAAI,wBAAuB,OAAO,KAAK,IAAI,cAAc,UAAS,KAAK,SAAS,KAAK,IAAE,GAAE,aAAa,KAAK,+BAA+B,GAAE,cAAc,KAAK,UAAU,KAAK,kCAAkC;AAAA,MAAC,GAAE,mBAAmBA,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK;AAAS,YAAG,KAAK,MAAM,mBAAiB,MAAG,WAASF,IAAE;AAAC,gBAAMC,KAAE,KAAK,iBAAiB,OAAO;AAAE,UAAAD,KAAEC,MAAG,CAAC,KAAK,IAAI,cAAc,QAAMA,KAAEC,GAAE,QAAQ,aAAW,KAAK,IAAI,MAAM,cAAY,KAAK,IAAI,cAAc;AAAA,QAAK;AAAC,YAAG,KAAK,cAAc,GAAEF;AAAE,cAAG,SAAOE,GAAE;AAAK,iBAAK,aAAaF,EAAC,IAAGC,KAAE,KAAK,IAAI,MAAM,cAAY,QAAMA,GAAE,WAAS,KAAK,IAAI,MAAM,mBAAmB,aAAY,MAAM;AAAA,eAAM;AAAC,gBAAG;AAAC,mBAAK,MAAMD,EAAC,aAAY,UAAQA,KAAE,KAAK,MAAMA,EAAC;AAAA,YAAE,SAAOA,IAAN;AAAA,YAAS;AAAC,iBAAK,QAAQA,IAAE,IAAE,EAAE,QAAS,CAAAA,OAAGA,MAAGA,GAAE,UAAU,IAAIE,GAAE,WAAW,cAAc,CAAE;AAAA,UAAC;AAAA;AAAM,eAAK,WAAW;AAAE,aAAK,MAAM,4BAA0BA,GAAE,QAAQ,aAAW,KAAG,KAAK,IAAI,cAAc,OAAM,KAAK,MAAM,mBAAiB;AAAA,MAAE,GAAE,WAAWF,IAAE;AAAC,YAAIC,KAAE,CAAC;AAAE,iBAAQC,MAAKF;AAAE,oBAAQE,OAAID,GAAEC,MAAGF,GAAEE;AAAI,eAAOD;AAAA,MAAC,GAAE,QAAQD,IAAE;AAAC,eAAO,KAAK,MAAM,YAAUA,IAAE,KAAK,IAAI,MAAM,UAAUA,KAAE,QAAM,UAAU,KAAK,SAAS,WAAW,YAAY,GAAE;AAAA,MAAI,GAAE,WAAWA,IAAEC,IAAE;AAAC,eAAOD,MAAGA,GAAE,UAAUC,KAAE,QAAM,UAAU,KAAK,SAAS,WAAW,UAAU,GAAE;AAAA,MAAI,GAAE,YAAYD,IAAEC,IAAE;AAAC,oBAAU,OAAOD,MAAG,KAAK,IAAI,MAAM,UAAU,OAAOA,IAAEC,EAAC;AAAA,MAAC,GAAE,sBAAsBD,IAAE;AAAC,YAAIC,KAAE,SAAKD,MAAG,WAASA;AAAE,SAAC,KAAK,SAAS,YAAUA,MAAGA,OAAI,KAAK,MAAM,UAAQC,KAAE,OAAI,KAAK,YAAY,KAAK,SAAS,WAAW,YAAW,CAACA,EAAC,GAAE,KAAK,IAAI,MAAM,QAAMA,KAAE,KAAGD;AAAA,MAAC,GAAE,iBAAiBA,IAAE;AAAC,aAAK,YAAY,KAAK,SAAS,WAAW,OAAM,CAAC,CAACA,EAAC;AAAA,MAAC,GAAE,oBAAmB,WAAU;AAAC,YAAG,CAAC,KAAK,SAAS,QAAQ,YAAW;AAAC,cAAIA,KAAE,KAAK,IAAI,eAAcC,KAAE,KAAK,MAAM,8BAA4BD,GAAE,OAAME,KAAE,IAAI,YAAY,UAAS,EAAC,SAAQ,KAAE,CAAC;AAAE,UAAAD,OAAI,KAAK,MAAM,4BAA0BD,GAAE,OAAME,GAAE,YAAU,MAAGF,GAAE,iBAAeA,GAAE,cAAc,SAAS,KAAK,OAAO,CAAC,GAAEA,GAAE,cAAcE,EAAC,GAAE,KAAK,QAAQ,UAAS,KAAK,MAAM,yBAAyB,GAAEF,GAAE,QAAM,KAAK,MAAM;AAAA,QAA0B;AAAA,MAAC,GAAE,QAAO,GAAE,2BAA0B;AAAA,MAAC,GAAE,mBAAmBA,IAAEC,IAAE;AAAC,YAAGA,IAAE;AAAC,UAAAD,KAAE,YAAU,OAAOA,KAAEA,KAAE,CAAC,CAACA,IAAEC,KAAEA,GAAE,aAAWA;AAAE,cAAIC,KAAE,SAAS,aAAa;AAAE,cAAGA,GAAE,qBAAqB,WAAS,CAAC,KAAK,IAAI,MAAM,SAASA,GAAE,SAAS;AAAE,mBAAM;AAAG,cAAG;AAAC,YAAAA,GAAE,cAAY,KAAG,CAAC,SAAQ,KAAK,EAAE,QAAS,CAAAC,OAAGD,GAAE,WAAW,CAAC,EAAE,QAAMC,IAAGF,IAAED,MAAGC,GAAE,MAAM,CAAE;AAAA,UAAC,SAAOD,IAAN;AAAA,UAAS;AAAA,QAAC;AAAA,MAAC,GAAE,oBAAoBA,IAAE;AAAC,YAAGA,MAAGA,GAAE,YAAW;AAAC,cAAIC,KAAED,IAAEE,KAAE,OAAO,aAAa,GAAEC,KAAED,GAAE,WAAW,CAAC;AAAE,UAAAA,GAAE,eAAaC,GAAE,cAAcF,EAAC,GAAEE,GAAE,SAAS,IAAE,GAAED,GAAE,gBAAgB,GAAEA,GAAE,SAASC,EAAC;AAAA,QAAE;AAAA,MAAC,GAAE,eAAeH,IAAEC,IAAE;AAAC,YAAGA,KAAEA,MAAG,KAAK,SAAS,QAAQ,gBAAeD,MAAGA,GAAE,cAAYC;AAAE,iBAAOA,KAAE,YAAU,OAAOA,KAAE,SAAS,eAAeA,EAAC,IAAEA,IAAED,GAAE,WAAW,aAAaC,IAAED,GAAE,WAAW,GAAEC;AAAA,MAAC,GAAE,sBAAsBD,IAAE;AAAC,YAAIC,KAAED,GAAE;AAAe,iBAAQE,MAAKD;AAAE,cAAG,CAAC,KAAK,UAAU,SAASC,EAAC,KAAGF,GAAEE,OAAID,GAAEC;AAAG,mBAAM;AAAG,eAAM;AAAA,MAAE,GAAE,eAAeF,IAAE;AAAC,eAAOA,GAAE,cAAc,KAAK,SAAS,WAAW,eAAe;AAAA,MAAC,GAAE,eAAeA,IAAEC,IAAE;AAAC,aAAK,eAAeD,EAAC,EAAE,YAAU,EAAEC,EAAC;AAAA,MAAC,GAAE,QAAQD,IAAEC,IAAE;AAAC,QAAAD,KAAEA,MAAG,KAAK,WAAW,GAAEC,KAAEA,MAAG,CAAC,GAAE,KAAK,SAAS,KAAK;AAAE,YAAIC,KAAE,KAAK,UAASC,KAAE,KAAK,eAAeH,EAAC,GAAEI,KAAE,KAAK,aAAaJ,EAAC,GAAEK,KAAE,EAAEL,EAAC,GAAEM,KAAE,KAAK,OAAO,WAAUC,KAAE,MAAKC,KAAE;AAAG,YAAGL,IAAE;AAAC,cAAG,EAAEE,cAAa,UAAQ,cAAaA,OAAIA,GAAE;AAAS,mBAAOA,KAAE,EAAEL,IAAE,EAAC,gBAAe,EAAE,CAAC,GAAEK,EAAC,GAAE,gBAAeL,GAAE,UAAU,IAAE,EAAC,CAAC,GAAE,EAAEK,GAAE,gBAAeA,GAAE,cAAc,GAAEF,GAAE,aAAa,mBAAkB,IAAE,GAAEH,GAAE,UAAU,IAAIE,GAAE,WAAW,UAAU,GAAEC,GAAE,iBAAiB,SAAQG,GAAE,eAAe,KAAK,MAAKN,EAAC,CAAC,GAAEG,GAAE,iBAAiB,QAAQ,WAAU;AAAC,yBAAY,MAAIG,GAAE,cAAc,KAAKC,IAAEA,GAAE,eAAeP,EAAC,CAAC,CAAE;AAAA,YAAC,CAAE,GAAEG,GAAE,iBAAiB,SAAQG,GAAE,eAAe,KAAK,MAAKH,EAAC,CAAC,GAAEA,GAAE,iBAAiB,SAAQG,GAAE,eAAe,KAAK,MAAKH,EAAC,CAAC,GAAEA,GAAE,iBAAiB,WAAW,CAAAF,OAAGK,GAAE,iBAAiB,KAAK,MAAKL,IAAED,EAAC,CAAE,GAAEG,GAAE,iBAAiB,oBAAmBG,GAAE,mBAAmB,KAAK,IAAI,CAAC,GAAEH,GAAE,iBAAiB,kBAAiBG,GAAE,iBAAiB,KAAK,IAAI,CAAC,GAAEL,GAAE,mBAAiBO,KAAE,KAAK,sBAAsBR,EAAC,IAAGG,GAAE,kBAAgBK,IAAE,KAAK,QAAQ,cAAa,EAAC,KAAIR,IAAE,OAAMI,IAAE,MAAKC,IAAE,SAAQG,GAAC,CAAC,GAAEL,GAAE,MAAM,GAAE,KAAK,mBAAmB,OAAGA,EAAC,GAAE;AAAA,QAAI;AAAM,kBAAQ,KAAK,0CAAyCD,GAAE,WAAW,eAAe;AAAA,MAAC,GAAE,sBAAsBF,IAAEC,IAAE;AAAC,YAAIC;AAAE,YAAGD,KAAEA,MAAG,EAAED,EAAC;AAAE,kBAAOE,KAAE,EAAE,eAAcD,OAAI,SAAKA,GAAE,cAAY,KAAK,oBAAoBD,EAAC,GAAE,KAAK,OAAO,GAAEA,GAAE,UAAU,OAAO,KAAK,SAAS,WAAW,eAAc,CAACE,EAAC,GAAED,GAAE;AAAU,gBAAQ,KAAK,qBAAoBD,IAAEC,EAAC;AAAA,MAAC,GAAE,cAAcD,IAAEC,IAAE;AAAC,QAAAA,KAAEA,MAAG,CAAC;AAAE,YAAIC,KAAE,EAAC,KAAIF,KAAEA,MAAG,KAAK,MAAM,QAAQ,OAAM,OAAM,KAAK,aAAaA,EAAC,GAAE,cAAa,EAAEA,EAAC,GAAE,MAAKC,GAAC;AAAE,aAAK,QAAQ,qBAAoBC,IAAE,EAAC,WAAU,MAAE,CAAC,GAAE,KAAK,MAAM,UAAQ,OAAG,OAAOD,GAAE,gBAAe,OAAOA,GAAE,gBAAeD,MAAGC,GAAE,KAAK,SAAS,gBAAcD,KAAE,KAAK,WAAWA,IAAEC,EAAC,GAAE,KAAK,sBAAsBD,IAAEC,EAAC,GAAE,KAAK,SAAS,KAAK,gBAAcD,GAAE,MAAM,IAAE,KAAK,oBAAoBA,EAAC,KAAGA,MAAG,KAAK,WAAWA,EAAC,GAAE,KAAK,QAAQ,gBAAeE,EAAC,GAAE,KAAK,SAAS,KAAK,GAAE,KAAK,SAAS,mBAAiB,KAAK,mBAAmB;AAAA,MAAC,GAAE,WAAWF,IAAEC,IAAE;AAAC,QAAAA,MAAGA,GAAE,UAAQA,KAAED,GAAE,kBAAiBC,GAAE,aAAW,KAAGA,GAAE,aAAW,EAAEA,IAAE,KAAK,mBAAmBA,IAAEA,GAAE,SAAS,CAAC;AAAE,YAAIC,KAAE,KAAK,cAAcD,EAAC;AAAE,eAAOD,GAAE,WAAW,aAAaE,IAAEF,EAAC,GAAE,KAAK,qBAAqB,GAAEE;AAAA,MAAC,GAAE,uBAAsB;AAAC,aAAK,MAAM,SAAO,GAAE,CAAC,EAAE,QAAQ,KAAK,KAAK,WAAW,GAAG,CAAAF,OAAG;AAAC,UAAAA,GAAE,UAAU,SAAS,KAAK,SAAS,WAAW,cAAc,MAAM,GAAG,EAAE,EAAE,KAAG,KAAK,MAAM,KAAK,EAAEA,EAAC,CAAC;AAAA,QAAC,CAAE,GAAE,KAAK,OAAO;AAAA,MAAC,GAAE,cAAcA,IAAEC,IAAE;AAAC,eAAM,EAAEA,KAAEA,MAAG,KAAK,MAAM,WAAW,UAAQD,MAAG,KAAK,cAAcA,EAAC,GAAE,SAAO,EAAEA,IAAEC,EAAC,GAAE,KAAK,mBAAmB,OAAGD,EAAC,GAAE,KAAK,qBAAqB,GAAE,KAAK,OAAO,GAAE;AAAA,MAAK,GAAE,OAAM,EAAC,MAAK;AAAC,YAAIA,KAAE,UAAU,SAAO,KAAG,WAAS,UAAU,KAAG,UAAU,KAAG,IAAGC,KAAE,EAAE,UAAU,SAAO,KAAG,WAAS,UAAU,OAAK,UAAU;AAAG,YAAIC,KAAE,KAAK,SAAS,SAAS;AAAc,aAAK,MAAM,YAAUF,IAAEC,OAAI,KAAK,IAAI,MAAM,YAAU,EAAE,KAAGD,EAAC,IAAG,CAACA,MAAGE,MAAG,KAAK,SAAS,KAAK,KAAK,IAAI,GAAE,KAAK,MAAM,aAAa,QAAQ,KAAK,IAAI,GAAE,KAAK,MAAM,SAAS,KAAK,IAAI;AAAA,MAAC,GAAE,MAAK;AAAC,eAAO,KAAK,IAAI,MAAM;AAAA,MAAW,GAAE,WAAU;AAAC,YAAIF,KAAE,CAAC,KAAK,MAAM,aAAW,SAAK,KAAK,YAAY,EAAC,OAAM,KAAK,MAAM,UAAS,CAAC;AAAE,eAAO,KAAK,IAAI,MAAM,UAAU,OAAO,KAAK,SAAS,WAAW,cAAa,CAACA,EAAC,GAAEA;AAAA,MAAC,GAAE,UAAUA,IAAE;AAAC,YAAIC,KAAED,MAAG,KAAK,IAAI,OAAME,KAAE,CAAC;AAAE,QAAAD,GAAE,WAAW,QAAS,CAAAD,OAAG,KAAGA,GAAE,YAAUE,GAAE,KAAKF,GAAE,SAAS,CAAE,GAAEE,KAAEA,GAAE,KAAK,IAAI;AAAE,YAAG;AAAC,UAAAA,KAAEA,GAAE,QAAQ,mBAAkB,KAAK,SAAS,WAAW,OAAO,OAAO,CAAC,CAAC;AAAA,QAAC,SAAOF,IAAN;AAAA,QAAS;AAAC,eAAOE,KAAEA,GAAE,QAAQ,OAAM,GAAG,GAAE,KAAK,KAAKA,EAAC;AAAA,MAAC,GAAE,cAAa,EAAC,QAAQF,IAAE;AAAC,YAAG,KAAK,SAAS,aAAa,SAAQ;AAAC,sBAAU,QAAOA,KAAEA,MAAG,EAAC,OAAM,GAAE,OAAKA,KAAE,EAAC,OAAMA,GAAC;AAAG,cAAIC,KAAE,KAAK,SAAS,eAAeD,EAAC;AAAE,cAAG,YAAU,OAAOC,IAAE;AAAC,gBAAIC,KAAED,GAAE,OAAO,GAAE,KAAK,MAAM,UAAU,MAAM,EAAE,YAAY,GAAEE,KAAEF,GAAE,UAAU,KAAK,MAAM,UAAU,MAAM;AAAE,YAAAA,MAAG,KAAK,MAAM,aAAWC,MAAG,KAAK,MAAM,UAAU,YAAY,KAAG,KAAK,IAAI,MAAM,aAAa,gBAAeC,EAAC,GAAE,KAAK,MAAM,kBAAgBH,OAAI,KAAK,IAAI,MAAM,gBAAgB,cAAc,GAAE,OAAO,KAAK,MAAM;AAAA,UAAgB;AAAA,QAAC;AAAA,MAAC,GAAE,IAAIA,IAAE;AAAC,YAAIC,KAAE,KAAK,IAAI,MAAM,aAAa,cAAc,GAAEC,KAAEF,OAAIC,KAAE,KAAK,MAAM,YAAUA,KAAE;AAAM,eAAM,CAAC,CAACC,OAAI,SAAO,KAAK,SAAS,OAAK,KAAK,oBAAoB,SAAS,eAAe,KAAK,MAAM,IAAI,SAAOA,EAAC,CAAC,KAAG,KAAK,MAAM,IAAI,KAAK,MAAKA,EAAC,GAAE,KAAK,mBAAmB,OAAG,KAAK,IAAI,KAAK,IAAG,KAAK,MAAM,aAAa,QAAQ,KAAK,IAAI,GAAE,KAAK,SAAS,KAAK,GAAE;AAAA,MAAG,EAAC,EAAC,GAAE,UAAUF,IAAE;AAAC,eAAO,KAAK,MAAM,UAAW,CAAAC,OAAGA,GAAE,YAAUD,MAAG,CAAC,GAAG,OAAQ;AAAA,MAAC,GAAE,aAAaA,IAAE;AAAC,YAAIC,KAAE;AAAE,YAAGD;AAAE,iBAAKA,KAAEA,GAAE;AAAwB,YAAAC;AAAI,eAAOA;AAAA,MAAC,GAAE,aAAY;AAAC,iBAAQD,KAAE,UAAU,QAAOC,KAAE,IAAI,MAAMD,EAAC,GAAEE,KAAE,GAAEA,KAAEF,IAAEE;AAAI,UAAAD,GAAEC,MAAG,UAAUA;AAAG,YAAIC,KAAE,MAAI,CAAC,GAAG,KAAK,SAAS,WAAW,IAAI,MAAM,GAAG,GAAE,GAAGF,EAAC,EAAE,KAAK,GAAG;AAAE,eAAM,CAAC,EAAE,MAAM,KAAK,KAAK,IAAI,MAAM,iBAAiBE,EAAC,CAAC;AAAA,MAAC,GAAE,aAAY;AAAC,YAAIH,KAAE,KAAK,IAAI,MAAM,iBAAiB,GAAG,KAAK,SAAS,WAAW,oBAAoB,KAAK,SAAS,WAAW,0BAA0B;AAAE,eAAOA,GAAEA,GAAE,SAAO;AAAA,MAAE,GAAE,eAAeA,IAAEC,IAAEC,IAAE;AAAC,YAAIE,KAAE;AAAE,YAAG,YAAU,KAAK,SAAS;AAAK,iBAAM;AAAG,iBAAQC,MAAK,KAAK,OAAM;AAAC,YAAE,KAAK,KAAK,KAAGL,EAAC,GAAEK,GAAE,OAAMJ,EAAC,KAAGC,MAAGG,GAAE,WAASD;AAAA,QAAG;AAAC,eAAOA;AAAA,MAAC,GAAE,mBAAmBJ,IAAE;AAAC,YAAIC,KAAE,CAAC;AAAE,eAAO,KAAK,WAAW,EAAE,QAAS,CAACC,IAAEE,OAAI;AAAC,YAAE,KAAK,KAAKF,GAAE,WAAW,GAAEF,IAAE,KAAK,SAAS,SAAS,aAAa,KAAGC,GAAE,KAAKG,EAAC;AAAA,QAAC,CAAE,GAAEH;AAAA,MAAC,GAAE,iBAAiBD,IAAE;AAAC,YAAIC,KAAE,KAAK,mBAAmBD,EAAC,EAAE;AAAG,eAAO,KAAK,WAAW,EAAEC;AAAA,MAAE,GAAE,SAASD,IAAE;AAAC,QAAAA,OAAIA,GAAE,UAAU,IAAI,KAAK,SAAS,WAAW,QAAQ,GAAE,WAAY,MAAI;AAAC,UAAAA,GAAE,UAAU,OAAO,KAAK,SAAS,WAAW,QAAQ;AAAA,QAAC,GAAG,GAAG;AAAA,MAAE,GAAE,iBAAiBA,IAAE;AAAC,eAAOA,KAAE,KAAK,KAAKA,GAAE,YAAY,CAAC,GAAE,KAAK,SAAS,UAAU,OAAQ,CAAAC,QAAI,KAAGA,IAAG,YAAY,KAAGD,EAAE,EAAE;AAAA,MAAM,GAAE,iBAAiBA,IAAE;AAAC,eAAM,CAAC,CAAC,KAAK,iBAAiBA,EAAC;AAAA,MAAC,GAAE,iBAAiBA,IAAEC,IAAEC,IAAE;AAAC,QAAAD,KAAEA,MAAG;AAAQ,YAAIG,IAAEC,KAAE,KAAK;AAAS,gBAAOH,KAAEA,MAAGG,GAAE,WAAW,KAAM,CAAAH,OAAG;AAAC,cAAII,KAAE,YAAU,OAAOJ,KAAEA,KAAEA,GAAED,OAAIC,GAAE;AAAM,cAAG,EAAEI,IAAEN,IAAEK,GAAE,SAAS,eAAcA,GAAE,IAAI;AAAE,mBAAOD,KAAE,YAAU,OAAOF,KAAE,EAAC,OAAMA,GAAC,IAAEA,IAAE;AAAA,QAAE,CAAE,GAAEE,MAAG,WAASH,MAAG,WAASI,GAAE,gBAAcD,KAAE,KAAK,iBAAiBJ,IAAEK,GAAE,aAAYH,EAAC,IAAGE;AAAA,MAAC,GAAE,YAAYJ,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAE,WAAUF,KAAE,UAAQC,GAAE,aAAYE,KAAE,KAAK,KAAKH,GAAEE,MAAG,EAAE;AAAE,gBAAOF,GAAEE,MAAG,IAAI,KAAK,IAAED,GAAE,WAASA,GAAE,mBAAmB,UAAQ,CAACA,GAAE,QAAQ,KAAKE,EAAC,IAAE,KAAK,MAAM,UAAQ,CAACF,GAAE,cAAY,KAAK,eAAeE,IAAEF,GAAE,SAAS,eAAcD,GAAE,OAAO,IAAE,KAAK,MAAM,YAAU,KAAK,iBAAiBG,EAAC,KAAGF,GAAE,oBAAkB,CAAC,KAAK,iBAAiBE,EAAC,IAAE,KAAK,MAAM,aAAW,CAACF,GAAE,YAAUA,GAAE,SAASD,EAAC,IAAE,KAAK,MAAM;AAAA,MAAK,GAAE,mBAAmBA,IAAEC,IAAE;AAAC,eAAM,EAAC,gBAAe,MAAG,OAAM,GAAGD,GAAE,SAAO,MAAM,KAAK,SAAS,WAAW,gBAAgB,KAAK,GAAE,OAAMC,GAAC;AAAA,MAAC,GAAE,aAAY;AAAC,eAAO,KAAK,MAAM,UAAQ,KAAK,SAAS,WAAS,KAAK,MAAM;AAAA,MAAM,GAAE,YAAYD,IAAEC,IAAE;AAAC,YAAIC,KAAE,KAAK;AAAS,iBAAS,cAAc,KAAK,GAAEA,GAAED,MAAG,cAAYD,IAAE,KAAK,IAAI,OAAOA,KAAE,QAAM,YAAU,aAAaC,MAAG,YAAW,IAAE,GAAE,KAAK,mBAAmB,CAACD,EAAC;AAAA,MAAC,GAAE,mBAAmBA,IAAE;AAAC,aAAK,SAAS,cAAY,KAAK,IAAI,MAAM,kBAAgBA,IAAE,KAAK,IAAI,MAAM,WAASA,KAAE,IAAE;AAAA,MAAG,GAAE,YAAYA,IAAE;AAAC,aAAK,YAAYA,IAAE,UAAU;AAAA,MAAC,GAAE,cAAcA,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAED,GAAE,WAAUE,KAAEF,GAAE,YAAWG,KAAEH,GAAE,MAAKI,KAAEJ,GAAE,aAAYK,KAAE,CAAC,GAAEC,KAAE,CAAC,CAACL,MAAGA,GAAE,cAAa,QAAOM,KAAE,MAAM,QAAQR,EAAC,GAAES,KAAED,MAAGR,GAAE,GAAG,OAAMU,KAAE,CAAAV,QAAIA,KAAE,IAAI,MAAMG,EAAC,EAAE,OAAQ,CAAAH,OAAGA,EAAE,EAAE,IAAK,CAAAA,QAAI,EAAC,CAACK,KAAG,KAAK,KAAKL,EAAC,GAAE,OAAM,KAAK,KAAKA,EAAC,EAAC,EAAG;AAAE,YAAG,YAAU,OAAOA,OAAIA,KAAEA,GAAE,SAAS,IAAG,YAAU,OAAOA,IAAE;AAAC,cAAG,CAACA,GAAE,KAAK;AAAE,mBAAM,CAAC;AAAE,UAAAA,KAAEU,GAAEV,EAAC;AAAA,QAAC;AAAM,UAAAQ,OAAIR,KAAE,CAAC,EAAE,OAAO,GAAGA,GAAE,IAAK,CAAAA,OAAGA,GAAE,QAAMA,KAAEU,GAAEV,EAAC,CAAE,CAAC;AAAG,eAAOO,MAAG,CAACE,OAAIT,GAAE,QAAS,CAAAA,OAAG;AAAC,cAAIC,KAAEK,GAAE,IAAK,CAAAN,OAAGA,GAAE,KAAM,GAAEE,KAAE,KAAK,SAAS,gBAAgB,KAAK,MAAKF,GAAEK,KAAG,EAAC,OAAM,KAAE,CAAC;AAAE,eAAK,SAAS,eAAaH,KAAEA,GAAE,OAAQ,CAAAF,OAAG,CAACC,GAAE,SAASD,GAAE,KAAK,CAAE;AAAG,cAAIG,KAAED,GAAE,SAAO,IAAE,KAAK,iBAAiBF,GAAEK,KAAGA,IAAEH,EAAC,IAAEA,GAAE;AAAG,UAAAC,MAAGA,cAAa,SAAOG,GAAE,KAAKH,EAAC,IAAE,SAAOC,OAAI,QAAMJ,GAAE,UAAQA,GAAE,QAAMA,GAAEK,MAAIC,GAAE,KAAKN,EAAC;AAAA,QAAE,CAAE,GAAEM,GAAE,WAASN,KAAEM,MAAIN;AAAA,MAAC,GAAE,aAAaA,IAAE;AAAC,YAAIC,KAAE,KAAK,UAASC,KAAED,GAAE,qBAAoBE,KAAEF,GAAE,YAAWG,KAAEH,GAAE,cAAaI,KAAEJ,GAAE,kBAAiBK,KAAEL,GAAE,SAAQM,KAAEN,GAAE,aAAYO,KAAE,CAAC;AAAE,eAAOR,KAAEA,GAAE,MAAME,GAAE,EAAE,EAAE,IAAK,CAACF,IAAEC,OAAI;AAAC,cAAIQ,IAAEC,IAAEC,IAAEC,KAAEZ,GAAE,MAAME,GAAE,EAAE,GAAEW,KAAED,GAAE,IAAGE,KAAEN,GAAE,UAAQF;AAAE,cAAG;AAAC,gBAAGO,MAAG,CAACA;AAAE,oBAAM;AAAM,YAAAH,KAAE,KAAK,MAAMG,EAAC;AAAA,UAAC,SAAOb,IAAN;AAAS,YAAAU,KAAE,KAAK,cAAcG,EAAC,EAAE,MAAI,EAAC,OAAMA,GAAC;AAAA,UAAC;AAAC,cAAGT,GAAE,KAAK,MAAKM,EAAC,GAAEI,MAAG,EAAEF,GAAE,SAAO,MAAIP,MAAG,CAAC,KAAK,iBAAiBK,GAAE,KAAK,KAAG,CAACP,MAAG,KAAK,eAAeO,GAAE,KAAK,GAAE;AAAC,gBAAGV;AAAE,qBAAOC,KAAEC,GAAE,KAAGF,KAAEA;AAAA,UAAC;AAAM,YAAAU,GAAED,KAAEC,GAAEH,MAAGA,KAAE,WAAS,KAAK,KAAKG,GAAED,GAAE,GAAEE,KAAE,KAAK,cAAcD,EAAC,GAAEF,GAAE,KAAKE,EAAC,GAAEC,GAAE,UAAU,IAAI,KAAK,SAAS,WAAW,cAAc,GAAEC,GAAE,KAAGD,GAAE,WAAU,KAAK,MAAM,KAAKD,EAAC;AAAE,iBAAOE,GAAE,KAAK,EAAE;AAAA,QAAC,CAAE,EAAE,KAAK,EAAE,GAAE,KAAK,IAAI,MAAM,YAAUZ,IAAE,KAAK,IAAI,MAAM,YAAY,SAAS,eAAe,EAAE,CAAC,GAAE,KAAK,IAAI,MAAM,UAAU,GAAE,KAAK,WAAW,EAAE,QAAS,CAACA,IAAEC,OAAI,EAAED,IAAEQ,GAAEP,GAAE,CAAE,GAAE,KAAK,OAAO,EAAC,oBAAmB,KAAE,CAAC,GAAED;AAAA,MAAC,GAAE,oBAAoBA,IAAEC,IAAE;AAAC,YAAG,KAAK,MAAM,OAAKA,IAAE;AAAC,UAAAA,KAAEA,MAAG,KAAK,MAAM,IAAI,SAAO,KAAK,MAAM,IAAI;AAAM,cAAIC,IAAEC,IAAEC,KAAE,KAAK,MAAM,aAAW,OAAO,aAAa,GAAEC,KAAED,GAAE,YAAWE,KAAE,KAAK,MAAM,IAAI,aAAW,KAAK,MAAM,IAAI,WAAW,SAAO;AAAE,iBAAOD,GAAE,UAAUD,GAAE,eAAaE,EAAC,GAAE,OAAKJ,KAAEG,GAAE,UAAU,YAAYJ,EAAC,KAAG,QAAIE,KAAEE,GAAE,UAAUH,EAAC,GAAEF,MAAGK,GAAE,WAAW,aAAaL,IAAEG,EAAC,GAAE;AAAA,QAAG;AAAA,MAAC,GAAE,UAAUH,IAAEC,IAAE;AAAC,YAAIC,KAAE,KAAK;AAAS,YAAG,CAACA,GAAE,oBAAkB,KAAK,iBAAiBD,GAAE,KAAK,GAAE;AAAC,eAAK,MAAM,IAAI,KAAK,MAAKA,GAAEC,GAAE,gBAAcD,GAAE,OAAM,IAAE,GAAE,KAAK,MAAM,QAAQ,gBAAc,WAAY,MAAI,KAAK,mBAAmB,OAAG,KAAK,IAAI,KAAK,CAAE;AAAE,cAAIE,KAAE,KAAK,WAAW;AAAE,iBAAOA,KAAE,KAAK,WAAWA,IAAEF,EAAC,IAAE,KAAK,UAAUD,EAAC,GAAE,KAAK,MAAM,KAAGC,IAAE,KAAK,OAAO,GAAE,KAAK,QAAQ,OAAM,EAAC,KAAID,IAAE,MAAKC,GAAC,CAAC,GAAE,CAACD,EAAC;AAAA,QAAC;AAAA,MAAC,GAAE,YAAYA,IAAE;AAAC,YAAIC,KAAE,EAAE,EAAC,OAAM,GAAE,GAAED,MAAG,CAAC,CAAC,GAAEE,KAAE,KAAK,cAAcD,EAAC;AAAE,UAAEC,IAAED,EAAC,GAAE,KAAK,UAAUC,EAAC,GAAE,KAAK,QAAQA,IAAE,EAAC,gBAAe,KAAE,CAAC;AAAA,MAAC,GAAE,QAAQF,IAAEC,IAAEC,IAAE;AAAC,YAAIC,KAAE,CAAC,GAAEC,KAAE,KAAK,UAASC,KAAE,CAAC,GAAEC,KAAE,SAAS,uBAAuB;AAAE,YAAGJ,KAAEA,MAAGE,GAAE,aAAY,CAACJ,MAAG,KAAGA,GAAE;AAAO,iBAAOG;AAAE,gBAAOH,KAAE,KAAK,cAAcA,EAAC,GAAEI,GAAE,MAAK;AAAA,UAAC,KAAI;AAAM,mBAAO,KAAK,WAAWJ,EAAC;AAAA,UAAE,KAAI;AAAS,YAAAC,KAAE,OAAG,KAAK,cAAc;AAAA,QAAC;AAAC,eAAO,KAAK,IAAI,MAAM,gBAAgB,OAAO,GAAED,GAAE,QAAS,CAAAA,OAAG;AAAC,cAAIC,IAAEM,KAAE,CAAC,GAAEC,KAAE,OAAO,OAAO,CAAC,GAAER,IAAE,EAAC,OAAMA,GAAE,QAAM,GAAE,CAAC;AAAE,cAAGA,KAAE,OAAO,OAAO,CAAC,GAAEQ,EAAC,GAAEJ,GAAE,aAAa,KAAK,MAAKJ,EAAC,GAAEA,GAAE,YAAU,KAAK,WAAW,KAAG,KAAK,YAAYA,EAAC,GAAE,SAAKA,GAAE,WAAU;AAAC,gBAAGE;AAAE;AAAO,gBAAG,EAAEK,IAAE,KAAK,mBAAmBP,IAAEA,GAAE,SAAS,GAAE,EAAC,kBAAiBQ,GAAC,CAAC,GAAER,GAAE,aAAW,KAAK,MAAM,aAAW,KAAK,SAAS,KAAK,iBAAiBA,GAAE,KAAK,CAAC,GAAE,CAACI,GAAE;AAAkB,qBAAO,KAAKC,GAAE,KAAKL,GAAE,KAAK;AAAA,UAAC;AAAC,cAAG,cAAaA,OAAIA,GAAE,WAASO,GAAE,mBAAiB,OAAG,OAAOP,GAAE,WAAUC,KAAE,KAAK,cAAcD,IAAEO,EAAC,GAAEJ,GAAE,KAAKF,EAAC,GAAE,YAAUG,GAAE;AAAK,mBAAO,KAAK,UAAUH,IAAED,EAAC;AAAE,UAAAM,GAAE,YAAYL,EAAC,GAAED,GAAE,aAAW,SAAKA,GAAE,aAAW,KAAK,MAAM,KAAKA,EAAC,GAAE,KAAK,QAAQ,OAAM,EAAC,KAAIC,IAAE,OAAM,KAAK,MAAM,SAAO,GAAE,MAAKD,GAAC,CAAC,MAAI,KAAK,QAAQ,WAAU,EAAC,MAAKA,IAAE,OAAM,KAAK,MAAM,QAAO,KAAIC,IAAE,SAAQD,GAAE,UAAS,CAAC,GAAEI,GAAE,mBAAiB,WAAY,MAAI,KAAK,WAAWH,IAAE,IAAE,GAAG,GAAG,IAAG,KAAK,SAAS,SAAS;AAAA,QAAC,CAAE,GAAE,KAAK,UAAUK,EAAC,GAAE,KAAK,OAAO,GAAEN,GAAE,UAAQC,OAAI,KAAK,MAAM,IAAI,KAAK,MAAKG,GAAE,oBAAkB,KAAGC,GAAE,KAAKD,GAAE,WAAW,CAAC,GAAE,KAAK,mBAAmB,OAAG,KAAK,IAAI,KAAK,IAAGA,GAAE,SAAS,WAAS,KAAK,SAAS,SAAS,GAAED;AAAA,MAAC,GAAE,WAAWH,IAAE;AAAC,aAAIA,KAAE,KAAK,cAAcA,EAAC,GAAG,GAAG,UAAQ,KAAK,MAAM;AAAI,iBAAO,KAAK,kBAAkBA,GAAE,EAAE;AAAE,oBAAU,OAAOA,OAAIA,KAAE,CAAC,EAAC,OAAMA,GAAC,CAAC;AAAG,YAAIC,KAAE,SAAS,uBAAuB;AAAE,eAAOD,GAAE,QAAS,CAAAA,OAAG;AAAC,cAAIE,KAAE,KAAK,cAAcF,EAAC;AAAE,UAAAC,GAAE,YAAYC,EAAC,GAAE,KAAK,eAAeA,EAAC;AAAA,QAAC,CAAE,GAAE,KAAK,cAAcD,EAAC,GAAEA;AAAA,MAAC,GAAE,cAAcD,IAAE;AAAC,YAAIC,KAAE,CAAC,CAAC,KAAK,MAAM;AAAU,QAAAA,KAAE,KAAK,cAAcD,EAAC,KAAG,KAAK,IAAI,MAAM,MAAM,IAAGC,KAAE,KAAK,kBAAkB,GAAG,MAAM,SAAS,KAAK,IAAI,OAAMA,GAAE,MAAM,SAAS,GAAEA,GAAE,MAAM,OAAO,KAAK,IAAI,OAAMA,GAAE,MAAM,SAAS,GAAE,KAAK,IAAI,MAAM,YAAYD,EAAC,GAAE,KAAK,qBAAqB,GAAE,KAAK,OAAO;AAAA,MAAE,GAAE,kBAAkBA,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK,UAASC,KAAE,KAAK,MAAM,IAAI;AAAW,YAAGD,GAAE,aAAa,KAAK,MAAKF,EAAC,GAAEA,GAAE,SAAOA,GAAE,UAAQ,KAAK,MAAM,MAAI,KAAK,MAAM,IAAI,UAAQE,GAAE,QAAQ,UAAQA,GAAE,SAAS,IAAGD,KAAE,KAAK,cAAcD,EAAC,GAAE,KAAK,oBAAoBC,EAAC,KAAG,KAAK,IAAI,MAAM,YAAYA,EAAC,GAAE,WAAY,MAAIA,GAAE,UAAU,IAAI,KAAK,SAAS,WAAW,cAAc,GAAG,GAAG,GAAE,KAAK,MAAM,KAAKD,EAAC,GAAE,KAAK,OAAO,GAAE,CAACG,IAAE;AAAC,cAAIC,KAAE,KAAK,eAAeH,EAAC,KAAGA;AAAE,eAAK,oBAAoBG,EAAC;AAAA,QAAC;AAAC,eAAO,KAAK,MAAM,MAAI,MAAK,KAAK,QAAQ,OAAM,EAAE,CAAC,GAAE,EAAC,KAAIH,GAAC,GAAE,EAAC,MAAKD,GAAC,CAAC,CAAC,GAAEC;AAAA,MAAC,GAAE,UAAUD,IAAE;AAAC,YAAIC,KAAE,KAAK,KAAIC,KAAED,GAAE;AAAM,QAAAA,GAAE,MAAM,aAAaD,IAAEE,EAAC;AAAA,MAAC,GAAE,cAAcF,IAAEE,IAAE;AAAC,QAAAF,GAAE,UAAQ,EAAE;AAAE,YAAIG,IAAEC,KAAE,EAAE,CAAC,GAAEJ,IAAE,EAAE,EAAC,OAAM,EAAEA,GAAE,QAAM,EAAE,EAAC,GAAEE,EAAC,CAAC;AAAE,eAAO,SAASF,IAAE;AAAC,mBAAQC,IAAEC,KAAE,SAAS,mBAAmBF,IAAE,WAAW,WAAU,MAAK,KAAE,GAAEC,KAAEC,GAAE,SAAS;AAAG,YAAAD,GAAE,YAAY,KAAK,KAAGA,GAAE,WAAW,YAAYA,EAAC;AAAA,QAAC,EAAEE,KAAE,KAAK,cAAc,OAAM,CAACC,IAAE,IAAI,CAAC,CAAC,GAAE,EAAED,IAAEH,EAAC,GAAEG;AAAA,MAAC,GAAE,qBAAoB;AAAC,YAAIH,KAAE,KAAK;AAAS,aAAK,WAAWA,GAAE,WAAW,aAAa,EAAE,QAAS,CAACC,IAAEC,OAAI;AAAC,cAAIC,KAAE,EAAEF,EAAC,GAAEG,KAAE,KAAK,WAAW,GAAEC,KAAE,KAAK,YAAYF,EAAC,GAAEG,KAAE,SAAKD,MAAG,CAACD;AAAE,cAAG,YAAUJ,GAAE,QAAM,KAAK,sBAAsBK,EAAC,GAAEC;AAAE,mBAAOH,KAAEA,GAAE,mBAAiBA,GAAE,mBAAiB,EAAC,OAAMA,GAAE,MAAK,GAAE,KAAK,WAAWF,IAAEE,EAAC;AAAE,UAAAF,GAAE,QAAMG,MAAGC;AAAA,QAAC,CAAE;AAAA,MAAC,GAAE,WAAWL,IAAEC,IAAEC,IAAE;AAAC,YAAIC,IAAEC,KAAE,KAAK;AAAS,YAAGJ,KAAEA,MAAGA,cAAa,cAAY,CAACA,EAAC,IAAEA,cAAa,QAAMA,KAAEA,KAAE,CAACA,EAAC,IAAE,CAAC,KAAK,WAAW,CAAC,GAAEG,KAAEH,GAAE,OAAQ,CAACA,IAAEC,OAAI;AAAC,UAAAA,MAAG,YAAU,OAAOA,OAAIA,KAAE,KAAK,iBAAiBA,EAAC;AAAG,cAAIC,KAAE,EAAED,EAAC;AAAE,iBAAOA,MAAGC,MAAG,CAACA,GAAE,YAAUF,GAAE,KAAK,EAAC,MAAKC,IAAE,KAAI,KAAK,UAAUC,EAAC,GAAE,MAAK,EAAED,IAAE,EAAC,WAAU,KAAE,CAAC,EAAC,CAAC,GAAED;AAAA,QAAC,GAAG,CAAC,CAAC,GAAEE,KAAE,YAAU,OAAOA,KAAEA,KAAE,KAAK,QAAQ,mBAAkB,YAAUE,GAAE,SAAOF,KAAE,GAAE,KAAK,MAAM,IAAI,KAAK,IAAI,IAAG,KAAGC,GAAE,UAAQ,YAAUC,GAAE,QAAMD,GAAE,GAAG,KAAK,UAAU,SAASC,GAAE,WAAW,aAAa,MAAIH,KAAE,OAAIE,GAAE;AAAO,iBAAOC,GAAE,MAAM,gBAAgBD,IAAE,EAAC,QAAO,KAAI,CAAC,EAAE,KAAM,MAAI;AAAC,qBAASH,GAAEA,IAAE;AAAC,cAAAA,GAAE,KAAK,eAAaA,GAAE,KAAK,WAAW,YAAYA,GAAE,IAAI,GAAEC,KAAEG,GAAE,mBAAiB,KAAK,QAAQ,UAAS,EAAC,KAAIJ,GAAE,MAAK,OAAMA,GAAE,IAAG,CAAC,KAAG,KAAK,QAAQ,UAAS,EAAC,KAAIA,GAAE,MAAK,OAAMA,GAAE,KAAI,MAAKA,GAAE,KAAI,CAAC,GAAE,KAAK,SAAS,SAAS,GAAE,KAAK,SAAS,SAAS,GAAE,KAAK,IAAI,MAAM,UAAU,GAAEI,GAAE,mBAAiB,KAAK,mBAAmB;AAAA,YAAG;AAAC,YAAAF,MAAGA,KAAE,MAAI,KAAGC,GAAE,SAAO,SAASF,IAAE;AAAC,cAAAA,GAAE,KAAK,MAAM,QAAM,WAAW,OAAO,iBAAiBA,GAAE,IAAI,EAAE,KAAK,IAAE,MAAK,SAAS,KAAK,WAAUA,GAAE,KAAK,UAAU,IAAIG,GAAE,WAAW,OAAO,GAAE,WAAWJ,GAAE,KAAK,IAAI,GAAEE,IAAED,EAAC;AAAA,YAAC,EAAE,KAAK,MAAKE,GAAE,EAAE,IAAEA,GAAE,QAAQH,GAAE,KAAK,IAAI,CAAC,GAAEC,OAAI,KAAK,oBAAoBE,GAAE,IAAK,CAAAH,OAAGA,GAAE,IAAK,CAAC,GAAE,KAAK,OAAO,GAAE,YAAUI,GAAE,QAAM,KAAK,mBAAmB,IAAE;AAAA,UAAE,CAAE,EAAE,MAAO,CAAAJ,OAAG;AAAA,UAAC,CAAE;AAAA,MAAC,GAAE,oBAAmB;AAAC,SAAC,EAAE,MAAM,KAAK,KAAK,WAAW,CAAC,EAAE,QAAS,CAAAA,OAAGA,GAAE,WAAW,YAAYA,EAAC,CAAE;AAAA,MAAC,GAAE,oBAAoBA,IAAE;AAAC,SAACA,KAAE,MAAM,QAAQA,EAAC,IAAEA,KAAE,CAACA,EAAC,GAAG,QAAS,CAAAA,OAAG;AAAC,cAAIC,KAAE,EAAED,EAAC,GAAEE,KAAE,KAAK,UAAUD,EAAC;AAAE,UAAAC,KAAE,MAAI,KAAK,MAAM,OAAOA,IAAE,CAAC;AAAA,QAAC,CAAE;AAAA,MAAC,GAAE,cAAcF,IAAE;AAAC,QAAAA,KAAEA,MAAG,CAAC,GAAE,KAAK,QAAM,CAAC,GAAE,SAAO,KAAK,SAAS,OAAK,KAAK,IAAI,MAAM,YAAU,KAAG,KAAK,kBAAkB,GAAE,KAAK,SAAS,SAAS,GAAE,KAAK,SAAS,SAAS,GAAE,KAAK,MAAM,SAAS,WAAS,WAAY,MAAI;AAAC,eAAK,IAAI,MAAM,MAAM;AAAA,QAAC,CAAE,GAAE,YAAU,KAAK,SAAS,SAAO,KAAK,MAAM,IAAI,KAAK,IAAI,GAAE,KAAK,mBAAmB,IAAE,IAAG,KAAK,OAAOA,EAAC;AAAA,MAAC,GAAE,aAAY;AAAC,YAAIA,KAAE,KAAK,UAASC,KAAED,GAAE,YAAWE,KAAE,SAAOF,GAAE,OAAKA,GAAE,QAAQ,aAAW,KAAK,IAAI,MAAM,cAAY,KAAK,IAAI,cAAc,MAAM,KAAK,IAAE,KAAK,MAAM,SAAO,KAAK,MAAM,IAAI,KAAK,IAAI,EAAE;AAAO,aAAK,YAAYC,GAAE,YAAW,KAAK,MAAM,UAAQD,GAAE,OAAO,GAAE,KAAK,YAAYC,GAAE,WAAU,CAAC,KAAK,MAAM,MAAM,GAAE,KAAK,YAAYA,GAAE,OAAM,CAACC,EAAC,GAAE,YAAUF,GAAE,QAAM,KAAK,sBAAsB,KAAK,QAAQ,IAAI,SAAS;AAAA,MAAC,GAAE,sBAAsBA,IAAE;AAAC,YAAIC,KAAE,KAAK,IAAI;AAAc,aAAK,SAAS,QAAQ,eAAaA,GAAE,QAAMD,IAAEC,GAAE,cAAYA,GAAE,OAAM,KAAK,iBAAiBD,IAAE,OAAO;AAAA,MAAE,GAAE,OAAOA,IAAE;AAAC,qBAAa,KAAK,sBAAsB,GAAE,KAAK,yBAAuB,WAAW,WAAU;AAAC,cAAIC,KAAE,KAAK,cAAc;AAAE,eAAK,sBAAsBA,EAAC,GAAE,KAAK,WAAW,GAAE,KAAK,SAAS,sBAAoBD,MAAG,CAAC,GAAG,sBAAoB,KAAK,MAAM,oBAAkB,KAAK,mBAAmB;AAAA,QAAC,EAAE,KAAK,IAAI,GAAE,GAAG;AAAA,MAAC,GAAE,gBAAe;AAAC,YAAIA,KAAE,KAAK,cAAc;AAAE,eAAM,SAAO,KAAK,SAAS,OAAK,KAAK,qBAAqBA,EAAC,IAAEA,GAAE,SAAO,KAAK,SAAS,2BAAyB,KAAK,SAAS,yBAAyBA,EAAC,IAAE,KAAK,UAAUA,EAAC,IAAE;AAAA,MAAE,GAAE,cAAcA,IAAE;AAAC,eAAO,EAAEA,MAAG,KAAK,OAAM,KAAK,SAAS;AAAA,MAAC,GAAE,uBAAsB;AAAC,YAAIA,KAAE,IAAGC,KAAE,MAAKC,KAAE,KAAK,UAASC,KAAED,GAAE,4BAA0B,KAAK,WAAUE,KAAEF,GAAE;AAAoB,eAAO,SAASA,GAAEI,IAAE;AAAC,UAAAA,GAAE,WAAW,QAAS,CAAAA,OAAG;AAAC,gBAAG,KAAGA,GAAE,UAAS;AAAC,oBAAMC,KAAE,EAAED,EAAC;AAAE,kBAAG,QAAMA,GAAE,YAAUN,MAAG,SAAQO,MAAG,EAAE,KAAKN,IAAEK,EAAC,GAAE;AAAC,oBAAGC,GAAE;AAAU;AAAO,gBAAAP,MAAGI,GAAE,KAAGD,GAAE,EAAEI,IAAEN,GAAE,SAAS,CAAC,IAAEG,GAAE;AAAA,cAAE;AAAM,gBAAAE,GAAE,aAAa,OAAO,KAAG,CAAC,KAAI,KAAI,GAAG,EAAE,SAASA,GAAE,OAAO,IAAEN,MAAGM,GAAE,cAAY,SAAOA,GAAE,WAAS,OAAKA,GAAE,YAAUN,MAAG,QAAOE,GAAEI,EAAC;AAAA,YAAE;AAAM,cAAAN,MAAGM,GAAE;AAAA,UAAW,CAAE;AAAA,QAAC,EAAE,KAAK,IAAI,KAAK,GAAEN;AAAA,MAAC,EAAC,GAAE,EAAE,UAAU,YAAU,EAAE,UAAU,YAAW;AAAA,IAAC,CAAE;AAAA;AAAA;;;ACzBh8xD;AAAA;AACA,KAAC,WAAW;AACV,cAAQ,WAAW;AAAA,QACjB,OAAO;AAAA,UACL,iBAAiB;AAAA,UACjB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,eAAe;AAAA,UACf,SAAS;AAAA,UACT,SAAS;AAAA,UACT,eAAe;AAAA,UACf,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,WAAW;AAAA,UACX,OAAO;AAAA,UACP,kBAAkB;AAAA,UAClB,UAAU;AAAA,UACV,iBAAiB;AAAA,UACjB,mBAAmB;AAAA,UACnB,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,oBAAoB;AAAA,UACpB,qBAAqB;AAAA,UACrB,mBAAmB;AAAA,UACnB,iBAAiB;AAAA,UACjB,UAAU;AAAA,QACZ;AAAA,QACA,OAAO;AAAA,UACL,iBAAiB;AAAA,UACjB,MAAM;AAAA,UACN,WAAW;AAAA,UACX,eAAe;AAAA,UACf,SAAS;AAAA,UACT,SAAS;AAAA,UACT,eAAe;AAAA,UACf,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,WAAW;AAAA,UACX,OAAO;AAAA,UACP,kBAAkB;AAAA,UAClB,uBAAuB;AAAA,UACvB,UAAU;AAAA,UACV,iBAAiB;AAAA,UACjB,mBAAmB;AAAA,UACnB,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,oBAAoB;AAAA,UACpB,qBAAqB;AAAA,UACrB,mBAAmB;AAAA,UACnB,iBAAiB;AAAA,UACjB,UAAU;AAAA,UACV,QAAQ;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,YACZ,cAAc;AAAA,UAChB;AAAA,UACA,SAAS;AAAA,UACT,YAAY;AAAA,YACV,UAAU;AAAA,YACV,UAAU;AAAA,YACV,WAAW;AAAA,UACb;AAAA,UACA,UAAU;AAAA,UACV,WAAW;AAAA,UACX,UAAU;AAAA,UACV,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACvEZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,QAAQ,UAAU,SAAS,SAAS,YAAY,UAAU,eAC5D,QAAQ,CAAC,EAAE,OACX,UAAU,CAAC,EAAE;AAEf,eAAS,WAAW;AAClB,YAAI,GAAG,KAAK,KAAK,QAAQ,SAAS;AAClC,iBAAS,UAAU,IAAI,UAAU,KAAK,UAAU,SAAS,MAAM,KAAK,WAAW,CAAC,IAAI,CAAC;AACrF,YAAI,WAAW,OAAO,MAAM,GAAG;AAC7B,iBAAO,OAAO,MAAM,MAAM,SAAS;AAAA,QACrC,OAAO;AACL,eAAK,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK,KAAK;AAC9C,qBAAS,QAAQ;AACjB,gBAAI,UAAU,MAAM;AAClB,mBAAK,OAAO,QAAQ;AAClB,oBAAI,CAAC,QAAQ,KAAK,QAAQ,GAAG;AAAG;AAChC,uBAAO,OAAO,OAAO;AAAA,cACvB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,mBAAa,SAAS,KAAK;AACzB,eAAO,CAAC,CAAC,OAAO,OAAO,UAAU,SAAS,KAAK,GAAG,MAAM;AAAA,MAC1D;AAEA,iBAAW,SAAS,KAAK;AACvB,YAAI;AACJ,eAAO,CAAC,CAAC,SAAS,MAAM,OAAO,SAAS,cAAc,QAAQ;AAAA,MAChE;AAEA,gBAAU,SAAS,KAAK;AACtB,YAAI,WAAW,MAAM,OAAO,GAAG;AAC7B,iBAAO,MAAM,QAAQ,GAAG;AAAA,QAC1B,OAAO;AACL,iBAAO,OAAO,UAAU,SAAS,KAAK,GAAG,MAAM;AAAA,QACjD;AAAA,MACF;AAEA,gBAAU,SAAS,KAAK;AACtB,YAAI;AACJ,YAAI,QAAQ,GAAG,GAAG;AAChB,iBAAO,CAAC,IAAI;AAAA,QACd,OAAO;AACL,eAAK,OAAO,KAAK;AACf,gBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,sBAAgB,SAAS,KAAK;AAC5B,YAAI,MAAM;AACV,eAAO,SAAS,GAAG,MAAM,QAAQ,OAAO,eAAe,GAAG,OAAO,OAAO,MAAM,gBAAiB,OAAO,SAAS,cAAgB,gBAAgB,QAAU,SAAS,UAAU,SAAS,KAAK,IAAI,MAAM,SAAS,UAAU,SAAS,KAAK,MAAM;AAAA,MAC7O;AAEA,iBAAW,SAAS,KAAK;AACvB,YAAI,WAAW,IAAI,OAAO,GAAG;AAC3B,iBAAO,IAAI,QAAQ;AAAA,QACrB,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,aAAO,QAAQ,SAAS;AAExB,aAAO,QAAQ,aAAa;AAE5B,aAAO,QAAQ,WAAW;AAE1B,aAAO,QAAQ,UAAU;AAEzB,aAAO,QAAQ,UAAU;AAEzB,aAAO,QAAQ,gBAAgB;AAE/B,aAAO,QAAQ,WAAW;AAAA,IAE5B,GAAG,KAAK,OAAI;AAAA;AAAA;;;AClFZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI;AAEJ,aAAO,UAAU,uBAAwB,WAAW;AAClD,iBAASkB,wBAAuB;AAAA,QAAC;AAEjC,QAAAA,sBAAqB,UAAU,aAAa,SAAS,SAAS,SAAS;AACrE,iBAAO;AAAA,QACT;AAEA,QAAAA,sBAAqB,UAAU,qBAAqB,SAAS,eAAe,UAAU,UAAU;AAC9F,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,QAAAA,sBAAqB,UAAU,iBAAiB,SAAS,cAAc,eAAe,SAAS;AAC7F,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,QAAAA,sBAAqB,UAAU,qBAAqB,SAAS,OAAO;AAClE,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,QAAAA,sBAAqB,UAAU,aAAa,SAAS,SAAS,SAAS;AACrE,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/BZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI;AAEJ,aAAO,UAAU,qBAAsB,WAAW;AAChD,iBAASC,sBAAqB;AAAA,QAAC;AAE/B,QAAAA,oBAAmB,UAAU,cAAc,SAAS,OAAO;AACzD,gBAAM,IAAI,MAAM,KAAK;AAAA,QACvB;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACfZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI;AAEJ,aAAO,UAAU,mBAAoB,WAAW;AAC9C,iBAASC,kBAAiB,KAAK;AAC7B,eAAK,MAAM,OAAO,CAAC;AAAA,QACrB;AAEA,eAAO,eAAeA,kBAAiB,WAAW,UAAU;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO,KAAK,IAAI;AAAA,UAClB;AAAA,QACF,CAAC;AAED,QAAAA,kBAAiB,UAAU,OAAO,SAAS,OAAO;AAChD,iBAAO,KAAK,IAAI,UAAU;AAAA,QAC5B;AAEA,QAAAA,kBAAiB,UAAU,WAAW,SAAS,KAAK;AAClD,iBAAO,KAAK,IAAI,QAAQ,GAAG,MAAM;AAAA,QACnC;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC3BZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,qBAAqB,oBAAoB;AAE7C,2BAAqB;AAErB,yBAAmB;AAEnB,aAAO,UAAU,sBAAuB,WAAW;AACjD,iBAASC,uBAAsB;AAC7B,cAAI;AACJ,eAAK,gBAAgB;AAAA,YACnB,kBAAkB;AAAA,YAClB,kBAAkB;AAAA,YAClB,YAAY;AAAA,YACZ,0BAA0B;AAAA,YAC1B,8BAA8B;AAAA,YAC9B,YAAY;AAAA,YACZ,iBAAiB,IAAI,mBAAmB;AAAA,YACxC,WAAW;AAAA,YACX,sBAAsB;AAAA,YACtB,cAAc;AAAA,YACd,0BAA0B;AAAA,YAC1B,wBAAwB;AAAA,YACxB,mBAAmB;AAAA,YACnB,eAAe;AAAA,YACf,wBAAwB;AAAA,YACxB,YAAY;AAAA,YACZ,eAAe;AAAA,UACjB;AACA,eAAK,SAAS,aAAa,OAAO,OAAO,KAAK,aAAa;AAAA,QAC7D;AAEA,eAAO,eAAeA,qBAAoB,WAAW,kBAAkB;AAAA,UACrE,KAAK,WAAW;AACd,mBAAO,IAAI,iBAAiB,OAAO,KAAK,KAAK,aAAa,CAAC;AAAA,UAC7D;AAAA,QACF,CAAC;AAED,QAAAA,qBAAoB,UAAU,eAAe,SAAS,MAAM;AAC1D,cAAI,KAAK,OAAO,eAAe,IAAI,GAAG;AACpC,mBAAO,KAAK,OAAO;AAAA,UACrB,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,qBAAoB,UAAU,kBAAkB,SAAS,MAAM,OAAO;AACpE,iBAAO;AAAA,QACT;AAEA,QAAAA,qBAAoB,UAAU,eAAe,SAAS,MAAM,OAAO;AACjE,cAAI,SAAS,MAAM;AACjB,mBAAO,KAAK,OAAO,QAAQ;AAAA,UAC7B,OAAO;AACL,mBAAO,OAAO,KAAK,OAAO;AAAA,UAC5B;AAAA,QACF;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/DZ;AAAA;AACA,KAAC,WAAW;AACV,aAAO,UAAU;AAAA,QACf,SAAS;AAAA,QACT,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,iBAAiB;AAAA,QACjB,mBAAmB;AAAA,QACnB,uBAAuB;AAAA,QACvB,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,kBAAkB;AAAA,QAClB,qBAAqB;AAAA,QACrB,aAAa;AAAA,QACb,KAAK;AAAA,QACL,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,OAAO;AAAA,MACT;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACtBZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,cAAc;AAE5B,iBAAW;AAEX,gBAAU;AAEV,aAAO,UAAU,eAAgB,WAAW;AAC1C,iBAASC,cAAa,QAAQ,MAAM,OAAO;AACzC,eAAK,SAAS;AACd,cAAI,KAAK,QAAQ;AACf,iBAAK,UAAU,KAAK,OAAO;AAC3B,iBAAK,YAAY,KAAK,OAAO;AAAA,UAC/B;AACA,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,6BAA6B,KAAK,UAAU,IAAI,CAAC;AAAA,UACnE;AACA,eAAK,OAAO,KAAK,UAAU,KAAK,IAAI;AACpC,eAAK,QAAQ,KAAK,UAAU,SAAS,KAAK;AAC1C,eAAK,OAAO,SAAS;AACrB,eAAK,OAAO;AACZ,eAAK,iBAAiB;AAAA,QACxB;AAEA,eAAO,eAAeA,cAAa,WAAW,YAAY;AAAA,UACxD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,gBAAgB;AAAA,UAC5D,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,eAAe;AAAA,UAC3D,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,mBAAO,KAAK,QAAQ,SAAS;AAAA,UAC/B;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,gBAAgB;AAAA,UAC5D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,UAAU;AAAA,UACtD,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,aAAa;AAAA,UACzD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,aAAa;AAAA,UACzD,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,QAAAA,cAAa,UAAU,QAAQ,WAAW;AACxC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,cAAa,UAAU,WAAW,SAAS,SAAS;AAClD,iBAAO,KAAK,QAAQ,OAAO,UAAU,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACvF;AAEA,QAAAA,cAAa,UAAU,YAAY,SAAS,MAAM;AAChD,iBAAO,QAAQ,KAAK;AACpB,cAAI,QAAQ,MAAM;AAChB,mBAAO,cAAc,KAAK,OAAO,OAAO;AAAA,UAC1C,OAAO;AACL,mBAAO,iBAAiB,OAAO,iBAAiB,KAAK,OAAO,OAAO;AAAA,UACrE;AAAA,QACF;AAEA,QAAAA,cAAa,UAAU,cAAc,SAAS,MAAM;AAClD,cAAI,KAAK,iBAAiB,KAAK,cAAc;AAC3C,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,cAAc,KAAK,WAAW;AACrC,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,UAAU,KAAK,OAAO;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC3GZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI;AAEJ,aAAO,UAAU,kBAAmB,WAAW;AAC7C,iBAASC,iBAAgB,OAAO;AAC9B,eAAK,QAAQ;AAAA,QACf;AAEA,eAAO,eAAeA,iBAAgB,WAAW,UAAU;AAAA,UACzD,KAAK,WAAW;AACd,mBAAO,OAAO,KAAK,KAAK,KAAK,EAAE,UAAU;AAAA,UAC3C;AAAA,QACF,CAAC;AAED,QAAAA,iBAAgB,UAAU,QAAQ,WAAW;AAC3C,iBAAO,KAAK,QAAQ;AAAA,QACtB;AAEA,QAAAA,iBAAgB,UAAU,eAAe,SAAS,MAAM;AACtD,iBAAO,KAAK,MAAM;AAAA,QACpB;AAEA,QAAAA,iBAAgB,UAAU,eAAe,SAAS,MAAM;AACtD,cAAI;AACJ,oBAAU,KAAK,MAAM,KAAK;AAC1B,eAAK,MAAM,KAAK,YAAY;AAC5B,iBAAO,WAAW;AAAA,QACpB;AAEA,QAAAA,iBAAgB,UAAU,kBAAkB,SAAS,MAAM;AACzD,cAAI;AACJ,oBAAU,KAAK,MAAM;AACrB,iBAAO,KAAK,MAAM;AAClB,iBAAO,WAAW;AAAA,QACpB;AAEA,QAAAA,iBAAgB,UAAU,OAAO,SAAS,OAAO;AAC/C,iBAAO,KAAK,MAAM,OAAO,KAAK,KAAK,KAAK,EAAE,WAAW;AAAA,QACvD;AAEA,QAAAA,iBAAgB,UAAU,iBAAiB,SAAS,cAAc,WAAW;AAC3E,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,QAAAA,iBAAgB,UAAU,iBAAiB,SAAS,MAAM;AACxD,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,QAAAA,iBAAgB,UAAU,oBAAoB,SAAS,cAAc,WAAW;AAC9E,gBAAM,IAAI,MAAM,qCAAqC;AAAA,QACvD;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACzDZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,cAAc,YAAY,iBAAiB,SAAS,UAAU,YAAY,UAAU,KAChG,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,YAAM,mBAAsB,WAAW,IAAI,UAAU,aAAa,IAAI,YAAY,WAAW,IAAI;AAEjG,gBAAU;AAEV,iBAAW;AAEX,qBAAe;AAEf,wBAAkB;AAElB,aAAO,UAAU,aAAc,SAAS,YAAY;AAClD,eAAOC,aAAY,UAAU;AAE7B,iBAASA,YAAW,QAAQ,MAAM,YAAY;AAC5C,cAAI,OAAO,GAAG,KAAK;AACnB,UAAAA,YAAW,UAAU,YAAY,KAAK,MAAM,MAAM;AAClD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,2BAA2B,KAAK,UAAU,CAAC;AAAA,UAC7D;AACA,eAAK,OAAO,KAAK,UAAU,KAAK,IAAI;AACpC,eAAK,OAAO,SAAS;AACrB,eAAK,UAAU,CAAC;AAChB,eAAK,iBAAiB;AACtB,cAAI,cAAc,MAAM;AACtB,iBAAK,UAAU,UAAU;AAAA,UAC3B;AACA,cAAI,OAAO,SAAS,SAAS,UAAU;AACrC,iBAAK,SAAS;AACd,iBAAK,iBAAiB;AACtB,mBAAO,aAAa;AACpB,gBAAI,OAAO,UAAU;AACnB,qBAAO,OAAO;AACd,mBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,wBAAQ,KAAK;AACb,oBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,wBAAM,OAAO,KAAK;AAClB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,eAAO,eAAeA,YAAW,WAAW,WAAW;AAAA,UACrD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,gBAAgB;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,UAAU;AAAA,UACpD,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,aAAa;AAAA,UACvD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,MAAM;AAAA,UAChD,KAAK,WAAW;AACd,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,aAAa;AAAA,UACvD,KAAK,WAAW;AACd,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,aAAa;AAAA,UACvD,KAAK,WAAW;AACd,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,cAAc;AAAA,UACxD,KAAK,WAAW;AACd,gBAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,aAAa,OAAO;AAClD,mBAAK,eAAe,IAAI,gBAAgB,KAAK,OAAO;AAAA,YACtD;AACA,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,QAAAA,YAAW,UAAU,QAAQ,WAAW;AACtC,cAAI,KAAK,SAAS,YAAY;AAC9B,uBAAa,OAAO,OAAO,IAAI;AAC/B,cAAI,WAAW,QAAQ;AACrB,uBAAW,iBAAiB;AAAA,UAC9B;AACA,qBAAW,UAAU,CAAC;AACtB,iBAAO,KAAK;AACZ,eAAK,WAAW,MAAM;AACpB,gBAAI,CAAC,QAAQ,KAAK,MAAM,OAAO;AAAG;AAClC,kBAAM,KAAK;AACX,uBAAW,QAAQ,WAAW,IAAI,MAAM;AAAA,UAC1C;AACA,qBAAW,WAAW,CAAC;AACvB,eAAK,SAAS,QAAQ,SAAS,OAAO;AACpC,gBAAI;AACJ,0BAAc,MAAM,MAAM;AAC1B,wBAAY,SAAS;AACrB,mBAAO,WAAW,SAAS,KAAK,WAAW;AAAA,UAC7C,CAAC;AACD,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,YAAY,SAAS,MAAM,OAAO;AACrD,cAAI,SAAS;AACb,cAAI,QAAQ,MAAM;AAChB,mBAAO,SAAS,IAAI;AAAA,UACtB;AACA,cAAI,SAAS,IAAI,GAAG;AAClB,iBAAK,WAAW,MAAM;AACpB,kBAAI,CAAC,QAAQ,KAAK,MAAM,OAAO;AAAG;AAClC,yBAAW,KAAK;AAChB,mBAAK,UAAU,SAAS,QAAQ;AAAA,YAClC;AAAA,UACF,OAAO;AACL,gBAAI,WAAW,KAAK,GAAG;AACrB,sBAAQ,MAAM,MAAM;AAAA,YACtB;AACA,gBAAI,KAAK,QAAQ,sBAAuB,SAAS,MAAO;AACtD,mBAAK,QAAQ,QAAQ,IAAI,aAAa,MAAM,MAAM,EAAE;AAAA,YACtD,WAAW,SAAS,MAAM;AACxB,mBAAK,QAAQ,QAAQ,IAAI,aAAa,MAAM,MAAM,KAAK;AAAA,YACzD;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,kBAAkB,SAAS,MAAM;AACpD,cAAI,SAAS,GAAG;AAChB,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,6BAA6B,KAAK,UAAU,CAAC;AAAA,UAC/D;AACA,iBAAO,SAAS,IAAI;AACpB,cAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,iBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,wBAAU,KAAK;AACf,qBAAO,KAAK,QAAQ;AAAA,YACtB;AAAA,UACF,OAAO;AACL,mBAAO,KAAK,QAAQ;AAAA,UACtB;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,WAAW,SAAS,SAAS;AAChD,iBAAO,KAAK,QAAQ,OAAO,QAAQ,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACrF;AAEA,QAAAA,YAAW,UAAU,MAAM,SAAS,MAAM,OAAO;AAC/C,iBAAO,KAAK,UAAU,MAAM,KAAK;AAAA,QACnC;AAEA,QAAAA,YAAW,UAAU,IAAI,SAAS,MAAM,OAAO;AAC7C,iBAAO,KAAK,UAAU,MAAM,KAAK;AAAA,QACnC;AAEA,QAAAA,YAAW,UAAU,eAAe,SAAS,MAAM;AACjD,cAAI,KAAK,QAAQ,eAAe,IAAI,GAAG;AACrC,mBAAO,KAAK,QAAQ,MAAM;AAAA,UAC5B,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,YAAW,UAAU,eAAe,SAAS,MAAM,OAAO;AACxD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,mBAAmB,SAAS,MAAM;AACrD,cAAI,KAAK,QAAQ,eAAe,IAAI,GAAG;AACrC,mBAAO,KAAK,QAAQ;AAAA,UACtB,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,YAAW,UAAU,mBAAmB,SAAS,SAAS;AACxD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,sBAAsB,SAAS,SAAS;AAC3D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,uBAAuB,SAAS,MAAM;AACzD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,iBAAiB,SAAS,cAAc,WAAW;AACtE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,iBAAiB,SAAS,cAAc,eAAe,OAAO;AACjF,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,oBAAoB,SAAS,cAAc,WAAW;AACzE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,qBAAqB,SAAS,cAAc,WAAW;AAC1E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,qBAAqB,SAAS,SAAS;AAC1D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,yBAAyB,SAAS,cAAc,WAAW;AAC9E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,eAAe,SAAS,MAAM;AACjD,iBAAO,KAAK,QAAQ,eAAe,IAAI;AAAA,QACzC;AAEA,QAAAA,YAAW,UAAU,iBAAiB,SAAS,cAAc,WAAW;AACtE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,iBAAiB,SAAS,MAAM,MAAM;AACzD,cAAI,KAAK,QAAQ,eAAe,IAAI,GAAG;AACrC,mBAAO,KAAK,QAAQ,MAAM;AAAA,UAC5B,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,YAAW,UAAU,mBAAmB,SAAS,cAAc,WAAW,MAAM;AAC9E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,qBAAqB,SAAS,QAAQ,MAAM;AAC/D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,uBAAuB,SAAS,SAAS;AAC5D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,yBAAyB,SAAS,cAAc,WAAW;AAC9E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,yBAAyB,SAAS,YAAY;AACjE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,YAAW,UAAU,cAAc,SAAS,MAAM;AAChD,cAAI,GAAG,GAAG;AACV,cAAI,CAACA,YAAW,UAAU,YAAY,MAAM,MAAM,SAAS,EAAE,YAAY,IAAI,GAAG;AAC9E,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,iBAAiB,KAAK,cAAc;AAC3C,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,cAAc,KAAK,WAAW;AACrC,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,QAAQ,WAAW,KAAK,QAAQ,QAAQ;AAC/C,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,IAAI,GAAG,OAAO,KAAK,QAAQ,SAAS,GAAG,KAAK,OAAO,KAAK,OAAO,KAAK,MAAM,IAAI,KAAK,OAAO,EAAE,IAAI,EAAE,GAAG;AAC5G,gBAAI,CAAC,KAAK,QAAQ,GAAG,YAAY,KAAK,QAAQ,EAAE,GAAG;AACjD,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACzSZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,kBAAkB,SACpB,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,aAAO,UAAU,mBAAoB,SAAS,YAAY;AACxD,eAAOC,mBAAkB,UAAU;AAEnC,iBAASA,kBAAiB,QAAQ;AAChC,UAAAA,kBAAiB,UAAU,YAAY,KAAK,MAAM,MAAM;AACxD,eAAK,QAAQ;AAAA,QACf;AAEA,eAAO,eAAeA,kBAAiB,WAAW,QAAQ;AAAA,UACxD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,mBAAO,KAAK,QAAQ,SAAS;AAAA,UAC/B;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,kBAAiB,WAAW,UAAU;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO,KAAK,MAAM;AAAA,UACpB;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,kBAAiB,WAAW,eAAe;AAAA,UAC/D,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,mBAAO,KAAK,QAAQ,SAAS;AAAA,UAC/B;AAAA,QACF,CAAC;AAED,QAAAA,kBAAiB,UAAU,QAAQ,WAAW;AAC5C,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,kBAAiB,UAAU,gBAAgB,SAAS,QAAQ,OAAO;AACjE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,kBAAiB,UAAU,aAAa,SAAS,KAAK;AACpD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,kBAAiB,UAAU,aAAa,SAAS,QAAQ,KAAK;AAC5D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,kBAAiB,UAAU,aAAa,SAAS,QAAQ,OAAO;AAC9D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,kBAAiB,UAAU,cAAc,SAAS,QAAQ,OAAO,KAAK;AACpE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,kBAAiB,UAAU,cAAc,SAAS,MAAM;AACtD,cAAI,CAACA,kBAAiB,UAAU,YAAY,MAAM,MAAM,SAAS,EAAE,YAAY,IAAI,GAAG;AACpF,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,SAAS,KAAK,MAAM;AAC3B,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC9EZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,UAAU,kBACtB,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,yBAAmB;AAEnB,aAAO,UAAU,WAAY,SAAS,YAAY;AAChD,eAAOC,WAAU,UAAU;AAE3B,iBAASA,UAAS,QAAQ,MAAM;AAC9B,UAAAA,UAAS,UAAU,YAAY,KAAK,MAAM,MAAM;AAChD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,yBAAyB,KAAK,UAAU,CAAC;AAAA,UAC3D;AACA,eAAK,OAAO;AACZ,eAAK,OAAO,SAAS;AACrB,eAAK,QAAQ,KAAK,UAAU,MAAM,IAAI;AAAA,QACxC;AAEA,QAAAA,UAAS,UAAU,QAAQ,WAAW;AACpC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,UAAS,UAAU,WAAW,SAAS,SAAS;AAC9C,iBAAO,KAAK,QAAQ,OAAO,MAAM,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACnF;AAEA,eAAOA;AAAA,MAET,EAAG,gBAAgB;AAAA,IAErB,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACnCZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,kBAAkB,YAC9B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,yBAAmB;AAEnB,aAAO,UAAU,aAAc,SAAS,YAAY;AAClD,eAAOC,aAAY,UAAU;AAE7B,iBAASA,YAAW,QAAQ,MAAM;AAChC,UAAAA,YAAW,UAAU,YAAY,KAAK,MAAM,MAAM;AAClD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,2BAA2B,KAAK,UAAU,CAAC;AAAA,UAC7D;AACA,eAAK,OAAO;AACZ,eAAK,OAAO,SAAS;AACrB,eAAK,QAAQ,KAAK,UAAU,QAAQ,IAAI;AAAA,QAC1C;AAEA,QAAAA,YAAW,UAAU,QAAQ,WAAW;AACtC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,YAAW,UAAU,WAAW,SAAS,SAAS;AAChD,iBAAO,KAAK,QAAQ,OAAO,QAAQ,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACrF;AAEA,eAAOA;AAAA,MAET,EAAG,gBAAgB;AAAA,IAErB,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACnCZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,gBAAgB,SAAS,UACrC,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW,kBAAqB;AAEhC,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,iBAAkB,SAAS,YAAY;AACtD,eAAOC,iBAAgB,UAAU;AAEjC,iBAASA,gBAAe,QAAQ,SAAS,UAAU,YAAY;AAC7D,cAAI;AACJ,UAAAA,gBAAe,UAAU,YAAY,KAAK,MAAM,MAAM;AACtD,cAAI,SAAS,OAAO,GAAG;AACrB,kBAAM,SAAS,UAAU,IAAI,SAAS,WAAW,IAAI,UAAU,aAAa,IAAI;AAAA,UAClF;AACA,cAAI,CAAC,SAAS;AACZ,sBAAU;AAAA,UACZ;AACA,eAAK,OAAO,SAAS;AACrB,eAAK,UAAU,KAAK,UAAU,WAAW,OAAO;AAChD,cAAI,YAAY,MAAM;AACpB,iBAAK,WAAW,KAAK,UAAU,YAAY,QAAQ;AAAA,UACrD;AACA,cAAI,cAAc,MAAM;AACtB,iBAAK,aAAa,KAAK,UAAU,cAAc,UAAU;AAAA,UAC3D;AAAA,QACF;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,SAAS;AACpD,iBAAO,KAAK,QAAQ,OAAO,YAAY,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACzF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC1CZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,eAAe,SAC3B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,gBAAiB,SAAS,YAAY;AACrD,eAAOC,gBAAe,UAAU;AAEhC,iBAASA,eAAc,QAAQ,aAAa,eAAe,eAAe,kBAAkB,cAAc;AACxG,UAAAA,eAAc,UAAU,YAAY,KAAK,MAAM,MAAM;AACrD,cAAI,eAAe,MAAM;AACvB,kBAAM,IAAI,MAAM,+BAA+B,KAAK,UAAU,CAAC;AAAA,UACjE;AACA,cAAI,iBAAiB,MAAM;AACzB,kBAAM,IAAI,MAAM,iCAAiC,KAAK,UAAU,WAAW,CAAC;AAAA,UAC9E;AACA,cAAI,CAAC,eAAe;AAClB,kBAAM,IAAI,MAAM,iCAAiC,KAAK,UAAU,WAAW,CAAC;AAAA,UAC9E;AACA,cAAI,CAAC,kBAAkB;AACrB,kBAAM,IAAI,MAAM,oCAAoC,KAAK,UAAU,WAAW,CAAC;AAAA,UACjF;AACA,cAAI,iBAAiB,QAAQ,GAAG,MAAM,GAAG;AACvC,+BAAmB,MAAM;AAAA,UAC3B;AACA,cAAI,CAAC,iBAAiB,MAAM,wCAAwC,GAAG;AACrE,kBAAM,IAAI,MAAM,oFAAoF,KAAK,UAAU,WAAW,CAAC;AAAA,UACjI;AACA,cAAI,gBAAgB,CAAC,iBAAiB,MAAM,qBAAqB,GAAG;AAClE,kBAAM,IAAI,MAAM,uDAAuD,KAAK,UAAU,WAAW,CAAC;AAAA,UACpG;AACA,eAAK,cAAc,KAAK,UAAU,KAAK,WAAW;AAClD,eAAK,OAAO,SAAS;AACrB,eAAK,gBAAgB,KAAK,UAAU,KAAK,aAAa;AACtD,eAAK,gBAAgB,KAAK,UAAU,WAAW,aAAa;AAC5D,cAAI,cAAc;AAChB,iBAAK,eAAe,KAAK,UAAU,cAAc,YAAY;AAAA,UAC/D;AACA,eAAK,mBAAmB;AAAA,QAC1B;AAEA,QAAAA,eAAc,UAAU,WAAW,SAAS,SAAS;AACnD,iBAAO,KAAK,QAAQ,OAAO,WAAW,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACxF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACtDZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,cAAc,SAAS,UACnC,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW,kBAAqB;AAEhC,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,eAAgB,SAAS,YAAY;AACpD,eAAOC,eAAc,UAAU;AAE/B,iBAASA,cAAa,QAAQ,IAAI,MAAM,OAAO;AAC7C,UAAAA,cAAa,UAAU,YAAY,KAAK,MAAM,MAAM;AACpD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,8BAA8B,KAAK,UAAU,IAAI,CAAC;AAAA,UACpE;AACA,cAAI,SAAS,MAAM;AACjB,kBAAM,IAAI,MAAM,+BAA+B,KAAK,UAAU,IAAI,CAAC;AAAA,UACrE;AACA,eAAK,KAAK,CAAC,CAAC;AACZ,eAAK,OAAO,KAAK,UAAU,KAAK,IAAI;AACpC,eAAK,OAAO,SAAS;AACrB,cAAI,CAAC,SAAS,KAAK,GAAG;AACpB,iBAAK,QAAQ,KAAK,UAAU,eAAe,KAAK;AAChD,iBAAK,WAAW;AAAA,UAClB,OAAO;AACL,gBAAI,CAAC,MAAM,SAAS,CAAC,MAAM,OAAO;AAChC,oBAAM,IAAI,MAAM,2EAA2E,KAAK,UAAU,IAAI,CAAC;AAAA,YACjH;AACA,gBAAI,MAAM,SAAS,CAAC,MAAM,OAAO;AAC/B,oBAAM,IAAI,MAAM,iEAAiE,KAAK,UAAU,IAAI,CAAC;AAAA,YACvG;AACA,iBAAK,WAAW;AAChB,gBAAI,MAAM,SAAS,MAAM;AACvB,mBAAK,QAAQ,KAAK,UAAU,SAAS,MAAM,KAAK;AAAA,YAClD;AACA,gBAAI,MAAM,SAAS,MAAM;AACvB,mBAAK,QAAQ,KAAK,UAAU,SAAS,MAAM,KAAK;AAAA,YAClD;AACA,gBAAI,MAAM,SAAS,MAAM;AACvB,mBAAK,QAAQ,KAAK,UAAU,SAAS,MAAM,KAAK;AAAA,YAClD;AACA,gBAAI,KAAK,MAAM,KAAK,OAAO;AACzB,oBAAM,IAAI,MAAM,gEAAgE,KAAK,UAAU,IAAI,CAAC;AAAA,YACtG;AAAA,UACF;AAAA,QACF;AAEA,eAAO,eAAeA,cAAa,WAAW,YAAY;AAAA,UACxD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,YAAY;AAAA,UACxD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,gBAAgB;AAAA,UAC5D,KAAK,WAAW;AACd,mBAAO,KAAK,SAAS;AAAA,UACvB;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,iBAAiB;AAAA,UAC7D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,eAAe;AAAA,UAC3D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,cAAa,WAAW,cAAc;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,QAAAA,cAAa,UAAU,WAAW,SAAS,SAAS;AAClD,iBAAO,KAAK,QAAQ,OAAO,UAAU,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACvF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;AChGZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,eAAe,SAC3B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,gBAAiB,SAAS,YAAY;AACrD,eAAOC,gBAAe,UAAU;AAEhC,iBAASA,eAAc,QAAQ,MAAM,OAAO;AAC1C,UAAAA,eAAc,UAAU,YAAY,KAAK,MAAM,MAAM;AACrD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,+BAA+B,KAAK,UAAU,CAAC;AAAA,UACjE;AACA,cAAI,CAAC,OAAO;AACV,oBAAQ;AAAA,UACV;AACA,cAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,oBAAQ,MAAM,MAAM,KAAK,GAAG,IAAI;AAAA,UAClC;AACA,eAAK,OAAO,KAAK,UAAU,KAAK,IAAI;AACpC,eAAK,OAAO,SAAS;AACrB,eAAK,QAAQ,KAAK,UAAU,gBAAgB,KAAK;AAAA,QACnD;AAEA,QAAAA,eAAc,UAAU,WAAW,SAAS,SAAS;AACnD,iBAAO,KAAK,QAAQ,OAAO,WAAW,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACxF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACrCZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,gBAAgB,SAC5B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,iBAAkB,SAAS,YAAY;AACtD,eAAOC,iBAAgB,UAAU;AAEjC,iBAASA,gBAAe,QAAQ,MAAM,OAAO;AAC3C,UAAAA,gBAAe,UAAU,YAAY,KAAK,MAAM,MAAM;AACtD,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,gCAAgC,KAAK,UAAU,IAAI,CAAC;AAAA,UACtE;AACA,cAAI,CAAC,MAAM,SAAS,CAAC,MAAM,OAAO;AAChC,kBAAM,IAAI,MAAM,uEAAuE,KAAK,UAAU,IAAI,CAAC;AAAA,UAC7G;AACA,eAAK,OAAO,KAAK,UAAU,KAAK,IAAI;AACpC,eAAK,OAAO,SAAS;AACrB,cAAI,MAAM,SAAS,MAAM;AACvB,iBAAK,QAAQ,KAAK,UAAU,SAAS,MAAM,KAAK;AAAA,UAClD;AACA,cAAI,MAAM,SAAS,MAAM;AACvB,iBAAK,QAAQ,KAAK,UAAU,SAAS,MAAM,KAAK;AAAA,UAClD;AAAA,QACF;AAEA,eAAO,eAAeA,gBAAe,WAAW,YAAY;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,gBAAe,WAAW,YAAY;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,QAAAA,gBAAe,UAAU,WAAW,SAAS,SAAS;AACpD,iBAAO,KAAK,QAAQ,OAAO,YAAY,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACzF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACnDZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,eAAe,eAAe,cAAc,gBAAgB,YAAY,iBAAiB,SAAS,UAC9G,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW,kBAAqB;AAEhC,gBAAU;AAEV,iBAAW;AAEX,sBAAgB;AAEhB,qBAAe;AAEf,sBAAgB;AAEhB,uBAAiB;AAEjB,wBAAkB;AAElB,aAAO,UAAU,aAAc,SAAS,YAAY;AAClD,eAAOC,aAAY,UAAU;AAE7B,iBAASA,YAAW,QAAQ,OAAO,OAAO;AACxC,cAAI,OAAO,GAAG,KAAK,KAAK,MAAM;AAC9B,UAAAA,YAAW,UAAU,YAAY,KAAK,MAAM,MAAM;AAClD,eAAK,OAAO,SAAS;AACrB,cAAI,OAAO,UAAU;AACnB,kBAAM,OAAO;AACb,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,kBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,qBAAK,OAAO,MAAM;AAClB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AACA,eAAK,iBAAiB;AACtB,cAAI,SAAS,KAAK,GAAG;AACnB,mBAAO,OAAO,QAAQ,KAAK,OAAO,QAAQ,KAAK;AAAA,UACjD;AACA,cAAI,SAAS,MAAM;AACjB,mBAAO,CAAC,OAAO,KAAK,GAAG,QAAQ,KAAK,IAAI,QAAQ,KAAK;AAAA,UACvD;AACA,cAAI,SAAS,MAAM;AACjB,iBAAK,QAAQ,KAAK,UAAU,SAAS,KAAK;AAAA,UAC5C;AACA,cAAI,SAAS,MAAM;AACjB,iBAAK,QAAQ,KAAK,UAAU,SAAS,KAAK;AAAA,UAC5C;AAAA,QACF;AAEA,eAAO,eAAeA,YAAW,WAAW,YAAY;AAAA,UACtD,KAAK,WAAW;AACd,gBAAI,OAAO,GAAG,KAAK,OAAO;AAC1B,oBAAQ,CAAC;AACT,kBAAM,KAAK;AACX,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,kBAAK,MAAM,SAAS,SAAS,qBAAsB,CAAC,MAAM,IAAI;AAC5D,sBAAM,MAAM,QAAQ;AAAA,cACtB;AAAA,YACF;AACA,mBAAO,IAAI,gBAAgB,KAAK;AAAA,UAClC;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,aAAa;AAAA,UACvD,KAAK,WAAW;AACd,gBAAI,OAAO,GAAG,KAAK,OAAO;AAC1B,oBAAQ,CAAC;AACT,kBAAM,KAAK;AACX,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,kBAAI,MAAM,SAAS,SAAS,qBAAqB;AAC/C,sBAAM,MAAM,QAAQ;AAAA,cACtB;AAAA,YACF;AACA,mBAAO,IAAI,gBAAgB,KAAK;AAAA,UAClC;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,YAAY;AAAA,UACtD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,YAAY;AAAA,UACtD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,YAAW,WAAW,kBAAkB;AAAA,UAC5D,KAAK,WAAW;AACd,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,QAAAA,YAAW,UAAU,UAAU,SAAS,MAAM,OAAO;AACnD,cAAI;AACJ,kBAAQ,IAAI,cAAc,MAAM,MAAM,KAAK;AAC3C,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,UAAU,SAAS,aAAa,eAAe,eAAe,kBAAkB,cAAc;AACjH,cAAI;AACJ,kBAAQ,IAAI,cAAc,MAAM,aAAa,eAAe,eAAe,kBAAkB,YAAY;AACzG,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,SAAS,SAAS,MAAM,OAAO;AAClD,cAAI;AACJ,kBAAQ,IAAI,aAAa,MAAM,OAAO,MAAM,KAAK;AACjD,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,UAAU,SAAS,MAAM,OAAO;AACnD,cAAI;AACJ,kBAAQ,IAAI,aAAa,MAAM,MAAM,MAAM,KAAK;AAChD,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,WAAW,SAAS,MAAM,OAAO;AACpD,cAAI;AACJ,kBAAQ,IAAI,eAAe,MAAM,MAAM,KAAK;AAC5C,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,YAAW,UAAU,WAAW,SAAS,SAAS;AAChD,iBAAO,KAAK,QAAQ,OAAO,QAAQ,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACrF;AAEA,QAAAA,YAAW,UAAU,MAAM,SAAS,MAAM,OAAO;AAC/C,iBAAO,KAAK,QAAQ,MAAM,KAAK;AAAA,QACjC;AAEA,QAAAA,YAAW,UAAU,MAAM,SAAS,aAAa,eAAe,eAAe,kBAAkB,cAAc;AAC7G,iBAAO,KAAK,QAAQ,aAAa,eAAe,eAAe,kBAAkB,YAAY;AAAA,QAC/F;AAEA,QAAAA,YAAW,UAAU,MAAM,SAAS,MAAM,OAAO;AAC/C,iBAAO,KAAK,OAAO,MAAM,KAAK;AAAA,QAChC;AAEA,QAAAA,YAAW,UAAU,OAAO,SAAS,MAAM,OAAO;AAChD,iBAAO,KAAK,QAAQ,MAAM,KAAK;AAAA,QACjC;AAEA,QAAAA,YAAW,UAAU,MAAM,SAAS,MAAM,OAAO;AAC/C,iBAAO,KAAK,SAAS,MAAM,KAAK;AAAA,QAClC;AAEA,QAAAA,YAAW,UAAU,KAAK,WAAW;AACnC,iBAAO,KAAK,KAAK,KAAK,KAAK;AAAA,QAC7B;AAEA,QAAAA,YAAW,UAAU,cAAc,SAAS,MAAM;AAChD,cAAI,CAACA,YAAW,UAAU,YAAY,MAAM,MAAM,SAAS,EAAE,YAAY,IAAI,GAAG;AAC9E,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,SAAS,KAAK,MAAM;AAC3B,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,aAAa,KAAK,UAAU;AACnC,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,aAAa,KAAK,UAAU;AACnC,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACzLZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,SAAS,QACrB,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,gBAAU;AAEV,aAAO,UAAU,SAAU,SAAS,YAAY;AAC9C,eAAOC,SAAQ,UAAU;AAEzB,iBAASA,QAAO,QAAQ,MAAM;AAC5B,UAAAA,QAAO,UAAU,YAAY,KAAK,MAAM,MAAM;AAC9C,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,uBAAuB,KAAK,UAAU,CAAC;AAAA,UACzD;AACA,eAAK,OAAO,SAAS;AACrB,eAAK,QAAQ,KAAK,UAAU,IAAI,IAAI;AAAA,QACtC;AAEA,QAAAA,QAAO,UAAU,QAAQ,WAAW;AAClC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,QAAO,UAAU,WAAW,SAAS,SAAS;AAC5C,iBAAO,KAAK,QAAQ,OAAO,IAAI,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACjF;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;AClCZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,kBAAkB,SAC9B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,yBAAmB;AAEnB,aAAO,UAAU,UAAW,SAAS,YAAY;AAC/C,eAAOC,UAAS,UAAU;AAE1B,iBAASA,SAAQ,QAAQ,MAAM;AAC7B,UAAAA,SAAQ,UAAU,YAAY,KAAK,MAAM,MAAM;AAC/C,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,2BAA2B,KAAK,UAAU,CAAC;AAAA,UAC7D;AACA,eAAK,OAAO;AACZ,eAAK,OAAO,SAAS;AACrB,eAAK,QAAQ,KAAK,UAAU,KAAK,IAAI;AAAA,QACvC;AAEA,eAAO,eAAeA,SAAQ,WAAW,8BAA8B;AAAA,UACrE,KAAK,WAAW;AACd,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,aAAa;AAAA,UACpD,KAAK,WAAW;AACd,gBAAI,MAAM,MAAM;AAChB,kBAAM;AACN,mBAAO,KAAK;AACZ,mBAAO,MAAM;AACX,oBAAM,KAAK,OAAO;AAClB,qBAAO,KAAK;AAAA,YACd;AACA,mBAAO,KAAK;AACZ,mBAAO,KAAK;AACZ,mBAAO,MAAM;AACX,oBAAM,MAAM,KAAK;AACjB,qBAAO,KAAK;AAAA,YACd;AACA,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,QAAAA,SAAQ,UAAU,QAAQ,WAAW;AACnC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,SAAQ,UAAU,WAAW,SAAS,SAAS;AAC7C,iBAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QAClF;AAEA,QAAAA,SAAQ,UAAU,YAAY,SAAS,QAAQ;AAC7C,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,mBAAmB,SAAS,SAAS;AACrD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,eAAOA;AAAA,MAET,EAAG,gBAAgB;AAAA,IAErB,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACpEZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,kBAAkB,0BAC9B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,yBAAmB;AAEnB,aAAO,UAAU,2BAA4B,SAAS,YAAY;AAChE,eAAOC,2BAA0B,UAAU;AAE3C,iBAASA,0BAAyB,QAAQ,QAAQ,OAAO;AACvD,UAAAA,0BAAyB,UAAU,YAAY,KAAK,MAAM,MAAM;AAChE,cAAI,UAAU,MAAM;AAClB,kBAAM,IAAI,MAAM,iCAAiC,KAAK,UAAU,CAAC;AAAA,UACnE;AACA,eAAK,OAAO,SAAS;AACrB,eAAK,SAAS,KAAK,UAAU,UAAU,MAAM;AAC7C,eAAK,OAAO,KAAK;AACjB,cAAI,OAAO;AACT,iBAAK,QAAQ,KAAK,UAAU,SAAS,KAAK;AAAA,UAC5C;AAAA,QACF;AAEA,QAAAA,0BAAyB,UAAU,QAAQ,WAAW;AACpD,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,0BAAyB,UAAU,WAAW,SAAS,SAAS;AAC9D,iBAAO,KAAK,QAAQ,OAAO,sBAAsB,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACnG;AAEA,QAAAA,0BAAyB,UAAU,cAAc,SAAS,MAAM;AAC9D,cAAI,CAACA,0BAAyB,UAAU,YAAY,MAAM,MAAM,SAAS,EAAE,YAAY,IAAI,GAAG;AAC5F,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,WAAW,KAAK,QAAQ;AAC/B,mBAAO;AAAA,UACT;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,gBAAgB;AAAA,IAErB,GAAG,KAAK,OAAI;AAAA;AAAA;;;AChDZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,UAAU,SACtB,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,iBAAW;AAEX,aAAO,UAAU,WAAY,SAAS,YAAY;AAChD,eAAOC,WAAU,UAAU;AAE3B,iBAASA,UAAS,QAAQ;AACxB,UAAAA,UAAS,UAAU,YAAY,KAAK,MAAM,MAAM;AAChD,eAAK,OAAO,SAAS;AAAA,QACvB;AAEA,QAAAA,UAAS,UAAU,QAAQ,WAAW;AACpC,iBAAO,OAAO,OAAO,IAAI;AAAA,QAC3B;AAEA,QAAAA,UAAS,UAAU,WAAW,SAAS,SAAS;AAC9C,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC9BZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI;AAEJ,aAAO,UAAU,cAAe,WAAW;AACzC,iBAASC,aAAY,OAAO;AAC1B,eAAK,QAAQ;AAAA,QACf;AAEA,eAAO,eAAeA,aAAY,WAAW,UAAU;AAAA,UACrD,KAAK,WAAW;AACd,mBAAO,KAAK,MAAM,UAAU;AAAA,UAC9B;AAAA,QACF,CAAC;AAED,QAAAA,aAAY,UAAU,QAAQ,WAAW;AACvC,iBAAO,KAAK,QAAQ;AAAA,QACtB;AAEA,QAAAA,aAAY,UAAU,OAAO,SAAS,OAAO;AAC3C,iBAAO,KAAK,MAAM,UAAU;AAAA,QAC9B;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC3BZ;AAAA;AACA,KAAC,WAAW;AACV,aAAO,UAAU;AAAA,QACf,cAAc;AAAA,QACd,WAAW;AAAA,QACX,WAAW;AAAA,QACX,UAAU;AAAA,QACV,aAAa;AAAA,QACb,wBAAwB;AAAA,MAC1B;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACXZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,kBAAkB,UAAU,UAAU,YAAY,gBAAgB,YAAY,UAAU,YAAY,iBAAiB,SAAS,aAAa,0BAA0B,QAAQ,SAAS,UAAU,SAAS,YAAY,UAAU,MACjO,UAAU,CAAC,EAAE;AAEf,aAAO,mBAAsB,WAAW,KAAK,UAAU,aAAa,KAAK,YAAY,UAAU,KAAK,SAAS,WAAW,KAAK;AAE7H,mBAAa;AAEb,iBAAW;AAEX,mBAAa;AAEb,uBAAiB;AAEjB,mBAAa;AAEb,eAAS;AAET,gBAAU;AAEV,iCAA2B;AAE3B,iBAAW;AAEX,iBAAW;AAEX,oBAAc;AAEd,wBAAkB;AAElB,yBAAmB;AAEnB,aAAO,UAAU,UAAW,WAAW;AACrC,iBAASC,SAAQ,SAAS;AACxB,eAAK,SAAS;AACd,cAAI,KAAK,QAAQ;AACf,iBAAK,UAAU,KAAK,OAAO;AAC3B,iBAAK,YAAY,KAAK,OAAO;AAAA,UAC/B;AACA,eAAK,QAAQ;AACb,eAAK,WAAW,CAAC;AACjB,eAAK,UAAU;AACf,cAAI,CAAC,YAAY;AACf,yBAAa;AACb,uBAAW;AACX,yBAAa;AACb,6BAAiB;AACjB,yBAAa;AACb,qBAAS;AACT,sBAAU;AACV,uCAA2B;AAC3B,uBAAW;AACX,uBAAW;AACX,0BAAc;AACd,8BAAkB;AAClB,+BAAmB;AAAA,UACrB;AAAA,QACF;AAEA,eAAO,eAAeA,SAAQ,WAAW,YAAY;AAAA,UACnD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,YAAY;AAAA,UACnD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,aAAa;AAAA,UACpD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,cAAc;AAAA,UACrD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,cAAc;AAAA,UACrD,KAAK,WAAW;AACd,gBAAI,CAAC,KAAK,iBAAiB,CAAC,KAAK,cAAc,OAAO;AACpD,mBAAK,gBAAgB,IAAI,YAAY,KAAK,QAAQ;AAAA,YACpD;AACA,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,cAAc;AAAA,UACrD,KAAK,WAAW;AACd,mBAAO,KAAK,SAAS,MAAM;AAAA,UAC7B;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,aAAa;AAAA,UACpD,KAAK,WAAW;AACd,mBAAO,KAAK,SAAS,KAAK,SAAS,SAAS,MAAM;AAAA,UACpD;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,mBAAmB;AAAA,UAC1D,KAAK,WAAW;AACd,gBAAI;AACJ,gBAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,mBAAO,KAAK,OAAO,SAAS,IAAI,MAAM;AAAA,UACxC;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,eAAe;AAAA,UACtD,KAAK,WAAW;AACd,gBAAI;AACJ,gBAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,mBAAO,KAAK,OAAO,SAAS,IAAI,MAAM;AAAA,UACxC;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,iBAAiB;AAAA,UACxD,KAAK,WAAW;AACd,mBAAO,KAAK,SAAS,KAAK;AAAA,UAC5B;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,SAAQ,WAAW,eAAe;AAAA,UACtD,KAAK,WAAW;AACd,gBAAI,OAAO,GAAG,KAAK,MAAM;AACzB,gBAAI,KAAK,aAAa,SAAS,WAAW,KAAK,aAAa,SAAS,kBAAkB;AACrF,oBAAM;AACN,qBAAO,KAAK;AACZ,mBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,wBAAQ,KAAK;AACb,oBAAI,MAAM,aAAa;AACrB,yBAAO,MAAM;AAAA,gBACf;AAAA,cACF;AACA,qBAAO;AAAA,YACT,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,UACA,KAAK,SAAS,OAAO;AACnB,kBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,UAC1E;AAAA,QACF,CAAC;AAED,QAAAA,SAAQ,UAAU,YAAY,SAAS,QAAQ;AAC7C,cAAI,OAAO,GAAG,KAAK,MAAM;AACzB,eAAK,SAAS;AACd,cAAI,QAAQ;AACV,iBAAK,UAAU,OAAO;AACtB,iBAAK,YAAY,OAAO;AAAA,UAC1B;AACA,iBAAO,KAAK;AACZ,oBAAU,CAAC;AACX,eAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,oBAAQ,KAAK;AACb,oBAAQ,KAAK,MAAM,UAAU,IAAI,CAAC;AAAA,UACpC;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,UAAU,SAAS,MAAM,YAAY,MAAM;AAC3D,cAAI,WAAW,MAAM,GAAG,GAAG,KAAK,WAAW,KAAK,MAAM,MAAM,MAAM;AAClE,sBAAY;AACZ,cAAI,eAAe,QAAS,QAAQ,MAAO;AACzC,mBAAO,CAAC,CAAC,GAAG,IAAI,GAAG,aAAa,KAAK,IAAI,OAAO,KAAK;AAAA,UACvD;AACA,cAAI,cAAc,MAAM;AACtB,yBAAa,CAAC;AAAA,UAChB;AACA,uBAAa,SAAS,UAAU;AAChC,cAAI,CAAC,SAAS,UAAU,GAAG;AACzB,mBAAO,CAAC,YAAY,IAAI,GAAG,OAAO,KAAK,IAAI,aAAa,KAAK;AAAA,UAC/D;AACA,cAAI,QAAQ,MAAM;AAChB,mBAAO,SAAS,IAAI;AAAA,UACtB;AACA,cAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,iBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,qBAAO,KAAK;AACZ,0BAAY,KAAK,QAAQ,IAAI;AAAA,YAC/B;AAAA,UACF,WAAW,WAAW,IAAI,GAAG;AAC3B,wBAAY,KAAK,QAAQ,KAAK,MAAM,CAAC;AAAA,UACvC,WAAW,SAAS,IAAI,GAAG;AACzB,iBAAK,OAAO,MAAM;AAChB,kBAAI,CAAC,QAAQ,KAAK,MAAM,GAAG;AAAG;AAC9B,oBAAM,KAAK;AACX,kBAAI,WAAW,GAAG,GAAG;AACnB,sBAAM,IAAI,MAAM;AAAA,cAClB;AACA,kBAAI,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,iBAAiB,IAAI,QAAQ,KAAK,UAAU,aAAa,MAAM,GAAG;AACrH,4BAAY,KAAK,UAAU,IAAI,OAAO,KAAK,UAAU,cAAc,MAAM,GAAG,GAAG;AAAA,cACjF,WAAW,CAAC,KAAK,QAAQ,sBAAsB,MAAM,QAAQ,GAAG,KAAK,QAAQ,GAAG,GAAG;AACjF,4BAAY,KAAK,MAAM;AAAA,cACzB,WAAW,SAAS,GAAG,KAAK,QAAQ,GAAG,GAAG;AACxC,4BAAY,KAAK,QAAQ,GAAG;AAAA,cAC9B,WAAW,CAAC,KAAK,QAAQ,iBAAkB,OAAO,MAAO;AACvD,4BAAY,KAAK,MAAM;AAAA,cACzB,WAAW,CAAC,KAAK,QAAQ,sBAAsB,MAAM,QAAQ,GAAG,GAAG;AACjE,qBAAK,IAAI,GAAG,OAAO,IAAI,QAAQ,IAAI,MAAM,KAAK;AAC5C,yBAAO,IAAI;AACX,8BAAY,CAAC;AACb,4BAAU,OAAO;AACjB,8BAAY,KAAK,QAAQ,SAAS;AAAA,gBACpC;AAAA,cACF,WAAW,SAAS,GAAG,GAAG;AACxB,oBAAI,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,kBAAkB,IAAI,QAAQ,KAAK,UAAU,cAAc,MAAM,GAAG;AACvH,8BAAY,KAAK,QAAQ,GAAG;AAAA,gBAC9B,OAAO;AACL,8BAAY,KAAK,QAAQ,GAAG;AAC5B,4BAAU,QAAQ,GAAG;AAAA,gBACvB;AAAA,cACF,OAAO;AACL,4BAAY,KAAK,QAAQ,KAAK,GAAG;AAAA,cACnC;AAAA,YACF;AAAA,UACF,WAAW,CAAC,KAAK,QAAQ,iBAAiB,SAAS,MAAM;AACvD,wBAAY,KAAK,MAAM;AAAA,UACzB,OAAO;AACL,gBAAI,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,kBAAkB,KAAK,QAAQ,KAAK,UAAU,cAAc,MAAM,GAAG;AACxH,0BAAY,KAAK,KAAK,IAAI;AAAA,YAC5B,WAAW,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,mBAAmB,KAAK,QAAQ,KAAK,UAAU,eAAe,MAAM,GAAG;AACjI,0BAAY,KAAK,MAAM,IAAI;AAAA,YAC7B,WAAW,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,qBAAqB,KAAK,QAAQ,KAAK,UAAU,iBAAiB,MAAM,GAAG;AACrI,0BAAY,KAAK,QAAQ,IAAI;AAAA,YAC/B,WAAW,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,iBAAiB,KAAK,QAAQ,KAAK,UAAU,aAAa,MAAM,GAAG;AAC7H,0BAAY,KAAK,IAAI,IAAI;AAAA,YAC3B,WAAW,CAAC,KAAK,QAAQ,oBAAoB,KAAK,UAAU,gBAAgB,KAAK,QAAQ,KAAK,UAAU,YAAY,MAAM,GAAG;AAC3H,0BAAY,KAAK,YAAY,KAAK,OAAO,KAAK,UAAU,aAAa,MAAM,GAAG,IAAI;AAAA,YACpF,OAAO;AACL,0BAAY,KAAK,KAAK,MAAM,YAAY,IAAI;AAAA,YAC9C;AAAA,UACF;AACA,cAAI,aAAa,MAAM;AACrB,kBAAM,IAAI,MAAM,yCAAyC,OAAO,OAAO,KAAK,UAAU,CAAC;AAAA,UACzF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,MAAM,YAAY,MAAM;AAChE,cAAI,OAAO,GAAG,UAAU,UAAU;AAClC,cAAI,QAAQ,OAAO,KAAK,OAAO,QAAQ;AACrC,uBAAW;AACX,uBAAW;AACX,qBAAS,UAAU,IAAI;AACvB,gBAAI,UAAU;AACZ,kBAAI,SAAS,QAAQ,QAAQ;AAC7B,wBAAU,SAAS,OAAO,CAAC;AAC3B,uBAAS,KAAK,QAAQ;AACtB,oBAAM,UAAU,KAAK,MAAM,UAAU,OAAO;AAAA,YAC9C,OAAO;AACL,uBAAS,KAAK,QAAQ;AAAA,YACxB;AACA,mBAAO;AAAA,UACT,OAAO;AACL,gBAAI,KAAK,QAAQ;AACf,oBAAM,IAAI,MAAM,2CAA2C,KAAK,UAAU,IAAI,CAAC;AAAA,YACjF;AACA,gBAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,sBAAU,KAAK,OAAO,SAAS,OAAO,CAAC;AACvC,oBAAQ,KAAK,OAAO,QAAQ,MAAM,YAAY,IAAI;AAClD,kBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,MAAM,YAAY,MAAM;AAC/D,cAAI,OAAO,GAAG;AACd,cAAI,KAAK,QAAQ;AACf,kBAAM,IAAI,MAAM,2CAA2C,KAAK,UAAU,IAAI,CAAC;AAAA,UACjF;AACA,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,oBAAU,KAAK,OAAO,SAAS,OAAO,IAAI,CAAC;AAC3C,kBAAQ,KAAK,OAAO,QAAQ,MAAM,YAAY,IAAI;AAClD,gBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,SAAS,WAAW;AACpC,cAAI,GAAG;AACP,cAAI,KAAK,QAAQ;AACf,kBAAM,IAAI,MAAM,qCAAqC,KAAK,UAAU,CAAC;AAAA,UACvE;AACA,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,WAAC,EAAE,OAAO,MAAM,KAAK,OAAO,UAAU,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,OAAO,OAAO,CAAC,CAAC,CAAC,GAAG;AACzE,iBAAO,KAAK;AAAA,QACd;AAEA,QAAAA,SAAQ,UAAU,OAAO,SAAS,MAAM,YAAY,MAAM;AACxD,cAAI,OAAO;AACX,cAAI,QAAQ,MAAM;AAChB,mBAAO,SAAS,IAAI;AAAA,UACtB;AACA,yBAAe,aAAa,CAAC;AAC7B,uBAAa,SAAS,UAAU;AAChC,cAAI,CAAC,SAAS,UAAU,GAAG;AACzB,mBAAO,CAAC,YAAY,IAAI,GAAG,OAAO,KAAK,IAAI,aAAa,KAAK;AAAA,UAC/D;AACA,kBAAQ,IAAI,WAAW,MAAM,MAAM,UAAU;AAC7C,cAAI,QAAQ,MAAM;AAChB,kBAAM,KAAK,IAAI;AAAA,UACjB;AACA,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,OAAO,SAAS,OAAO;AACvC,cAAI;AACJ,cAAI,SAAS,KAAK,GAAG;AACnB,iBAAK,QAAQ,KAAK;AAAA,UACpB;AACA,kBAAQ,IAAI,QAAQ,MAAM,KAAK;AAC/B,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,QAAQ,SAAS,OAAO;AACxC,cAAI;AACJ,kBAAQ,IAAI,SAAS,MAAM,KAAK;AAChC,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,UAAU,SAAS,OAAO;AAC1C,cAAI;AACJ,kBAAQ,IAAI,WAAW,MAAM,KAAK;AAClC,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,gBAAgB,SAAS,OAAO;AAChD,cAAI,OAAO,GAAG;AACd,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,oBAAU,KAAK,OAAO,SAAS,OAAO,CAAC;AACvC,kBAAQ,KAAK,OAAO,QAAQ,KAAK;AACjC,gBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,OAAO;AAC/C,cAAI,OAAO,GAAG;AACd,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,oBAAU,KAAK,OAAO,SAAS,OAAO,IAAI,CAAC;AAC3C,kBAAQ,KAAK,OAAO,QAAQ,KAAK;AACjC,gBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,OAAO;AACtC,cAAI;AACJ,kBAAQ,IAAI,OAAO,MAAM,KAAK;AAC9B,eAAK,SAAS,KAAK,KAAK;AACxB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,QAAQ,WAAW;AACnC,cAAI;AACJ,kBAAQ,IAAI,SAAS,IAAI;AACzB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,QAAQ,OAAO;AACtD,cAAI,WAAW,UAAU,aAAa,GAAG;AACzC,cAAI,UAAU,MAAM;AAClB,qBAAS,SAAS,MAAM;AAAA,UAC1B;AACA,cAAI,SAAS,MAAM;AACjB,oBAAQ,SAAS,KAAK;AAAA,UACxB;AACA,cAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,iBAAK,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAC7C,0BAAY,OAAO;AACnB,mBAAK,YAAY,SAAS;AAAA,YAC5B;AAAA,UACF,WAAW,SAAS,MAAM,GAAG;AAC3B,iBAAK,aAAa,QAAQ;AACxB,kBAAI,CAAC,QAAQ,KAAK,QAAQ,SAAS;AAAG;AACtC,yBAAW,OAAO;AAClB,mBAAK,YAAY,WAAW,QAAQ;AAAA,YACtC;AAAA,UACF,OAAO;AACL,gBAAI,WAAW,KAAK,GAAG;AACrB,sBAAQ,MAAM,MAAM;AAAA,YACtB;AACA,0BAAc,IAAI,yBAAyB,MAAM,QAAQ,KAAK;AAC9D,iBAAK,SAAS,KAAK,WAAW;AAAA,UAChC;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,oBAAoB,SAAS,QAAQ,OAAO;AAC5D,cAAI,OAAO,GAAG;AACd,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,oBAAU,KAAK,OAAO,SAAS,OAAO,CAAC;AACvC,kBAAQ,KAAK,OAAO,YAAY,QAAQ,KAAK;AAC7C,gBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,mBAAmB,SAAS,QAAQ,OAAO;AAC3D,cAAI,OAAO,GAAG;AACd,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,oBAAU,KAAK,OAAO,SAAS,OAAO,IAAI,CAAC;AAC3C,kBAAQ,KAAK,OAAO,YAAY,QAAQ,KAAK;AAC7C,gBAAM,UAAU,KAAK,MAAM,KAAK,OAAO,UAAU,OAAO;AACxD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,SAAS,UAAU,YAAY;AACtE,cAAI,KAAK;AACT,gBAAM,KAAK,SAAS;AACpB,mBAAS,IAAI,eAAe,KAAK,SAAS,UAAU,UAAU;AAC9D,cAAI,IAAI,SAAS,WAAW,GAAG;AAC7B,gBAAI,SAAS,QAAQ,MAAM;AAAA,UAC7B,WAAW,IAAI,SAAS,GAAG,SAAS,SAAS,aAAa;AACxD,gBAAI,SAAS,KAAK;AAAA,UACpB,OAAO;AACL,gBAAI,SAAS,QAAQ,MAAM;AAAA,UAC7B;AACA,iBAAO,IAAI,KAAK,KAAK;AAAA,QACvB;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,OAAO,OAAO;AAC7C,cAAI,OAAO,KAAK,SAAS,GAAG,GAAG,GAAG,KAAK,MAAM,MAAM;AACnD,gBAAM,KAAK,SAAS;AACpB,oBAAU,IAAI,WAAW,KAAK,OAAO,KAAK;AAC1C,iBAAO,IAAI;AACX,eAAK,IAAI,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,IAAI,EAAE,GAAG;AACnD,oBAAQ,KAAK;AACb,gBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,kBAAI,SAAS,KAAK;AAClB,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO,IAAI;AACX,eAAK,IAAI,IAAI,GAAG,OAAO,KAAK,QAAQ,IAAI,MAAM,IAAI,EAAE,GAAG;AACrD,oBAAQ,KAAK;AACb,gBAAI,MAAM,QAAQ;AAChB,kBAAI,SAAS,OAAO,GAAG,GAAG,OAAO;AACjC,qBAAO;AAAA,YACT;AAAA,UACF;AACA,cAAI,SAAS,KAAK,OAAO;AACzB,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,KAAK,WAAW;AAChC,cAAI,KAAK,QAAQ;AACf,kBAAM,IAAI,MAAM,gFAAgF;AAAA,UAClG;AACA,iBAAO,KAAK;AAAA,QACd;AAEA,QAAAA,SAAQ,UAAU,OAAO,WAAW;AAClC,cAAI;AACJ,iBAAO;AACP,iBAAO,MAAM;AACX,gBAAI,KAAK,SAAS,SAAS,UAAU;AACnC,qBAAO,KAAK;AAAA,YACd,WAAW,KAAK,QAAQ;AACtB,qBAAO;AAAA,YACT,OAAO;AACL,qBAAO,KAAK;AAAA,YACd;AAAA,UACF;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,WAAW,WAAW;AACtC,cAAI;AACJ,iBAAO;AACP,iBAAO,MAAM;AACX,gBAAI,KAAK,SAAS,SAAS,UAAU;AACnC,qBAAO;AAAA,YACT,OAAO;AACL,qBAAO,KAAK;AAAA,YACd;AAAA,UACF;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,SAAS;AACxC,iBAAO,KAAK,SAAS,EAAE,IAAI,OAAO;AAAA,QACpC;AAEA,QAAAA,SAAQ,UAAU,OAAO,WAAW;AAClC,cAAI;AACJ,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,cAAI,IAAI,GAAG;AACT,kBAAM,IAAI,MAAM,gCAAgC,KAAK,UAAU,CAAC;AAAA,UAClE;AACA,iBAAO,KAAK,OAAO,SAAS,IAAI;AAAA,QAClC;AAEA,QAAAA,SAAQ,UAAU,OAAO,WAAW;AAClC,cAAI;AACJ,cAAI,KAAK,OAAO,SAAS,QAAQ,IAAI;AACrC,cAAI,MAAM,MAAM,MAAM,KAAK,OAAO,SAAS,SAAS,GAAG;AACrD,kBAAM,IAAI,MAAM,+BAA+B,KAAK,UAAU,CAAC;AAAA,UACjE;AACA,iBAAO,KAAK,OAAO,SAAS,IAAI;AAAA,QAClC;AAEA,QAAAA,SAAQ,UAAU,iBAAiB,SAAS,KAAK;AAC/C,cAAI;AACJ,uBAAa,IAAI,KAAK,EAAE,MAAM;AAC9B,qBAAW,SAAS;AACpB,qBAAW,SAAS;AACpB,eAAK,SAAS,KAAK,UAAU;AAC7B,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,YAAY,SAAS,MAAM;AAC3C,cAAI,MAAM;AACV,iBAAO,QAAQ,KAAK;AACpB,cAAK,QAAQ,QAAS,GAAG,OAAO,KAAK,WAAW,OAAO,KAAK,OAAO,SAAS;AAC1E,mBAAO;AAAA,UACT,WAAW,QAAQ,MAAM;AACvB,mBAAO,cAAc,KAAK,OAAO,OAAO;AAAA,UAC1C,WAAW,GAAG,OAAO,KAAK,WAAW,OAAO,KAAK,OAAO,SAAS;AAC/D,mBAAO,YAAY,OAAO;AAAA,UAC5B,OAAO;AACL,mBAAO,YAAY,OAAO,iBAAiB,KAAK,OAAO,OAAO;AAAA,UAChE;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,MAAM,YAAY,MAAM;AACvD,iBAAO,KAAK,QAAQ,MAAM,YAAY,IAAI;AAAA,QAC5C;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,MAAM,YAAY,MAAM;AACvD,iBAAO,KAAK,KAAK,MAAM,YAAY,IAAI;AAAA,QACzC;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,OAAO;AACtC,iBAAO,KAAK,KAAK,KAAK;AAAA,QACxB;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,OAAO;AACtC,iBAAO,KAAK,MAAM,KAAK;AAAA,QACzB;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,OAAO;AACtC,iBAAO,KAAK,QAAQ,KAAK;AAAA,QAC3B;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,QAAQ,OAAO;AAC9C,iBAAO,KAAK,YAAY,QAAQ,KAAK;AAAA,QACvC;AAEA,QAAAA,SAAQ,UAAU,MAAM,WAAW;AACjC,iBAAO,KAAK,SAAS;AAAA,QACvB;AAEA,QAAAA,SAAQ,UAAU,MAAM,SAAS,SAAS,UAAU,YAAY;AAC9D,iBAAO,KAAK,YAAY,SAAS,UAAU,UAAU;AAAA,QACvD;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,MAAM,YAAY,MAAM;AACrD,iBAAO,KAAK,QAAQ,MAAM,YAAY,IAAI;AAAA,QAC5C;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,MAAM,YAAY,MAAM;AACrD,iBAAO,KAAK,KAAK,MAAM,YAAY,IAAI;AAAA,QACzC;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,OAAO;AACpC,iBAAO,KAAK,KAAK,KAAK;AAAA,QACxB;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,OAAO;AACpC,iBAAO,KAAK,MAAM,KAAK;AAAA,QACzB;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,OAAO;AACpC,iBAAO,KAAK,QAAQ,KAAK;AAAA,QAC3B;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,OAAO;AACpC,iBAAO,KAAK,IAAI,KAAK;AAAA,QACvB;AAEA,QAAAA,SAAQ,UAAU,IAAI,SAAS,QAAQ,OAAO;AAC5C,iBAAO,KAAK,YAAY,QAAQ,KAAK;AAAA,QACvC;AAEA,QAAAA,SAAQ,UAAU,IAAI,WAAW;AAC/B,iBAAO,KAAK,GAAG;AAAA,QACjB;AAEA,QAAAA,SAAQ,UAAU,mBAAmB,SAAS,KAAK;AACjD,iBAAO,KAAK,eAAe,GAAG;AAAA,QAChC;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,UAAU,UAAU;AAC5D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,UAAU;AACjD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,UAAU;AACjD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,gBAAgB,WAAW;AAC3C,iBAAO,KAAK,SAAS,WAAW;AAAA,QAClC;AAEA,QAAAA,SAAQ,UAAU,YAAY,SAAS,MAAM;AAC3C,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,YAAY,WAAW;AACvC,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,SAAS,SAAS;AACzD,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,gBAAgB,WAAW;AAC3C,iBAAO,KAAK,QAAQ,WAAW;AAAA,QACjC;AAEA,QAAAA,SAAQ,UAAU,0BAA0B,SAAS,OAAO;AAC1D,cAAI,KAAK;AACT,gBAAM;AACN,cAAI,QAAQ,OAAO;AACjB,mBAAO;AAAA,UACT,WAAW,KAAK,SAAS,MAAM,MAAM,SAAS,GAAG;AAC/C,kBAAM,iBAAiB,eAAe,iBAAiB;AACvD,gBAAI,KAAK,OAAO,IAAI,KAAK;AACvB,qBAAO,iBAAiB;AAAA,YAC1B,OAAO;AACL,qBAAO,iBAAiB;AAAA,YAC1B;AACA,mBAAO;AAAA,UACT,WAAW,IAAI,WAAW,KAAK,GAAG;AAChC,mBAAO,iBAAiB,WAAW,iBAAiB;AAAA,UACtD,WAAW,IAAI,aAAa,KAAK,GAAG;AAClC,mBAAO,iBAAiB,WAAW,iBAAiB;AAAA,UACtD,WAAW,IAAI,YAAY,KAAK,GAAG;AACjC,mBAAO,iBAAiB;AAAA,UAC1B,OAAO;AACL,mBAAO,iBAAiB;AAAA,UAC1B;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,aAAa,SAAS,OAAO;AAC7C,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,cAAc;AACtD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,qBAAqB,SAAS,cAAc;AAC5D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,qBAAqB,SAAS,QAAQ;AACtD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,MAAM;AAC7C,cAAI,GAAG,GAAG;AACV,cAAI,KAAK,aAAa,KAAK,UAAU;AACnC,mBAAO;AAAA,UACT;AACA,cAAI,KAAK,SAAS,WAAW,KAAK,SAAS,QAAQ;AACjD,mBAAO;AAAA,UACT;AACA,eAAK,IAAI,IAAI,GAAG,OAAO,KAAK,SAAS,SAAS,GAAG,KAAK,OAAO,KAAK,OAAO,KAAK,MAAM,IAAI,KAAK,OAAO,EAAE,IAAI,EAAE,GAAG;AAC7G,gBAAI,CAAC,KAAK,SAAS,GAAG,YAAY,KAAK,SAAS,EAAE,GAAG;AACnD,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,aAAa,SAAS,SAAS,SAAS;AACxD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,KAAK,MAAM,SAAS;AAC3D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,KAAK;AAC5C,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,SAAQ,UAAU,WAAW,SAAS,OAAO;AAC3C,cAAI,CAAC,OAAO;AACV,mBAAO;AAAA,UACT;AACA,iBAAO,UAAU,QAAQ,KAAK,aAAa,KAAK;AAAA,QAClD;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,MAAM;AAC9C,cAAI,OAAO,mBAAmB,GAAG,KAAK;AACtC,iBAAO,KAAK;AACZ,eAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,oBAAQ,KAAK;AACb,gBAAI,SAAS,OAAO;AAClB,qBAAO;AAAA,YACT;AACA,gCAAoB,MAAM,aAAa,IAAI;AAC3C,gBAAI,mBAAmB;AACrB,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,SAAQ,UAAU,aAAa,SAAS,MAAM;AAC5C,iBAAO,KAAK,aAAa,IAAI;AAAA,QAC/B;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,MAAM;AAC7C,cAAI,SAAS;AACb,oBAAU,KAAK,aAAa,IAAI;AAChC,oBAAU,KAAK,aAAa,IAAI;AAChC,cAAI,YAAY,MAAM,YAAY,IAAI;AACpC,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,UAAU;AAAA,UACnB;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,cAAc,SAAS,MAAM;AAC7C,cAAI,SAAS;AACb,oBAAU,KAAK,aAAa,IAAI;AAChC,oBAAU,KAAK,aAAa,IAAI;AAChC,cAAI,YAAY,MAAM,YAAY,IAAI;AACpC,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,UAAU;AAAA,UACnB;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,eAAe,SAAS,MAAM;AAC9C,cAAI,OAAO;AACX,gBAAM;AACN,kBAAQ;AACR,eAAK,gBAAgB,KAAK,SAAS,GAAG,SAAS,WAAW;AACxD;AACA,gBAAI,CAAC,SAAS,cAAc,MAAM;AAChC,qBAAO,QAAQ;AAAA,YACjB;AAAA,UACF,CAAC;AACD,cAAI,OAAO;AACT,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,SAAQ,UAAU,kBAAkB,SAAS,MAAM,MAAM;AACvD,cAAI,OAAO,GAAG,KAAK,MAAM;AACzB,mBAAS,OAAO,KAAK,SAAS;AAC9B,iBAAO,KAAK;AACZ,eAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,oBAAQ,KAAK;AACb,gBAAI,MAAM,KAAK,KAAK,GAAG;AACrB,qBAAO;AAAA,YACT,OAAO;AACL,oBAAM,KAAK,gBAAgB,OAAO,IAAI;AACtC,kBAAI,KAAK;AACP,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AChxBZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,gBACF,OAAO,SAAS,IAAI,IAAG;AAAE,eAAO,WAAU;AAAE,iBAAO,GAAG,MAAM,IAAI,SAAS;AAAA,QAAG;AAAA,MAAG,GAC/E,UAAU,CAAC,EAAE;AAEf,aAAO,UAAU,iBAAkB,WAAW;AAC5C,iBAASC,gBAAe,SAAS;AAC/B,eAAK,kBAAkB,KAAK,KAAK,iBAAiB,IAAI;AACtD,eAAK,kBAAkB,KAAK,KAAK,iBAAiB,IAAI;AACtD,cAAI,KAAK,KAAK;AACd,sBAAY,UAAU,CAAC;AACvB,eAAK,UAAU;AACf,cAAI,CAAC,KAAK,QAAQ,SAAS;AACzB,iBAAK,QAAQ,UAAU;AAAA,UACzB;AACA,gBAAM,QAAQ,aAAa,CAAC;AAC5B,eAAK,OAAO,KAAK;AACf,gBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,oBAAQ,IAAI;AACZ,iBAAK,OAAO;AAAA,UACd;AAAA,QACF;AAEA,QAAAA,gBAAe,UAAU,OAAO,SAAS,KAAK;AAC5C,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,OAAO,SAAS,KAAK;AAC5C,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,WAAW,KAAK,OAAO,EAAE,CAAC;AAAA,QAC7D;AAEA,QAAAA,gBAAe,UAAU,QAAQ,SAAS,KAAK;AAC7C,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,gBAAM,KAAK,OAAO;AAClB,gBAAM,IAAI,QAAQ,OAAO,iBAAiB;AAC1C,iBAAO,KAAK,gBAAgB,GAAG;AAAA,QACjC;AAEA,QAAAA,gBAAe,UAAU,UAAU,SAAS,KAAK;AAC/C,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,gBAAM,KAAK,OAAO;AAClB,cAAI,IAAI,MAAM,IAAI,GAAG;AACnB,kBAAM,IAAI,MAAM,+CAA+C,GAAG;AAAA,UACpE;AACA,iBAAO,KAAK,gBAAgB,GAAG;AAAA,QACjC;AAEA,QAAAA,gBAAe,UAAU,MAAM,SAAS,KAAK;AAC3C,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,OAAO;AAAA,QACrB;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,KAAK;AAChD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,UAAU,MAAM,KAAK,OAAO,EAAE,CAAC;AAAA,QAClE;AAEA,QAAAA,gBAAe,UAAU,YAAY,SAAS,KAAK;AACjD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,KAAK;AAChD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,gBAAM,KAAK,OAAO;AAClB,cAAI,IAAI,MAAM,KAAK,GAAG;AACpB,kBAAM,IAAI,MAAM,2CAA2C,GAAG;AAAA,UAChE;AACA,iBAAO,KAAK,gBAAgB,GAAG;AAAA,QACjC;AAEA,QAAAA,gBAAe,UAAU,aAAa,SAAS,KAAK;AAClD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,gBAAM,KAAK,OAAO;AAClB,cAAI,CAAC,IAAI,MAAM,WAAW,GAAG;AAC3B,kBAAM,IAAI,MAAM,6BAA6B,GAAG;AAAA,UAClD;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,gBAAe,UAAU,cAAc,SAAS,KAAK;AACnD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,gBAAM,KAAK,OAAO;AAClB,cAAI,CAAC,IAAI,MAAM,+BAA+B,GAAG;AAC/C,kBAAM,IAAI,MAAM,uBAAuB,GAAG;AAAA,UAC5C;AACA,iBAAO,KAAK,gBAAgB,GAAG;AAAA,QACjC;AAEA,QAAAA,gBAAe,UAAU,gBAAgB,SAAS,KAAK;AACrD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,cAAI,KAAK;AACP,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO;AAAA,UACT;AAAA,QACF;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,KAAK;AAChD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,KAAK;AAChD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,kBAAkB,SAAS,KAAK;AACvD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,aAAa,SAAS,KAAK;AAClD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,gBAAgB,SAAS,KAAK;AACrD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,iBAAiB,SAAS,KAAK;AACtD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,WAAW,SAAS,KAAK;AAChD,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,iBAAO,KAAK,gBAAgB,KAAK,OAAO,EAAE;AAAA,QAC5C;AAEA,QAAAA,gBAAe,UAAU,gBAAgB;AAEzC,QAAAA,gBAAe,UAAU,eAAe;AAExC,QAAAA,gBAAe,UAAU,iBAAiB;AAE1C,QAAAA,gBAAe,UAAU,kBAAkB;AAE3C,QAAAA,gBAAe,UAAU,oBAAoB;AAE7C,QAAAA,gBAAe,UAAU,gBAAgB;AAEzC,QAAAA,gBAAe,UAAU,kBAAkB,SAAS,KAAK;AACvD,cAAI,OAAO;AACX,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,kBAAQ;AACR,cAAI,KAAK,QAAQ,YAAY,OAAO;AAClC,oBAAQ;AACR,gBAAI,MAAM,IAAI,MAAM,KAAK,GAAG;AAC1B,oBAAM,IAAI,MAAM,kCAAkC,MAAM,eAAe,IAAI,KAAK;AAAA,YAClF;AAAA,UACF,WAAW,KAAK,QAAQ,YAAY,OAAO;AACzC,oBAAQ;AACR,gBAAI,MAAM,IAAI,MAAM,KAAK,GAAG;AAC1B,oBAAM,IAAI,MAAM,kCAAkC,MAAM,eAAe,IAAI,KAAK;AAAA,YAClF;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,gBAAe,UAAU,kBAAkB,SAAS,KAAK;AACvD,cAAI;AACJ,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,eAAK,gBAAgB,GAAG;AACxB,kBAAQ;AACR,cAAI,CAAC,IAAI,MAAM,KAAK,GAAG;AACrB,kBAAM,IAAI,MAAM,2BAA2B;AAAA,UAC7C;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,gBAAe,UAAU,aAAa,SAAS,KAAK;AAClD,cAAI;AACJ,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,qBAAW,KAAK,QAAQ,mBAAmB,gBAAgB;AAC3D,iBAAO,IAAI,QAAQ,UAAU,OAAO,EAAE,QAAQ,MAAM,MAAM,EAAE,QAAQ,MAAM,MAAM,EAAE,QAAQ,OAAO,OAAO;AAAA,QAC1G;AAEA,QAAAA,gBAAe,UAAU,YAAY,SAAS,KAAK;AACjD,cAAI;AACJ,cAAI,KAAK,QAAQ,cAAc;AAC7B,mBAAO;AAAA,UACT;AACA,qBAAW,KAAK,QAAQ,mBAAmB,gBAAgB;AAC3D,iBAAO,IAAI,QAAQ,UAAU,OAAO,EAAE,QAAQ,MAAM,MAAM,EAAE,QAAQ,MAAM,QAAQ,EAAE,QAAQ,OAAO,OAAO,EAAE,QAAQ,OAAO,OAAO,EAAE,QAAQ,OAAO,OAAO;AAAA,QAC5J;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/OZ;AAAA;AACA,KAAC,WAAW;AACV,aAAO,UAAU;AAAA,QACf,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW;AAAA,QACX,UAAU;AAAA,MACZ;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACTZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,aAAa,UAAU,YAAY,eAAe,eAAe,cAAc,gBAAgB,gBAAgB,YAAY,UAAU,YAAY,0BAA0B,QAAQ,SAAS,eAAe,QACvN,UAAU,CAAC,EAAE;AAEf,eAAS,kBAAqB;AAE9B,iBAAW;AAEX,uBAAiB;AAEjB,mBAAa;AAEb,iBAAW;AAEX,mBAAa;AAEb,mBAAa;AAEb,eAAS;AAET,gBAAU;AAEV,iCAA2B;AAE3B,iBAAW;AAEX,sBAAgB;AAEhB,sBAAgB;AAEhB,qBAAe;AAEf,uBAAiB;AAEjB,oBAAc;AAEd,aAAO,UAAU,gBAAiB,WAAW;AAC3C,iBAASC,eAAc,SAAS;AAC9B,cAAI,KAAK,KAAK;AACd,sBAAY,UAAU,CAAC;AACvB,eAAK,UAAU;AACf,gBAAM,QAAQ,UAAU,CAAC;AACzB,eAAK,OAAO,KAAK;AACf,gBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,oBAAQ,IAAI;AACZ,iBAAK,MAAM,OAAO,KAAK;AACvB,iBAAK,OAAO;AAAA,UACd;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,gBAAgB,SAAS,SAAS;AACxD,cAAI,iBAAiB,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACxD,sBAAY,UAAU,CAAC;AACvB,oBAAU,OAAO,CAAC,GAAG,KAAK,SAAS,OAAO;AAC1C,4BAAkB;AAAA,YAChB,QAAQ;AAAA,UACV;AACA,0BAAgB,SAAS,QAAQ,UAAU;AAC3C,0BAAgB,aAAa,QAAQ,cAAc;AACnD,0BAAgB,UAAU,MAAM,QAAQ,WAAW,OAAO,MAAM;AAChE,0BAAgB,WAAW,OAAO,QAAQ,YAAY,OAAO,OAAO;AACpE,0BAAgB,UAAU,OAAO,QAAQ,WAAW,OAAO,OAAO;AAClE,0BAAgB,uBAAuB,QAAQ,OAAO,QAAQ,wBAAwB,OAAO,OAAO,QAAQ,wBAAwB,OAAO,OAAO;AAClJ,0BAAgB,oBAAoB,QAAQ,OAAO,QAAQ,qBAAqB,OAAO,OAAO,QAAQ,qBAAqB,OAAO,OAAO;AACzI,cAAI,gBAAgB,qBAAqB,MAAM;AAC7C,4BAAgB,mBAAmB;AAAA,UACrC;AACA,0BAAgB,sBAAsB;AACtC,0BAAgB,OAAO,CAAC;AACxB,0BAAgB,QAAQ,YAAY;AACpC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,SAAS,SAAS,MAAM,SAAS,OAAO;AAC9D,cAAI;AACJ,cAAI,CAAC,QAAQ,UAAU,QAAQ,qBAAqB;AAClD,mBAAO;AAAA,UACT,WAAW,QAAQ,QAAQ;AACzB,2BAAe,SAAS,KAAK,QAAQ,SAAS;AAC9C,gBAAI,cAAc,GAAG;AACnB,qBAAO,IAAI,MAAM,WAAW,EAAE,KAAK,QAAQ,MAAM;AAAA,YACnD;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AAC/D,cAAI,CAAC,QAAQ,UAAU,QAAQ,qBAAqB;AAClD,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,QAAQ;AAAA,UACjB;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,YAAY,SAAS,KAAK,SAAS,OAAO;AAChE,cAAI;AACJ,eAAK,cAAc,KAAK,SAAS,KAAK;AACtC,cAAI,MAAM,IAAI,OAAO,OAAO,IAAI,QAAQ;AACxC,eAAK,eAAe,KAAK,SAAS,KAAK;AACvC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,QAAQ,SAAS,MAAM,SAAS,OAAO;AAC7D,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK;AACV,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,KAAK,QAAQ,MAAM,SAAS,KAAK;AAC9C,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AAC/D,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK;AACV,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,SAAS,KAAK,QAAQ,MAAM,SAAS,KAAK;AAC/C,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,cAAc,SAAS,MAAM,SAAS,OAAO;AACnE,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,eAAe,KAAK,UAAU;AACnC,cAAI,KAAK,YAAY,MAAM;AACzB,iBAAK,gBAAgB,KAAK,WAAW;AAAA,UACvC;AACA,cAAI,KAAK,cAAc,MAAM;AAC3B,iBAAK,kBAAkB,KAAK,aAAa;AAAA,UAC3C;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB;AAChC,eAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AAC/D,cAAI,OAAO,GAAG,KAAK,GAAG;AACtB,oBAAU,QAAQ;AAClB,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK;AACpC,eAAK,eAAe,KAAK,KAAK,EAAE;AAChC,cAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,iBAAK,cAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA,UACvD,WAAW,KAAK,OAAO;AACrB,iBAAK,cAAc,KAAK,QAAQ;AAAA,UAClC;AACA,cAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,iBAAK;AACL,iBAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,oBAAQ,QAAQ,YAAY;AAC5B,kBAAM,KAAK;AACX,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,mBAAK,KAAK,eAAe,OAAO,SAAS,QAAQ,CAAC;AAAA,YACpD;AACA,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK;AAAA,UACP;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB;AAChC,eAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AAC/D,cAAI,KAAK,OAAO,gBAAgB,gBAAgB,GAAG,GAAG,KAAK,MAAM,MAAM,kBAAkB,GAAG,KAAK,MAAM;AACvG,oBAAU,QAAQ;AAClB,6BAAmB;AACnB,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI,MAAM,KAAK;AACpD,gBAAM,KAAK;AACX,eAAK,QAAQ,KAAK;AAChB,gBAAI,CAAC,QAAQ,KAAK,KAAK,IAAI;AAAG;AAC9B,kBAAM,IAAI;AACV,iBAAK,KAAK,UAAU,KAAK,SAAS,KAAK;AAAA,UACzC;AACA,2BAAiB,KAAK,SAAS;AAC/B,2BAAiB,mBAAmB,IAAI,OAAO,KAAK,SAAS;AAC7D,cAAI,mBAAmB,KAAK,KAAK,SAAS,MAAM,SAAS,GAAG;AAC1D,oBAAQ,EAAE,SAAS,SAAS,QAAQ,EAAE,SAAS,SAAS,QAAQ,EAAE,UAAU;AAAA,UAC9E,CAAC,GAAG;AACF,gBAAI,QAAQ,YAAY;AACtB,mBAAK;AACL,sBAAQ,QAAQ,YAAY;AAC5B,mBAAK,OAAO,KAAK,OAAO,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,YACjE,OAAO;AACL,sBAAQ,QAAQ,YAAY;AAC5B,mBAAK,QAAQ,mBAAmB,OAAO,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,YAC1E;AAAA,UACF,WAAW,QAAQ,UAAU,mBAAmB,MAAM,eAAe,SAAS,SAAS,QAAQ,eAAe,SAAS,SAAS,QAAS,eAAe,SAAS,MAAO;AACtK,iBAAK;AACL,oBAAQ,QAAQ,YAAY;AAC5B,oBAAQ;AACR,+BAAmB;AACnB,iBAAK,KAAK,eAAe,gBAAgB,SAAS,QAAQ,CAAC;AAC3D,oBAAQ;AACR,+BAAmB;AACnB,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK,OAAO,KAAK,OAAO,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,UACjE,OAAO;AACL,gBAAI,QAAQ,qBAAqB;AAC/B,qBAAO,KAAK;AACZ,mBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,wBAAQ,KAAK;AACb,qBAAK,MAAM,SAAS,SAAS,QAAQ,MAAM,SAAS,SAAS,QAAS,MAAM,SAAS,MAAO;AAC1F,0BAAQ;AACR,qCAAmB;AACnB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AACA,iBAAK,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AAC5C,oBAAQ,QAAQ,YAAY;AAC5B,mBAAO,KAAK;AACZ,iBAAK,IAAI,GAAG,OAAO,KAAK,QAAQ,IAAI,MAAM,KAAK;AAC7C,sBAAQ,KAAK;AACb,mBAAK,KAAK,eAAe,OAAO,SAAS,QAAQ,CAAC;AAAA,YACpD;AACA,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI,OAAO,KAAK,OAAO;AAC5D,gBAAI,kBAAkB;AACpB,sBAAQ;AAAA,YACV;AACA,iBAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,oBAAQ,QAAQ,YAAY;AAAA,UAC9B;AACA,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,iBAAiB,SAAS,MAAM,SAAS,OAAO;AACtE,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK,SAAS;AACZ,qBAAO,KAAK,MAAM,MAAM,SAAS,KAAK;AAAA,YACxC,KAAK,SAAS;AACZ,qBAAO,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,YAC1C,KAAK,SAAS;AACZ,qBAAO,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,YAC1C,KAAK,SAAS;AACZ,qBAAO,KAAK,IAAI,MAAM,SAAS,KAAK;AAAA,YACtC,KAAK,SAAS;AACZ,qBAAO,KAAK,KAAK,MAAM,SAAS,KAAK;AAAA,YACvC,KAAK,SAAS;AACZ,qBAAO,KAAK,sBAAsB,MAAM,SAAS,KAAK;AAAA,YACxD,KAAK,SAAS;AACZ,qBAAO;AAAA,YACT,KAAK,SAAS;AACZ,qBAAO,KAAK,YAAY,MAAM,SAAS,KAAK;AAAA,YAC9C,KAAK,SAAS;AACZ,qBAAO,KAAK,QAAQ,MAAM,SAAS,KAAK;AAAA,YAC1C,KAAK,SAAS;AACZ,qBAAO,KAAK,WAAW,MAAM,SAAS,KAAK;AAAA,YAC7C,KAAK,SAAS;AACZ,qBAAO,KAAK,WAAW,MAAM,SAAS,KAAK;AAAA,YAC7C,KAAK,SAAS;AACZ,qBAAO,KAAK,UAAU,MAAM,SAAS,KAAK;AAAA,YAC5C,KAAK,SAAS;AACZ,qBAAO,KAAK,YAAY,MAAM,SAAS,KAAK;AAAA,YAC9C;AACE,oBAAM,IAAI,MAAM,4BAA4B,KAAK,YAAY,IAAI;AAAA,UACrE;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,wBAAwB,SAAS,MAAM,SAAS,OAAO;AAC7E,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK;AACV,cAAI,KAAK,OAAO;AACd,iBAAK,MAAM,KAAK;AAAA,UAClB;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB;AAChC,eAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,MAAM,SAAS,OAAO;AAC3D,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK;AACpC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK;AACV,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,OAAO,SAAS,MAAM,SAAS,OAAO;AAC5D,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK;AACpC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK;AACV,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,KAAK,QAAQ,MAAM,SAAS,KAAK;AACtC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,aAAa,SAAS,MAAM,SAAS,OAAO;AAClE,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,MAAM,KAAK,cAAc,MAAM,KAAK,gBAAgB,MAAM,KAAK;AACpE,cAAI,KAAK,qBAAqB,YAAY;AACxC,iBAAK,MAAM,KAAK;AAAA,UAClB;AACA,cAAI,KAAK,cAAc;AACrB,iBAAK,OAAO,KAAK,eAAe;AAAA,UAClC;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AACvE,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,aAAa,SAAS,MAAM,SAAS,OAAO;AAClE,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,MAAM,KAAK,OAAO,MAAM,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AACvE,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,YAAY,SAAS,MAAM,SAAS,OAAO;AACjE,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,IAAI;AACX,iBAAK;AAAA,UACP;AACA,eAAK,MAAM,KAAK;AAChB,cAAI,KAAK,OAAO;AACd,iBAAK,OAAO,KAAK,QAAQ;AAAA,UAC3B,OAAO;AACL,gBAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,mBAAK,cAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA,YACvD,WAAW,KAAK,OAAO;AACrB,mBAAK,cAAc,KAAK,QAAQ;AAAA,YAClC;AACA,gBAAI,KAAK,OAAO;AACd,mBAAK,YAAY,KAAK;AAAA,YACxB;AAAA,UACF;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AACvE,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,cAAc,SAAS,MAAM,SAAS,OAAO;AACnE,cAAI;AACJ,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,cAAI,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI;AACxC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,MAAM,KAAK;AAChB,cAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,iBAAK,cAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA,UACvD,WAAW,KAAK,OAAO;AACrB,iBAAK,cAAc,KAAK,QAAQ;AAAA,UAClC,WAAW,KAAK,OAAO;AACrB,iBAAK,cAAc,KAAK,QAAQ;AAAA,UAClC;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,QAAQ,mBAAmB,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK;AACvE,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,UAAU,MAAM,SAAS,KAAK;AACnC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,WAAW,SAAS,MAAM,SAAS,OAAO;AAAA,QAAC;AAEnE,QAAAA,eAAc,UAAU,YAAY,SAAS,MAAM,SAAS,OAAO;AAAA,QAAC;AAEpE,QAAAA,eAAc,UAAU,gBAAgB,SAAS,KAAK,SAAS,OAAO;AAAA,QAAC;AAEvE,QAAAA,eAAc,UAAU,iBAAiB,SAAS,KAAK,SAAS,OAAO;AAAA,QAAC;AAExE,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC3aZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,iBAAiB,eACnB,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,sBAAgB;AAEhB,aAAO,UAAU,kBAAmB,SAAS,YAAY;AACvD,eAAOC,kBAAiB,UAAU;AAElC,iBAASA,iBAAgB,SAAS;AAChC,UAAAA,iBAAgB,UAAU,YAAY,KAAK,MAAM,OAAO;AAAA,QAC1D;AAEA,QAAAA,iBAAgB,UAAU,WAAW,SAAS,KAAK,SAAS;AAC1D,cAAI,OAAO,GAAG,KAAK,GAAG;AACtB,oBAAU,KAAK,cAAc,OAAO;AACpC,cAAI;AACJ,gBAAM,IAAI;AACV,eAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,oBAAQ,IAAI;AACZ,iBAAK,KAAK,eAAe,OAAO,SAAS,CAAC;AAAA,UAC5C;AACA,cAAI,QAAQ,UAAU,EAAE,MAAM,CAAC,QAAQ,QAAQ,MAAM,MAAM,QAAQ,SAAS;AAC1E,gBAAI,EAAE,MAAM,GAAG,CAAC,QAAQ,QAAQ,MAAM;AAAA,UACxC;AACA,iBAAO;AAAA,QACT;AAEA,eAAOA;AAAA,MAET,EAAG,aAAa;AAAA,IAElB,GAAG,KAAK,OAAI;AAAA;AAAA;;;AClCZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,qBAAqB,sBAAsB,aAAa,SAAS,iBAAiB,gBAAgB,eAC9G,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,sBAAgB,kBAAqB;AAErC,6BAAuB;AAEvB,4BAAsB;AAEtB,gBAAU;AAEV,iBAAW;AAEX,uBAAiB;AAEjB,wBAAkB;AAElB,aAAO,UAAU,cAAe,SAAS,YAAY;AACnD,eAAOC,cAAa,UAAU;AAE9B,iBAASA,aAAY,SAAS;AAC5B,UAAAA,aAAY,UAAU,YAAY,KAAK,MAAM,IAAI;AACjD,eAAK,OAAO;AACZ,eAAK,OAAO,SAAS;AACrB,eAAK,cAAc;AACnB,eAAK,YAAY,IAAI,oBAAoB;AACzC,sBAAY,UAAU,CAAC;AACvB,cAAI,CAAC,QAAQ,QAAQ;AACnB,oBAAQ,SAAS,IAAI,gBAAgB;AAAA,UACvC;AACA,eAAK,UAAU;AACf,eAAK,YAAY,IAAI,eAAe,OAAO;AAAA,QAC7C;AAEA,eAAO,eAAeA,aAAY,WAAW,kBAAkB;AAAA,UAC7D,OAAO,IAAI,qBAAqB;AAAA,QAClC,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,WAAW;AAAA,UACtD,KAAK,WAAW;AACd,gBAAI,OAAO,GAAG,KAAK;AACnB,kBAAM,KAAK;AACX,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,kBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,uBAAO;AAAA,cACT;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,mBAAmB;AAAA,UAC9D,KAAK,WAAW;AACd,mBAAO,KAAK,cAAc;AAAA,UAC5B;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,iBAAiB;AAAA,UAC5D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,uBAAuB;AAAA,UAClE,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,eAAe;AAAA,UAC1D,KAAK,WAAW;AACd,gBAAI,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,GAAG,SAAS,SAAS,aAAa;AAChF,qBAAO,KAAK,SAAS,GAAG;AAAA,YAC1B,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,iBAAiB;AAAA,UAC5D,KAAK,WAAW;AACd,gBAAI,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,GAAG,SAAS,SAAS,aAAa;AAChF,qBAAO,KAAK,SAAS,GAAG,eAAe;AAAA,YACzC,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,cAAc;AAAA,UACzD,KAAK,WAAW;AACd,gBAAI,KAAK,SAAS,WAAW,KAAK,KAAK,SAAS,GAAG,SAAS,SAAS,aAAa;AAChF,qBAAO,KAAK,SAAS,GAAG;AAAA,YAC1B,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,OAAO;AAAA,UAClD,KAAK,WAAW;AACd,mBAAO,KAAK;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,UAAU;AAAA,UACrD,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,cAAc;AAAA,UACzD,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,gBAAgB;AAAA,UAC3D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,eAAO,eAAeA,aAAY,WAAW,eAAe;AAAA,UAC1D,KAAK,WAAW;AACd,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AAED,QAAAA,aAAY,UAAU,MAAM,SAAS,QAAQ;AAC3C,cAAI;AACJ,0BAAgB,CAAC;AACjB,cAAI,CAAC,QAAQ;AACX,qBAAS,KAAK,QAAQ;AAAA,UACxB,WAAW,cAAc,MAAM,GAAG;AAChC,4BAAgB;AAChB,qBAAS,KAAK,QAAQ;AAAA,UACxB;AACA,iBAAO,OAAO,SAAS,MAAM,OAAO,cAAc,aAAa,CAAC;AAAA,QAClE;AAEA,QAAAA,aAAY,UAAU,WAAW,SAAS,SAAS;AACjD,iBAAO,KAAK,QAAQ,OAAO,SAAS,MAAM,KAAK,QAAQ,OAAO,cAAc,OAAO,CAAC;AAAA,QACtF;AAEA,QAAAA,aAAY,UAAU,gBAAgB,SAAS,SAAS;AACtD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,yBAAyB,WAAW;AACxD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,iBAAiB,SAAS,MAAM;AACpD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,gBAAgB,SAAS,MAAM;AACnD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,qBAAqB,SAAS,MAAM;AACxD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,8BAA8B,SAAS,QAAQ,MAAM;AACzE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,kBAAkB,SAAS,MAAM;AACrD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,wBAAwB,SAAS,MAAM;AAC3D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,uBAAuB,SAAS,SAAS;AAC7D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,aAAa,SAAS,cAAc,MAAM;AAC9D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,kBAAkB,SAAS,cAAc,eAAe;AAC5E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,oBAAoB,SAAS,cAAc,eAAe;AAC9E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,yBAAyB,SAAS,cAAc,WAAW;AAC/E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,iBAAiB,SAAS,WAAW;AACzD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,YAAY,SAAS,QAAQ;AACjD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,oBAAoB,WAAW;AACnD,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,aAAa,SAAS,MAAM,cAAc,eAAe;AAC7E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,yBAAyB,SAAS,YAAY;AAClE,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,cAAc,SAAS,gBAAgB;AAC3D,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,cAAc,WAAW;AAC7C,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,qBAAqB,SAAS,MAAM,YAAY,QAAQ;AAC5E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,QAAAA,aAAY,UAAU,mBAAmB,SAAS,MAAM,YAAY,QAAQ;AAC1E,gBAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC;AAAA,QAC1E;AAEA,eAAOA;AAAA,MAET,EAAG,OAAO;AAAA,IAEZ,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACjPZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,aAAa,cAAc,UAAU,YAAY,eAAe,eAAe,cAAc,gBAAgB,gBAAgB,YAAY,aAAa,eAAe,YAAY,0BAA0B,QAAQ,iBAAiB,gBAAgB,SAAS,UAAU,YAAY,UAAU,eAAe,KACxT,UAAU,CAAC,EAAE;AAEf,YAAM,mBAAsB,WAAW,IAAI,UAAU,aAAa,IAAI,YAAY,gBAAgB,IAAI,eAAe,WAAW,IAAI;AAEpI,iBAAW;AAEX,oBAAc;AAEd,mBAAa;AAEb,iBAAW;AAEX,mBAAa;AAEb,eAAS;AAET,gBAAU;AAEV,iCAA2B;AAE3B,uBAAiB;AAEjB,mBAAa;AAEb,sBAAgB;AAEhB,qBAAe;AAEf,sBAAgB;AAEhB,uBAAiB;AAEjB,qBAAe;AAEf,uBAAiB;AAEjB,wBAAkB;AAElB,oBAAc;AAEd,aAAO,UAAU,gBAAiB,WAAW;AAC3C,iBAASC,eAAc,SAAS,QAAQ,OAAO;AAC7C,cAAI;AACJ,eAAK,OAAO;AACZ,eAAK,OAAO,SAAS;AACrB,sBAAY,UAAU,CAAC;AACvB,0BAAgB,CAAC;AACjB,cAAI,CAAC,QAAQ,QAAQ;AACnB,oBAAQ,SAAS,IAAI,gBAAgB;AAAA,UACvC,WAAW,cAAc,QAAQ,MAAM,GAAG;AACxC,4BAAgB,QAAQ;AACxB,oBAAQ,SAAS,IAAI,gBAAgB;AAAA,UACvC;AACA,eAAK,UAAU;AACf,eAAK,SAAS,QAAQ;AACtB,eAAK,gBAAgB,KAAK,OAAO,cAAc,aAAa;AAC5D,eAAK,YAAY,IAAI,eAAe,OAAO;AAC3C,eAAK,iBAAiB,UAAU,WAAW;AAAA,UAAC;AAC5C,eAAK,gBAAgB,SAAS,WAAW;AAAA,UAAC;AAC1C,eAAK,cAAc;AACnB,eAAK,eAAe;AACpB,eAAK,WAAW,CAAC;AACjB,eAAK,kBAAkB;AACvB,eAAK,oBAAoB;AACzB,eAAK,OAAO;AAAA,QACd;AAEA,QAAAA,eAAc,UAAU,kBAAkB,SAAS,MAAM;AACvD,cAAI,KAAK,SAAS,YAAY,OAAO,GAAG,KAAK,MAAM;AACnD,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK,SAAS;AACZ,mBAAK,MAAM,KAAK,KAAK;AACrB;AAAA,YACF,KAAK,SAAS;AACZ,mBAAK,QAAQ,KAAK,KAAK;AACvB;AAAA,YACF,KAAK,SAAS;AACZ,2BAAa,CAAC;AACd,qBAAO,KAAK;AACZ,mBAAK,WAAW,MAAM;AACpB,oBAAI,CAAC,QAAQ,KAAK,MAAM,OAAO;AAAG;AAClC,sBAAM,KAAK;AACX,2BAAW,WAAW,IAAI;AAAA,cAC5B;AACA,mBAAK,KAAK,KAAK,MAAM,UAAU;AAC/B;AAAA,YACF,KAAK,SAAS;AACZ,mBAAK,MAAM;AACX;AAAA,YACF,KAAK,SAAS;AACZ,mBAAK,IAAI,KAAK,KAAK;AACnB;AAAA,YACF,KAAK,SAAS;AACZ,mBAAK,KAAK,KAAK,KAAK;AACpB;AAAA,YACF,KAAK,SAAS;AACZ,mBAAK,YAAY,KAAK,QAAQ,KAAK,KAAK;AACxC;AAAA,YACF;AACE,oBAAM,IAAI,MAAM,yDAAyD,KAAK,YAAY,IAAI;AAAA,UAClG;AACA,iBAAO,KAAK;AACZ,eAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,oBAAQ,KAAK;AACb,iBAAK,gBAAgB,KAAK;AAC1B,gBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,mBAAK,GAAG;AAAA,YACV;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,QAAQ,WAAW;AACzC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,OAAO,SAAS,MAAM,YAAY,MAAM;AAC9D,cAAI;AACJ,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,oBAAoB;AAAA,UACtC;AACA,cAAI,KAAK,QAAQ,KAAK,iBAAiB,IAAI;AACzC,kBAAM,IAAI,MAAM,2CAA2C,KAAK,UAAU,IAAI,CAAC;AAAA,UACjF;AACA,eAAK,YAAY;AACjB,iBAAO,SAAS,IAAI;AACpB,cAAI,cAAc,MAAM;AACtB,yBAAa,CAAC;AAAA,UAChB;AACA,uBAAa,SAAS,UAAU;AAChC,cAAI,CAAC,SAAS,UAAU,GAAG;AACzB,mBAAO,CAAC,YAAY,IAAI,GAAG,OAAO,KAAK,IAAI,aAAa,KAAK;AAAA,UAC/D;AACA,eAAK,cAAc,IAAI,WAAW,MAAM,MAAM,UAAU;AACxD,eAAK,YAAY,WAAW;AAC5B,eAAK;AACL,eAAK,SAAS,KAAK,gBAAgB,KAAK;AACxC,cAAI,QAAQ,MAAM;AAChB,iBAAK,KAAK,IAAI;AAAA,UAChB;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,YAAY,MAAM;AACjE,cAAI,OAAO,GAAG,KAAK,mBAAmB,MAAM;AAC5C,cAAI,KAAK,eAAe,KAAK,YAAY,SAAS,SAAS,SAAS;AAClE,iBAAK,WAAW,MAAM,MAAM,SAAS;AAAA,UACvC,OAAO;AACL,gBAAI,MAAM,QAAQ,IAAI,KAAK,SAAS,IAAI,KAAK,WAAW,IAAI,GAAG;AAC7D,kCAAoB,KAAK,QAAQ;AACjC,mBAAK,QAAQ,eAAe;AAC5B,qBAAO,IAAI,YAAY,KAAK,OAAO,EAAE,QAAQ,WAAW;AACxD,mBAAK,QAAQ,IAAI;AACjB,mBAAK,QAAQ,eAAe;AAC5B,qBAAO,KAAK;AACZ,mBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,wBAAQ,KAAK;AACb,qBAAK,gBAAgB,KAAK;AAC1B,oBAAI,MAAM,SAAS,SAAS,SAAS;AACnC,uBAAK,GAAG;AAAA,gBACV;AAAA,cACF;AAAA,YACF,OAAO;AACL,mBAAK,KAAK,MAAM,YAAY,IAAI;AAAA,YAClC;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,YAAY,SAAS,MAAM,OAAO;AACxD,cAAI,SAAS;AACb,cAAI,CAAC,KAAK,eAAe,KAAK,YAAY,UAAU;AAClD,kBAAM,IAAI,MAAM,8EAA8E,KAAK,UAAU,IAAI,CAAC;AAAA,UACpH;AACA,cAAI,QAAQ,MAAM;AAChB,mBAAO,SAAS,IAAI;AAAA,UACtB;AACA,cAAI,SAAS,IAAI,GAAG;AAClB,iBAAK,WAAW,MAAM;AACpB,kBAAI,CAAC,QAAQ,KAAK,MAAM,OAAO;AAAG;AAClC,yBAAW,KAAK;AAChB,mBAAK,UAAU,SAAS,QAAQ;AAAA,YAClC;AAAA,UACF,OAAO;AACL,gBAAI,WAAW,KAAK,GAAG;AACrB,sBAAQ,MAAM,MAAM;AAAA,YACtB;AACA,gBAAI,KAAK,QAAQ,sBAAuB,SAAS,MAAO;AACtD,mBAAK,YAAY,QAAQ,QAAQ,IAAI,aAAa,MAAM,MAAM,EAAE;AAAA,YAClE,WAAW,SAAS,MAAM;AACxB,mBAAK,YAAY,QAAQ,QAAQ,IAAI,aAAa,MAAM,MAAM,KAAK;AAAA,YACrE;AAAA,UACF;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,OAAO,SAAS,OAAO;AAC7C,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,QAAQ,MAAM,KAAK;AAC9B,eAAK,OAAO,KAAK,OAAO,KAAK,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACpG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,QAAQ,SAAS,OAAO;AAC9C,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,SAAS,MAAM,KAAK;AAC/B,eAAK,OAAO,KAAK,OAAO,MAAM,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACrG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,OAAO;AAChD,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,WAAW,MAAM,KAAK;AACjC,eAAK,OAAO,KAAK,OAAO,QAAQ,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACvG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,OAAO;AAC5C,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,OAAO,MAAM,KAAK;AAC7B,eAAK,OAAO,KAAK,OAAO,IAAI,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACnG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,cAAc,SAAS,QAAQ,OAAO;AAC5D,cAAI,GAAG,WAAW,UAAU,KAAK;AACjC,eAAK,YAAY;AACjB,cAAI,UAAU,MAAM;AAClB,qBAAS,SAAS,MAAM;AAAA,UAC1B;AACA,cAAI,SAAS,MAAM;AACjB,oBAAQ,SAAS,KAAK;AAAA,UACxB;AACA,cAAI,MAAM,QAAQ,MAAM,GAAG;AACzB,iBAAK,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAC7C,0BAAY,OAAO;AACnB,mBAAK,YAAY,SAAS;AAAA,YAC5B;AAAA,UACF,WAAW,SAAS,MAAM,GAAG;AAC3B,iBAAK,aAAa,QAAQ;AACxB,kBAAI,CAAC,QAAQ,KAAK,QAAQ,SAAS;AAAG;AACtC,yBAAW,OAAO;AAClB,mBAAK,YAAY,WAAW,QAAQ;AAAA,YACtC;AAAA,UACF,OAAO;AACL,gBAAI,WAAW,KAAK,GAAG;AACrB,sBAAQ,MAAM,MAAM;AAAA,YACtB;AACA,mBAAO,IAAI,yBAAyB,MAAM,QAAQ,KAAK;AACvD,iBAAK,OAAO,KAAK,OAAO,sBAAsB,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AAAA,UACvH;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,cAAc,SAAS,SAAS,UAAU,YAAY;AAC5E,cAAI;AACJ,eAAK,YAAY;AACjB,cAAI,KAAK,iBAAiB;AACxB,kBAAM,IAAI,MAAM,uCAAuC;AAAA,UACzD;AACA,iBAAO,IAAI,eAAe,MAAM,SAAS,UAAU,UAAU;AAC7D,eAAK,OAAO,KAAK,OAAO,YAAY,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AAC3G,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,OAAO,OAAO;AAC7D,eAAK,YAAY;AACjB,cAAI,QAAQ,MAAM;AAChB,kBAAM,IAAI,MAAM,yBAAyB;AAAA,UAC3C;AACA,cAAI,KAAK,MAAM;AACb,kBAAM,IAAI,MAAM,uCAAuC;AAAA,UACzD;AACA,eAAK,cAAc,IAAI,WAAW,MAAM,OAAO,KAAK;AACpD,eAAK,YAAY,eAAe;AAChC,eAAK,YAAY,WAAW;AAC5B,eAAK;AACL,eAAK,SAAS,KAAK,gBAAgB,KAAK;AACxC,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,aAAa,SAAS,MAAM,OAAO;AACzD,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,cAAc,MAAM,MAAM,KAAK;AAC1C,eAAK,OAAO,KAAK,OAAO,WAAW,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AAC1G,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,aAAa,eAAe,eAAe,kBAAkB,cAAc;AACpH,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,cAAc,MAAM,aAAa,eAAe,eAAe,kBAAkB,YAAY;AACxG,eAAK,OAAO,KAAK,OAAO,WAAW,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AAC1G,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,SAAS,SAAS,MAAM,OAAO;AACrD,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,aAAa,MAAM,OAAO,MAAM,KAAK;AAChD,eAAK,OAAO,KAAK,OAAO,UAAU,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACzG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,UAAU,SAAS,MAAM,OAAO;AACtD,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,aAAa,MAAM,MAAM,MAAM,KAAK;AAC/C,eAAK,OAAO,KAAK,OAAO,UAAU,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AACzG,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,WAAW,SAAS,MAAM,OAAO;AACvD,cAAI;AACJ,eAAK,YAAY;AACjB,iBAAO,IAAI,eAAe,MAAM,MAAM,KAAK;AAC3C,eAAK,OAAO,KAAK,OAAO,YAAY,MAAM,KAAK,eAAe,KAAK,eAAe,CAAC,GAAG,KAAK,eAAe,CAAC;AAC3G,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,KAAK,WAAW;AACtC,cAAI,KAAK,eAAe,GAAG;AACzB,kBAAM,IAAI,MAAM,kCAAkC;AAAA,UACpD;AACA,cAAI,KAAK,aAAa;AACpB,gBAAI,KAAK,YAAY,UAAU;AAC7B,mBAAK,UAAU,KAAK,WAAW;AAAA,YACjC,OAAO;AACL,mBAAK,SAAS,KAAK,WAAW;AAAA,YAChC;AACA,iBAAK,cAAc;AAAA,UACrB,OAAO;AACL,iBAAK,UAAU,KAAK,SAAS,KAAK,aAAa;AAAA,UACjD;AACA,iBAAO,KAAK,SAAS,KAAK;AAC1B,eAAK;AACL,iBAAO;AAAA,QACT;AAEA,QAAAA,eAAc,UAAU,MAAM,WAAW;AACvC,iBAAO,KAAK,gBAAgB,GAAG;AAC7B,iBAAK,GAAG;AAAA,UACV;AACA,iBAAO,KAAK,MAAM;AAAA,QACpB;AAEA,QAAAA,eAAc,UAAU,cAAc,WAAW;AAC/C,cAAI,KAAK,aAAa;AACpB,iBAAK,YAAY,WAAW;AAC5B,mBAAO,KAAK,SAAS,KAAK,WAAW;AAAA,UACvC;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,WAAW,SAAS,MAAM;AAChD,cAAI,KAAK,OAAO,MAAM;AACtB,cAAI,CAAC,KAAK,QAAQ;AAChB,gBAAI,CAAC,KAAK,QAAQ,KAAK,iBAAiB,KAAK,KAAK,SAAS,SAAS,SAAS;AAC3E,mBAAK,OAAO;AAAA,YACd;AACA,oBAAQ;AACR,gBAAI,KAAK,SAAS,SAAS,SAAS;AAClC,mBAAK,cAAc,QAAQ,YAAY;AACvC,sBAAQ,KAAK,OAAO,OAAO,MAAM,KAAK,eAAe,KAAK,YAAY,IAAI,MAAM,KAAK;AACrF,qBAAO,KAAK;AACZ,mBAAK,QAAQ,MAAM;AACjB,oBAAI,CAAC,QAAQ,KAAK,MAAM,IAAI;AAAG;AAC/B,sBAAM,KAAK;AACX,yBAAS,KAAK,OAAO,UAAU,KAAK,KAAK,eAAe,KAAK,YAAY;AAAA,cAC3E;AACA,wBAAU,KAAK,WAAW,MAAM,QAAQ,KAAK,OAAO,QAAQ,MAAM,KAAK,eAAe,KAAK,YAAY;AACvG,mBAAK,cAAc,QAAQ,YAAY;AAAA,YACzC,OAAO;AACL,mBAAK,cAAc,QAAQ,YAAY;AACvC,sBAAQ,KAAK,OAAO,OAAO,MAAM,KAAK,eAAe,KAAK,YAAY,IAAI,eAAe,KAAK;AAC9F,kBAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,yBAAS,cAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA,cAC3D,WAAW,KAAK,OAAO;AACrB,yBAAS,cAAc,KAAK,QAAQ;AAAA,cACtC;AACA,kBAAI,KAAK,UAAU;AACjB,yBAAS;AACT,qBAAK,cAAc,QAAQ,YAAY;AAAA,cACzC,OAAO;AACL,qBAAK,cAAc,QAAQ,YAAY;AACvC,yBAAS;AAAA,cACX;AACA,uBAAS,KAAK,OAAO,QAAQ,MAAM,KAAK,eAAe,KAAK,YAAY;AAAA,YAC1E;AACA,iBAAK,OAAO,OAAO,KAAK,YAAY;AACpC,mBAAO,KAAK,SAAS;AAAA,UACvB;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,YAAY,SAAS,MAAM;AACjD,cAAI;AACJ,cAAI,CAAC,KAAK,UAAU;AAClB,oBAAQ;AACR,iBAAK,cAAc,QAAQ,YAAY;AACvC,gBAAI,KAAK,SAAS,SAAS,SAAS;AAClC,sBAAQ,KAAK,OAAO,OAAO,MAAM,KAAK,eAAe,KAAK,YAAY,IAAI,OAAO,KAAK,OAAO,MAAM,KAAK,OAAO,QAAQ,MAAM,KAAK,eAAe,KAAK,YAAY;AAAA,YACpK,OAAO;AACL,sBAAQ,KAAK,OAAO,OAAO,MAAM,KAAK,eAAe,KAAK,YAAY,IAAI,OAAO,KAAK,OAAO,QAAQ,MAAM,KAAK,eAAe,KAAK,YAAY;AAAA,YAClJ;AACA,iBAAK,cAAc,QAAQ,YAAY;AACvC,iBAAK,OAAO,OAAO,KAAK,YAAY;AACpC,mBAAO,KAAK,WAAW;AAAA,UACzB;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,SAAS,SAAS,OAAO,OAAO;AACtD,eAAK,kBAAkB;AACvB,iBAAO,KAAK,eAAe,OAAO,QAAQ,CAAC;AAAA,QAC7C;AAEA,QAAAA,eAAc,UAAU,QAAQ,WAAW;AACzC,eAAK,oBAAoB;AACzB,iBAAO,KAAK,cAAc;AAAA,QAC5B;AAEA,QAAAA,eAAc,UAAU,YAAY,SAAS,MAAM;AACjD,cAAI,QAAQ,MAAM;AAChB,mBAAO;AAAA,UACT,OAAO;AACL,mBAAO,YAAY,OAAO;AAAA,UAC5B;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,MAAM,WAAW;AACvC,iBAAO,KAAK,QAAQ,MAAM,MAAM,SAAS;AAAA,QAC3C;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,MAAM,YAAY,MAAM;AAC7D,iBAAO,KAAK,KAAK,MAAM,YAAY,IAAI;AAAA,QACzC;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,OAAO;AAC5C,iBAAO,KAAK,KAAK,KAAK;AAAA,QACxB;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,OAAO;AAC5C,iBAAO,KAAK,MAAM,KAAK;AAAA,QACzB;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,OAAO;AAC5C,iBAAO,KAAK,QAAQ,KAAK;AAAA,QAC3B;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,QAAQ,OAAO;AACpD,iBAAO,KAAK,YAAY,QAAQ,KAAK;AAAA,QACvC;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,SAAS,UAAU,YAAY;AACpE,iBAAO,KAAK,YAAY,SAAS,UAAU,UAAU;AAAA,QACvD;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,MAAM,OAAO,OAAO;AACzD,iBAAO,KAAK,QAAQ,MAAM,OAAO,KAAK;AAAA,QACxC;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,MAAM,YAAY,MAAM;AAC3D,iBAAO,KAAK,QAAQ,MAAM,YAAY,IAAI;AAAA,QAC5C;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,MAAM,YAAY,MAAM;AAC3D,iBAAO,KAAK,KAAK,MAAM,YAAY,IAAI;AAAA,QACzC;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,OAAO;AAC1C,iBAAO,KAAK,KAAK,KAAK;AAAA,QACxB;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,OAAO;AAC1C,iBAAO,KAAK,MAAM,KAAK;AAAA,QACzB;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,OAAO;AAC1C,iBAAO,KAAK,QAAQ,KAAK;AAAA,QAC3B;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,OAAO;AAC1C,iBAAO,KAAK,IAAI,KAAK;AAAA,QACvB;AAEA,QAAAA,eAAc,UAAU,IAAI,SAAS,QAAQ,OAAO;AAClD,iBAAO,KAAK,YAAY,QAAQ,KAAK;AAAA,QACvC;AAEA,QAAAA,eAAc,UAAU,MAAM,WAAW;AACvC,cAAI,KAAK,eAAe,KAAK,YAAY,SAAS,SAAS,SAAS;AAClE,mBAAO,KAAK,QAAQ,MAAM,MAAM,SAAS;AAAA,UAC3C,OAAO;AACL,mBAAO,KAAK,UAAU,MAAM,MAAM,SAAS;AAAA,UAC7C;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,IAAI,WAAW;AACrC,cAAI,KAAK,eAAe,KAAK,YAAY,SAAS,SAAS,SAAS;AAClE,mBAAO,KAAK,QAAQ,MAAM,MAAM,SAAS;AAAA,UAC3C,OAAO;AACL,mBAAO,KAAK,UAAU,MAAM,MAAM,SAAS;AAAA,UAC7C;AAAA,QACF;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,MAAM,OAAO;AAClD,iBAAO,KAAK,OAAO,MAAM,KAAK;AAAA,QAChC;AAEA,QAAAA,eAAc,UAAU,OAAO,SAAS,MAAM,OAAO;AACnD,iBAAO,KAAK,QAAQ,MAAM,KAAK;AAAA,QACjC;AAEA,QAAAA,eAAc,UAAU,MAAM,SAAS,MAAM,OAAO;AAClD,iBAAO,KAAK,SAAS,MAAM,KAAK;AAAA,QAClC;AAEA,eAAOA;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/gBZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,aAAa,iBAAiB,eAC1C,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,sBAAgB;AAEhB,oBAAc;AAEd,aAAO,UAAU,kBAAmB,SAAS,YAAY;AACvD,eAAOC,kBAAiB,UAAU;AAElC,iBAASA,iBAAgB,QAAQ,SAAS;AACxC,eAAK,SAAS;AACd,UAAAA,iBAAgB,UAAU,YAAY,KAAK,MAAM,OAAO;AAAA,QAC1D;AAEA,QAAAA,iBAAgB,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AACjE,cAAI,KAAK,kBAAkB,QAAQ,UAAU,YAAY,UAAU;AACjE,mBAAO;AAAA,UACT,OAAO;AACL,mBAAOA,iBAAgB,UAAU,QAAQ,KAAK,MAAM,MAAM,SAAS,KAAK;AAAA,UAC1E;AAAA,QACF;AAEA,QAAAA,iBAAgB,UAAU,WAAW,SAAS,KAAK,SAAS;AAC1D,cAAI,OAAO,GAAG,GAAG,GAAG,KAAK,MAAM,KAAK,MAAM;AAC1C,gBAAM,IAAI;AACV,eAAK,IAAI,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,IAAI,EAAE,GAAG;AAClD,oBAAQ,IAAI;AACZ,kBAAM,iBAAiB,MAAM,IAAI,SAAS,SAAS;AAAA,UACrD;AACA,oBAAU,KAAK,cAAc,OAAO;AACpC,iBAAO,IAAI;AACX,oBAAU,CAAC;AACX,eAAK,IAAI,GAAG,OAAO,KAAK,QAAQ,IAAI,MAAM,KAAK;AAC7C,oBAAQ,KAAK;AACb,oBAAQ,KAAK,KAAK,eAAe,OAAO,SAAS,CAAC,CAAC;AAAA,UACrD;AACA,iBAAO;AAAA,QACT;AAEA,QAAAA,iBAAgB,UAAU,YAAY,SAAS,KAAK,SAAS,OAAO;AAClE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,UAAU,KAAK,MAAM,KAAK,SAAS,KAAK,CAAC;AAAA,QAC9F;AAEA,QAAAA,iBAAgB,UAAU,QAAQ,SAAS,MAAM,SAAS,OAAO;AAC/D,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,MAAM,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAC3F;AAEA,QAAAA,iBAAgB,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AACjE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,QAAQ,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAC7F;AAEA,QAAAA,iBAAgB,UAAU,cAAc,SAAS,MAAM,SAAS,OAAO;AACrE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,YAAY,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QACjG;AAEA,QAAAA,iBAAgB,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AACjE,cAAI,OAAO,GAAG,KAAK;AACnB,oBAAU,QAAQ;AAClB,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,OAAO,MAAM,KAAK,OAAO,MAAM,SAAS,KAAK,CAAC;AACnD,eAAK,OAAO,MAAM,eAAe,KAAK,KAAK,EAAE,IAAI;AACjD,cAAI,KAAK,SAAS,KAAK,OAAO;AAC5B,iBAAK,OAAO,MAAM,cAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ,GAAG;AAAA,UACvE,WAAW,KAAK,OAAO;AACrB,iBAAK,OAAO,MAAM,cAAc,KAAK,QAAQ,GAAG;AAAA,UAClD;AACA,cAAI,KAAK,SAAS,SAAS,GAAG;AAC5B,iBAAK,OAAO,MAAM,IAAI;AACtB,iBAAK,OAAO,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK,CAAC;AACpD,oBAAQ,QAAQ,YAAY;AAC5B,kBAAM,KAAK;AACX,iBAAK,IAAI,GAAG,MAAM,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC1C,sBAAQ,IAAI;AACZ,mBAAK,eAAe,OAAO,SAAS,QAAQ,CAAC;AAAA,YAC/C;AACA,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK,OAAO,MAAM,GAAG;AAAA,UACvB;AACA,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,OAAO,MAAM,QAAQ,mBAAmB,GAAG;AAChD,eAAK,OAAO,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK,CAAC;AACpD,kBAAQ,QAAQ,YAAY;AAC5B,iBAAO,KAAK,UAAU,MAAM,SAAS,KAAK;AAAA,QAC5C;AAEA,QAAAA,iBAAgB,UAAU,UAAU,SAAS,MAAM,SAAS,OAAO;AACjE,cAAI,KAAK,OAAO,gBAAgB,gBAAgB,GAAG,KAAK,MAAM,kBAAkB,KAAK;AACrF,oBAAU,QAAQ;AAClB,eAAK,SAAS,MAAM,SAAS,KAAK;AAClC,kBAAQ,QAAQ,YAAY;AAC5B,eAAK,OAAO,MAAM,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI,MAAM,KAAK,IAAI;AACrE,gBAAM,KAAK;AACX,eAAK,QAAQ,KAAK;AAChB,gBAAI,CAAC,QAAQ,KAAK,KAAK,IAAI;AAAG;AAC9B,kBAAM,IAAI;AACV,iBAAK,UAAU,KAAK,SAAS,KAAK;AAAA,UACpC;AACA,2BAAiB,KAAK,SAAS;AAC/B,2BAAiB,mBAAmB,IAAI,OAAO,KAAK,SAAS;AAC7D,cAAI,mBAAmB,KAAK,KAAK,SAAS,MAAM,SAAS,GAAG;AAC1D,oBAAQ,EAAE,SAAS,SAAS,QAAQ,EAAE,SAAS,SAAS,QAAQ,EAAE,UAAU;AAAA,UAC9E,CAAC,GAAG;AACF,gBAAI,QAAQ,YAAY;AACtB,mBAAK,OAAO,MAAM,GAAG;AACrB,sBAAQ,QAAQ,YAAY;AAC5B,mBAAK,OAAO,MAAM,OAAO,KAAK,OAAO,GAAG;AAAA,YAC1C,OAAO;AACL,sBAAQ,QAAQ,YAAY;AAC5B,mBAAK,OAAO,MAAM,QAAQ,mBAAmB,IAAI;AAAA,YACnD;AAAA,UACF,WAAW,QAAQ,UAAU,mBAAmB,MAAM,eAAe,SAAS,SAAS,QAAQ,eAAe,SAAS,SAAS,QAAS,eAAe,SAAS,MAAO;AACtK,iBAAK,OAAO,MAAM,GAAG;AACrB,oBAAQ,QAAQ,YAAY;AAC5B,oBAAQ;AACR,+BAAmB;AACnB,iBAAK,eAAe,gBAAgB,SAAS,QAAQ,CAAC;AACtD,oBAAQ;AACR,+BAAmB;AACnB,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK,OAAO,MAAM,OAAO,KAAK,OAAO,GAAG;AAAA,UAC1C,OAAO;AACL,iBAAK,OAAO,MAAM,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK,CAAC;AAC1D,oBAAQ,QAAQ,YAAY;AAC5B,mBAAO,KAAK;AACZ,iBAAK,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3C,sBAAQ,KAAK;AACb,mBAAK,eAAe,OAAO,SAAS,QAAQ,CAAC;AAAA,YAC/C;AACA,oBAAQ,QAAQ,YAAY;AAC5B,iBAAK,OAAO,MAAM,KAAK,OAAO,MAAM,SAAS,KAAK,IAAI,OAAO,KAAK,OAAO,GAAG;AAAA,UAC9E;AACA,eAAK,OAAO,MAAM,KAAK,QAAQ,MAAM,SAAS,KAAK,CAAC;AACpD,kBAAQ,QAAQ,YAAY;AAC5B,iBAAO,KAAK,UAAU,MAAM,SAAS,KAAK;AAAA,QAC5C;AAEA,QAAAA,iBAAgB,UAAU,wBAAwB,SAAS,MAAM,SAAS,OAAO;AAC/E,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,sBAAsB,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAC3G;AAEA,QAAAA,iBAAgB,UAAU,MAAM,SAAS,MAAM,SAAS,OAAO;AAC7D,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,IAAI,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QACzF;AAEA,QAAAA,iBAAgB,UAAU,OAAO,SAAS,MAAM,SAAS,OAAO;AAC9D,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,KAAK,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAC1F;AAEA,QAAAA,iBAAgB,UAAU,aAAa,SAAS,MAAM,SAAS,OAAO;AACpE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,WAAW,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAChG;AAEA,QAAAA,iBAAgB,UAAU,aAAa,SAAS,MAAM,SAAS,OAAO;AACpE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,WAAW,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAChG;AAEA,QAAAA,iBAAgB,UAAU,YAAY,SAAS,MAAM,SAAS,OAAO;AACnE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,UAAU,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QAC/F;AAEA,QAAAA,iBAAgB,UAAU,cAAc,SAAS,MAAM,SAAS,OAAO;AACrE,iBAAO,KAAK,OAAO,MAAMA,iBAAgB,UAAU,YAAY,KAAK,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,QACjG;AAEA,eAAOA;AAAA,MAET,EAAG,aAAa;AAAA,IAElB,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC/KZ;AAAA;AACA,KAAC,WAAW;AACV,UAAI,UAAU,aAAa,sBAAsB,aAAa,eAAe,iBAAiB,iBAAiB,QAAQ,YAAY;AAEnI,YAAM,mBAAsB,SAAS,IAAI,QAAQ,aAAa,IAAI;AAElE,6BAAuB;AAEvB,oBAAc;AAEd,sBAAgB;AAEhB,wBAAkB;AAElB,wBAAkB;AAElB,iBAAW;AAEX,oBAAc;AAEd,aAAO,QAAQ,SAAS,SAAS,MAAM,QAAQ,SAAS,SAAS;AAC/D,YAAI,KAAK;AACT,YAAI,QAAQ,MAAM;AAChB,gBAAM,IAAI,MAAM,4BAA4B;AAAA,QAC9C;AACA,kBAAU,OAAO,CAAC,GAAG,QAAQ,SAAS,OAAO;AAC7C,cAAM,IAAI,YAAY,OAAO;AAC7B,eAAO,IAAI,QAAQ,IAAI;AACvB,YAAI,CAAC,QAAQ,UAAU;AACrB,cAAI,YAAY,OAAO;AACvB,cAAK,QAAQ,SAAS,QAAU,QAAQ,SAAS,MAAO;AACtD,gBAAI,IAAI,OAAO;AAAA,UACjB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAEA,aAAO,QAAQ,QAAQ,SAAS,SAAS,QAAQ,OAAO;AACtD,YAAI;AACJ,YAAI,WAAW,OAAO,GAAG;AACvB,iBAAO,CAAC,SAAS,MAAM,GAAG,SAAS,KAAK,IAAI,QAAQ,KAAK;AACzD,oBAAU,CAAC;AAAA,QACb;AACA,YAAI,QAAQ;AACV,iBAAO,IAAI,cAAc,SAAS,QAAQ,KAAK;AAAA,QACjD,OAAO;AACL,iBAAO,IAAI,YAAY,OAAO;AAAA,QAChC;AAAA,MACF;AAEA,aAAO,QAAQ,eAAe,SAAS,SAAS;AAC9C,eAAO,IAAI,gBAAgB,OAAO;AAAA,MACpC;AAEA,aAAO,QAAQ,eAAe,SAAS,QAAQ,SAAS;AACtD,eAAO,IAAI,gBAAgB,QAAQ,OAAO;AAAA,MAC5C;AAEA,aAAO,QAAQ,iBAAiB,IAAI,qBAAqB;AAEzD,aAAO,QAAQ,WAAW;AAE1B,aAAO,QAAQ,cAAc;AAAA,IAE/B,GAAG,KAAK,OAAI;AAAA;AAAA;;;AChEZ;AAAA;AACA,KAAC,WAAW;AACV;AACA,UAAI,SAAS,UAAU,aAAa,eAAe,WACjD,UAAU,CAAC,EAAE;AAEf,gBAAU;AAEV,iBAAW,mBAAsB;AAEjC,sBAAgB,SAAS,OAAO;AAC9B,eAAO,OAAO,UAAU,aAAa,MAAM,QAAQ,GAAG,KAAK,KAAK,MAAM,QAAQ,GAAG,KAAK,KAAK,MAAM,QAAQ,GAAG,KAAK;AAAA,MACnH;AAEA,kBAAY,SAAS,OAAO;AAC1B,eAAO,cAAe,YAAY,KAAK,IAAK;AAAA,MAC9C;AAEA,oBAAc,SAAS,OAAO;AAC5B,eAAO,MAAM,QAAQ,OAAO,iBAAiB;AAAA,MAC/C;AAEA,cAAQ,UAAW,WAAW;AAC5B,iBAAS,QAAQ,MAAM;AACrB,cAAI,KAAK,KAAK;AACd,eAAK,UAAU,CAAC;AAChB,gBAAM,SAAS;AACf,eAAK,OAAO,KAAK;AACf,gBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,oBAAQ,IAAI;AACZ,iBAAK,QAAQ,OAAO;AAAA,UACtB;AACA,eAAK,OAAO,MAAM;AAChB,gBAAI,CAAC,QAAQ,KAAK,MAAM,GAAG;AAAG;AAC9B,oBAAQ,KAAK;AACb,iBAAK,QAAQ,OAAO;AAAA,UACtB;AAAA,QACF;AAEA,gBAAQ,UAAU,cAAc,SAAS,SAAS;AAChD,cAAI,SAAS,SAAS,QAAQ,aAAa;AAC3C,oBAAU,KAAK,QAAQ;AACvB,oBAAU,KAAK,QAAQ;AACvB,cAAK,OAAO,KAAK,OAAO,EAAE,WAAW,KAAO,KAAK,QAAQ,aAAa,SAAS,OAAO,UAAW;AAC/F,uBAAW,OAAO,KAAK,OAAO,EAAE;AAChC,sBAAU,QAAQ;AAAA,UACpB,OAAO;AACL,uBAAW,KAAK,QAAQ;AAAA,UAC1B;AACA,mBAAU,SAAS,OAAO;AACxB,mBAAO,SAAS,SAAS,KAAK;AAC5B,kBAAI,MAAM,OAAO,OAAO,OAAO,KAAK;AACpC,kBAAI,OAAO,QAAQ,UAAU;AAC3B,oBAAI,MAAM,QAAQ,SAAS,cAAc,GAAG,GAAG;AAC7C,0BAAQ,IAAI,UAAU,GAAG,CAAC;AAAA,gBAC5B,OAAO;AACL,0BAAQ,IAAI,GAAG;AAAA,gBACjB;AAAA,cACF,WAAW,MAAM,QAAQ,GAAG,GAAG;AAC7B,qBAAK,SAAS,KAAK;AACjB,sBAAI,CAAC,QAAQ,KAAK,KAAK,KAAK;AAAG;AAC/B,0BAAQ,IAAI;AACZ,uBAAK,OAAO,OAAO;AACjB,4BAAQ,MAAM;AACd,8BAAU,OAAO,QAAQ,IAAI,GAAG,GAAG,KAAK,EAAE,GAAG;AAAA,kBAC/C;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,OAAO,KAAK;AACf,sBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,0BAAQ,IAAI;AACZ,sBAAI,QAAQ,SAAS;AACnB,wBAAI,OAAO,UAAU,UAAU;AAC7B,2BAAK,QAAQ,OAAO;AAClB,gCAAQ,MAAM;AACd,kCAAU,QAAQ,IAAI,MAAM,KAAK;AAAA,sBACnC;AAAA,oBACF;AAAA,kBACF,WAAW,QAAQ,SAAS;AAC1B,wBAAI,MAAM,QAAQ,SAAS,cAAc,KAAK,GAAG;AAC/C,gCAAU,QAAQ,IAAI,UAAU,KAAK,CAAC;AAAA,oBACxC,OAAO;AACL,gCAAU,QAAQ,IAAI,KAAK;AAAA,oBAC7B;AAAA,kBACF,WAAW,MAAM,QAAQ,KAAK,GAAG;AAC/B,yBAAK,SAAS,OAAO;AACnB,0BAAI,CAAC,QAAQ,KAAK,OAAO,KAAK;AAAG;AACjC,8BAAQ,MAAM;AACd,0BAAI,OAAO,UAAU,UAAU;AAC7B,4BAAI,MAAM,QAAQ,SAAS,cAAc,KAAK,GAAG;AAC/C,oCAAU,QAAQ,IAAI,GAAG,EAAE,IAAI,UAAU,KAAK,CAAC,EAAE,GAAG;AAAA,wBACtD,OAAO;AACL,oCAAU,QAAQ,IAAI,KAAK,KAAK,EAAE,GAAG;AAAA,wBACvC;AAAA,sBACF,OAAO;AACL,kCAAU,OAAO,QAAQ,IAAI,GAAG,GAAG,KAAK,EAAE,GAAG;AAAA,sBAC/C;AAAA,oBACF;AAAA,kBACF,WAAW,OAAO,UAAU,UAAU;AACpC,8BAAU,OAAO,QAAQ,IAAI,GAAG,GAAG,KAAK,EAAE,GAAG;AAAA,kBAC/C,OAAO;AACL,wBAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,SAAS,cAAc,KAAK,GAAG;AAC5E,gCAAU,QAAQ,IAAI,GAAG,EAAE,IAAI,UAAU,KAAK,CAAC,EAAE,GAAG;AAAA,oBACtD,OAAO;AACL,0BAAI,SAAS,MAAM;AACjB,gCAAQ;AAAA,sBACV;AACA,gCAAU,QAAQ,IAAI,KAAK,MAAM,SAAS,CAAC,EAAE,GAAG;AAAA,oBAClD;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AACA,qBAAO;AAAA,YACT;AAAA,UACF,EAAG,IAAI;AACP,wBAAc,QAAQ,OAAO,UAAU,KAAK,QAAQ,QAAQ,KAAK,QAAQ,SAAS;AAAA,YAChF,UAAU,KAAK,QAAQ;AAAA,YACvB,qBAAqB,KAAK,QAAQ;AAAA,UACpC,CAAC;AACD,iBAAO,OAAO,aAAa,OAAO,EAAE,IAAI,KAAK,QAAQ,UAAU;AAAA,QACjE;AAEA,eAAO;AAAA,MAET,EAAG;AAAA,IAEL,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC9HZ;AAAA;AAKA,WAAO,UAAU;AAQjB,aAAS,QAAQ,KAAK;AACpB,UAAI;AAAK,eAAO,MAAM,GAAG;AAAA,IAC3B;AAUA,aAAS,MAAM,KAAK;AAClB,eAAS,OAAO,QAAQ,WAAW;AACjC,YAAI,OAAO,QAAQ,UAAU;AAAA,MAC/B;AACA,aAAO;AAAA,IACT;AAWA,YAAQ,UAAU,KAClB,QAAQ,UAAU,mBAAmB,SAAS,OAAO,IAAG;AACtD,WAAK,aAAa,KAAK,cAAc,CAAC;AACtC,OAAC,KAAK,WAAW,SAAS,KAAK,WAAW,UAAU,CAAC,GAClD,KAAK,EAAE;AACV,aAAO;AAAA,IACT;AAYA,YAAQ,UAAU,OAAO,SAAS,OAAO,IAAG;AAC1C,UAAIC,QAAO;AACX,WAAK,aAAa,KAAK,cAAc,CAAC;AAEtC,eAAS,KAAK;AACZ,QAAAA,MAAK,IAAI,OAAO,EAAE;AAClB,WAAG,MAAM,MAAM,SAAS;AAAA,MAC1B;AAEA,SAAG,KAAK;AACR,WAAK,GAAG,OAAO,EAAE;AACjB,aAAO;AAAA,IACT;AAYA,YAAQ,UAAU,MAClB,QAAQ,UAAU,iBAClB,QAAQ,UAAU,qBAClB,QAAQ,UAAU,sBAAsB,SAAS,OAAO,IAAG;AACzD,WAAK,aAAa,KAAK,cAAc,CAAC;AAGtC,UAAI,KAAK,UAAU,QAAQ;AACzB,aAAK,aAAa,CAAC;AACnB,eAAO;AAAA,MACT;AAGA,UAAI,YAAY,KAAK,WAAW;AAChC,UAAI,CAAC;AAAW,eAAO;AAGvB,UAAI,KAAK,UAAU,QAAQ;AACzB,eAAO,KAAK,WAAW;AACvB,eAAO;AAAA,MACT;AAGA,UAAI;AACJ,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,aAAK,UAAU;AACf,YAAI,OAAO,MAAM,GAAG,OAAO,IAAI;AAC7B,oBAAU,OAAO,GAAG,CAAC;AACrB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAUA,YAAQ,UAAU,OAAO,SAAS,OAAM;AACtC,WAAK,aAAa,KAAK,cAAc,CAAC;AACtC,UAAI,OAAO,CAAC,EAAE,MAAM,KAAK,WAAW,CAAC,GACjC,YAAY,KAAK,WAAW;AAEhC,UAAI,WAAW;AACb,oBAAY,UAAU,MAAM,CAAC;AAC7B,iBAAS,IAAI,GAAG,MAAM,UAAU,QAAQ,IAAI,KAAK,EAAE,GAAG;AACpD,oBAAU,GAAG,MAAM,MAAM,IAAI;AAAA,QAC/B;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAUA,YAAQ,UAAU,YAAY,SAAS,OAAM;AAC3C,WAAK,aAAa,KAAK,cAAc,CAAC;AACtC,aAAO,KAAK,WAAW,UAAU,CAAC;AAAA,IACpC;AAUA,YAAQ,UAAU,eAAe,SAAS,OAAM;AAC9C,aAAO,CAAC,CAAE,KAAK,UAAU,KAAK,EAAE;AAAA,IAClC;AAAA;AAAA;;;ACnKA;AAAA;AAqBA,QAAI,UAAU;AAEd,aAAS,SAAS;AAChB,cAAQ,KAAK,IAAI;AAAA,IACnB;AACA,WAAO,YAAY,IAAI,QAAQ;AAC/B,WAAO,UAAU;AAEjB,WAAO,SAAS;AAEhB,WAAO,UAAU,OAAO,SAAS,MAAM,SAAS;AAC9C,UAAI,SAAS;AAEb,eAAS,OAAO,OAAO;AACrB,YAAI,KAAK,UAAU;AACjB,cAAI,UAAU,KAAK,MAAM,KAAK,KAAK,OAAO,OAAO;AAC/C,mBAAO,MAAM;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAEA,aAAO,GAAG,QAAQ,MAAM;AAExB,eAAS,UAAU;AACjB,YAAI,OAAO,YAAY,OAAO,QAAQ;AACpC,iBAAO,OAAO;AAAA,QAChB;AAAA,MACF;AAEA,WAAK,GAAG,SAAS,OAAO;AAIxB,UAAI,CAAC,KAAK,aAAa,CAAC,WAAW,QAAQ,QAAQ,QAAQ;AACzD,eAAO,GAAG,OAAO,KAAK;AACtB,eAAO,GAAG,SAAS,OAAO;AAAA,MAC5B;AAEA,UAAI,WAAW;AACf,eAAS,QAAQ;AACf,YAAI;AAAU;AACd,mBAAW;AAEX,aAAK,IAAI;AAAA,MACX;AAGA,eAAS,UAAU;AACjB,YAAI;AAAU;AACd,mBAAW;AAEX,YAAI,OAAO,KAAK,YAAY;AAAY,eAAK,QAAQ;AAAA,MACvD;AAGA,eAAS,QAAQ,IAAI;AACnB,gBAAQ;AACR,YAAI,CAAC,KAAK,aAAa,OAAO,GAAG;AAC/B,gBAAM;AAAA,QACR;AAAA,MACF;AAEA,aAAO,GAAG,SAAS,OAAO;AAC1B,WAAK,GAAG,SAAS,OAAO;AAGxB,eAAS,UAAU;AACjB,eAAO,IAAI,QAAQ,MAAM;AACzB,aAAK,IAAI,SAAS,OAAO;AAEzB,eAAO,IAAI,OAAO,KAAK;AACvB,eAAO,IAAI,SAAS,OAAO;AAE3B,eAAO,IAAI,SAAS,OAAO;AAC3B,aAAK,IAAI,SAAS,OAAO;AAEzB,eAAO,IAAI,OAAO,OAAO;AACzB,eAAO,IAAI,SAAS,OAAO;AAE3B,aAAK,IAAI,OAAO,OAAO;AACvB,aAAK,IAAI,SAAS,OAAO;AAAA,MAC3B;AAEA,aAAO,GAAG,OAAO,OAAO;AACxB,aAAO,GAAG,SAAS,OAAO;AAE1B,WAAK,GAAG,OAAO,OAAO;AACtB,WAAK,GAAG,SAAS,OAAO;AAExB,WAAK,KAAK,QAAQ,MAAM;AAGxB,aAAO;AAAA,IACT;AAAA;AAAA;;;AClHA;AAAA;AAAA;AAEA,YAAQ,aAAa;AACrB,YAAQ,cAAc;AACtB,YAAQ,gBAAgB;AAExB,QAAI,SAAS,CAAC;AACd,QAAI,YAAY,CAAC;AACjB,QAAI,MAAM,OAAO,eAAe,cAAc,aAAa;AAE3D,QAAI,OAAO;AACX,SAAS,IAAI,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,EAAE,GAAG;AAC/C,aAAO,KAAK,KAAK;AACjB,gBAAU,KAAK,WAAW,CAAC,KAAK;AAAA,IAClC;AAHS;AAAO;AAOhB,cAAU,IAAI,WAAW,CAAC,KAAK;AAC/B,cAAU,IAAI,WAAW,CAAC,KAAK;AAE/B,aAAS,QAAS,KAAK;AACrB,UAAIC,OAAM,IAAI;AAEd,UAAIA,OAAM,IAAI,GAAG;AACf,cAAM,IAAI,MAAM,gDAAgD;AAAA,MAClE;AAIA,UAAI,WAAW,IAAI,QAAQ,GAAG;AAC9B,UAAI,aAAa;AAAI,mBAAWA;AAEhC,UAAI,kBAAkB,aAAaA,OAC/B,IACA,IAAK,WAAW;AAEpB,aAAO,CAAC,UAAU,eAAe;AAAA,IACnC;AAGA,aAAS,WAAY,KAAK;AACxB,UAAI,OAAO,QAAQ,GAAG;AACtB,UAAI,WAAW,KAAK;AACpB,UAAI,kBAAkB,KAAK;AAC3B,cAAS,WAAW,mBAAmB,IAAI,IAAK;AAAA,IAClD;AAEA,aAAS,YAAa,KAAK,UAAU,iBAAiB;AACpD,cAAS,WAAW,mBAAmB,IAAI,IAAK;AAAA,IAClD;AAEA,aAAS,YAAa,KAAK;AACzB,UAAI;AACJ,UAAI,OAAO,QAAQ,GAAG;AACtB,UAAI,WAAW,KAAK;AACpB,UAAI,kBAAkB,KAAK;AAE3B,UAAI,MAAM,IAAI,IAAI,YAAY,KAAK,UAAU,eAAe,CAAC;AAE7D,UAAI,UAAU;AAGd,UAAIA,OAAM,kBAAkB,IACxB,WAAW,IACX;AAEJ,UAAIC;AACJ,WAAKA,KAAI,GAAGA,KAAID,MAAKC,MAAK,GAAG;AAC3B,cACG,UAAU,IAAI,WAAWA,EAAC,MAAM,KAChC,UAAU,IAAI,WAAWA,KAAI,CAAC,MAAM,KACpC,UAAU,IAAI,WAAWA,KAAI,CAAC,MAAM,IACrC,UAAU,IAAI,WAAWA,KAAI,CAAC;AAChC,YAAI,aAAc,OAAO,KAAM;AAC/B,YAAI,aAAc,OAAO,IAAK;AAC9B,YAAI,aAAa,MAAM;AAAA,MACzB;AAEA,UAAI,oBAAoB,GAAG;AACzB,cACG,UAAU,IAAI,WAAWA,EAAC,MAAM,IAChC,UAAU,IAAI,WAAWA,KAAI,CAAC,MAAM;AACvC,YAAI,aAAa,MAAM;AAAA,MACzB;AAEA,UAAI,oBAAoB,GAAG;AACzB,cACG,UAAU,IAAI,WAAWA,EAAC,MAAM,KAChC,UAAU,IAAI,WAAWA,KAAI,CAAC,MAAM,IACpC,UAAU,IAAI,WAAWA,KAAI,CAAC,MAAM;AACvC,YAAI,aAAc,OAAO,IAAK;AAC9B,YAAI,aAAa,MAAM;AAAA,MACzB;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,gBAAiB,KAAK;AAC7B,aAAO,OAAO,OAAO,KAAK,MACxB,OAAO,OAAO,KAAK,MACnB,OAAO,OAAO,IAAI,MAClB,OAAO,MAAM;AAAA,IACjB;AAEA,aAAS,YAAa,OAAO,OAAO,KAAK;AACvC,UAAI;AACJ,UAAI,SAAS,CAAC;AACd,eAASA,KAAI,OAAOA,KAAI,KAAKA,MAAK,GAAG;AACnC,eACI,MAAMA,OAAM,KAAM,aAClB,MAAMA,KAAI,MAAM,IAAK,UACtB,MAAMA,KAAI,KAAK;AAClB,eAAO,KAAK,gBAAgB,GAAG,CAAC;AAAA,MAClC;AACA,aAAO,OAAO,KAAK,EAAE;AAAA,IACvB;AAEA,aAAS,cAAe,OAAO;AAC7B,UAAI;AACJ,UAAID,OAAM,MAAM;AAChB,UAAI,aAAaA,OAAM;AACvB,UAAI,QAAQ,CAAC;AACb,UAAI,iBAAiB;AAGrB,eAASC,KAAI,GAAGC,QAAOF,OAAM,YAAYC,KAAIC,OAAMD,MAAK,gBAAgB;AACtE,cAAM,KAAK,YAAY,OAAOA,IAAIA,KAAI,iBAAkBC,QAAOA,QAAQD,KAAI,cAAe,CAAC;AAAA,MAC7F;AAGA,UAAI,eAAe,GAAG;AACpB,cAAM,MAAMD,OAAM;AAClB,cAAM;AAAA,UACJ,OAAO,OAAO,KACd,OAAQ,OAAO,IAAK,MACpB;AAAA,QACF;AAAA,MACF,WAAW,eAAe,GAAG;AAC3B,eAAO,MAAMA,OAAM,MAAM,KAAK,MAAMA,OAAM;AAC1C,cAAM;AAAA,UACJ,OAAO,OAAO,MACd,OAAQ,OAAO,IAAK,MACpB,OAAQ,OAAO,IAAK,MACpB;AAAA,QACF;AAAA,MACF;AAEA,aAAO,MAAM,KAAK,EAAE;AAAA,IACtB;AAAA;AAAA;;;ACrJA;AAAA;AACA,YAAQ,OAAO,SAAU,QAAQ,QAAQ,MAAM,MAAM,QAAQ;AAC3D,UAAI,GAAG;AACP,UAAI,OAAQ,SAAS,IAAK,OAAO;AACjC,UAAI,QAAQ,KAAK,QAAQ;AACzB,UAAI,QAAQ,QAAQ;AACpB,UAAI,QAAQ;AACZ,UAAI,IAAI,OAAQ,SAAS,IAAK;AAC9B,UAAI,IAAI,OAAO,KAAK;AACpB,UAAI,IAAI,OAAO,SAAS;AAExB,WAAK;AAEL,UAAI,KAAM,KAAM,CAAC,SAAU;AAC3B,YAAO,CAAC;AACR,eAAS;AACT,aAAO,QAAQ,GAAG,IAAK,IAAI,MAAO,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,MAAC;AAE3E,UAAI,KAAM,KAAM,CAAC,SAAU;AAC3B,YAAO,CAAC;AACR,eAAS;AACT,aAAO,QAAQ,GAAG,IAAK,IAAI,MAAO,OAAO,SAAS,IAAI,KAAK,GAAG,SAAS,GAAG;AAAA,MAAC;AAE3E,UAAI,MAAM,GAAG;AACX,YAAI,IAAI;AAAA,MACV,WAAW,MAAM,MAAM;AACrB,eAAO,IAAI,OAAQ,IAAI,KAAK,KAAK;AAAA,MACnC,OAAO;AACL,YAAI,IAAI,KAAK,IAAI,GAAG,IAAI;AACxB,YAAI,IAAI;AAAA,MACV;AACA,cAAQ,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,GAAG,IAAI,IAAI;AAAA,IAChD;AAEA,YAAQ,QAAQ,SAAU,QAAQ,OAAO,QAAQ,MAAM,MAAM,QAAQ;AACnE,UAAI,GAAG,GAAG;AACV,UAAI,OAAQ,SAAS,IAAK,OAAO;AACjC,UAAI,QAAQ,KAAK,QAAQ;AACzB,UAAI,QAAQ,QAAQ;AACpB,UAAI,KAAM,SAAS,KAAK,KAAK,IAAI,GAAG,GAAG,IAAI,KAAK,IAAI,GAAG,GAAG,IAAI;AAC9D,UAAI,IAAI,OAAO,IAAK,SAAS;AAC7B,UAAI,IAAI,OAAO,IAAI;AACnB,UAAI,IAAI,QAAQ,KAAM,UAAU,KAAK,IAAI,QAAQ,IAAK,IAAI;AAE1D,cAAQ,KAAK,IAAI,KAAK;AAEtB,UAAI,MAAM,KAAK,KAAK,UAAU,UAAU;AACtC,YAAI,MAAM,KAAK,IAAI,IAAI;AACvB,YAAI;AAAA,MACN,OAAO;AACL,YAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG;AACzC,YAAI,SAAS,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG;AACrC;AACA,eAAK;AAAA,QACP;AACA,YAAI,IAAI,SAAS,GAAG;AAClB,mBAAS,KAAK;AAAA,QAChB,OAAO;AACL,mBAAS,KAAK,KAAK,IAAI,GAAG,IAAI,KAAK;AAAA,QACrC;AACA,YAAI,QAAQ,KAAK,GAAG;AAClB;AACA,eAAK;AAAA,QACP;AAEA,YAAI,IAAI,SAAS,MAAM;AACrB,cAAI;AACJ,cAAI;AAAA,QACN,WAAW,IAAI,SAAS,GAAG;AACzB,eAAM,QAAQ,IAAK,KAAK,KAAK,IAAI,GAAG,IAAI;AACxC,cAAI,IAAI;AAAA,QACV,OAAO;AACL,cAAI,QAAQ,KAAK,IAAI,GAAG,QAAQ,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI;AACrD,cAAI;AAAA,QACN;AAAA,MACF;AAEA,aAAO,QAAQ,GAAG,OAAO,SAAS,KAAK,IAAI,KAAM,KAAK,GAAG,KAAK,KAAK,QAAQ,GAAG;AAAA,MAAC;AAE/E,UAAK,KAAK,OAAQ;AAClB,cAAQ;AACR,aAAO,OAAO,GAAG,OAAO,SAAS,KAAK,IAAI,KAAM,KAAK,GAAG,KAAK,KAAK,QAAQ,GAAG;AAAA,MAAC;AAE9E,aAAO,SAAS,IAAI,MAAM,IAAI;AAAA,IAChC;AAAA;AAAA;;;ACpFA;AAAA;AAAA;AAUA,QAAM,SAAS;AACf,QAAM,UAAU;AAChB,QAAM,sBACH,OAAO,WAAW,cAAc,OAAO,OAAO,WAAW,aACtD,OAAO,OAAO,4BAA4B,IAC1C;AAEN,YAAQ,SAASG;AACjB,YAAQ,aAAa;AACrB,YAAQ,oBAAoB;AAE5B,QAAM,eAAe;AACrB,YAAQ,aAAa;AAgBrB,IAAAA,QAAO,sBAAsB,kBAAkB;AAE/C,QAAI,CAACA,QAAO,uBAAuB,OAAO,YAAY,eAClD,OAAO,QAAQ,UAAU,YAAY;AACvC,cAAQ;AAAA,QACN;AAAA,MAEF;AAAA,IACF;AAEA,aAAS,oBAAqB;AAE5B,UAAI;AACF,cAAM,MAAM,IAAI,WAAW,CAAC;AAC5B,cAAM,QAAQ,EAAE,KAAK,WAAY;AAAE,iBAAO;AAAA,QAAG,EAAE;AAC/C,eAAO,eAAe,OAAO,WAAW,SAAS;AACjD,eAAO,eAAe,KAAK,KAAK;AAChC,eAAO,IAAI,IAAI,MAAM;AAAA,MACvB,SAAS,GAAP;AACA,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO,eAAeA,QAAO,WAAW,UAAU;AAAA,MAChD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,YAAI,CAACA,QAAO,SAAS,IAAI;AAAG,iBAAO;AACnC,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAED,WAAO,eAAeA,QAAO,WAAW,UAAU;AAAA,MAChD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,YAAI,CAACA,QAAO,SAAS,IAAI;AAAG,iBAAO;AACnC,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAED,aAAS,aAAc,QAAQ;AAC7B,UAAI,SAAS,cAAc;AACzB,cAAM,IAAI,WAAW,gBAAgB,SAAS,gCAAgC;AAAA,MAChF;AAEA,YAAM,MAAM,IAAI,WAAW,MAAM;AACjC,aAAO,eAAe,KAAKA,QAAO,SAAS;AAC3C,aAAO;AAAA,IACT;AAYA,aAASA,QAAQ,KAAK,kBAAkB,QAAQ;AAE9C,UAAI,OAAO,QAAQ,UAAU;AAC3B,YAAI,OAAO,qBAAqB,UAAU;AACxC,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AACA,eAAO,YAAY,GAAG;AAAA,MACxB;AACA,aAAO,KAAK,KAAK,kBAAkB,MAAM;AAAA,IAC3C;AAEA,IAAAA,QAAO,WAAW;AAElB,aAAS,KAAM,OAAO,kBAAkB,QAAQ;AAC9C,UAAI,OAAO,UAAU,UAAU;AAC7B,eAAO,WAAW,OAAO,gBAAgB;AAAA,MAC3C;AAEA,UAAI,YAAY,OAAO,KAAK,GAAG;AAC7B,eAAO,cAAc,KAAK;AAAA,MAC5B;AAEA,UAAI,SAAS,MAAM;AACjB,cAAM,IAAI;AAAA,UACR,oHAC0C,OAAO;AAAA,QACnD;AAAA,MACF;AAEA,UAAI,WAAW,OAAO,WAAW,KAC5B,SAAS,WAAW,MAAM,QAAQ,WAAW,GAAI;AACpD,eAAO,gBAAgB,OAAO,kBAAkB,MAAM;AAAA,MACxD;AAEA,UAAI,OAAO,sBAAsB,gBAC5B,WAAW,OAAO,iBAAiB,KACnC,SAAS,WAAW,MAAM,QAAQ,iBAAiB,IAAK;AAC3D,eAAO,gBAAgB,OAAO,kBAAkB,MAAM;AAAA,MACxD;AAEA,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,UAAU,MAAM,WAAW,MAAM,QAAQ;AAC/C,UAAI,WAAW,QAAQ,YAAY,OAAO;AACxC,eAAOA,QAAO,KAAK,SAAS,kBAAkB,MAAM;AAAA,MACtD;AAEA,YAAM,IAAI,WAAW,KAAK;AAC1B,UAAI;AAAG,eAAO;AAEd,UAAI,OAAO,WAAW,eAAe,OAAO,eAAe,QACvD,OAAO,MAAM,OAAO,iBAAiB,YAAY;AACnD,eAAOA,QAAO,KAAK,MAAM,OAAO,aAAa,QAAQ,GAAG,kBAAkB,MAAM;AAAA,MAClF;AAEA,YAAM,IAAI;AAAA,QACR,oHAC0C,OAAO;AAAA,MACnD;AAAA,IACF;AAUA,IAAAA,QAAO,OAAO,SAAU,OAAO,kBAAkB,QAAQ;AACvD,aAAO,KAAK,OAAO,kBAAkB,MAAM;AAAA,IAC7C;AAIA,WAAO,eAAeA,QAAO,WAAW,WAAW,SAAS;AAC5D,WAAO,eAAeA,SAAQ,UAAU;AAExC,aAAS,WAAY,MAAM;AACzB,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,wCAAwC;AAAA,MAC9D,WAAW,OAAO,GAAG;AACnB,cAAM,IAAI,WAAW,gBAAgB,OAAO,gCAAgC;AAAA,MAC9E;AAAA,IACF;AAEA,aAAS,MAAO,MAAM,MAAM,UAAU;AACpC,iBAAW,IAAI;AACf,UAAI,QAAQ,GAAG;AACb,eAAO,aAAa,IAAI;AAAA,MAC1B;AACA,UAAI,SAAS,QAAW;AAItB,eAAO,OAAO,aAAa,WACvB,aAAa,IAAI,EAAE,KAAK,MAAM,QAAQ,IACtC,aAAa,IAAI,EAAE,KAAK,IAAI;AAAA,MAClC;AACA,aAAO,aAAa,IAAI;AAAA,IAC1B;AAMA,IAAAA,QAAO,QAAQ,SAAU,MAAM,MAAM,UAAU;AAC7C,aAAO,MAAM,MAAM,MAAM,QAAQ;AAAA,IACnC;AAEA,aAAS,YAAa,MAAM;AAC1B,iBAAW,IAAI;AACf,aAAO,aAAa,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC;AAAA,IACtD;AAKA,IAAAA,QAAO,cAAc,SAAU,MAAM;AACnC,aAAO,YAAY,IAAI;AAAA,IACzB;AAIA,IAAAA,QAAO,kBAAkB,SAAU,MAAM;AACvC,aAAO,YAAY,IAAI;AAAA,IACzB;AAEA,aAAS,WAAY,QAAQ,UAAU;AACrC,UAAI,OAAO,aAAa,YAAY,aAAa,IAAI;AACnD,mBAAW;AAAA,MACb;AAEA,UAAI,CAACA,QAAO,WAAW,QAAQ,GAAG;AAChC,cAAM,IAAI,UAAU,uBAAuB,QAAQ;AAAA,MACrD;AAEA,YAAM,SAAS,WAAW,QAAQ,QAAQ,IAAI;AAC9C,UAAI,MAAM,aAAa,MAAM;AAE7B,YAAM,SAAS,IAAI,MAAM,QAAQ,QAAQ;AAEzC,UAAI,WAAW,QAAQ;AAIrB,cAAM,IAAI,MAAM,GAAG,MAAM;AAAA,MAC3B;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,cAAe,OAAO;AAC7B,YAAM,SAAS,MAAM,SAAS,IAAI,IAAI,QAAQ,MAAM,MAAM,IAAI;AAC9D,YAAM,MAAM,aAAa,MAAM;AAC/B,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAClC,YAAI,KAAK,MAAM,KAAK;AAAA,MACtB;AACA,aAAO;AAAA,IACT;AAEA,aAAS,cAAe,WAAW;AACjC,UAAI,WAAW,WAAW,UAAU,GAAG;AACrC,cAAM,OAAO,IAAI,WAAW,SAAS;AACrC,eAAO,gBAAgB,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AAAA,MACtE;AACA,aAAO,cAAc,SAAS;AAAA,IAChC;AAEA,aAAS,gBAAiB,OAAO,YAAY,QAAQ;AACnD,UAAI,aAAa,KAAK,MAAM,aAAa,YAAY;AACnD,cAAM,IAAI,WAAW,sCAAsC;AAAA,MAC7D;AAEA,UAAI,MAAM,aAAa,cAAc,UAAU,IAAI;AACjD,cAAM,IAAI,WAAW,sCAAsC;AAAA,MAC7D;AAEA,UAAI;AACJ,UAAI,eAAe,UAAa,WAAW,QAAW;AACpD,cAAM,IAAI,WAAW,KAAK;AAAA,MAC5B,WAAW,WAAW,QAAW;AAC/B,cAAM,IAAI,WAAW,OAAO,UAAU;AAAA,MACxC,OAAO;AACL,cAAM,IAAI,WAAW,OAAO,YAAY,MAAM;AAAA,MAChD;AAGA,aAAO,eAAe,KAAKA,QAAO,SAAS;AAE3C,aAAO;AAAA,IACT;AAEA,aAAS,WAAY,KAAK;AACxB,UAAIA,QAAO,SAAS,GAAG,GAAG;AACxB,cAAM,MAAM,QAAQ,IAAI,MAAM,IAAI;AAClC,cAAM,MAAM,aAAa,GAAG;AAE5B,YAAI,IAAI,WAAW,GAAG;AACpB,iBAAO;AAAA,QACT;AAEA,YAAI,KAAK,KAAK,GAAG,GAAG,GAAG;AACvB,eAAO;AAAA,MACT;AAEA,UAAI,IAAI,WAAW,QAAW;AAC5B,YAAI,OAAO,IAAI,WAAW,YAAY,YAAY,IAAI,MAAM,GAAG;AAC7D,iBAAO,aAAa,CAAC;AAAA,QACvB;AACA,eAAO,cAAc,GAAG;AAAA,MAC1B;AAEA,UAAI,IAAI,SAAS,YAAY,MAAM,QAAQ,IAAI,IAAI,GAAG;AACpD,eAAO,cAAc,IAAI,IAAI;AAAA,MAC/B;AAAA,IACF;AAEA,aAAS,QAAS,QAAQ;AAGxB,UAAI,UAAU,cAAc;AAC1B,cAAM,IAAI,WAAW,4DACa,aAAa,SAAS,EAAE,IAAI,QAAQ;AAAA,MACxE;AACA,aAAO,SAAS;AAAA,IAClB;AAEA,aAAS,WAAY,QAAQ;AAC3B,UAAI,CAAC,UAAU,QAAQ;AACrB,iBAAS;AAAA,MACX;AACA,aAAOA,QAAO,MAAM,CAAC,MAAM;AAAA,IAC7B;AAEA,IAAAA,QAAO,WAAW,SAAS,SAAU,GAAG;AACtC,aAAO,KAAK,QAAQ,EAAE,cAAc,QAClC,MAAMA,QAAO;AAAA,IACjB;AAEA,IAAAA,QAAO,UAAU,SAAS,QAAS,GAAG,GAAG;AACvC,UAAI,WAAW,GAAG,UAAU;AAAG,YAAIA,QAAO,KAAK,GAAG,EAAE,QAAQ,EAAE,UAAU;AACxE,UAAI,WAAW,GAAG,UAAU;AAAG,YAAIA,QAAO,KAAK,GAAG,EAAE,QAAQ,EAAE,UAAU;AACxE,UAAI,CAACA,QAAO,SAAS,CAAC,KAAK,CAACA,QAAO,SAAS,CAAC,GAAG;AAC9C,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,UAAI,MAAM;AAAG,eAAO;AAEpB,UAAI,IAAI,EAAE;AACV,UAAI,IAAI,EAAE;AAEV,eAAS,IAAI,GAAG,MAAM,KAAK,IAAI,GAAG,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG;AAClD,YAAI,EAAE,OAAO,EAAE,IAAI;AACjB,cAAI,EAAE;AACN,cAAI,EAAE;AACN;AAAA,QACF;AAAA,MACF;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACT;AAEA,IAAAA,QAAO,aAAa,SAAS,WAAY,UAAU;AACjD,cAAQ,OAAO,QAAQ,EAAE,YAAY,GAAG;AAAA,QACtC,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACH,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAEA,IAAAA,QAAO,SAAS,SAAS,OAAQ,MAAM,QAAQ;AAC7C,UAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,cAAM,IAAI,UAAU,6CAA6C;AAAA,MACnE;AAEA,UAAI,KAAK,WAAW,GAAG;AACrB,eAAOA,QAAO,MAAM,CAAC;AAAA,MACvB;AAEA,UAAI;AACJ,UAAI,WAAW,QAAW;AACxB,iBAAS;AACT,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAChC,oBAAU,KAAK,GAAG;AAAA,QACpB;AAAA,MACF;AAEA,YAAM,SAASA,QAAO,YAAY,MAAM;AACxC,UAAI,MAAM;AACV,WAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAChC,YAAI,MAAM,KAAK;AACf,YAAI,WAAW,KAAK,UAAU,GAAG;AAC/B,cAAI,MAAM,IAAI,SAAS,OAAO,QAAQ;AACpC,gBAAI,CAACA,QAAO,SAAS,GAAG;AAAG,oBAAMA,QAAO,KAAK,GAAG;AAChD,gBAAI,KAAK,QAAQ,GAAG;AAAA,UACtB,OAAO;AACL,uBAAW,UAAU,IAAI;AAAA,cACvB;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF,WAAW,CAACA,QAAO,SAAS,GAAG,GAAG;AAChC,gBAAM,IAAI,UAAU,6CAA6C;AAAA,QACnE,OAAO;AACL,cAAI,KAAK,QAAQ,GAAG;AAAA,QACtB;AACA,eAAO,IAAI;AAAA,MACb;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAY,QAAQ,UAAU;AACrC,UAAIA,QAAO,SAAS,MAAM,GAAG;AAC3B,eAAO,OAAO;AAAA,MAChB;AACA,UAAI,YAAY,OAAO,MAAM,KAAK,WAAW,QAAQ,WAAW,GAAG;AACjE,eAAO,OAAO;AAAA,MAChB;AACA,UAAI,OAAO,WAAW,UAAU;AAC9B,cAAM,IAAI;AAAA,UACR,6FACmB,OAAO;AAAA,QAC5B;AAAA,MACF;AAEA,YAAM,MAAM,OAAO;AACnB,YAAM,YAAa,UAAU,SAAS,KAAK,UAAU,OAAO;AAC5D,UAAI,CAAC,aAAa,QAAQ;AAAG,eAAO;AAGpC,UAAI,cAAc;AAClB,iBAAS;AACP,gBAAQ,UAAU;AAAA,UAChB,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,YAAY,MAAM,EAAE;AAAA,UAC7B,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,MAAM;AAAA,UACf,KAAK;AACH,mBAAO,QAAQ;AAAA,UACjB,KAAK;AACH,mBAAO,cAAc,MAAM,EAAE;AAAA,UAC/B;AACE,gBAAI,aAAa;AACf,qBAAO,YAAY,KAAK,YAAY,MAAM,EAAE;AAAA,YAC9C;AACA,wBAAY,KAAK,UAAU,YAAY;AACvC,0BAAc;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AACA,IAAAA,QAAO,aAAa;AAEpB,aAAS,aAAc,UAAU,OAAO,KAAK;AAC3C,UAAI,cAAc;AASlB,UAAI,UAAU,UAAa,QAAQ,GAAG;AACpC,gBAAQ;AAAA,MACV;AAGA,UAAI,QAAQ,KAAK,QAAQ;AACvB,eAAO;AAAA,MACT;AAEA,UAAI,QAAQ,UAAa,MAAM,KAAK,QAAQ;AAC1C,cAAM,KAAK;AAAA,MACb;AAEA,UAAI,OAAO,GAAG;AACZ,eAAO;AAAA,MACT;AAGA,eAAS;AACT,iBAAW;AAEX,UAAI,OAAO,OAAO;AAChB,eAAO;AAAA,MACT;AAEA,UAAI,CAAC;AAAU,mBAAW;AAE1B,aAAO,MAAM;AACX,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,mBAAO,SAAS,MAAM,OAAO,GAAG;AAAA,UAElC,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,UAAU,MAAM,OAAO,GAAG;AAAA,UAEnC,KAAK;AACH,mBAAO,WAAW,MAAM,OAAO,GAAG;AAAA,UAEpC,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,YAAY,MAAM,OAAO,GAAG;AAAA,UAErC,KAAK;AACH,mBAAO,YAAY,MAAM,OAAO,GAAG;AAAA,UAErC,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,aAAa,MAAM,OAAO,GAAG;AAAA,UAEtC;AACE,gBAAI;AAAa,oBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACpE,wBAAY,WAAW,IAAI,YAAY;AACvC,0BAAc;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAQA,IAAAA,QAAO,UAAU,YAAY;AAE7B,aAAS,KAAM,GAAG,GAAG,GAAG;AACtB,YAAM,IAAI,EAAE;AACZ,QAAE,KAAK,EAAE;AACT,QAAE,KAAK;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAU;AAC3C,YAAM,MAAM,KAAK;AACjB,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,aAAK,MAAM,GAAG,IAAI,CAAC;AAAA,MACrB;AACA,aAAO;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAU;AAC3C,YAAM,MAAM,KAAK;AACjB,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,aAAK,MAAM,GAAG,IAAI,CAAC;AACnB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAU;AAC3C,YAAM,MAAM,KAAK;AACjB,UAAI,MAAM,MAAM,GAAG;AACjB,cAAM,IAAI,WAAW,2CAA2C;AAAA,MAClE;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC/B,aAAK,MAAM,GAAG,IAAI,CAAC;AACnB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AACvB,aAAK,MAAM,IAAI,GAAG,IAAI,CAAC;AAAA,MACzB;AACA,aAAO;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,WAAW,SAAS,WAAY;AAC/C,YAAM,SAAS,KAAK;AACpB,UAAI,WAAW;AAAG,eAAO;AACzB,UAAI,UAAU,WAAW;AAAG,eAAO,UAAU,MAAM,GAAG,MAAM;AAC5D,aAAO,aAAa,MAAM,MAAM,SAAS;AAAA,IAC3C;AAEA,IAAAA,QAAO,UAAU,iBAAiBA,QAAO,UAAU;AAEnD,IAAAA,QAAO,UAAU,SAAS,SAAS,OAAQ,GAAG;AAC5C,UAAI,CAACA,QAAO,SAAS,CAAC;AAAG,cAAM,IAAI,UAAU,2BAA2B;AACxE,UAAI,SAAS;AAAG,eAAO;AACvB,aAAOA,QAAO,QAAQ,MAAM,CAAC,MAAM;AAAA,IACrC;AAEA,IAAAA,QAAO,UAAU,UAAU,SAAS,UAAW;AAC7C,UAAI,MAAM;AACV,YAAM,MAAM,QAAQ;AACpB,YAAM,KAAK,SAAS,OAAO,GAAG,GAAG,EAAE,QAAQ,WAAW,KAAK,EAAE,KAAK;AAClE,UAAI,KAAK,SAAS;AAAK,eAAO;AAC9B,aAAO,aAAa,MAAM;AAAA,IAC5B;AACA,QAAI,qBAAqB;AACvB,MAAAA,QAAO,UAAU,uBAAuBA,QAAO,UAAU;AAAA,IAC3D;AAEA,IAAAA,QAAO,UAAU,UAAU,SAAS,QAAS,QAAQ,OAAO,KAAK,WAAW,SAAS;AACnF,UAAI,WAAW,QAAQ,UAAU,GAAG;AAClC,iBAASA,QAAO,KAAK,QAAQ,OAAO,QAAQ,OAAO,UAAU;AAAA,MAC/D;AACA,UAAI,CAACA,QAAO,SAAS,MAAM,GAAG;AAC5B,cAAM,IAAI;AAAA,UACR,mFACoB,OAAO;AAAA,QAC7B;AAAA,MACF;AAEA,UAAI,UAAU,QAAW;AACvB,gBAAQ;AAAA,MACV;AACA,UAAI,QAAQ,QAAW;AACrB,cAAM,SAAS,OAAO,SAAS;AAAA,MACjC;AACA,UAAI,cAAc,QAAW;AAC3B,oBAAY;AAAA,MACd;AACA,UAAI,YAAY,QAAW;AACzB,kBAAU,KAAK;AAAA,MACjB;AAEA,UAAI,QAAQ,KAAK,MAAM,OAAO,UAAU,YAAY,KAAK,UAAU,KAAK,QAAQ;AAC9E,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC3C;AAEA,UAAI,aAAa,WAAW,SAAS,KAAK;AACxC,eAAO;AAAA,MACT;AACA,UAAI,aAAa,SAAS;AACxB,eAAO;AAAA,MACT;AACA,UAAI,SAAS,KAAK;AAChB,eAAO;AAAA,MACT;AAEA,iBAAW;AACX,eAAS;AACT,qBAAe;AACf,mBAAa;AAEb,UAAI,SAAS;AAAQ,eAAO;AAE5B,UAAI,IAAI,UAAU;AAClB,UAAI,IAAI,MAAM;AACd,YAAM,MAAM,KAAK,IAAI,GAAG,CAAC;AAEzB,YAAM,WAAW,KAAK,MAAM,WAAW,OAAO;AAC9C,YAAM,aAAa,OAAO,MAAM,OAAO,GAAG;AAE1C,eAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAI,SAAS,OAAO,WAAW,IAAI;AACjC,cAAI,SAAS;AACb,cAAI,WAAW;AACf;AAAA,QACF;AAAA,MACF;AAEA,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,IAAI;AAAG,eAAO;AAClB,aAAO;AAAA,IACT;AAWA,aAAS,qBAAsB,QAAQ,KAAK,YAAY,UAAU,KAAK;AAErE,UAAI,OAAO,WAAW;AAAG,eAAO;AAGhC,UAAI,OAAO,eAAe,UAAU;AAClC,mBAAW;AACX,qBAAa;AAAA,MACf,WAAW,aAAa,YAAY;AAClC,qBAAa;AAAA,MACf,WAAW,aAAa,aAAa;AACnC,qBAAa;AAAA,MACf;AACA,mBAAa,CAAC;AACd,UAAI,YAAY,UAAU,GAAG;AAE3B,qBAAa,MAAM,IAAK,OAAO,SAAS;AAAA,MAC1C;AAGA,UAAI,aAAa;AAAG,qBAAa,OAAO,SAAS;AACjD,UAAI,cAAc,OAAO,QAAQ;AAC/B,YAAI;AAAK,iBAAO;AAAA;AACX,uBAAa,OAAO,SAAS;AAAA,MACpC,WAAW,aAAa,GAAG;AACzB,YAAI;AAAK,uBAAa;AAAA;AACjB,iBAAO;AAAA,MACd;AAGA,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAMA,QAAO,KAAK,KAAK,QAAQ;AAAA,MACjC;AAGA,UAAIA,QAAO,SAAS,GAAG,GAAG;AAExB,YAAI,IAAI,WAAW,GAAG;AACpB,iBAAO;AAAA,QACT;AACA,eAAO,aAAa,QAAQ,KAAK,YAAY,UAAU,GAAG;AAAA,MAC5D,WAAW,OAAO,QAAQ,UAAU;AAClC,cAAM,MAAM;AACZ,YAAI,OAAO,WAAW,UAAU,YAAY,YAAY;AACtD,cAAI,KAAK;AACP,mBAAO,WAAW,UAAU,QAAQ,KAAK,QAAQ,KAAK,UAAU;AAAA,UAClE,OAAO;AACL,mBAAO,WAAW,UAAU,YAAY,KAAK,QAAQ,KAAK,UAAU;AAAA,UACtE;AAAA,QACF;AACA,eAAO,aAAa,QAAQ,CAAC,GAAG,GAAG,YAAY,UAAU,GAAG;AAAA,MAC9D;AAEA,YAAM,IAAI,UAAU,sCAAsC;AAAA,IAC5D;AAEA,aAAS,aAAc,KAAK,KAAK,YAAY,UAAU,KAAK;AAC1D,UAAI,YAAY;AAChB,UAAI,YAAY,IAAI;AACpB,UAAI,YAAY,IAAI;AAEpB,UAAI,aAAa,QAAW;AAC1B,mBAAW,OAAO,QAAQ,EAAE,YAAY;AACxC,YAAI,aAAa,UAAU,aAAa,WACpC,aAAa,aAAa,aAAa,YAAY;AACrD,cAAI,IAAI,SAAS,KAAK,IAAI,SAAS,GAAG;AACpC,mBAAO;AAAA,UACT;AACA,sBAAY;AACZ,uBAAa;AACb,uBAAa;AACb,wBAAc;AAAA,QAChB;AAAA,MACF;AAEA,eAAS,KAAM,KAAKC,IAAG;AACrB,YAAI,cAAc,GAAG;AACnB,iBAAO,IAAIA;AAAA,QACb,OAAO;AACL,iBAAO,IAAI,aAAaA,KAAI,SAAS;AAAA,QACvC;AAAA,MACF;AAEA,UAAI;AACJ,UAAI,KAAK;AACP,YAAI,aAAa;AACjB,aAAK,IAAI,YAAY,IAAI,WAAW,KAAK;AACvC,cAAI,KAAK,KAAK,CAAC,MAAM,KAAK,KAAK,eAAe,KAAK,IAAI,IAAI,UAAU,GAAG;AACtE,gBAAI,eAAe;AAAI,2BAAa;AACpC,gBAAI,IAAI,aAAa,MAAM;AAAW,qBAAO,aAAa;AAAA,UAC5D,OAAO;AACL,gBAAI,eAAe;AAAI,mBAAK,IAAI;AAChC,yBAAa;AAAA,UACf;AAAA,QACF;AAAA,MACF,OAAO;AACL,YAAI,aAAa,YAAY;AAAW,uBAAa,YAAY;AACjE,aAAK,IAAI,YAAY,KAAK,GAAG,KAAK;AAChC,cAAI,QAAQ;AACZ,mBAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAClC,gBAAI,KAAK,KAAK,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,GAAG;AACrC,sBAAQ;AACR;AAAA,YACF;AAAA,UACF;AACA,cAAI;AAAO,mBAAO;AAAA,QACpB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,IAAAD,QAAO,UAAU,WAAW,SAAS,SAAU,KAAK,YAAY,UAAU;AACxE,aAAO,KAAK,QAAQ,KAAK,YAAY,QAAQ,MAAM;AAAA,IACrD;AAEA,IAAAA,QAAO,UAAU,UAAU,SAAS,QAAS,KAAK,YAAY,UAAU;AACtE,aAAO,qBAAqB,MAAM,KAAK,YAAY,UAAU,IAAI;AAAA,IACnE;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,KAAK,YAAY,UAAU;AAC9E,aAAO,qBAAqB,MAAM,KAAK,YAAY,UAAU,KAAK;AAAA,IACpE;AAEA,aAAS,SAAU,KAAK,QAAQ,QAAQ,QAAQ;AAC9C,eAAS,OAAO,MAAM,KAAK;AAC3B,YAAM,YAAY,IAAI,SAAS;AAC/B,UAAI,CAAC,QAAQ;AACX,iBAAS;AAAA,MACX,OAAO;AACL,iBAAS,OAAO,MAAM;AACtB,YAAI,SAAS,WAAW;AACtB,mBAAS;AAAA,QACX;AAAA,MACF;AAEA,YAAM,SAAS,OAAO;AAEtB,UAAI,SAAS,SAAS,GAAG;AACvB,iBAAS,SAAS;AAAA,MACpB;AACA,UAAI;AACJ,WAAK,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC3B,cAAM,SAAS,SAAS,OAAO,OAAO,IAAI,GAAG,CAAC,GAAG,EAAE;AACnD,YAAI,YAAY,MAAM;AAAG,iBAAO;AAChC,YAAI,SAAS,KAAK;AAAA,MACpB;AACA,aAAO;AAAA,IACT;AAEA,aAAS,UAAW,KAAK,QAAQ,QAAQ,QAAQ;AAC/C,aAAO,WAAW,YAAY,QAAQ,IAAI,SAAS,MAAM,GAAG,KAAK,QAAQ,MAAM;AAAA,IACjF;AAEA,aAAS,WAAY,KAAK,QAAQ,QAAQ,QAAQ;AAChD,aAAO,WAAW,aAAa,MAAM,GAAG,KAAK,QAAQ,MAAM;AAAA,IAC7D;AAEA,aAAS,YAAa,KAAK,QAAQ,QAAQ,QAAQ;AACjD,aAAO,WAAW,cAAc,MAAM,GAAG,KAAK,QAAQ,MAAM;AAAA,IAC9D;AAEA,aAAS,UAAW,KAAK,QAAQ,QAAQ,QAAQ;AAC/C,aAAO,WAAW,eAAe,QAAQ,IAAI,SAAS,MAAM,GAAG,KAAK,QAAQ,MAAM;AAAA,IACpF;AAEA,IAAAA,QAAO,UAAU,QAAQ,SAAS,MAAO,QAAQ,QAAQ,QAAQ,UAAU;AAEzE,UAAI,WAAW,QAAW;AACxB,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEX,WAAW,WAAW,UAAa,OAAO,WAAW,UAAU;AAC7D,mBAAW;AACX,iBAAS,KAAK;AACd,iBAAS;AAAA,MAEX,WAAW,SAAS,MAAM,GAAG;AAC3B,iBAAS,WAAW;AACpB,YAAI,SAAS,MAAM,GAAG;AACpB,mBAAS,WAAW;AACpB,cAAI,aAAa;AAAW,uBAAW;AAAA,QACzC,OAAO;AACL,qBAAW;AACX,mBAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAM,YAAY,KAAK,SAAS;AAChC,UAAI,WAAW,UAAa,SAAS;AAAW,iBAAS;AAEzD,UAAK,OAAO,SAAS,MAAM,SAAS,KAAK,SAAS,MAAO,SAAS,KAAK,QAAQ;AAC7E,cAAM,IAAI,WAAW,wCAAwC;AAAA,MAC/D;AAEA,UAAI,CAAC;AAAU,mBAAW;AAE1B,UAAI,cAAc;AAClB,iBAAS;AACP,gBAAQ,UAAU;AAAA,UAChB,KAAK;AACH,mBAAO,SAAS,MAAM,QAAQ,QAAQ,MAAM;AAAA,UAE9C,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,UAAU,MAAM,QAAQ,QAAQ,MAAM;AAAA,UAE/C,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,WAAW,MAAM,QAAQ,QAAQ,MAAM;AAAA,UAEhD,KAAK;AAEH,mBAAO,YAAY,MAAM,QAAQ,QAAQ,MAAM;AAAA,UAEjD,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO,UAAU,MAAM,QAAQ,QAAQ,MAAM;AAAA,UAE/C;AACE,gBAAI;AAAa,oBAAM,IAAI,UAAU,uBAAuB,QAAQ;AACpE,wBAAY,KAAK,UAAU,YAAY;AACvC,0BAAc;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAEA,IAAAA,QAAO,UAAU,SAAS,SAAS,SAAU;AAC3C,aAAO;AAAA,QACL,MAAM;AAAA,QACN,MAAM,MAAM,UAAU,MAAM,KAAK,KAAK,QAAQ,MAAM,CAAC;AAAA,MACvD;AAAA,IACF;AAEA,aAAS,YAAa,KAAK,OAAO,KAAK;AACrC,UAAI,UAAU,KAAK,QAAQ,IAAI,QAAQ;AACrC,eAAO,OAAO,cAAc,GAAG;AAAA,MACjC,OAAO;AACL,eAAO,OAAO,cAAc,IAAI,MAAM,OAAO,GAAG,CAAC;AAAA,MACnD;AAAA,IACF;AAEA,aAAS,UAAW,KAAK,OAAO,KAAK;AACnC,YAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAC9B,YAAM,MAAM,CAAC;AAEb,UAAI,IAAI;AACR,aAAO,IAAI,KAAK;AACd,cAAM,YAAY,IAAI;AACtB,YAAI,YAAY;AAChB,YAAI,mBAAoB,YAAY,MAChC,IACC,YAAY,MACT,IACC,YAAY,MACT,IACA;AAEZ,YAAI,IAAI,oBAAoB,KAAK;AAC/B,cAAI,YAAY,WAAW,YAAY;AAEvC,kBAAQ,kBAAkB;AAAA,YACxB,KAAK;AACH,kBAAI,YAAY,KAAM;AACpB,4BAAY;AAAA,cACd;AACA;AAAA,YACF,KAAK;AACH,2BAAa,IAAI,IAAI;AACrB,mBAAK,aAAa,SAAU,KAAM;AAChC,iCAAiB,YAAY,OAAS,IAAO,aAAa;AAC1D,oBAAI,gBAAgB,KAAM;AACxB,8BAAY;AAAA,gBACd;AAAA,cACF;AACA;AAAA,YACF,KAAK;AACH,2BAAa,IAAI,IAAI;AACrB,0BAAY,IAAI,IAAI;AACpB,mBAAK,aAAa,SAAU,QAAS,YAAY,SAAU,KAAM;AAC/D,iCAAiB,YAAY,OAAQ,MAAO,aAAa,OAAS,IAAO,YAAY;AACrF,oBAAI,gBAAgB,SAAU,gBAAgB,SAAU,gBAAgB,QAAS;AAC/E,8BAAY;AAAA,gBACd;AAAA,cACF;AACA;AAAA,YACF,KAAK;AACH,2BAAa,IAAI,IAAI;AACrB,0BAAY,IAAI,IAAI;AACpB,2BAAa,IAAI,IAAI;AACrB,mBAAK,aAAa,SAAU,QAAS,YAAY,SAAU,QAAS,aAAa,SAAU,KAAM;AAC/F,iCAAiB,YAAY,OAAQ,MAAQ,aAAa,OAAS,MAAO,YAAY,OAAS,IAAO,aAAa;AACnH,oBAAI,gBAAgB,SAAU,gBAAgB,SAAU;AACtD,8BAAY;AAAA,gBACd;AAAA,cACF;AAAA,UACJ;AAAA,QACF;AAEA,YAAI,cAAc,MAAM;AAGtB,sBAAY;AACZ,6BAAmB;AAAA,QACrB,WAAW,YAAY,OAAQ;AAE7B,uBAAa;AACb,cAAI,KAAK,cAAc,KAAK,OAAQ,KAAM;AAC1C,sBAAY,QAAS,YAAY;AAAA,QACnC;AAEA,YAAI,KAAK,SAAS;AAClB,aAAK;AAAA,MACP;AAEA,aAAO,sBAAsB,GAAG;AAAA,IAClC;AAKA,QAAM,uBAAuB;AAE7B,aAAS,sBAAuB,YAAY;AAC1C,YAAM,MAAM,WAAW;AACvB,UAAI,OAAO,sBAAsB;AAC/B,eAAO,OAAO,aAAa,MAAM,QAAQ,UAAU;AAAA,MACrD;AAGA,UAAI,MAAM;AACV,UAAI,IAAI;AACR,aAAO,IAAI,KAAK;AACd,eAAO,OAAO,aAAa;AAAA,UACzB;AAAA,UACA,WAAW,MAAM,GAAG,KAAK,oBAAoB;AAAA,QAC/C;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAY,KAAK,OAAO,KAAK;AACpC,UAAI,MAAM;AACV,YAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,eAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,eAAO,OAAO,aAAa,IAAI,KAAK,GAAI;AAAA,MAC1C;AACA,aAAO;AAAA,IACT;AAEA,aAAS,YAAa,KAAK,OAAO,KAAK;AACrC,UAAI,MAAM;AACV,YAAM,KAAK,IAAI,IAAI,QAAQ,GAAG;AAE9B,eAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,eAAO,OAAO,aAAa,IAAI,EAAE;AAAA,MACnC;AACA,aAAO;AAAA,IACT;AAEA,aAAS,SAAU,KAAK,OAAO,KAAK;AAClC,YAAM,MAAM,IAAI;AAEhB,UAAI,CAAC,SAAS,QAAQ;AAAG,gBAAQ;AACjC,UAAI,CAAC,OAAO,MAAM,KAAK,MAAM;AAAK,cAAM;AAExC,UAAI,MAAM;AACV,eAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,eAAO,oBAAoB,IAAI;AAAA,MACjC;AACA,aAAO;AAAA,IACT;AAEA,aAAS,aAAc,KAAK,OAAO,KAAK;AACtC,YAAM,QAAQ,IAAI,MAAM,OAAO,GAAG;AAClC,UAAI,MAAM;AAEV,eAAS,IAAI,GAAG,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG;AAC5C,eAAO,OAAO,aAAa,MAAM,KAAM,MAAM,IAAI,KAAK,GAAI;AAAA,MAC5D;AACA,aAAO;AAAA,IACT;AAEA,IAAAA,QAAO,UAAU,QAAQ,SAAS,MAAO,OAAO,KAAK;AACnD,YAAM,MAAM,KAAK;AACjB,cAAQ,CAAC,CAAC;AACV,YAAM,QAAQ,SAAY,MAAM,CAAC,CAAC;AAElC,UAAI,QAAQ,GAAG;AACb,iBAAS;AACT,YAAI,QAAQ;AAAG,kBAAQ;AAAA,MACzB,WAAW,QAAQ,KAAK;AACtB,gBAAQ;AAAA,MACV;AAEA,UAAI,MAAM,GAAG;AACX,eAAO;AACP,YAAI,MAAM;AAAG,gBAAM;AAAA,MACrB,WAAW,MAAM,KAAK;AACpB,cAAM;AAAA,MACR;AAEA,UAAI,MAAM;AAAO,cAAM;AAEvB,YAAM,SAAS,KAAK,SAAS,OAAO,GAAG;AAEvC,aAAO,eAAe,QAAQA,QAAO,SAAS;AAE9C,aAAO;AAAA,IACT;AAKA,aAAS,YAAa,QAAQ,KAAK,QAAQ;AACzC,UAAK,SAAS,MAAO,KAAK,SAAS;AAAG,cAAM,IAAI,WAAW,oBAAoB;AAC/E,UAAI,SAAS,MAAM;AAAQ,cAAM,IAAI,WAAW,uCAAuC;AAAA,IACzF;AAEA,IAAAA,QAAO,UAAU,aACjBA,QAAO,UAAU,aAAa,SAAS,WAAY,QAAQE,aAAY,UAAU;AAC/E,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAI,MAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAIA,gBAAe,OAAO,MAAQ;AACzC,eAAO,KAAK,SAAS,KAAK;AAAA,MAC5B;AAEA,aAAO;AAAA,IACT;AAEA,IAAAF,QAAO,UAAU,aACjBA,QAAO,UAAU,aAAa,SAAS,WAAY,QAAQE,aAAY,UAAU;AAC/E,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC,UAAU;AACb,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAAA,MAC7C;AAEA,UAAI,MAAM,KAAK,SAAS,EAAEA;AAC1B,UAAI,MAAM;AACV,aAAOA,cAAa,MAAM,OAAO,MAAQ;AACvC,eAAO,KAAK,SAAS,EAAEA,eAAc;AAAA,MACvC;AAEA,aAAO;AAAA,IACT;AAEA,IAAAF,QAAO,UAAU,YACjBA,QAAO,UAAU,YAAY,SAAS,UAAW,QAAQ,UAAU;AACjE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK;AAAA,IACd;AAEA,IAAAA,QAAO,UAAU,eACjBA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,KAAK,UAAW,KAAK,SAAS,MAAM;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,eACjBA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAQ,KAAK,WAAW,IAAK,KAAK,SAAS;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,eACjBA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,cAAS,KAAK,UACT,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS,MAAM,MACpB,KAAK,SAAS,KAAK;AAAA,IAC1B;AAEA,IAAAA,QAAO,UAAU,eACjBA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,UAAU,YACnB,KAAK,SAAS,MAAM,KACrB,KAAK,SAAS,MAAM,IACrB,KAAK,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,kBAAkB,mBAAmB,SAAS,gBAAiB,QAAQ;AACtF,eAAS,WAAW;AACpB,qBAAe,QAAQ,QAAQ;AAC/B,YAAM,QAAQ,KAAK;AACnB,YAAM,OAAO,KAAK,SAAS;AAC3B,UAAI,UAAU,UAAa,SAAS,QAAW;AAC7C,oBAAY,QAAQ,KAAK,SAAS,CAAC;AAAA,MACrC;AAEA,YAAM,KAAK,QACT,KAAK,EAAE,UAAU,KAAK,IACtB,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK;AAExB,YAAM,KAAK,KAAK,EAAE,UAChB,KAAK,EAAE,UAAU,KAAK,IACtB,KAAK,EAAE,UAAU,KAAK,KACtB,OAAO,KAAK;AAEd,aAAO,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE;AAAA,IAC9C,CAAC;AAED,IAAAA,QAAO,UAAU,kBAAkB,mBAAmB,SAAS,gBAAiB,QAAQ;AACtF,eAAS,WAAW;AACpB,qBAAe,QAAQ,QAAQ;AAC/B,YAAM,QAAQ,KAAK;AACnB,YAAM,OAAO,KAAK,SAAS;AAC3B,UAAI,UAAU,UAAa,SAAS,QAAW;AAC7C,oBAAY,QAAQ,KAAK,SAAS,CAAC;AAAA,MACrC;AAEA,YAAM,KAAK,QAAQ,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,IACtB,KAAK,EAAE;AAET,YAAM,KAAK,KAAK,EAAE,UAAU,KAAK,KAC/B,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,IACtB;AAEF,cAAQ,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE;AAAA,IAC/C,CAAC;AAED,IAAAA,QAAO,UAAU,YAAY,SAAS,UAAW,QAAQE,aAAY,UAAU;AAC7E,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,MAAM,KAAK;AACf,UAAI,MAAM;AACV,UAAI,IAAI;AACR,aAAO,EAAE,IAAIA,gBAAe,OAAO,MAAQ;AACzC,eAAO,KAAK,SAAS,KAAK;AAAA,MAC5B;AACA,aAAO;AAEP,UAAI,OAAO;AAAK,eAAO,KAAK,IAAI,GAAG,IAAIA,WAAU;AAEjD,aAAO;AAAA,IACT;AAEA,IAAAF,QAAO,UAAU,YAAY,SAAS,UAAW,QAAQE,aAAY,UAAU;AAC7E,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC;AAAU,oBAAY,QAAQA,aAAY,KAAK,MAAM;AAE1D,UAAI,IAAIA;AACR,UAAI,MAAM;AACV,UAAI,MAAM,KAAK,SAAS,EAAE;AAC1B,aAAO,IAAI,MAAM,OAAO,MAAQ;AAC9B,eAAO,KAAK,SAAS,EAAE,KAAK;AAAA,MAC9B;AACA,aAAO;AAEP,UAAI,OAAO;AAAK,eAAO,KAAK,IAAI,GAAG,IAAIA,WAAU;AAEjD,aAAO;AAAA,IACT;AAEA,IAAAF,QAAO,UAAU,WAAW,SAAS,SAAU,QAAQ,UAAU;AAC/D,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,UAAI,EAAE,KAAK,UAAU;AAAO,eAAQ,KAAK;AACzC,cAAS,MAAO,KAAK,UAAU,KAAK;AAAA,IACtC;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,YAAM,MAAM,KAAK,UAAW,KAAK,SAAS,MAAM;AAChD,aAAQ,MAAM,QAAU,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,YAAM,MAAM,KAAK,SAAS,KAAM,KAAK,WAAW;AAChD,aAAQ,MAAM,QAAU,MAAM,aAAa;AAAA,IAC7C;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,UACV,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM;AAAA,IACzB;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AAEjD,aAAQ,KAAK,WAAW,KACrB,KAAK,SAAS,MAAM,KACpB,KAAK,SAAS,MAAM,IACpB,KAAK,SAAS;AAAA,IACnB;AAEA,IAAAA,QAAO,UAAU,iBAAiB,mBAAmB,SAAS,eAAgB,QAAQ;AACpF,eAAS,WAAW;AACpB,qBAAe,QAAQ,QAAQ;AAC/B,YAAM,QAAQ,KAAK;AACnB,YAAM,OAAO,KAAK,SAAS;AAC3B,UAAI,UAAU,UAAa,SAAS,QAAW;AAC7C,oBAAY,QAAQ,KAAK,SAAS,CAAC;AAAA,MACrC;AAEA,YAAM,MAAM,KAAK,SAAS,KACxB,KAAK,SAAS,KAAK,KAAK,IACxB,KAAK,SAAS,KAAK,KAAK,MACvB,QAAQ;AAEX,cAAQ,OAAO,GAAG,KAAK,OAAO,EAAE,KAC9B,OAAO,QACP,KAAK,EAAE,UAAU,KAAK,IACtB,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,EAAE;AAAA,IAC5B,CAAC;AAED,IAAAA,QAAO,UAAU,iBAAiB,mBAAmB,SAAS,eAAgB,QAAQ;AACpF,eAAS,WAAW;AACpB,qBAAe,QAAQ,QAAQ;AAC/B,YAAM,QAAQ,KAAK;AACnB,YAAM,OAAO,KAAK,SAAS;AAC3B,UAAI,UAAU,UAAa,SAAS,QAAW;AAC7C,oBAAY,QAAQ,KAAK,SAAS,CAAC;AAAA,MACrC;AAEA,YAAM,OAAO,SAAS,MACpB,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,IACtB,KAAK,EAAE;AAET,cAAQ,OAAO,GAAG,KAAK,OAAO,EAAE,KAC9B,OAAO,KAAK,EAAE,UAAU,KAAK,KAC7B,KAAK,EAAE,UAAU,KAAK,KACtB,KAAK,EAAE,UAAU,KAAK,IACtB,IAAI;AAAA,IACR,CAAC;AAED,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,QAAQ,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IAC/C;AAEA,IAAAA,QAAO,UAAU,cAAc,SAAS,YAAa,QAAQ,UAAU;AACrE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,QAAQ,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IAChD;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,QAAQ,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC;AAAA,IAC/C;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,QAAQ,UAAU;AACvE,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,oBAAY,QAAQ,GAAG,KAAK,MAAM;AACjD,aAAO,QAAQ,KAAK,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,IAChD;AAEA,aAAS,SAAU,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACpD,UAAI,CAACA,QAAO,SAAS,GAAG;AAAG,cAAM,IAAI,UAAU,6CAA6C;AAC5F,UAAI,QAAQ,OAAO,QAAQ;AAAK,cAAM,IAAI,WAAW,mCAAmC;AACxF,UAAI,SAAS,MAAM,IAAI;AAAQ,cAAM,IAAI,WAAW,oBAAoB;AAAA,IAC1E;AAEA,IAAAA,QAAO,UAAU,cACjBA,QAAO,UAAU,cAAc,SAAS,YAAa,OAAO,QAAQE,aAAY,UAAU;AACxF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC,UAAU;AACb,cAAM,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC/C,iBAAS,MAAM,OAAO,QAAQA,aAAY,UAAU,CAAC;AAAA,MACvD;AAEA,UAAI,MAAM;AACV,UAAI,IAAI;AACR,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAIA,gBAAe,OAAO,MAAQ;AACzC,aAAK,SAAS,KAAM,QAAQ,MAAO;AAAA,MACrC;AAEA,aAAO,SAASA;AAAA,IAClB;AAEA,IAAAF,QAAO,UAAU,cACjBA,QAAO,UAAU,cAAc,SAAS,YAAa,OAAO,QAAQE,aAAY,UAAU;AACxF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,MAAAA,cAAaA,gBAAe;AAC5B,UAAI,CAAC,UAAU;AACb,cAAM,WAAW,KAAK,IAAI,GAAG,IAAIA,WAAU,IAAI;AAC/C,iBAAS,MAAM,OAAO,QAAQA,aAAY,UAAU,CAAC;AAAA,MACvD;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAI,MAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAM,OAAO,MAAQ;AACjC,aAAK,SAAS,KAAM,QAAQ,MAAO;AAAA,MACrC;AAEA,aAAO,SAASA;AAAA,IAClB;AAEA,IAAAF,QAAO,UAAU,aACjBA,QAAO,UAAU,aAAa,SAAS,WAAY,OAAO,QAAQ,UAAU;AAC1E,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,CAAC;AACvD,WAAK,UAAW,QAAQ;AACxB,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,gBACjBA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,WAAK,UAAW,QAAQ;AACxB,WAAK,SAAS,KAAM,UAAU;AAC9B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,gBACjBA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,CAAC;AACzD,WAAK,UAAW,UAAU;AAC1B,WAAK,SAAS,KAAM,QAAQ;AAC5B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,gBACjBA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,UAAW,QAAQ;AACxB,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,gBACjBA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,CAAC;AAC7D,WAAK,UAAW,UAAU;AAC1B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,QAAQ;AAC5B,aAAO,SAAS;AAAA,IAClB;AAEA,aAAS,eAAgB,KAAK,OAAO,QAAQ,KAAK,KAAK;AACrD,iBAAW,OAAO,KAAK,KAAK,KAAK,QAAQ,CAAC;AAE1C,UAAI,KAAK,OAAO,QAAQ,OAAO,UAAU,CAAC;AAC1C,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,UAAI,KAAK,OAAO,SAAS,OAAO,EAAE,IAAI,OAAO,UAAU,CAAC;AACxD,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,WAAK,MAAM;AACX,UAAI,YAAY;AAChB,aAAO;AAAA,IACT;AAEA,aAAS,eAAgB,KAAK,OAAO,QAAQ,KAAK,KAAK;AACrD,iBAAW,OAAO,KAAK,KAAK,KAAK,QAAQ,CAAC;AAE1C,UAAI,KAAK,OAAO,QAAQ,OAAO,UAAU,CAAC;AAC1C,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,SAAS,KAAK;AAClB,UAAI,KAAK,OAAO,SAAS,OAAO,EAAE,IAAI,OAAO,UAAU,CAAC;AACxD,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM;AACX,UAAI,UAAU;AACd,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,mBAAmB,mBAAmB,SAAS,iBAAkB,OAAO,SAAS,GAAG;AACnG,aAAO,eAAe,MAAM,OAAO,QAAQ,OAAO,CAAC,GAAG,OAAO,oBAAoB,CAAC;AAAA,IACpF,CAAC;AAED,IAAAA,QAAO,UAAU,mBAAmB,mBAAmB,SAAS,iBAAkB,OAAO,SAAS,GAAG;AACnG,aAAO,eAAe,MAAM,OAAO,QAAQ,OAAO,CAAC,GAAG,OAAO,oBAAoB,CAAC;AAAA,IACpF,CAAC;AAED,IAAAA,QAAO,UAAU,aAAa,SAAS,WAAY,OAAO,QAAQE,aAAY,UAAU;AACtF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC,UAAU;AACb,cAAM,QAAQ,KAAK,IAAI,GAAI,IAAIA,cAAc,CAAC;AAE9C,iBAAS,MAAM,OAAO,QAAQA,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC7D;AAEA,UAAI,IAAI;AACR,UAAI,MAAM;AACV,UAAI,MAAM;AACV,WAAK,UAAU,QAAQ;AACvB,aAAO,EAAE,IAAIA,gBAAe,OAAO,MAAQ;AACzC,YAAI,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACxD,gBAAM;AAAA,QACR;AACA,aAAK,SAAS,MAAO,QAAQ,OAAQ,KAAK,MAAM;AAAA,MAClD;AAEA,aAAO,SAASA;AAAA,IAClB;AAEA,IAAAF,QAAO,UAAU,aAAa,SAAS,WAAY,OAAO,QAAQE,aAAY,UAAU;AACtF,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC,UAAU;AACb,cAAM,QAAQ,KAAK,IAAI,GAAI,IAAIA,cAAc,CAAC;AAE9C,iBAAS,MAAM,OAAO,QAAQA,aAAY,QAAQ,GAAG,CAAC,KAAK;AAAA,MAC7D;AAEA,UAAI,IAAIA,cAAa;AACrB,UAAI,MAAM;AACV,UAAI,MAAM;AACV,WAAK,SAAS,KAAK,QAAQ;AAC3B,aAAO,EAAE,KAAK,MAAM,OAAO,MAAQ;AACjC,YAAI,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,IAAI,OAAO,GAAG;AACxD,gBAAM;AAAA,QACR;AACA,aAAK,SAAS,MAAO,QAAQ,OAAQ,KAAK,MAAM;AAAA,MAClD;AAEA,aAAO,SAASA;AAAA,IAClB;AAEA,IAAAF,QAAO,UAAU,YAAY,SAAS,UAAW,OAAO,QAAQ,UAAU;AACxE,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,KAAM,IAAK;AAC3D,UAAI,QAAQ;AAAG,gBAAQ,MAAO,QAAQ;AACtC,WAAK,UAAW,QAAQ;AACxB,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,WAAK,UAAW,QAAQ;AACxB,WAAK,SAAS,KAAM,UAAU;AAC9B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,OAAQ,MAAO;AAC/D,WAAK,UAAW,UAAU;AAC1B,WAAK,SAAS,KAAM,QAAQ;AAC5B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,WAAK,UAAW,QAAQ;AACxB,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC;AAAU,iBAAS,MAAM,OAAO,QAAQ,GAAG,YAAY,WAAW;AACvE,UAAI,QAAQ;AAAG,gBAAQ,aAAa,QAAQ;AAC5C,WAAK,UAAW,UAAU;AAC1B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,UAAU;AAC9B,WAAK,SAAS,KAAM,QAAQ;AAC5B,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,kBAAkB,mBAAmB,SAAS,gBAAiB,OAAO,SAAS,GAAG;AACjG,aAAO,eAAe,MAAM,OAAO,QAAQ,CAAC,OAAO,oBAAoB,GAAG,OAAO,oBAAoB,CAAC;AAAA,IACxG,CAAC;AAED,IAAAA,QAAO,UAAU,kBAAkB,mBAAmB,SAAS,gBAAiB,OAAO,SAAS,GAAG;AACjG,aAAO,eAAe,MAAM,OAAO,QAAQ,CAAC,OAAO,oBAAoB,GAAG,OAAO,oBAAoB,CAAC;AAAA,IACxG,CAAC;AAED,aAAS,aAAc,KAAK,OAAO,QAAQ,KAAK,KAAK,KAAK;AACxD,UAAI,SAAS,MAAM,IAAI;AAAQ,cAAM,IAAI,WAAW,oBAAoB;AACxE,UAAI,SAAS;AAAG,cAAM,IAAI,WAAW,oBAAoB;AAAA,IAC3D;AAEA,aAAS,WAAY,KAAK,OAAO,QAAQ,cAAc,UAAU;AAC/D,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC,UAAU;AACb,qBAAa,KAAK,OAAO,QAAQ,GAAG,sBAAwB,qBAAuB;AAAA,MACrF;AACA,cAAQ,MAAM,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AACrD,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,aAAO,WAAW,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IACvD;AAEA,IAAAA,QAAO,UAAU,eAAe,SAAS,aAAc,OAAO,QAAQ,UAAU;AAC9E,aAAO,WAAW,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IACxD;AAEA,aAAS,YAAa,KAAK,OAAO,QAAQ,cAAc,UAAU;AAChE,cAAQ,CAAC;AACT,eAAS,WAAW;AACpB,UAAI,CAAC,UAAU;AACb,qBAAa,KAAK,OAAO,QAAQ,GAAG,uBAAyB,sBAAwB;AAAA,MACvF;AACA,cAAQ,MAAM,KAAK,OAAO,QAAQ,cAAc,IAAI,CAAC;AACrD,aAAO,SAAS;AAAA,IAClB;AAEA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,aAAO,YAAY,MAAM,OAAO,QAAQ,MAAM,QAAQ;AAAA,IACxD;AAEA,IAAAA,QAAO,UAAU,gBAAgB,SAAS,cAAe,OAAO,QAAQ,UAAU;AAChF,aAAO,YAAY,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAAA,IACzD;AAGA,IAAAA,QAAO,UAAU,OAAO,SAAS,KAAM,QAAQ,aAAa,OAAO,KAAK;AACtE,UAAI,CAACA,QAAO,SAAS,MAAM;AAAG,cAAM,IAAI,UAAU,6BAA6B;AAC/E,UAAI,CAAC;AAAO,gBAAQ;AACpB,UAAI,CAAC,OAAO,QAAQ;AAAG,cAAM,KAAK;AAClC,UAAI,eAAe,OAAO;AAAQ,sBAAc,OAAO;AACvD,UAAI,CAAC;AAAa,sBAAc;AAChC,UAAI,MAAM,KAAK,MAAM;AAAO,cAAM;AAGlC,UAAI,QAAQ;AAAO,eAAO;AAC1B,UAAI,OAAO,WAAW,KAAK,KAAK,WAAW;AAAG,eAAO;AAGrD,UAAI,cAAc,GAAG;AACnB,cAAM,IAAI,WAAW,2BAA2B;AAAA,MAClD;AACA,UAAI,QAAQ,KAAK,SAAS,KAAK;AAAQ,cAAM,IAAI,WAAW,oBAAoB;AAChF,UAAI,MAAM;AAAG,cAAM,IAAI,WAAW,yBAAyB;AAG3D,UAAI,MAAM,KAAK;AAAQ,cAAM,KAAK;AAClC,UAAI,OAAO,SAAS,cAAc,MAAM,OAAO;AAC7C,cAAM,OAAO,SAAS,cAAc;AAAA,MACtC;AAEA,YAAM,MAAM,MAAM;AAElB,UAAI,SAAS,UAAU,OAAO,WAAW,UAAU,eAAe,YAAY;AAE5E,aAAK,WAAW,aAAa,OAAO,GAAG;AAAA,MACzC,OAAO;AACL,mBAAW,UAAU,IAAI;AAAA,UACvB;AAAA,UACA,KAAK,SAAS,OAAO,GAAG;AAAA,UACxB;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAMA,IAAAA,QAAO,UAAU,OAAO,SAAS,KAAM,KAAK,OAAO,KAAK,UAAU;AAEhE,UAAI,OAAO,QAAQ,UAAU;AAC3B,YAAI,OAAO,UAAU,UAAU;AAC7B,qBAAW;AACX,kBAAQ;AACR,gBAAM,KAAK;AAAA,QACb,WAAW,OAAO,QAAQ,UAAU;AAClC,qBAAW;AACX,gBAAM,KAAK;AAAA,QACb;AACA,YAAI,aAAa,UAAa,OAAO,aAAa,UAAU;AAC1D,gBAAM,IAAI,UAAU,2BAA2B;AAAA,QACjD;AACA,YAAI,OAAO,aAAa,YAAY,CAACA,QAAO,WAAW,QAAQ,GAAG;AAChE,gBAAM,IAAI,UAAU,uBAAuB,QAAQ;AAAA,QACrD;AACA,YAAI,IAAI,WAAW,GAAG;AACpB,gBAAM,OAAO,IAAI,WAAW,CAAC;AAC7B,cAAK,aAAa,UAAU,OAAO,OAC/B,aAAa,UAAU;AAEzB,kBAAM;AAAA,UACR;AAAA,QACF;AAAA,MACF,WAAW,OAAO,QAAQ,UAAU;AAClC,cAAM,MAAM;AAAA,MACd,WAAW,OAAO,QAAQ,WAAW;AACnC,cAAM,OAAO,GAAG;AAAA,MAClB;AAGA,UAAI,QAAQ,KAAK,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK;AACzD,cAAM,IAAI,WAAW,oBAAoB;AAAA,MAC3C;AAEA,UAAI,OAAO,OAAO;AAChB,eAAO;AAAA,MACT;AAEA,cAAQ,UAAU;AAClB,YAAM,QAAQ,SAAY,KAAK,SAAS,QAAQ;AAEhD,UAAI,CAAC;AAAK,cAAM;AAEhB,UAAI;AACJ,UAAI,OAAO,QAAQ,UAAU;AAC3B,aAAK,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAC5B,eAAK,KAAK;AAAA,QACZ;AAAA,MACF,OAAO;AACL,cAAM,QAAQA,QAAO,SAAS,GAAG,IAC7B,MACAA,QAAO,KAAK,KAAK,QAAQ;AAC7B,cAAM,MAAM,MAAM;AAClB,YAAI,QAAQ,GAAG;AACb,gBAAM,IAAI,UAAU,gBAAgB,MAClC,mCAAmC;AAAA,QACvC;AACA,aAAK,IAAI,GAAG,IAAI,MAAM,OAAO,EAAE,GAAG;AAChC,eAAK,IAAI,SAAS,MAAM,IAAI;AAAA,QAC9B;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAMA,QAAM,SAAS,CAAC;AAChB,aAAS,EAAG,KAAK,YAAY,MAAM;AACjC,aAAO,OAAO,MAAM,kBAAkB,KAAK;AAAA,QACzC,cAAe;AACb,gBAAM;AAEN,iBAAO,eAAe,MAAM,WAAW;AAAA,YACrC,OAAO,WAAW,MAAM,MAAM,SAAS;AAAA,YACvC,UAAU;AAAA,YACV,cAAc;AAAA,UAChB,CAAC;AAGD,eAAK,OAAO,GAAG,KAAK,SAAS;AAG7B,eAAK;AAEL,iBAAO,KAAK;AAAA,QACd;AAAA,QAEA,IAAI,OAAQ;AACV,iBAAO;AAAA,QACT;AAAA,QAEA,IAAI,KAAM,OAAO;AACf,iBAAO,eAAe,MAAM,QAAQ;AAAA,YAClC,cAAc;AAAA,YACd,YAAY;AAAA,YACZ;AAAA,YACA,UAAU;AAAA,UACZ,CAAC;AAAA,QACH;AAAA,QAEA,WAAY;AACV,iBAAO,GAAG,KAAK,SAAS,SAAS,KAAK;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAEA;AAAA,MAAE;AAAA,MACA,SAAU,MAAM;AACd,YAAI,MAAM;AACR,iBAAO,GAAG;AAAA,QACZ;AAEA,eAAO;AAAA,MACT;AAAA,MAAG;AAAA,IAAU;AACf;AAAA,MAAE;AAAA,MACA,SAAU,MAAM,QAAQ;AACtB,eAAO,QAAQ,wDAAwD,OAAO;AAAA,MAChF;AAAA,MAAG;AAAA,IAAS;AACd;AAAA,MAAE;AAAA,MACA,SAAU,KAAK,OAAO,OAAO;AAC3B,YAAI,MAAM,iBAAiB;AAC3B,YAAI,WAAW;AACf,YAAI,OAAO,UAAU,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI;AACxD,qBAAW,sBAAsB,OAAO,KAAK,CAAC;AAAA,QAChD,WAAW,OAAO,UAAU,UAAU;AACpC,qBAAW,OAAO,KAAK;AACvB,cAAI,QAAQ,OAAO,CAAC,KAAK,OAAO,EAAE,KAAK,QAAQ,EAAE,OAAO,CAAC,KAAK,OAAO,EAAE,IAAI;AACzE,uBAAW,sBAAsB,QAAQ;AAAA,UAC3C;AACA,sBAAY;AAAA,QACd;AACA,eAAO,eAAe,mBAAmB;AACzC,eAAO;AAAA,MACT;AAAA,MAAG;AAAA,IAAU;AAEf,aAAS,sBAAuB,KAAK;AACnC,UAAI,MAAM;AACV,UAAI,IAAI,IAAI;AACZ,YAAM,QAAQ,IAAI,OAAO,MAAM,IAAI;AACnC,aAAO,KAAK,QAAQ,GAAG,KAAK,GAAG;AAC7B,cAAM,IAAI,IAAI,MAAM,IAAI,GAAG,CAAC,IAAI;AAAA,MAClC;AACA,aAAO,GAAG,IAAI,MAAM,GAAG,CAAC,IAAI;AAAA,IAC9B;AAKA,aAAS,YAAa,KAAK,QAAQE,aAAY;AAC7C,qBAAe,QAAQ,QAAQ;AAC/B,UAAI,IAAI,YAAY,UAAa,IAAI,SAASA,iBAAgB,QAAW;AACvE,oBAAY,QAAQ,IAAI,UAAUA,cAAa,EAAE;AAAA,MACnD;AAAA,IACF;AAEA,aAAS,WAAY,OAAO,KAAK,KAAK,KAAK,QAAQA,aAAY;AAC7D,UAAI,QAAQ,OAAO,QAAQ,KAAK;AAC9B,cAAM,IAAI,OAAO,QAAQ,WAAW,MAAM;AAC1C,YAAI;AACJ,YAAIA,cAAa,GAAG;AAClB,cAAI,QAAQ,KAAK,QAAQ,OAAO,CAAC,GAAG;AAClC,oBAAQ,OAAO,YAAY,SAASA,cAAa,KAAK,IAAI;AAAA,UAC5D,OAAO;AACL,oBAAQ,SAAS,SAASA,cAAa,KAAK,IAAI,IAAI,kBACxCA,cAAa,KAAK,IAAI,IAAI;AAAA,UACxC;AAAA,QACF,OAAO;AACL,kBAAQ,MAAM,MAAM,YAAY,MAAM;AAAA,QACxC;AACA,cAAM,IAAI,OAAO,iBAAiB,SAAS,OAAO,KAAK;AAAA,MACzD;AACA,kBAAY,KAAK,QAAQA,WAAU;AAAA,IACrC;AAEA,aAAS,eAAgB,OAAO,MAAM;AACpC,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,IAAI,OAAO,qBAAqB,MAAM,UAAU,KAAK;AAAA,MAC7D;AAAA,IACF;AAEA,aAAS,YAAa,OAAO,QAAQ,MAAM;AACzC,UAAI,KAAK,MAAM,KAAK,MAAM,OAAO;AAC/B,uBAAe,OAAO,IAAI;AAC1B,cAAM,IAAI,OAAO,iBAAiB,QAAQ,UAAU,cAAc,KAAK;AAAA,MACzE;AAEA,UAAI,SAAS,GAAG;AACd,cAAM,IAAI,OAAO,yBAAyB;AAAA,MAC5C;AAEA,YAAM,IAAI,OAAO;AAAA,QAAiB,QAAQ;AAAA,QACR,MAAM,OAAO,IAAI,YAAY;AAAA,QAC7B;AAAA,MAAK;AAAA,IACzC;AAKA,QAAM,oBAAoB;AAE1B,aAAS,YAAa,KAAK;AAEzB,YAAM,IAAI,MAAM,GAAG,EAAE;AAErB,YAAM,IAAI,KAAK,EAAE,QAAQ,mBAAmB,EAAE;AAE9C,UAAI,IAAI,SAAS;AAAG,eAAO;AAE3B,aAAO,IAAI,SAAS,MAAM,GAAG;AAC3B,cAAM,MAAM;AAAA,MACd;AACA,aAAO;AAAA,IACT;AAEA,aAAS,YAAa,QAAQ,OAAO;AACnC,cAAQ,SAAS;AACjB,UAAI;AACJ,YAAM,SAAS,OAAO;AACtB,UAAI,gBAAgB;AACpB,YAAM,QAAQ,CAAC;AAEf,eAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,oBAAY,OAAO,WAAW,CAAC;AAG/B,YAAI,YAAY,SAAU,YAAY,OAAQ;AAE5C,cAAI,CAAC,eAAe;AAElB,gBAAI,YAAY,OAAQ;AAEtB,mBAAK,SAAS,KAAK;AAAI,sBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,YACF,WAAW,IAAI,MAAM,QAAQ;AAE3B,mBAAK,SAAS,KAAK;AAAI,sBAAM,KAAK,KAAM,KAAM,GAAI;AAClD;AAAA,YACF;AAGA,4BAAgB;AAEhB;AAAA,UACF;AAGA,cAAI,YAAY,OAAQ;AACtB,iBAAK,SAAS,KAAK;AAAI,oBAAM,KAAK,KAAM,KAAM,GAAI;AAClD,4BAAgB;AAChB;AAAA,UACF;AAGA,uBAAa,gBAAgB,SAAU,KAAK,YAAY,SAAU;AAAA,QACpE,WAAW,eAAe;AAExB,eAAK,SAAS,KAAK;AAAI,kBAAM,KAAK,KAAM,KAAM,GAAI;AAAA,QACpD;AAEA,wBAAgB;AAGhB,YAAI,YAAY,KAAM;AACpB,eAAK,SAAS,KAAK;AAAG;AACtB,gBAAM,KAAK,SAAS;AAAA,QACtB,WAAW,YAAY,MAAO;AAC5B,eAAK,SAAS,KAAK;AAAG;AACtB,gBAAM;AAAA,YACJ,aAAa,IAAM;AAAA,YACnB,YAAY,KAAO;AAAA,UACrB;AAAA,QACF,WAAW,YAAY,OAAS;AAC9B,eAAK,SAAS,KAAK;AAAG;AACtB,gBAAM;AAAA,YACJ,aAAa,KAAM;AAAA,YACnB,aAAa,IAAM,KAAO;AAAA,YAC1B,YAAY,KAAO;AAAA,UACrB;AAAA,QACF,WAAW,YAAY,SAAU;AAC/B,eAAK,SAAS,KAAK;AAAG;AACtB,gBAAM;AAAA,YACJ,aAAa,KAAO;AAAA,YACpB,aAAa,KAAM,KAAO;AAAA,YAC1B,aAAa,IAAM,KAAO;AAAA,YAC1B,YAAY,KAAO;AAAA,UACrB;AAAA,QACF,OAAO;AACL,gBAAM,IAAI,MAAM,oBAAoB;AAAA,QACtC;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,aAAc,KAAK;AAC1B,YAAM,YAAY,CAAC;AACnB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AAEnC,kBAAU,KAAK,IAAI,WAAW,CAAC,IAAI,GAAI;AAAA,MACzC;AACA,aAAO;AAAA,IACT;AAEA,aAAS,eAAgB,KAAK,OAAO;AACnC,UAAI,GAAG,IAAI;AACX,YAAM,YAAY,CAAC;AACnB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,aAAK,SAAS,KAAK;AAAG;AAEtB,YAAI,IAAI,WAAW,CAAC;AACpB,aAAK,KAAK;AACV,aAAK,IAAI;AACT,kBAAU,KAAK,EAAE;AACjB,kBAAU,KAAK,EAAE;AAAA,MACnB;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,cAAe,KAAK;AAC3B,aAAO,OAAO,YAAY,YAAY,GAAG,CAAC;AAAA,IAC5C;AAEA,aAAS,WAAY,KAAK,KAAK,QAAQ,QAAQ;AAC7C,UAAI;AACJ,WAAK,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC3B,YAAK,IAAI,UAAU,IAAI,UAAY,KAAK,IAAI;AAAS;AACrD,YAAI,IAAI,UAAU,IAAI;AAAA,MACxB;AACA,aAAO;AAAA,IACT;AAKA,aAAS,WAAY,KAAK,MAAM;AAC9B,aAAO,eAAe,QACnB,OAAO,QAAQ,IAAI,eAAe,QAAQ,IAAI,YAAY,QAAQ,QACjE,IAAI,YAAY,SAAS,KAAK;AAAA,IACpC;AACA,aAAS,YAAa,KAAK;AAEzB,aAAO,QAAQ;AAAA,IACjB;AAIA,QAAM,sBAAuB,WAAY;AACvC,YAAM,WAAW;AACjB,YAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,eAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,cAAM,MAAM,IAAI;AAChB,iBAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,gBAAM,MAAM,KAAK,SAAS,KAAK,SAAS;AAAA,QAC1C;AAAA,MACF;AACA,aAAO;AAAA,IACT,EAAG;AAGH,aAAS,mBAAoB,IAAI;AAC/B,aAAO,OAAO,WAAW,cAAc,yBAAyB;AAAA,IAClE;AAEA,aAAS,yBAA0B;AACjC,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA;AAAA;;;ACzjEA;AAAA;AACA,QAAI,SAAS;AACb,QAAIC,UAAS,OAAO;AAGpB,aAAS,UAAW,KAAK,KAAK;AAC5B,eAAS,OAAO,KAAK;AACnB,YAAI,OAAO,IAAI;AAAA,MACjB;AAAA,IACF;AACA,QAAIA,QAAO,QAAQA,QAAO,SAASA,QAAO,eAAeA,QAAO,iBAAiB;AAC/E,aAAO,UAAU;AAAA,IACnB,OAAO;AAEL,gBAAU,QAAQ,OAAO;AACzB,cAAQ,SAAS;AAAA,IACnB;AAEA,aAAS,WAAY,KAAK,kBAAkB,QAAQ;AAClD,aAAOA,QAAO,KAAK,kBAAkB,MAAM;AAAA,IAC7C;AAGA,cAAUA,SAAQ,UAAU;AAE5B,eAAW,OAAO,SAAU,KAAK,kBAAkB,QAAQ;AACzD,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAM,IAAI,UAAU,+BAA+B;AAAA,MACrD;AACA,aAAOA,QAAO,KAAK,kBAAkB,MAAM;AAAA,IAC7C;AAEA,eAAW,QAAQ,SAAU,MAAM,MAAM,UAAU;AACjD,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,UAAI,MAAMA,QAAO,IAAI;AACrB,UAAI,SAAS,QAAW;AACtB,YAAI,OAAO,aAAa,UAAU;AAChC,cAAI,KAAK,MAAM,QAAQ;AAAA,QACzB,OAAO;AACL,cAAI,KAAK,IAAI;AAAA,QACf;AAAA,MACF,OAAO;AACL,YAAI,KAAK,CAAC;AAAA,MACZ;AACA,aAAO;AAAA,IACT;AAEA,eAAW,cAAc,SAAU,MAAM;AACvC,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,aAAOA,QAAO,IAAI;AAAA,IACpB;AAEA,eAAW,kBAAkB,SAAU,MAAM;AAC3C,UAAI,OAAO,SAAS,UAAU;AAC5B,cAAM,IAAI,UAAU,2BAA2B;AAAA,MACjD;AACA,aAAO,OAAO,WAAW,IAAI;AAAA,IAC/B;AAAA;AAAA;;;AC7DA;AAAA;AAAA;AAyBA,QAAIC,UAAS,sBAAuB;AAGpC,QAAI,aAAaA,QAAO,cAAc,SAAU,UAAU;AACxD,iBAAW,KAAK;AAChB,cAAQ,YAAY,SAAS,YAAY,GAAG;AAAA,QAC1C,KAAK;AAAA,QAAM,KAAK;AAAA,QAAO,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAS,KAAK;AAAA,QAAS,KAAK;AAAA,QAAO,KAAK;AAAA,QAAQ,KAAK;AAAA,QAAU,KAAK;AAAA,QAAW,KAAK;AACxI,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB,KAAK;AAC/B,UAAI,CAAC;AAAK,eAAO;AACjB,UAAI;AACJ,aAAO,MAAM;AACX,gBAAQ,KAAK;AAAA,UACX,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACH,mBAAO;AAAA,UACT;AACE,gBAAI;AAAS;AACb,mBAAO,KAAK,KAAK,YAAY;AAC7B,sBAAU;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAIA,aAAS,kBAAkB,KAAK;AAC9B,UAAI,OAAO,mBAAmB,GAAG;AACjC,UAAI,OAAO,SAAS,aAAaA,QAAO,eAAe,cAAc,CAAC,WAAW,GAAG;AAAI,cAAM,IAAI,MAAM,uBAAuB,GAAG;AAClI,aAAO,QAAQ;AAAA,IACjB;AAKA,YAAQ,gBAAgB;AACxB,aAAS,cAAc,UAAU;AAC/B,WAAK,WAAW,kBAAkB,QAAQ;AAC1C,UAAI;AACJ,cAAQ,KAAK,UAAU;AAAA,QACrB,KAAK;AACH,eAAK,OAAO;AACZ,eAAK,MAAM;AACX,eAAK;AACL;AAAA,QACF,KAAK;AACH,eAAK,WAAW;AAChB,eAAK;AACL;AAAA,QACF,KAAK;AACH,eAAK,OAAO;AACZ,eAAK,MAAM;AACX,eAAK;AACL;AAAA,QACF;AACE,eAAK,QAAQ;AACb,eAAK,MAAM;AACX;AAAA,MACJ;AACA,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,WAAWA,QAAO,YAAY,EAAE;AAAA,IACvC;AAEA,kBAAc,UAAU,QAAQ,SAAU,KAAK;AAC7C,UAAI,IAAI,WAAW;AAAG,eAAO;AAC7B,UAAI;AACJ,UAAI;AACJ,UAAI,KAAK,UAAU;AACjB,YAAI,KAAK,SAAS,GAAG;AACrB,YAAI,MAAM;AAAW,iBAAO;AAC5B,YAAI,KAAK;AACT,aAAK,WAAW;AAAA,MAClB,OAAO;AACL,YAAI;AAAA,MACN;AACA,UAAI,IAAI,IAAI;AAAQ,eAAO,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC;AACvE,aAAO,KAAK;AAAA,IACd;AAEA,kBAAc,UAAU,MAAM;AAG9B,kBAAc,UAAU,OAAO;AAG/B,kBAAc,UAAU,WAAW,SAAU,KAAK;AAChD,UAAI,KAAK,YAAY,IAAI,QAAQ;AAC/B,YAAI,KAAK,KAAK,UAAU,KAAK,YAAY,KAAK,UAAU,GAAG,KAAK,QAAQ;AACxE,eAAO,KAAK,SAAS,SAAS,KAAK,UAAU,GAAG,KAAK,SAAS;AAAA,MAChE;AACA,UAAI,KAAK,KAAK,UAAU,KAAK,YAAY,KAAK,UAAU,GAAG,IAAI,MAAM;AACrE,WAAK,YAAY,IAAI;AAAA,IACvB;AAIA,aAAS,cAAc,MAAM;AAC3B,UAAI,QAAQ;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAAA,eAAW,QAAQ,MAAM;AAAM,eAAO;AAC3I,aAAO,QAAQ,MAAM,IAAO,KAAK;AAAA,IACnC;AAKA,aAAS,oBAAoBC,OAAM,KAAK,GAAG;AACzC,UAAI,IAAI,IAAI,SAAS;AACrB,UAAI,IAAI;AAAG,eAAO;AAClB,UAAI,KAAK,cAAc,IAAI,EAAE;AAC7B,UAAI,MAAM,GAAG;AACX,YAAI,KAAK;AAAG,UAAAA,MAAK,WAAW,KAAK;AACjC,eAAO;AAAA,MACT;AACA,UAAI,EAAE,IAAI,KAAK,OAAO;AAAI,eAAO;AACjC,WAAK,cAAc,IAAI,EAAE;AACzB,UAAI,MAAM,GAAG;AACX,YAAI,KAAK;AAAG,UAAAA,MAAK,WAAW,KAAK;AACjC,eAAO;AAAA,MACT;AACA,UAAI,EAAE,IAAI,KAAK,OAAO;AAAI,eAAO;AACjC,WAAK,cAAc,IAAI,EAAE;AACzB,UAAI,MAAM,GAAG;AACX,YAAI,KAAK,GAAG;AACV,cAAI,OAAO;AAAG,iBAAK;AAAA;AAAO,YAAAA,MAAK,WAAW,KAAK;AAAA,QACjD;AACA,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAUA,aAAS,oBAAoBA,OAAM,KAAK,GAAG;AACzC,WAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,QAAAA,MAAK,WAAW;AAChB,eAAO;AAAA,MACT;AACA,UAAIA,MAAK,WAAW,KAAK,IAAI,SAAS,GAAG;AACvC,aAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,UAAAA,MAAK,WAAW;AAChB,iBAAO;AAAA,QACT;AACA,YAAIA,MAAK,WAAW,KAAK,IAAI,SAAS,GAAG;AACvC,eAAK,IAAI,KAAK,SAAU,KAAM;AAC5B,YAAAA,MAAK,WAAW;AAChB,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,aAAS,aAAa,KAAK;AACzB,UAAI,IAAI,KAAK,YAAY,KAAK;AAC9B,UAAI,IAAI,oBAAoB,MAAM,KAAK,CAAC;AACxC,UAAI,MAAM;AAAW,eAAO;AAC5B,UAAI,KAAK,YAAY,IAAI,QAAQ;AAC/B,YAAI,KAAK,KAAK,UAAU,GAAG,GAAG,KAAK,QAAQ;AAC3C,eAAO,KAAK,SAAS,SAAS,KAAK,UAAU,GAAG,KAAK,SAAS;AAAA,MAChE;AACA,UAAI,KAAK,KAAK,UAAU,GAAG,GAAG,IAAI,MAAM;AACxC,WAAK,YAAY,IAAI;AAAA,IACvB;AAKA,aAAS,SAAS,KAAK,GAAG;AACxB,UAAI,QAAQ,oBAAoB,MAAM,KAAK,CAAC;AAC5C,UAAI,CAAC,KAAK;AAAU,eAAO,IAAI,SAAS,QAAQ,CAAC;AACjD,WAAK,YAAY;AACjB,UAAI,MAAM,IAAI,UAAU,QAAQ,KAAK;AACrC,UAAI,KAAK,KAAK,UAAU,GAAG,GAAG;AAC9B,aAAO,IAAI,SAAS,QAAQ,GAAG,GAAG;AAAA,IACpC;AAIA,aAAS,QAAQ,KAAK;AACpB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK;AAAU,eAAO,IAAI;AAC9B,aAAO;AAAA,IACT;AAMA,aAAS,UAAU,KAAK,GAAG;AACzB,WAAK,IAAI,SAAS,KAAK,MAAM,GAAG;AAC9B,YAAI,IAAI,IAAI,SAAS,WAAW,CAAC;AACjC,YAAI,GAAG;AACL,cAAI,IAAI,EAAE,WAAW,EAAE,SAAS,CAAC;AACjC,cAAI,KAAK,SAAU,KAAK,OAAQ;AAC9B,iBAAK,WAAW;AAChB,iBAAK,YAAY;AACjB,iBAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,iBAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,mBAAO,EAAE,MAAM,GAAG,EAAE;AAAA,UACtB;AAAA,QACF;AACA,eAAO;AAAA,MACT;AACA,WAAK,WAAW;AAChB,WAAK,YAAY;AACjB,WAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,aAAO,IAAI,SAAS,WAAW,GAAG,IAAI,SAAS,CAAC;AAAA,IAClD;AAIA,aAAS,SAAS,KAAK;AACrB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK,UAAU;AACjB,YAAI,MAAM,KAAK,YAAY,KAAK;AAChC,eAAO,IAAI,KAAK,SAAS,SAAS,WAAW,GAAG,GAAG;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAEA,aAAS,WAAW,KAAK,GAAG;AAC1B,UAAI,KAAK,IAAI,SAAS,KAAK;AAC3B,UAAI,MAAM;AAAG,eAAO,IAAI,SAAS,UAAU,CAAC;AAC5C,WAAK,WAAW,IAAI;AACpB,WAAK,YAAY;AACjB,UAAI,MAAM,GAAG;AACX,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AAAA,MACtC,OAAO;AACL,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AACpC,aAAK,SAAS,KAAK,IAAI,IAAI,SAAS;AAAA,MACtC;AACA,aAAO,IAAI,SAAS,UAAU,GAAG,IAAI,SAAS,CAAC;AAAA,IACjD;AAEA,aAAS,UAAU,KAAK;AACtB,UAAI,IAAI,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAC9C,UAAI,KAAK;AAAU,eAAO,IAAI,KAAK,SAAS,SAAS,UAAU,GAAG,IAAI,KAAK,QAAQ;AACnF,aAAO;AAAA,IACT;AAGA,aAAS,YAAY,KAAK;AACxB,aAAO,IAAI,SAAS,KAAK,QAAQ;AAAA,IACnC;AAEA,aAAS,UAAU,KAAK;AACtB,aAAO,OAAO,IAAI,SAAS,KAAK,MAAM,GAAG,IAAI;AAAA,IAC/C;AAAA;AAAA;;;ACvSA;AAAA;AAAC,KAAC,SAAU,KAAK;AACf,UAAI,SAAS,SAAU,QAAQ,KAAK;AAAE,eAAO,IAAI,UAAU,QAAQ,GAAG;AAAA,MAAE;AACxE,UAAI,YAAY;AAChB,UAAI,YAAY;AAChB,UAAI,eAAe;AAWnB,UAAI,oBAAoB,KAAK;AAE7B,UAAI,UAAU;AAAA,QACZ;AAAA,QAAW;AAAA,QAAY;AAAA,QAAY;AAAA,QAAW;AAAA,QAC9C;AAAA,QAAgB;AAAA,QAAgB;AAAA,QAAU;AAAA,QAC1C;AAAA,QAAe;AAAA,QAAS;AAAA,MAC1B;AAEA,UAAI,SAAS;AAAA,QACX;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,eAAS,UAAW,QAAQ,KAAK;AAC/B,YAAI,EAAE,gBAAgB,YAAY;AAChC,iBAAO,IAAI,UAAU,QAAQ,GAAG;AAAA,QAClC;AAEA,YAAI,SAAS;AACb,qBAAa,MAAM;AACnB,eAAO,IAAI,OAAO,IAAI;AACtB,eAAO,sBAAsB,IAAI;AACjC,eAAO,MAAM,OAAO,CAAC;AACrB,eAAO,IAAI,YAAY,OAAO,IAAI,aAAa,OAAO,IAAI;AAC1D,eAAO,YAAY,OAAO,IAAI,YAAY,gBAAgB;AAC1D,eAAO,OAAO,CAAC;AACf,eAAO,SAAS,OAAO,aAAa,OAAO,UAAU;AACrD,eAAO,MAAM,OAAO,QAAQ;AAC5B,eAAO,SAAS,CAAC,CAAC;AAClB,eAAO,WAAW,CAAC,EAAE,UAAU,OAAO,IAAI;AAC1C,eAAO,QAAQ,EAAE;AACjB,eAAO,iBAAiB,OAAO,IAAI;AACnC,eAAO,WAAW,OAAO,iBAAiB,OAAO,OAAO,IAAI,YAAY,IAAI,OAAO,OAAO,IAAI,QAAQ;AACtG,eAAO,aAAa,CAAC;AAKrB,YAAI,OAAO,IAAI,OAAO;AACpB,iBAAO,KAAK,OAAO,OAAO,MAAM;AAAA,QAClC;AAGA,eAAO,gBAAgB,OAAO,IAAI,aAAa;AAC/C,YAAI,OAAO,eAAe;AACxB,iBAAO,WAAW,OAAO,OAAO,OAAO,SAAS;AAAA,QAClD;AACA,aAAK,QAAQ,SAAS;AAAA,MACxB;AAEA,UAAI,CAAC,OAAO,QAAQ;AAClB,eAAO,SAAS,SAAU,GAAG;AAC3B,mBAAS,IAAK;AAAA,UAAC;AACf,YAAE,YAAY;AACd,cAAI,OAAO,IAAI,EAAE;AACjB,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,CAAC,OAAO,MAAM;AAChB,eAAO,OAAO,SAAU,GAAG;AACzB,cAAI,IAAI,CAAC;AACT,mBAAS,KAAK;AAAG,gBAAI,EAAE,eAAe,CAAC;AAAG,gBAAE,KAAK,CAAC;AAClD,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,eAAS,kBAAmB,QAAQ;AAClC,YAAI,aAAa,KAAK,IAAI,IAAI,mBAAmB,EAAE;AACnD,YAAI,YAAY;AAChB,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAI,GAAG,KAAK;AAC9C,cAAI,MAAM,OAAO,QAAQ,IAAI;AAC7B,cAAI,MAAM,YAAY;AAKpB,oBAAQ,QAAQ,IAAI;AAAA,cAClB,KAAK;AACH,0BAAU,MAAM;AAChB;AAAA,cAEF,KAAK;AACH,yBAAS,QAAQ,WAAW,OAAO,KAAK;AACxC,uBAAO,QAAQ;AACf;AAAA,cAEF,KAAK;AACH,yBAAS,QAAQ,YAAY,OAAO,MAAM;AAC1C,uBAAO,SAAS;AAChB;AAAA,cAEF;AACE,sBAAM,QAAQ,iCAAiC,QAAQ,EAAE;AAAA,YAC7D;AAAA,UACF;AACA,sBAAY,KAAK,IAAI,WAAW,GAAG;AAAA,QACrC;AAEA,YAAI,IAAI,IAAI,oBAAoB;AAChC,eAAO,sBAAsB,IAAI,OAAO;AAAA,MAC1C;AAEA,eAAS,aAAc,QAAQ;AAC7B,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,IAAI,GAAG,KAAK;AAC9C,iBAAO,QAAQ,MAAM;AAAA,QACvB;AAAA,MACF;AAEA,eAAS,aAAc,QAAQ;AAC7B,kBAAU,MAAM;AAChB,YAAI,OAAO,UAAU,IAAI;AACvB,mBAAS,QAAQ,WAAW,OAAO,KAAK;AACxC,iBAAO,QAAQ;AAAA,QACjB;AACA,YAAI,OAAO,WAAW,IAAI;AACxB,mBAAS,QAAQ,YAAY,OAAO,MAAM;AAC1C,iBAAO,SAAS;AAAA,QAClB;AAAA,MACF;AAEA,gBAAU,YAAY;AAAA,QACpB,KAAK,WAAY;AAAE,cAAI,IAAI;AAAA,QAAE;AAAA,QAC7B;AAAA,QACA,QAAQ,WAAY;AAAE,eAAK,QAAQ;AAAM,iBAAO;AAAA,QAAK;AAAA,QACrD,OAAO,WAAY;AAAE,iBAAO,KAAK,MAAM,IAAI;AAAA,QAAE;AAAA,QAC7C,OAAO,WAAY;AAAE,uBAAa,IAAI;AAAA,QAAE;AAAA,MAC1C;AAEA,UAAI;AACJ,UAAI;AACF,iBAAS,iBAAkB;AAAA,MAC7B,SAAS,IAAP;AACA,iBAAS,WAAY;AAAA,QAAC;AAAA,MACxB;AAEA,UAAI,cAAc,IAAI,OAAO,OAAO,SAAU,IAAI;AAChD,eAAO,OAAO,WAAW,OAAO;AAAA,MAClC,CAAC;AAED,eAAS,aAAc,QAAQ,KAAK;AAClC,eAAO,IAAI,UAAU,QAAQ,GAAG;AAAA,MAClC;AAEA,eAAS,UAAW,QAAQ,KAAK;AAC/B,YAAI,EAAE,gBAAgB,YAAY;AAChC,iBAAO,IAAI,UAAU,QAAQ,GAAG;AAAA,QAClC;AAEA,eAAO,MAAM,IAAI;AAEjB,aAAK,UAAU,IAAI,UAAU,QAAQ,GAAG;AACxC,aAAK,WAAW;AAChB,aAAK,WAAW;AAEhB,YAAI,KAAK;AAET,aAAK,QAAQ,QAAQ,WAAY;AAC/B,aAAG,KAAK,KAAK;AAAA,QACf;AAEA,aAAK,QAAQ,UAAU,SAAU,IAAI;AACnC,aAAG,KAAK,SAAS,EAAE;AAInB,aAAG,QAAQ,QAAQ;AAAA,QACrB;AAEA,aAAK,WAAW;AAEhB,oBAAY,QAAQ,SAAU,IAAI;AAChC,iBAAO,eAAe,IAAI,OAAO,IAAI;AAAA,YACnC,KAAK,WAAY;AACf,qBAAO,GAAG,QAAQ,OAAO;AAAA,YAC3B;AAAA,YACA,KAAK,SAAU,GAAG;AAChB,kBAAI,CAAC,GAAG;AACN,mBAAG,mBAAmB,EAAE;AACxB,mBAAG,QAAQ,OAAO,MAAM;AACxB,uBAAO;AAAA,cACT;AACA,iBAAG,GAAG,IAAI,CAAC;AAAA,YACb;AAAA,YACA,YAAY;AAAA,YACZ,cAAc;AAAA,UAChB,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAEA,gBAAU,YAAY,OAAO,OAAO,OAAO,WAAW;AAAA,QACpD,aAAa;AAAA,UACX,OAAO;AAAA,QACT;AAAA,MACF,CAAC;AAED,gBAAU,UAAU,QAAQ,SAAU,MAAM;AAC1C,YAAI,OAAO,WAAW,cACpB,OAAO,OAAO,aAAa,cAC3B,OAAO,SAAS,IAAI,GAAG;AACvB,cAAI,CAAC,KAAK,UAAU;AAClB,gBAAI,KAAK,yBAA0B;AACnC,iBAAK,WAAW,IAAI,GAAG,MAAM;AAAA,UAC/B;AACA,iBAAO,KAAK,SAAS,MAAM,IAAI;AAAA,QACjC;AAEA,aAAK,QAAQ,MAAM,KAAK,SAAS,CAAC;AAClC,aAAK,KAAK,QAAQ,IAAI;AACtB,eAAO;AAAA,MACT;AAEA,gBAAU,UAAU,MAAM,SAAU,OAAO;AACzC,YAAI,SAAS,MAAM,QAAQ;AACzB,eAAK,MAAM,KAAK;AAAA,QAClB;AACA,aAAK,QAAQ,IAAI;AACjB,eAAO;AAAA,MACT;AAEA,gBAAU,UAAU,KAAK,SAAU,IAAI,SAAS;AAC9C,YAAI,KAAK;AACT,YAAI,CAAC,GAAG,QAAQ,OAAO,OAAO,YAAY,QAAQ,EAAE,MAAM,IAAI;AAC5D,aAAG,QAAQ,OAAO,MAAM,WAAY;AAClC,gBAAI,OAAO,UAAU,WAAW,IAAI,CAAC,UAAU,EAAE,IAAI,MAAM,MAAM,MAAM,SAAS;AAChF,iBAAK,OAAO,GAAG,GAAG,EAAE;AACpB,eAAG,KAAK,MAAM,IAAI,IAAI;AAAA,UACxB;AAAA,QACF;AAEA,eAAO,OAAO,UAAU,GAAG,KAAK,IAAI,IAAI,OAAO;AAAA,MACjD;AAIA,UAAI,QAAQ;AACZ,UAAI,UAAU;AACd,UAAI,gBAAgB;AACpB,UAAI,kBAAkB;AACtB,UAAI,SAAS,EAAE,KAAK,eAAe,OAAO,gBAAgB;AAQ1D,UAAI,YAAY;AAEhB,UAAI,WAAW;AAEf,UAAI,cAAc;AAClB,UAAI,aAAa;AAEjB,eAAS,aAAc,GAAG;AACxB,eAAO,MAAM,OAAO,MAAM,QAAQ,MAAM,QAAQ,MAAM;AAAA,MACxD;AAEA,eAAS,QAAS,GAAG;AACnB,eAAO,MAAM,OAAO,MAAM;AAAA,MAC5B;AAEA,eAAS,YAAa,GAAG;AACvB,eAAO,MAAM,OAAO,aAAa,CAAC;AAAA,MACpC;AAEA,eAAS,QAAS,OAAO,GAAG;AAC1B,eAAO,MAAM,KAAK,CAAC;AAAA,MACrB;AAEA,eAAS,SAAU,OAAO,GAAG;AAC3B,eAAO,CAAC,QAAQ,OAAO,CAAC;AAAA,MAC1B;AAEA,UAAI,IAAI;AACR,UAAI,QAAQ;AAAA,QACV,OAAO;AAAA,QACP,kBAAkB;AAAA,QAClB,MAAM;AAAA,QACN,aAAa;AAAA,QACb,WAAW;AAAA,QACX,WAAW;AAAA,QACX,kBAAkB;AAAA,QAClB,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,aAAa;AAAA,QACb,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,QAClB,SAAS;AAAA,QACT,gBAAgB;AAAA,QAChB,eAAe;AAAA,QACf,OAAO;AAAA,QACP,cAAc;AAAA,QACd,gBAAgB;AAAA,QAChB,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,kBAAkB;AAAA,QAClB,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,uBAAuB;AAAA,QACvB,cAAc;AAAA,QACd,qBAAqB;AAAA,QACrB,qBAAqB;AAAA,QACrB,uBAAuB;AAAA,QACvB,uBAAuB;AAAA,QACvB,uBAAuB;AAAA,QACvB,WAAW;AAAA,QACX,qBAAqB;AAAA,QACrB,QAAQ;AAAA,QACR,eAAe;AAAA,MACjB;AAEA,UAAI,eAAe;AAAA,QACjB,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAEA,UAAI,WAAW;AAAA,QACb,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,OAAO;AAAA,QACP,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,QACT,OAAO;AAAA,QACP,WAAW;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,MAAM;AAAA,QACN,MAAM;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,SAAS;AAAA,QACT,OAAO;AAAA,QACP,WAAW;AAAA,QACX,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAEA,aAAO,KAAK,IAAI,QAAQ,EAAE,QAAQ,SAAU,KAAK;AAC/C,YAAI,IAAI,IAAI,SAAS;AACrB,YAAIC,KAAI,OAAO,MAAM,WAAW,OAAO,aAAa,CAAC,IAAI;AACzD,YAAI,SAAS,OAAOA;AAAA,MACtB,CAAC;AAED,eAAS,KAAK,IAAI,OAAO;AACvB,YAAI,MAAM,IAAI,MAAM,MAAM;AAAA,MAC5B;AAGA,UAAI,IAAI;AAER,eAAS,KAAM,QAAQ,OAAO,MAAM;AAClC,eAAO,UAAU,OAAO,OAAO,IAAI;AAAA,MACrC;AAEA,eAAS,SAAU,QAAQ,UAAU,MAAM;AACzC,YAAI,OAAO;AAAU,oBAAU,MAAM;AACrC,aAAK,QAAQ,UAAU,IAAI;AAAA,MAC7B;AAEA,eAAS,UAAW,QAAQ;AAC1B,eAAO,WAAW,SAAS,OAAO,KAAK,OAAO,QAAQ;AACtD,YAAI,OAAO;AAAU,eAAK,QAAQ,UAAU,OAAO,QAAQ;AAC3D,eAAO,WAAW;AAAA,MACpB;AAEA,eAAS,SAAU,KAAK,MAAM;AAC5B,YAAI,IAAI;AAAM,iBAAO,KAAK,KAAK;AAC/B,YAAI,IAAI;AAAW,iBAAO,KAAK,QAAQ,QAAQ,GAAG;AAClD,eAAO;AAAA,MACT;AAEA,eAAS,MAAO,QAAQ,IAAI;AAC1B,kBAAU,MAAM;AAChB,YAAI,OAAO,eAAe;AACxB,gBAAM,aAAa,OAAO,OACxB,eAAe,OAAO,SACtB,aAAa,OAAO;AAAA,QACxB;AACA,aAAK,IAAI,MAAM,EAAE;AACjB,eAAO,QAAQ;AACf,aAAK,QAAQ,WAAW,EAAE;AAC1B,eAAO;AAAA,MACT;AAEA,eAAS,IAAK,QAAQ;AACpB,YAAI,OAAO,WAAW,CAAC,OAAO;AAAY,qBAAW,QAAQ,mBAAmB;AAChF,YAAK,OAAO,UAAU,EAAE,SACrB,OAAO,UAAU,EAAE,oBACnB,OAAO,UAAU,EAAE,MAAO;AAC3B,gBAAM,QAAQ,gBAAgB;AAAA,QAChC;AACA,kBAAU,MAAM;AAChB,eAAO,IAAI;AACX,eAAO,SAAS;AAChB,aAAK,QAAQ,OAAO;AACpB,kBAAU,KAAK,QAAQ,OAAO,QAAQ,OAAO,GAAG;AAChD,eAAO;AAAA,MACT;AAEA,eAAS,WAAY,QAAQ,SAAS;AACpC,YAAI,OAAO,WAAW,YAAY,EAAE,kBAAkB,YAAY;AAChE,gBAAM,IAAI,MAAM,wBAAwB;AAAA,QAC1C;AACA,YAAI,OAAO,QAAQ;AACjB,gBAAM,QAAQ,OAAO;AAAA,QACvB;AAAA,MACF;AAEA,eAAS,OAAQ,QAAQ;AACvB,YAAI,CAAC,OAAO;AAAQ,iBAAO,UAAU,OAAO,QAAQ,OAAO,WAAW;AACtE,YAAI,SAAS,OAAO,KAAK,OAAO,KAAK,SAAS,MAAM;AACpD,YAAI,MAAM,OAAO,MAAM,EAAE,MAAM,OAAO,SAAS,YAAY,CAAC,EAAE;AAG9D,YAAI,OAAO,IAAI,OAAO;AACpB,cAAI,KAAK,OAAO;AAAA,QAClB;AACA,eAAO,WAAW,SAAS;AAC3B,iBAAS,QAAQ,kBAAkB,GAAG;AAAA,MACxC;AAEA,eAAS,MAAO,MAAM,WAAW;AAC/B,YAAI,IAAI,KAAK,QAAQ,GAAG;AACxB,YAAI,WAAW,IAAI,IAAI,CAAE,IAAI,IAAK,IAAI,KAAK,MAAM,GAAG;AACpD,YAAI,SAAS,SAAS;AACtB,YAAI,QAAQ,SAAS;AAGrB,YAAI,aAAa,SAAS,SAAS;AACjC,mBAAS;AACT,kBAAQ;AAAA,QACV;AAEA,eAAO,EAAE,QAAgB,MAAa;AAAA,MACxC;AAEA,eAAS,OAAQ,QAAQ;AACvB,YAAI,CAAC,OAAO,QAAQ;AAClB,iBAAO,aAAa,OAAO,WAAW,OAAO,WAAW;AAAA,QAC1D;AAEA,YAAI,OAAO,WAAW,QAAQ,OAAO,UAAU,MAAM,MACnD,OAAO,IAAI,WAAW,eAAe,OAAO,UAAU,GAAG;AACzD,iBAAO,aAAa,OAAO,cAAc;AACzC;AAAA,QACF;AAEA,YAAI,OAAO,IAAI,OAAO;AACpB,cAAI,KAAK,MAAM,OAAO,YAAY,IAAI;AACtC,cAAI,SAAS,GAAG;AAChB,cAAI,QAAQ,GAAG;AAEf,cAAI,WAAW,SAAS;AAEtB,gBAAI,UAAU,SAAS,OAAO,gBAAgB,eAAe;AAC3D;AAAA,gBAAW;AAAA,gBACT,kCAAkC,gBAAgB,eACrC,OAAO;AAAA,cAAW;AAAA,YACnC,WAAW,UAAU,WAAW,OAAO,gBAAgB,iBAAiB;AACtE;AAAA,gBAAW;AAAA,gBACT,oCAAoC,kBAAkB,eACzC,OAAO;AAAA,cAAW;AAAA,YACnC,OAAO;AACL,kBAAI,MAAM,OAAO;AACjB,kBAAI,SAAS,OAAO,KAAK,OAAO,KAAK,SAAS,MAAM;AACpD,kBAAI,IAAI,OAAO,OAAO,IAAI;AACxB,oBAAI,KAAK,OAAO,OAAO,OAAO,EAAE;AAAA,cAClC;AACA,kBAAI,GAAG,SAAS,OAAO;AAAA,YACzB;AAAA,UACF;AAKA,iBAAO,WAAW,KAAK,CAAC,OAAO,YAAY,OAAO,WAAW,CAAC;AAAA,QAChE,OAAO;AAEL,iBAAO,IAAI,WAAW,OAAO,cAAc,OAAO;AAClD,mBAAS,QAAQ,eAAe;AAAA,YAC9B,MAAM,OAAO;AAAA,YACb,OAAO,OAAO;AAAA,UAChB,CAAC;AAAA,QACH;AAEA,eAAO,aAAa,OAAO,cAAc;AAAA,MAC3C;AAEA,eAAS,QAAS,QAAQ,aAAa;AACrC,YAAI,OAAO,IAAI,OAAO;AAEpB,cAAI,MAAM,OAAO;AAGjB,cAAI,KAAK,MAAM,OAAO,OAAO;AAC7B,cAAI,SAAS,GAAG;AAChB,cAAI,QAAQ,GAAG;AACf,cAAI,MAAM,IAAI,GAAG,GAAG,WAAW;AAE/B,cAAI,IAAI,UAAU,CAAC,IAAI,KAAK;AAC1B,uBAAW,QAAQ,+BACjB,KAAK,UAAU,OAAO,OAAO,CAAC;AAChC,gBAAI,MAAM,GAAG;AAAA,UACf;AAEA,cAAI,SAAS,OAAO,KAAK,OAAO,KAAK,SAAS,MAAM;AACpD,cAAI,IAAI,MAAM,OAAO,OAAO,IAAI,IAAI;AAClC,mBAAO,KAAK,IAAI,EAAE,EAAE,QAAQ,SAAU,GAAG;AACvC,uBAAS,QAAQ,mBAAmB;AAAA,gBAClC,QAAQ;AAAA,gBACR,KAAK,IAAI,GAAG;AAAA,cACd,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAKA,mBAAS,IAAI,GAAG,IAAI,OAAO,WAAW,QAAQ,IAAI,GAAG,KAAK;AACxD,gBAAI,KAAK,OAAO,WAAW;AAC3B,gBAAI,OAAO,GAAG;AACd,gBAAI,QAAQ,GAAG;AACf,gBAAI,WAAW,MAAM,MAAM,IAAI;AAC/B,gBAAI,SAAS,SAAS;AACtB,gBAAI,QAAQ,SAAS;AACrB,gBAAI,MAAM,WAAW,KAAK,KAAM,IAAI,GAAG,WAAW;AAClD,gBAAI,IAAI;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAIA,gBAAI,UAAU,WAAW,WAAW,CAAC,KAAK;AACxC,yBAAW,QAAQ,+BACjB,KAAK,UAAU,MAAM,CAAC;AACxB,gBAAE,MAAM;AAAA,YACV;AACA,mBAAO,IAAI,WAAW,QAAQ;AAC9B,qBAAS,QAAQ,eAAe,CAAC;AAAA,UACnC;AACA,iBAAO,WAAW,SAAS;AAAA,QAC7B;AAEA,eAAO,IAAI,gBAAgB,CAAC,CAAC;AAG7B,eAAO,UAAU;AACjB,eAAO,KAAK,KAAK,OAAO,GAAG;AAC3B,iBAAS,QAAQ,aAAa,OAAO,GAAG;AACxC,YAAI,CAAC,aAAa;AAEhB,cAAI,CAAC,OAAO,YAAY,OAAO,QAAQ,YAAY,MAAM,UAAU;AACjE,mBAAO,QAAQ,EAAE;AAAA,UACnB,OAAO;AACL,mBAAO,QAAQ,EAAE;AAAA,UACnB;AACA,iBAAO,MAAM;AACb,iBAAO,UAAU;AAAA,QACnB;AACA,eAAO,aAAa,OAAO,cAAc;AACzC,eAAO,WAAW,SAAS;AAAA,MAC7B;AAEA,eAAS,SAAU,QAAQ;AACzB,YAAI,CAAC,OAAO,SAAS;AACnB,qBAAW,QAAQ,wBAAwB;AAC3C,iBAAO,YAAY;AACnB,iBAAO,QAAQ,EAAE;AACjB;AAAA,QACF;AAEA,YAAI,OAAO,QAAQ;AACjB,cAAI,OAAO,YAAY,UAAU;AAC/B,mBAAO,UAAU,OAAO,OAAO,UAAU;AACzC,mBAAO,UAAU;AACjB,mBAAO,QAAQ,EAAE;AACjB;AAAA,UACF;AACA,mBAAS,QAAQ,YAAY,OAAO,MAAM;AAC1C,iBAAO,SAAS;AAAA,QAClB;AAIA,YAAI,IAAI,OAAO,KAAK;AACpB,YAAI,UAAU,OAAO;AACrB,YAAI,CAAC,OAAO,QAAQ;AAClB,oBAAU,QAAQ,OAAO,WAAW;AAAA,QACtC;AACA,YAAI,UAAU;AACd,eAAO,KAAK;AACV,cAAI,QAAQ,OAAO,KAAK;AACxB,cAAI,MAAM,SAAS,SAAS;AAE1B,uBAAW,QAAQ,sBAAsB;AAAA,UAC3C,OAAO;AACL;AAAA,UACF;AAAA,QACF;AAGA,YAAI,IAAI,GAAG;AACT,qBAAW,QAAQ,4BAA4B,OAAO,OAAO;AAC7D,iBAAO,YAAY,OAAO,OAAO,UAAU;AAC3C,iBAAO,QAAQ,EAAE;AACjB;AAAA,QACF;AACA,eAAO,UAAU;AACjB,YAAIA,KAAI,OAAO,KAAK;AACpB,eAAOA,OAAM,GAAG;AACd,cAAI,MAAM,OAAO,MAAM,OAAO,KAAK,IAAI;AACvC,iBAAO,UAAU,OAAO,IAAI;AAC5B,mBAAS,QAAQ,cAAc,OAAO,OAAO;AAE7C,cAAI,IAAI,CAAC;AACT,mBAAS,KAAK,IAAI,IAAI;AACpB,cAAE,KAAK,IAAI,GAAG;AAAA,UAChB;AAEA,cAAI,SAAS,OAAO,KAAK,OAAO,KAAK,SAAS,MAAM;AACpD,cAAI,OAAO,IAAI,SAAS,IAAI,OAAO,OAAO,IAAI;AAE5C,mBAAO,KAAK,IAAI,EAAE,EAAE,QAAQ,SAAU,GAAG;AACvC,kBAAI,IAAI,IAAI,GAAG;AACf,uBAAS,QAAQ,oBAAoB,EAAE,QAAQ,GAAG,KAAK,EAAE,CAAC;AAAA,YAC5D,CAAC;AAAA,UACH;AAAA,QACF;AACA,YAAI,MAAM;AAAG,iBAAO,aAAa;AACjC,eAAO,UAAU,OAAO,cAAc,OAAO,aAAa;AAC1D,eAAO,WAAW,SAAS;AAC3B,eAAO,QAAQ,EAAE;AAAA,MACnB;AAEA,eAAS,YAAa,QAAQ;AAC5B,YAAI,SAAS,OAAO;AACpB,YAAI,WAAW,OAAO,YAAY;AAClC,YAAI;AACJ,YAAI,SAAS;AAEb,YAAI,OAAO,SAAS,SAAS;AAC3B,iBAAO,OAAO,SAAS;AAAA,QACzB;AACA,YAAI,OAAO,SAAS,WAAW;AAC7B,iBAAO,OAAO,SAAS;AAAA,QACzB;AACA,iBAAS;AACT,YAAI,OAAO,OAAO,CAAC,MAAM,KAAK;AAC5B,cAAI,OAAO,OAAO,CAAC,MAAM,KAAK;AAC5B,qBAAS,OAAO,MAAM,CAAC;AACvB,kBAAM,SAAS,QAAQ,EAAE;AACzB,qBAAS,IAAI,SAAS,EAAE;AAAA,UAC1B,OAAO;AACL,qBAAS,OAAO,MAAM,CAAC;AACvB,kBAAM,SAAS,QAAQ,EAAE;AACzB,qBAAS,IAAI,SAAS,EAAE;AAAA,UAC1B;AAAA,QACF;AACA,iBAAS,OAAO,QAAQ,OAAO,EAAE;AACjC,YAAI,MAAM,GAAG,KAAK,OAAO,YAAY,MAAM,QAAQ;AACjD,qBAAW,QAAQ,0BAA0B;AAC7C,iBAAO,MAAM,OAAO,SAAS;AAAA,QAC/B;AAEA,eAAO,OAAO,cAAc,GAAG;AAAA,MACjC;AAEA,eAAS,gBAAiB,QAAQ,GAAG;AACnC,YAAI,MAAM,KAAK;AACb,iBAAO,QAAQ,EAAE;AACjB,iBAAO,mBAAmB,OAAO;AAAA,QACnC,WAAW,CAAC,aAAa,CAAC,GAAG;AAG3B,qBAAW,QAAQ,kCAAkC;AACrD,iBAAO,WAAW;AAClB,iBAAO,QAAQ,EAAE;AAAA,QACnB;AAAA,MACF;AAEA,eAAS,OAAQ,OAAO,GAAG;AACzB,YAAI,SAAS;AACb,YAAI,IAAI,MAAM,QAAQ;AACpB,mBAAS,MAAM,OAAO,CAAC;AAAA,QACzB;AACA,eAAO;AAAA,MACT;AAEA,eAAS,MAAO,OAAO;AACrB,YAAI,SAAS;AACb,YAAI,KAAK,OAAO;AACd,gBAAM,KAAK;AAAA,QACb;AACA,YAAI,OAAO,QAAQ;AACjB,iBAAO;AAAA,YAAM;AAAA,YACX;AAAA,UAAsD;AAAA,QAC1D;AACA,YAAI,UAAU,MAAM;AAClB,iBAAO,IAAI,MAAM;AAAA,QACnB;AACA,YAAI,OAAO,UAAU,UAAU;AAC7B,kBAAQ,MAAM,SAAS;AAAA,QACzB;AACA,YAAI,IAAI;AACR,YAAI,IAAI;AACR,eAAO,MAAM;AACX,cAAI,OAAO,OAAO,GAAG;AACrB,iBAAO,IAAI;AAEX,cAAI,CAAC,GAAG;AACN;AAAA,UACF;AAEA,cAAI,OAAO,eAAe;AACxB,mBAAO;AACP,gBAAI,MAAM,MAAM;AACd,qBAAO;AACP,qBAAO,SAAS;AAAA,YAClB,OAAO;AACL,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,kBAAQ,OAAO,OAAO;AAAA,YACpB,KAAK,EAAE;AACL,qBAAO,QAAQ,EAAE;AACjB,kBAAI,MAAM,UAAU;AAClB;AAAA,cACF;AACA,8BAAgB,QAAQ,CAAC;AACzB;AAAA,YAEF,KAAK,EAAE;AACL,8BAAgB,QAAQ,CAAC;AACzB;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,OAAO,WAAW,CAAC,OAAO,YAAY;AACxC,oBAAI,SAAS,IAAI;AACjB,uBAAO,KAAK,MAAM,OAAO,MAAM,KAAK;AAClC,sBAAI,OAAO,OAAO,GAAG;AACrB,sBAAI,KAAK,OAAO,eAAe;AAC7B,2BAAO;AACP,wBAAI,MAAM,MAAM;AACd,6BAAO;AACP,6BAAO,SAAS;AAAA,oBAClB,OAAO;AACL,6BAAO;AAAA,oBACT;AAAA,kBACF;AAAA,gBACF;AACA,uBAAO,YAAY,MAAM,UAAU,QAAQ,IAAI,CAAC;AAAA,cAClD;AACA,kBAAI,MAAM,OAAO,EAAE,OAAO,WAAW,OAAO,cAAc,CAAC,OAAO,SAAS;AACzE,uBAAO,QAAQ,EAAE;AACjB,uBAAO,mBAAmB,OAAO;AAAA,cACnC,OAAO;AACL,oBAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,WAAW,OAAO,aAAa;AAC9D,6BAAW,QAAQ,iCAAiC;AAAA,gBACtD;AACA,oBAAI,MAAM,KAAK;AACb,yBAAO,QAAQ,EAAE;AAAA,gBACnB,OAAO;AACL,yBAAO,YAAY;AAAA,gBACrB;AAAA,cACF;AACA;AAAA,YAEF,KAAK,EAAE;AAEL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,UAAU;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,UAAU,MAAM;AACvB,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AAEL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AACjB,uBAAO,WAAW;AAAA,cACpB,WAAW,aAAa,CAAC,GAAG;AAAA,cAE5B,WAAW,QAAQ,WAAW,CAAC,GAAG;AAChC,uBAAO,QAAQ,EAAE;AACjB,uBAAO,UAAU;AAAA,cACnB,WAAW,MAAM,KAAK;AACpB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,UAAU;AAAA,cACnB,WAAW,MAAM,KAAK;AACpB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,eAAe,OAAO,eAAe;AAAA,cAC9C,OAAO;AACL,2BAAW,QAAQ,aAAa;AAEhC,oBAAI,OAAO,mBAAmB,IAAI,OAAO,UAAU;AACjD,sBAAI,MAAM,OAAO,WAAW,OAAO;AACnC,sBAAI,IAAI,MAAM,GAAG,EAAE,KAAK,GAAG,IAAI;AAAA,gBACjC;AACA,uBAAO,YAAY,MAAM;AACzB,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,mBAAK,OAAO,WAAW,GAAG,YAAY,MAAM,OAAO;AACjD,yBAAS,QAAQ,aAAa;AAC9B,uBAAO,QAAQ,EAAE;AACjB,uBAAO,WAAW;AAClB,uBAAO,QAAQ;AAAA,cACjB,WAAW,OAAO,WAAW,MAAM,MAAM;AACvC,uBAAO,QAAQ,EAAE;AACjB,uBAAO,UAAU;AACjB,uBAAO,WAAW;AAAA,cACpB,YAAY,OAAO,WAAW,GAAG,YAAY,MAAM,SAAS;AAC1D,uBAAO,QAAQ,EAAE;AACjB,oBAAI,OAAO,WAAW,OAAO,SAAS;AACpC;AAAA,oBAAW;AAAA,oBACT;AAAA,kBAA6C;AAAA,gBACjD;AACA,uBAAO,UAAU;AACjB,uBAAO,WAAW;AAAA,cACpB,WAAW,MAAM,KAAK;AACpB,yBAAS,QAAQ,qBAAqB,OAAO,QAAQ;AACrD,uBAAO,WAAW;AAClB,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,QAAQ,CAAC,GAAG;AACrB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,YAAY;AAAA,cACrB,OAAO;AACL,uBAAO,YAAY;AAAA,cACrB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,OAAO,GAAG;AAClB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,IAAI;AAAA,cACb;AACA,qBAAO,YAAY;AACnB;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AACjB,yBAAS,QAAQ,aAAa,OAAO,OAAO;AAC5C,uBAAO,UAAU;AAAA,cACnB,OAAO;AACL,uBAAO,WAAW;AAClB,oBAAI,MAAM,KAAK;AACb,yBAAO,QAAQ,EAAE;AAAA,gBACnB,WAAW,QAAQ,CAAC,GAAG;AACrB,yBAAO,QAAQ,EAAE;AACjB,yBAAO,IAAI;AAAA,gBACb;AAAA,cACF;AACA;AAAA,YAEF,KAAK,EAAE;AACL,qBAAO,WAAW;AAClB,kBAAI,MAAM,OAAO,GAAG;AAClB,uBAAO,IAAI;AACX,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,qBAAO,WAAW;AAClB,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,QAAQ,CAAC,GAAG;AACrB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,IAAI;AAAA,cACb;AACA;AAAA,YAEF,KAAK,EAAE;AACL,qBAAO,WAAW;AAClB,kBAAI,MAAM,OAAO,GAAG;AAClB,uBAAO,QAAQ,EAAE;AACjB,uBAAO,IAAI;AAAA,cACb;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,WAAW;AAAA,cACpB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AACjB,uBAAO,UAAU,SAAS,OAAO,KAAK,OAAO,OAAO;AACpD,oBAAI,OAAO,SAAS;AAClB,2BAAS,QAAQ,aAAa,OAAO,OAAO;AAAA,gBAC9C;AACA,uBAAO,UAAU;AAAA,cACnB,OAAO;AACL,uBAAO,WAAW,MAAM;AACxB,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,2BAAW,QAAQ,mBAAmB;AAGtC,uBAAO,WAAW,OAAO;AACzB,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,SAAS;AAAA,cAClB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,SAAS,MAAM;AACtB,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,oBAAI,OAAO,OAAO;AAChB,2BAAS,QAAQ,WAAW,OAAO,KAAK;AAAA,gBAC1C;AACA,yBAAS,QAAQ,cAAc;AAC/B,uBAAO,QAAQ;AACf,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,MAAM,KAAK;AACpB,uBAAO,SAAS;AAAA,cAClB,OAAO;AACL,uBAAO,SAAS,OAAO;AACvB,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,aAAa,CAAC,GAAG;AAC1B,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,gBAAgB;AAAA,cACzB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,CAAC,OAAO,gBAAgB,aAAa,CAAC,GAAG;AAC3C;AAAA,cACF,WAAW,MAAM,KAAK;AACpB,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,gBAAgB;AAAA,cACzB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,yBAAS,QAAQ,2BAA2B;AAAA,kBAC1C,MAAM,OAAO;AAAA,kBACb,MAAM,OAAO;AAAA,gBACf,CAAC;AACD,uBAAO,eAAe,OAAO,eAAe;AAC5C,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,uBAAO,gBAAgB,MAAM;AAC7B,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,QAAQ,UAAU,CAAC,GAAG;AACxB,uBAAO,WAAW;AAAA,cACpB,OAAO;AACL,uBAAO,MAAM;AACb,oBAAI,MAAM,KAAK;AACb,0BAAQ,MAAM;AAAA,gBAChB,WAAW,MAAM,KAAK;AACpB,yBAAO,QAAQ,EAAE;AAAA,gBACnB,OAAO;AACL,sBAAI,CAAC,aAAa,CAAC,GAAG;AACpB,+BAAW,QAAQ,+BAA+B;AAAA,kBACpD;AACA,yBAAO,QAAQ,EAAE;AAAA,gBACnB;AAAA,cACF;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,wBAAQ,QAAQ,IAAI;AACpB,yBAAS,MAAM;AAAA,cACjB,OAAO;AACL,2BAAW,QAAQ,gDAAgD;AACnE,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AAEL,kBAAI,aAAa,CAAC,GAAG;AACnB;AAAA,cACF,WAAW,MAAM,KAAK;AACpB,wBAAQ,MAAM;AAAA,cAChB,WAAW,MAAM,KAAK;AACpB,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,QAAQ,WAAW,CAAC,GAAG;AAChC,uBAAO,aAAa;AACpB,uBAAO,cAAc;AACrB,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,2BAAW,QAAQ,wBAAwB;AAAA,cAC7C;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,MAAM,KAAK;AACpB,2BAAW,QAAQ,yBAAyB;AAC5C,uBAAO,cAAc,OAAO;AAC5B,uBAAO,MAAM;AACb,wBAAQ,MAAM;AAAA,cAChB,WAAW,aAAa,CAAC,GAAG;AAC1B,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,QAAQ,UAAU,CAAC,GAAG;AAC/B,uBAAO,cAAc;AAAA,cACvB,OAAO;AACL,2BAAW,QAAQ,wBAAwB;AAAA,cAC7C;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,KAAK;AACb,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,aAAa,CAAC,GAAG;AAC1B;AAAA,cACF,OAAO;AACL,2BAAW,QAAQ,yBAAyB;AAC5C,uBAAO,IAAI,WAAW,OAAO,cAAc;AAC3C,uBAAO,cAAc;AACrB,yBAAS,QAAQ,eAAe;AAAA,kBAC9B,MAAM,OAAO;AAAA,kBACb,OAAO;AAAA,gBACT,CAAC;AACD,uBAAO,aAAa;AACpB,oBAAI,MAAM,KAAK;AACb,0BAAQ,MAAM;AAAA,gBAChB,WAAW,QAAQ,WAAW,CAAC,GAAG;AAChC,yBAAO,aAAa;AACpB,yBAAO,QAAQ,EAAE;AAAA,gBACnB,OAAO;AACL,6BAAW,QAAQ,wBAAwB;AAC3C,yBAAO,QAAQ,EAAE;AAAA,gBACnB;AAAA,cACF;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,aAAa,CAAC,GAAG;AACnB;AAAA,cACF,WAAW,QAAQ,CAAC,GAAG;AACrB,uBAAO,IAAI;AACX,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,2BAAW,QAAQ,0BAA0B;AAC7C,uBAAO,QAAQ,EAAE;AACjB,uBAAO,cAAc;AAAA,cACvB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,MAAM,OAAO,GAAG;AAClB,oBAAI,MAAM,KAAK;AACb,yBAAO,QAAQ,EAAE;AAAA,gBACnB,OAAO;AACL,yBAAO,eAAe;AAAA,gBACxB;AACA;AAAA,cACF;AACA,qBAAO,MAAM;AACb,qBAAO,IAAI;AACX,qBAAO,QAAQ,EAAE;AACjB;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,aAAa,CAAC,GAAG;AACnB,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,MAAM,KAAK;AACpB,wBAAQ,MAAM;AAAA,cAChB,WAAW,MAAM,KAAK;AACpB,uBAAO,QAAQ,EAAE;AAAA,cACnB,WAAW,QAAQ,WAAW,CAAC,GAAG;AAChC,2BAAW,QAAQ,kCAAkC;AACrD,uBAAO,aAAa;AACpB,uBAAO,cAAc;AACrB,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,2BAAW,QAAQ,wBAAwB;AAAA,cAC7C;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,CAAC,YAAY,CAAC,GAAG;AACnB,oBAAI,MAAM,KAAK;AACb,yBAAO,QAAQ,EAAE;AAAA,gBACnB,OAAO;AACL,yBAAO,eAAe;AAAA,gBACxB;AACA;AAAA,cACF;AACA,qBAAO,MAAM;AACb,kBAAI,MAAM,KAAK;AACb,wBAAQ,MAAM;AAAA,cAChB,OAAO;AACL,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,CAAC,OAAO,SAAS;AACnB,oBAAI,aAAa,CAAC,GAAG;AACnB;AAAA,gBACF,WAAW,SAAS,WAAW,CAAC,GAAG;AACjC,sBAAI,OAAO,QAAQ;AACjB,2BAAO,UAAU,OAAO;AACxB,2BAAO,QAAQ,EAAE;AAAA,kBACnB,OAAO;AACL,+BAAW,QAAQ,iCAAiC;AAAA,kBACtD;AAAA,gBACF,OAAO;AACL,yBAAO,UAAU;AAAA,gBACnB;AAAA,cACF,WAAW,MAAM,KAAK;AACpB,yBAAS,MAAM;AAAA,cACjB,WAAW,QAAQ,UAAU,CAAC,GAAG;AAC/B,uBAAO,WAAW;AAAA,cACpB,WAAW,OAAO,QAAQ;AACxB,uBAAO,UAAU,OAAO,OAAO;AAC/B,uBAAO,UAAU;AACjB,uBAAO,QAAQ,EAAE;AAAA,cACnB,OAAO;AACL,oBAAI,CAAC,aAAa,CAAC,GAAG;AACpB,6BAAW,QAAQ,gCAAgC;AAAA,gBACrD;AACA,uBAAO,QAAQ,EAAE;AAAA,cACnB;AACA;AAAA,YAEF,KAAK,EAAE;AACL,kBAAI,aAAa,CAAC,GAAG;AACnB;AAAA,cACF;AACA,kBAAI,MAAM,KAAK;AACb,yBAAS,MAAM;AAAA,cACjB,OAAO;AACL,2BAAW,QAAQ,mCAAmC;AAAA,cACxD;AACA;AAAA,YAEF,KAAK,EAAE;AAAA,YACP,KAAK,EAAE;AAAA,YACP,KAAK,EAAE;AACL,kBAAI;AACJ,kBAAI;AACJ,sBAAQ,OAAO,OAAO;AAAA,gBACpB,KAAK,EAAE;AACL,gCAAc,EAAE;AAChB,2BAAS;AACT;AAAA,gBAEF,KAAK,EAAE;AACL,gCAAc,EAAE;AAChB,2BAAS;AACT;AAAA,gBAEF,KAAK,EAAE;AACL,gCAAc,EAAE;AAChB,2BAAS;AACT;AAAA,cACJ;AAEA,kBAAI,MAAM,KAAK;AACb,uBAAO,WAAW,YAAY,MAAM;AACpC,uBAAO,SAAS;AAChB,uBAAO,QAAQ;AAAA,cACjB,WAAW,QAAQ,OAAO,OAAO,SAAS,aAAa,aAAa,CAAC,GAAG;AACtE,uBAAO,UAAU;AAAA,cACnB,OAAO;AACL,2BAAW,QAAQ,kCAAkC;AACrD,uBAAO,WAAW,MAAM,OAAO,SAAS;AACxC,uBAAO,SAAS;AAChB,uBAAO,QAAQ;AAAA,cACjB;AAEA;AAAA,YAEF;AACE,oBAAM,IAAI,MAAM,QAAQ,oBAAoB,OAAO,KAAK;AAAA,UAC5D;AAAA,QACF;AAEA,YAAI,OAAO,YAAY,OAAO,qBAAqB;AACjD,4BAAkB,MAAM;AAAA,QAC1B;AACA,eAAO;AAAA,MACT;AAIA,UAAI,CAAC,OAAO,eAAe;AACzB,SAAC,WAAY;AACX,cAAI,qBAAqB,OAAO;AAChC,cAAI,QAAQ,KAAK;AACjB,cAAI,gBAAgB,WAAY;AAC9B,gBAAI,WAAW;AACf,gBAAI,YAAY,CAAC;AACjB,gBAAI;AACJ,gBAAI;AACJ,gBAAI,QAAQ;AACZ,gBAAI,SAAS,UAAU;AACvB,gBAAI,CAAC,QAAQ;AACX,qBAAO;AAAA,YACT;AACA,gBAAI,SAAS;AACb,mBAAO,EAAE,QAAQ,QAAQ;AACvB,kBAAI,YAAY,OAAO,UAAU,MAAM;AACvC,kBACE,CAAC,SAAS,SAAS,KACnB,YAAY,KACZ,YAAY,WACZ,MAAM,SAAS,MAAM,WACrB;AACA,sBAAM,WAAW,yBAAyB,SAAS;AAAA,cACrD;AACA,kBAAI,aAAa,OAAQ;AACvB,0BAAU,KAAK,SAAS;AAAA,cAC1B,OAAO;AAEL,6BAAa;AACb,iCAAiB,aAAa,MAAM;AACpC,+BAAgB,YAAY,OAAS;AACrC,0BAAU,KAAK,eAAe,YAAY;AAAA,cAC5C;AACA,kBAAI,QAAQ,MAAM,UAAU,UAAU,SAAS,UAAU;AACvD,0BAAU,mBAAmB,MAAM,MAAM,SAAS;AAClD,0BAAU,SAAS;AAAA,cACrB;AAAA,YACF;AACA,mBAAO;AAAA,UACT;AAEA,cAAI,OAAO,gBAAgB;AACzB,mBAAO,eAAe,QAAQ,iBAAiB;AAAA,cAC7C,OAAO;AAAA,cACP,cAAc;AAAA,cACd,UAAU;AAAA,YACZ,CAAC;AAAA,UACH,OAAO;AACL,mBAAO,gBAAgB;AAAA,UACzB;AAAA,QACF,GAAE;AAAA,MACJ;AAAA,IACF,GAAG,OAAO,YAAY,cAAc,QAAK,MAAM,CAAC,IAAI,OAAO;AAAA;AAAA;;;AC5hD3D;AAAA;AAAA;AAuBA,QAAI,IAAI,OAAO,YAAY,WAAW,UAAU;AAChD,QAAI,eAAe,KAAK,OAAO,EAAE,UAAU,aACvC,EAAE,QACF,SAASC,cAAa,QAAQ,UAAU,MAAM;AAC9C,aAAO,SAAS,UAAU,MAAM,KAAK,QAAQ,UAAU,IAAI;AAAA,IAC7D;AAEF,QAAI;AACJ,QAAI,KAAK,OAAO,EAAE,YAAY,YAAY;AACxC,uBAAiB,EAAE;AAAA,IACrB,WAAW,OAAO,uBAAuB;AACvC,uBAAiB,SAASC,gBAAe,QAAQ;AAC/C,eAAO,OAAO,oBAAoB,MAAM,EACrC,OAAO,OAAO,sBAAsB,MAAM,CAAC;AAAA,MAChD;AAAA,IACF,OAAO;AACL,uBAAiB,SAASA,gBAAe,QAAQ;AAC/C,eAAO,OAAO,oBAAoB,MAAM;AAAA,MAC1C;AAAA,IACF;AAEA,aAAS,mBAAmB,SAAS;AACnC,UAAI,WAAW,QAAQ;AAAM,gBAAQ,KAAK,OAAO;AAAA,IACnD;AAEA,QAAI,cAAc,OAAO,SAAS,SAASC,aAAY,OAAO;AAC5D,aAAO,UAAU;AAAA,IACnB;AAEA,aAAS,eAAe;AACtB,mBAAa,KAAK,KAAK,IAAI;AAAA,IAC7B;AACA,WAAO,UAAU;AACjB,WAAO,QAAQ,OAAO;AAGtB,iBAAa,eAAe;AAE5B,iBAAa,UAAU,UAAU;AACjC,iBAAa,UAAU,eAAe;AACtC,iBAAa,UAAU,gBAAgB;AAIvC,QAAI,sBAAsB;AAE1B,aAAS,cAAc,UAAU;AAC/B,UAAI,OAAO,aAAa,YAAY;AAClC,cAAM,IAAI,UAAU,qEAAqE,OAAO,QAAQ;AAAA,MAC1G;AAAA,IACF;AAEA,WAAO,eAAe,cAAc,uBAAuB;AAAA,MACzD,YAAY;AAAA,MACZ,KAAK,WAAW;AACd,eAAO;AAAA,MACT;AAAA,MACA,KAAK,SAAS,KAAK;AACjB,YAAI,OAAO,QAAQ,YAAY,MAAM,KAAK,YAAY,GAAG,GAAG;AAC1D,gBAAM,IAAI,WAAW,oGAAoG,MAAM,GAAG;AAAA,QACpI;AACA,8BAAsB;AAAA,MACxB;AAAA,IACF,CAAC;AAED,iBAAa,OAAO,WAAW;AAE7B,UAAI,KAAK,YAAY,UACjB,KAAK,YAAY,OAAO,eAAe,IAAI,EAAE,SAAS;AACxD,aAAK,UAAU,uBAAO,OAAO,IAAI;AACjC,aAAK,eAAe;AAAA,MACtB;AAEA,WAAK,gBAAgB,KAAK,iBAAiB;AAAA,IAC7C;AAIA,iBAAa,UAAU,kBAAkB,SAAS,gBAAgB,GAAG;AACnE,UAAI,OAAO,MAAM,YAAY,IAAI,KAAK,YAAY,CAAC,GAAG;AACpD,cAAM,IAAI,WAAW,kFAAkF,IAAI,GAAG;AAAA,MAChH;AACA,WAAK,gBAAgB;AACrB,aAAO;AAAA,IACT;AAEA,aAAS,iBAAiB,MAAM;AAC9B,UAAI,KAAK,kBAAkB;AACzB,eAAO,aAAa;AACtB,aAAO,KAAK;AAAA,IACd;AAEA,iBAAa,UAAU,kBAAkB,SAAS,kBAAkB;AAClE,aAAO,iBAAiB,IAAI;AAAA,IAC9B;AAEA,iBAAa,UAAU,OAAO,SAAS,KAAK,MAAM;AAChD,UAAI,OAAO,CAAC;AACZ,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ;AAAK,aAAK,KAAK,UAAU,EAAE;AACjE,UAAI,UAAW,SAAS;AAExB,UAAI,SAAS,KAAK;AAClB,UAAI,WAAW;AACb,kBAAW,WAAW,OAAO,UAAU;AAAA,eAChC,CAAC;AACR,eAAO;AAGT,UAAI,SAAS;AACX,YAAI;AACJ,YAAI,KAAK,SAAS;AAChB,eAAK,KAAK;AACZ,YAAI,cAAc,OAAO;AAGvB,gBAAM;AAAA,QACR;AAEA,YAAI,MAAM,IAAI,MAAM,sBAAsB,KAAK,OAAO,GAAG,UAAU,MAAM,GAAG;AAC5E,YAAI,UAAU;AACd,cAAM;AAAA,MACR;AAEA,UAAI,UAAU,OAAO;AAErB,UAAI,YAAY;AACd,eAAO;AAET,UAAI,OAAO,YAAY,YAAY;AACjC,qBAAa,SAAS,MAAM,IAAI;AAAA,MAClC,OAAO;AACL,YAAI,MAAM,QAAQ;AAClB,YAAI,YAAY,WAAW,SAAS,GAAG;AACvC,iBAAS,IAAI,GAAG,IAAI,KAAK,EAAE;AACzB,uBAAa,UAAU,IAAI,MAAM,IAAI;AAAA,MACzC;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,aAAa,QAAQ,MAAM,UAAU,SAAS;AACrD,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,oBAAc,QAAQ;AAEtB,eAAS,OAAO;AAChB,UAAI,WAAW,QAAW;AACxB,iBAAS,OAAO,UAAU,uBAAO,OAAO,IAAI;AAC5C,eAAO,eAAe;AAAA,MACxB,OAAO;AAGL,YAAI,OAAO,gBAAgB,QAAW;AACpC,iBAAO;AAAA,YAAK;AAAA,YAAe;AAAA,YACf,SAAS,WAAW,SAAS,WAAW;AAAA,UAAQ;AAI5D,mBAAS,OAAO;AAAA,QAClB;AACA,mBAAW,OAAO;AAAA,MACpB;AAEA,UAAI,aAAa,QAAW;AAE1B,mBAAW,OAAO,QAAQ;AAC1B,UAAE,OAAO;AAAA,MACX,OAAO;AACL,YAAI,OAAO,aAAa,YAAY;AAElC,qBAAW,OAAO,QAChB,UAAU,CAAC,UAAU,QAAQ,IAAI,CAAC,UAAU,QAAQ;AAAA,QAExD,WAAW,SAAS;AAClB,mBAAS,QAAQ,QAAQ;AAAA,QAC3B,OAAO;AACL,mBAAS,KAAK,QAAQ;AAAA,QACxB;AAGA,YAAI,iBAAiB,MAAM;AAC3B,YAAI,IAAI,KAAK,SAAS,SAAS,KAAK,CAAC,SAAS,QAAQ;AACpD,mBAAS,SAAS;AAGlB,cAAI,IAAI,IAAI,MAAM,iDACE,SAAS,SAAS,MAAM,OAAO,IAAI,IAAI,mEAEvB;AACpC,YAAE,OAAO;AACT,YAAE,UAAU;AACZ,YAAE,OAAO;AACT,YAAE,QAAQ,SAAS;AACnB,6BAAmB,CAAC;AAAA,QACtB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,iBAAa,UAAU,cAAc,SAAS,YAAY,MAAM,UAAU;AACxE,aAAO,aAAa,MAAM,MAAM,UAAU,KAAK;AAAA,IACjD;AAEA,iBAAa,UAAU,KAAK,aAAa,UAAU;AAEnD,iBAAa,UAAU,kBACnB,SAAS,gBAAgB,MAAM,UAAU;AACvC,aAAO,aAAa,MAAM,MAAM,UAAU,IAAI;AAAA,IAChD;AAEJ,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,OAAO;AACf,aAAK,OAAO,eAAe,KAAK,MAAM,KAAK,MAAM;AACjD,aAAK,QAAQ;AACb,YAAI,UAAU,WAAW;AACvB,iBAAO,KAAK,SAAS,KAAK,KAAK,MAAM;AACvC,eAAO,KAAK,SAAS,MAAM,KAAK,QAAQ,SAAS;AAAA,MACnD;AAAA,IACF;AAEA,aAAS,UAAU,QAAQ,MAAM,UAAU;AACzC,UAAI,QAAQ,EAAE,OAAO,OAAO,QAAQ,QAAW,QAAgB,MAAY,SAAmB;AAC9F,UAAI,UAAU,YAAY,KAAK,KAAK;AACpC,cAAQ,WAAW;AACnB,YAAM,SAAS;AACf,aAAO;AAAA,IACT;AAEA,iBAAa,UAAU,OAAO,SAASC,MAAK,MAAM,UAAU;AAC1D,oBAAc,QAAQ;AACtB,WAAK,GAAG,MAAM,UAAU,MAAM,MAAM,QAAQ,CAAC;AAC7C,aAAO;AAAA,IACT;AAEA,iBAAa,UAAU,sBACnB,SAAS,oBAAoB,MAAM,UAAU;AAC3C,oBAAc,QAAQ;AACtB,WAAK,gBAAgB,MAAM,UAAU,MAAM,MAAM,QAAQ,CAAC;AAC1D,aAAO;AAAA,IACT;AAGJ,iBAAa,UAAU,iBACnB,SAAS,eAAe,MAAM,UAAU;AACtC,UAAI,MAAM,QAAQ,UAAU,GAAG;AAE/B,oBAAc,QAAQ;AAEtB,eAAS,KAAK;AACd,UAAI,WAAW;AACb,eAAO;AAET,aAAO,OAAO;AACd,UAAI,SAAS;AACX,eAAO;AAET,UAAI,SAAS,YAAY,KAAK,aAAa,UAAU;AACnD,YAAI,EAAE,KAAK,iBAAiB;AAC1B,eAAK,UAAU,uBAAO,OAAO,IAAI;AAAA,aAC9B;AACH,iBAAO,OAAO;AACd,cAAI,OAAO;AACT,iBAAK,KAAK,kBAAkB,MAAM,KAAK,YAAY,QAAQ;AAAA,QAC/D;AAAA,MACF,WAAW,OAAO,SAAS,YAAY;AACrC,mBAAW;AAEX,aAAK,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK;AACrC,cAAI,KAAK,OAAO,YAAY,KAAK,GAAG,aAAa,UAAU;AACzD,+BAAmB,KAAK,GAAG;AAC3B,uBAAW;AACX;AAAA,UACF;AAAA,QACF;AAEA,YAAI,WAAW;AACb,iBAAO;AAET,YAAI,aAAa;AACf,eAAK,MAAM;AAAA,aACR;AACH,oBAAU,MAAM,QAAQ;AAAA,QAC1B;AAEA,YAAI,KAAK,WAAW;AAClB,iBAAO,QAAQ,KAAK;AAEtB,YAAI,OAAO,mBAAmB;AAC5B,eAAK,KAAK,kBAAkB,MAAM,oBAAoB,QAAQ;AAAA,MAClE;AAEA,aAAO;AAAA,IACT;AAEJ,iBAAa,UAAU,MAAM,aAAa,UAAU;AAEpD,iBAAa,UAAU,qBACnB,SAAS,mBAAmB,MAAM;AAChC,UAAI,WAAW,QAAQ;AAEvB,eAAS,KAAK;AACd,UAAI,WAAW;AACb,eAAO;AAGT,UAAI,OAAO,mBAAmB,QAAW;AACvC,YAAI,UAAU,WAAW,GAAG;AAC1B,eAAK,UAAU,uBAAO,OAAO,IAAI;AACjC,eAAK,eAAe;AAAA,QACtB,WAAW,OAAO,UAAU,QAAW;AACrC,cAAI,EAAE,KAAK,iBAAiB;AAC1B,iBAAK,UAAU,uBAAO,OAAO,IAAI;AAAA;AAEjC,mBAAO,OAAO;AAAA,QAClB;AACA,eAAO;AAAA,MACT;AAGA,UAAI,UAAU,WAAW,GAAG;AAC1B,YAAI,OAAO,OAAO,KAAK,MAAM;AAC7B,YAAI;AACJ,aAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AAChC,gBAAM,KAAK;AACX,cAAI,QAAQ;AAAkB;AAC9B,eAAK,mBAAmB,GAAG;AAAA,QAC7B;AACA,aAAK,mBAAmB,gBAAgB;AACxC,aAAK,UAAU,uBAAO,OAAO,IAAI;AACjC,aAAK,eAAe;AACpB,eAAO;AAAA,MACT;AAEA,kBAAY,OAAO;AAEnB,UAAI,OAAO,cAAc,YAAY;AACnC,aAAK,eAAe,MAAM,SAAS;AAAA,MACrC,WAAW,cAAc,QAAW;AAElC,aAAK,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC1C,eAAK,eAAe,MAAM,UAAU,EAAE;AAAA,QACxC;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEJ,aAAS,WAAW,QAAQ,MAAM,QAAQ;AACxC,UAAI,SAAS,OAAO;AAEpB,UAAI,WAAW;AACb,eAAO,CAAC;AAEV,UAAI,aAAa,OAAO;AACxB,UAAI,eAAe;AACjB,eAAO,CAAC;AAEV,UAAI,OAAO,eAAe;AACxB,eAAO,SAAS,CAAC,WAAW,YAAY,UAAU,IAAI,CAAC,UAAU;AAEnE,aAAO,SACL,gBAAgB,UAAU,IAAI,WAAW,YAAY,WAAW,MAAM;AAAA,IAC1E;AAEA,iBAAa,UAAU,YAAY,SAAS,UAAU,MAAM;AAC1D,aAAO,WAAW,MAAM,MAAM,IAAI;AAAA,IACpC;AAEA,iBAAa,UAAU,eAAe,SAAS,aAAa,MAAM;AAChE,aAAO,WAAW,MAAM,MAAM,KAAK;AAAA,IACrC;AAEA,iBAAa,gBAAgB,SAAS,SAAS,MAAM;AACnD,UAAI,OAAO,QAAQ,kBAAkB,YAAY;AAC/C,eAAO,QAAQ,cAAc,IAAI;AAAA,MACnC,OAAO;AACL,eAAO,cAAc,KAAK,SAAS,IAAI;AAAA,MACzC;AAAA,IACF;AAEA,iBAAa,UAAU,gBAAgB;AACvC,aAAS,cAAc,MAAM;AAC3B,UAAI,SAAS,KAAK;AAElB,UAAI,WAAW,QAAW;AACxB,YAAI,aAAa,OAAO;AAExB,YAAI,OAAO,eAAe,YAAY;AACpC,iBAAO;AAAA,QACT,WAAW,eAAe,QAAW;AACnC,iBAAO,WAAW;AAAA,QACpB;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,iBAAa,UAAU,aAAa,SAAS,aAAa;AACxD,aAAO,KAAK,eAAe,IAAI,eAAe,KAAK,OAAO,IAAI,CAAC;AAAA,IACjE;AAEA,aAAS,WAAW,KAAK,GAAG;AAC1B,UAAI,OAAO,IAAI,MAAM,CAAC;AACtB,eAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AACvB,aAAK,KAAK,IAAI;AAChB,aAAO;AAAA,IACT;AAEA,aAAS,UAAU,MAAM,OAAO;AAC9B,aAAO,QAAQ,IAAI,KAAK,QAAQ;AAC9B,aAAK,SAAS,KAAK,QAAQ;AAC7B,WAAK,IAAI;AAAA,IACX;AAEA,aAAS,gBAAgB,KAAK;AAC5B,UAAI,MAAM,IAAI,MAAM,IAAI,MAAM;AAC9B,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACnC,YAAI,KAAK,IAAI,GAAG,YAAY,IAAI;AAAA,MAClC;AACA,aAAO;AAAA,IACT;AAEA,aAAS,KAAK,SAAS,MAAM;AAC3B,aAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAC5C,iBAAS,cAAc,KAAK;AAC1B,kBAAQ,eAAe,MAAM,QAAQ;AACrC,iBAAO,GAAG;AAAA,QACZ;AAEA,iBAAS,WAAW;AAClB,cAAI,OAAO,QAAQ,mBAAmB,YAAY;AAChD,oBAAQ,eAAe,SAAS,aAAa;AAAA,UAC/C;AACA,kBAAQ,CAAC,EAAE,MAAM,KAAK,SAAS,CAAC;AAAA,QAClC;AAAC;AAED,uCAA+B,SAAS,MAAM,UAAU,EAAE,MAAM,KAAK,CAAC;AACtE,YAAI,SAAS,SAAS;AACpB,wCAA8B,SAAS,eAAe,EAAE,MAAM,KAAK,CAAC;AAAA,QACtE;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,8BAA8B,SAAS,SAAS,OAAO;AAC9D,UAAI,OAAO,QAAQ,OAAO,YAAY;AACpC,uCAA+B,SAAS,SAAS,SAAS,KAAK;AAAA,MACjE;AAAA,IACF;AAEA,aAAS,+BAA+B,SAAS,MAAM,UAAU,OAAO;AACtE,UAAI,OAAO,QAAQ,OAAO,YAAY;AACpC,YAAI,MAAM,MAAM;AACd,kBAAQ,KAAK,MAAM,QAAQ;AAAA,QAC7B,OAAO;AACL,kBAAQ,GAAG,MAAM,QAAQ;AAAA,QAC3B;AAAA,MACF,WAAW,OAAO,QAAQ,qBAAqB,YAAY;AAGzD,gBAAQ,iBAAiB,MAAM,SAAS,aAAa,KAAK;AAGxD,cAAI,MAAM,MAAM;AACd,oBAAQ,oBAAoB,MAAM,YAAY;AAAA,UAChD;AACA,mBAAS,GAAG;AAAA,QACd,CAAC;AAAA,MACH,OAAO;AACL,cAAM,IAAI,UAAU,wEAAwE,OAAO,OAAO;AAAA,MAC5G;AAAA,IACF;AAAA;AAAA;;;AChfA;AAAA;AACA,KAAC,WAAW;AACV;AACA,cAAQ,WAAW,SAAS,KAAK;AAC/B,YAAI,IAAI,OAAO,UAAU;AACvB,iBAAO,IAAI,UAAU,CAAC;AAAA,QACxB,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACXZ;AAAA;AACA,KAAC,WAAW;AACV;AACA,UAAI;AAEJ,oBAAc,IAAI,OAAO,eAAe;AAExC,cAAQ,YAAY,SAAS,KAAK;AAChC,eAAO,IAAI,YAAY;AAAA,MACzB;AAEA,cAAQ,qBAAqB,SAAS,KAAK;AACzC,eAAO,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC;AAAA,MAClD;AAEA,cAAQ,cAAc,SAAS,KAAK;AAClC,eAAO,IAAI,QAAQ,aAAa,EAAE;AAAA,MACpC;AAEA,cAAQ,eAAe,SAAS,KAAK;AACnC,YAAI,CAAC,MAAM,GAAG,GAAG;AACf,gBAAM,MAAM,MAAM,IAAI,SAAS,KAAK,EAAE,IAAI,WAAW,GAAG;AAAA,QAC1D;AACA,eAAO;AAAA,MACT;AAEA,cAAQ,gBAAgB,SAAS,KAAK;AACpC,YAAI,oBAAoB,KAAK,GAAG,GAAG;AACjC,gBAAM,IAAI,YAAY,MAAM;AAAA,QAC9B;AACA,eAAO;AAAA,MACT;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACjCZ;AAAA;AACA,YAAQ,QAAQ,SAAS,KAAK;AAC5B,aAAO,IAAI,MAAM,GAAG;AAAA,IACtB;AAMA,QAAI,OAAO;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAEA,SAAS,OAAO,MAAM;AACpB,UAAI,QAAQ,eAAe;AACzB,aAAK,KAAK,KAAK;AAAA,MACjB,OAAO;AACL,aAAK,IAAI,OAAO,CAAC,KAAK,KAAK;AAAA,MAC7B;AACA,WAAK,MAAM,OAAO,KAAK;AAAA,IACzB;AAPS;AAcT,aAAS,MAAM,KAAK;AAClB,WAAK,QAAQ;AACb,UAAI,IAAI,MAAM,GAAG;AACjB,UAAI,GAAG;AACL,aAAK,OAAO,OAAO,EAAE,EAAE,IAAI,KAAK,EAAE;AAClC,aAAK,OAAO,EAAE;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,UAAU,KAAK,SAAS,IAAI;AAChC,UAAI,KAAK,MAAM;AACb,aAAK,WAAW,YAAY,UAAU,KAAK,IAAI;AAAA,MACjD;AAEA,UAAI,OAAO;AACX,eAAS,WAAW;AAClB,aAAK;AACL,WAAG,KAAK,IAAI;AAAA,MACd;AACA,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,OAAO,WAAW;AAChC,UAAI,KAAK,UAAU;AACjB,sBAAc,KAAK,QAAQ;AAC3B,eAAO,KAAK;AAAA,MACd;AACA,aAAO;AAAA,IACT;AAYA,QAAI,MAAM;AAEV,aAAS,MAAM,KAAK;AAClB,UAAI,IAAI,IAAI,MAAM,GAAG;AACrB,UAAI,KAAK,KAAK,EAAE,KAAK;AACnB,eAAO,EAAE,MAAM,CAAC;AAAA,MAClB;AACA,aAAO;AAAA,IACT;AAAA;AAAA;;;AC/EA;AAAA;AACA,KAAC,WAAW;AACV;AACA,UAAI,KAAK,UAAU,QAAQ,SAAS,aAAa,YAAY,KAAK,cAChE,OAAO,SAAS,IAAI,IAAG;AAAE,eAAO,WAAU;AAAE,iBAAO,GAAG,MAAM,IAAI,SAAS;AAAA,QAAG;AAAA,MAAG,GAC/E,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,YAAM;AAEN,eAAS;AAET,YAAM;AAEN,mBAAa;AAEb,qBAAe,iBAAkB;AAEjC,iBAAW,mBAAsB;AAEjC,gBAAU,SAAS,OAAO;AACxB,eAAO,OAAO,UAAU,YAAa,SAAS,QAAS,OAAO,KAAK,KAAK,EAAE,WAAW;AAAA,MACvF;AAEA,oBAAc,SAASC,aAAY,MAAM,KAAK;AAC5C,YAAI,GAAG,KAAK;AACZ,aAAK,IAAI,GAAG,MAAMA,YAAW,QAAQ,IAAI,KAAK,KAAK;AACjD,oBAAUA,YAAW;AACrB,iBAAO,QAAQ,MAAM,GAAG;AAAA,QAC1B;AACA,eAAO;AAAA,MACT;AAEA,cAAQ,SAAU,SAAS,YAAY;AACrC,eAAOC,SAAQ,UAAU;AAEzB,iBAASA,QAAO,MAAM;AACpB,eAAK,qBAAqB,KAAK,KAAK,oBAAoB,IAAI;AAC5D,eAAK,cAAc,KAAK,KAAK,aAAa,IAAI;AAC9C,eAAK,QAAQ,KAAK,KAAK,OAAO,IAAI;AAClC,eAAK,eAAe,KAAK,KAAK,cAAc,IAAI;AAChD,eAAK,eAAe,KAAK,KAAK,cAAc,IAAI;AAChD,cAAI,KAAK,KAAK;AACd,cAAI,EAAE,gBAAgB,QAAQ,SAAS;AACrC,mBAAO,IAAI,QAAQ,OAAO,IAAI;AAAA,UAChC;AACA,eAAK,UAAU,CAAC;AAChB,gBAAM,SAAS;AACf,eAAK,OAAO,KAAK;AACf,gBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,oBAAQ,IAAI;AACZ,iBAAK,QAAQ,OAAO;AAAA,UACtB;AACA,eAAK,OAAO,MAAM;AAChB,gBAAI,CAAC,QAAQ,KAAK,MAAM,GAAG;AAAG;AAC9B,oBAAQ,KAAK;AACb,iBAAK,QAAQ,OAAO;AAAA,UACtB;AACA,cAAI,KAAK,QAAQ,OAAO;AACtB,iBAAK,QAAQ,WAAW,KAAK,QAAQ,UAAU;AAAA,UACjD;AACA,cAAI,KAAK,QAAQ,eAAe;AAC9B,gBAAI,CAAC,KAAK,QAAQ,mBAAmB;AACnC,mBAAK,QAAQ,oBAAoB,CAAC;AAAA,YACpC;AACA,iBAAK,QAAQ,kBAAkB,QAAQ,WAAW,SAAS;AAAA,UAC7D;AACA,eAAK,MAAM;AAAA,QACb;AAEA,QAAAA,QAAO,UAAU,eAAe,WAAW;AACzC,cAAI,OAAO;AACX,cAAI;AACF,gBAAI,KAAK,UAAU,UAAU,KAAK,QAAQ,WAAW;AACnD,sBAAQ,KAAK;AACb,mBAAK,YAAY;AACjB,mBAAK,YAAY,KAAK,UAAU,MAAM,KAAK;AAC3C,qBAAO,KAAK,UAAU,MAAM;AAAA,YAC9B,OAAO;AACL,sBAAQ,KAAK,UAAU,OAAO,GAAG,KAAK,QAAQ,SAAS;AACvD,mBAAK,YAAY,KAAK,UAAU,OAAO,KAAK,QAAQ,WAAW,KAAK,UAAU,MAAM;AACpF,mBAAK,YAAY,KAAK,UAAU,MAAM,KAAK;AAC3C,qBAAO,aAAa,KAAK,YAAY;AAAA,YACvC;AAAA,UACF,SAAS,QAAP;AACA,kBAAM;AACN,gBAAI,CAAC,KAAK,UAAU,WAAW;AAC7B,mBAAK,UAAU,YAAY;AAC3B,qBAAO,KAAK,KAAK,GAAG;AAAA,YACtB;AAAA,UACF;AAAA,QACF;AAEA,QAAAA,QAAO,UAAU,eAAe,SAAS,KAAK,KAAK,UAAU;AAC3D,cAAI,EAAE,OAAO,MAAM;AACjB,gBAAI,CAAC,KAAK,QAAQ,eAAe;AAC/B,qBAAO,IAAI,OAAO;AAAA,YACpB,OAAO;AACL,qBAAO,IAAI,OAAO,CAAC,QAAQ;AAAA,YAC7B;AAAA,UACF,OAAO;AACL,gBAAI,EAAE,IAAI,gBAAgB,QAAQ;AAChC,kBAAI,OAAO,CAAC,IAAI,IAAI;AAAA,YACtB;AACA,mBAAO,IAAI,KAAK,KAAK,QAAQ;AAAA,UAC/B;AAAA,QACF;AAEA,QAAAA,QAAO,UAAU,QAAQ,WAAW;AAClC,cAAI,SAAS,SAAS,QAAQ;AAC9B,eAAK,mBAAmB;AACxB,eAAK,YAAY,IAAI,OAAO,KAAK,QAAQ,QAAQ;AAAA,YAC/C,MAAM;AAAA,YACN,WAAW;AAAA,YACX,OAAO,KAAK,QAAQ;AAAA,UACtB,CAAC;AACD,eAAK,UAAU,YAAY;AAC3B,eAAK,UAAU,UAAW,SAAS,OAAO;AACxC,mBAAO,SAAS,OAAO;AACrB,oBAAM,UAAU,OAAO;AACvB,kBAAI,CAAC,MAAM,UAAU,WAAW;AAC9B,sBAAM,UAAU,YAAY;AAC5B,uBAAO,MAAM,KAAK,SAAS,KAAK;AAAA,cAClC;AAAA,YACF;AAAA,UACF,EAAG,IAAI;AACP,eAAK,UAAU,QAAS,SAAS,OAAO;AACtC,mBAAO,WAAW;AAChB,kBAAI,CAAC,MAAM,UAAU,OAAO;AAC1B,sBAAM,UAAU,QAAQ;AACxB,uBAAO,MAAM,KAAK,OAAO,MAAM,YAAY;AAAA,cAC7C;AAAA,YACF;AAAA,UACF,EAAG,IAAI;AACP,eAAK,UAAU,QAAQ;AACvB,eAAK,mBAAmB,KAAK,QAAQ;AACrC,eAAK,eAAe;AACpB,kBAAQ,CAAC;AACT,oBAAU,KAAK,QAAQ;AACvB,oBAAU,KAAK,QAAQ;AACvB,eAAK,UAAU,YAAa,SAAS,OAAO;AAC1C,mBAAO,SAAS,MAAM;AACpB,kBAAI,KAAK,UAAU,KAAK,cAAc;AACtC,oBAAM,CAAC;AACP,kBAAI,WAAW;AACf,kBAAI,CAAC,MAAM,QAAQ,aAAa;AAC9B,sBAAM,KAAK;AACX,qBAAK,OAAO,KAAK;AACf,sBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,sBAAI,EAAE,WAAW,QAAQ,CAAC,MAAM,QAAQ,YAAY;AAClD,wBAAI,WAAW,CAAC;AAAA,kBAClB;AACA,6BAAW,MAAM,QAAQ,sBAAsB,YAAY,MAAM,QAAQ,qBAAqB,KAAK,WAAW,MAAM,GAAG,IAAI,KAAK,WAAW;AAC3I,iCAAe,MAAM,QAAQ,qBAAqB,YAAY,MAAM,QAAQ,oBAAoB,GAAG,IAAI;AACvG,sBAAI,MAAM,QAAQ,YAAY;AAC5B,0BAAM,aAAa,KAAK,cAAc,QAAQ;AAAA,kBAChD,OAAO;AACL,wBAAI,SAAS,gBAAgB;AAAA,kBAC/B;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,WAAW,MAAM,QAAQ,oBAAoB,YAAY,MAAM,QAAQ,mBAAmB,KAAK,IAAI,IAAI,KAAK;AAChH,kBAAI,MAAM,QAAQ,OAAO;AACvB,oBAAI,MAAM,QAAQ,YAAY;AAAA,kBAC5B,KAAK,KAAK;AAAA,kBACV,OAAO,KAAK;AAAA,gBACd;AAAA,cACF;AACA,qBAAO,MAAM,KAAK,GAAG;AAAA,YACvB;AAAA,UACF,EAAG,IAAI;AACP,eAAK,UAAU,aAAc,SAAS,OAAO;AAC3C,mBAAO,WAAW;AAChB,kBAAI,OAAO,UAAU,KAAK,MAAM,UAAU,KAAK,UAAU,KAAK,GAAG;AACjE,oBAAM,MAAM,IAAI;AAChB,yBAAW,IAAI;AACf,kBAAI,CAAC,MAAM,QAAQ,oBAAoB,CAAC,MAAM,QAAQ,uBAAuB;AAC3E,uBAAO,IAAI;AAAA,cACb;AACA,kBAAI,IAAI,UAAU,MAAM;AACtB,wBAAQ,IAAI;AACZ,uBAAO,IAAI;AAAA,cACb;AACA,kBAAI,MAAM,MAAM,SAAS;AACzB,kBAAI,IAAI,SAAS,MAAM,OAAO,KAAK,CAAC,OAAO;AACzC,2BAAW,IAAI;AACf,uBAAO,IAAI;AAAA,cACb,OAAO;AACL,oBAAI,MAAM,QAAQ,MAAM;AACtB,sBAAI,WAAW,IAAI,SAAS,KAAK;AAAA,gBACnC;AACA,oBAAI,MAAM,QAAQ,WAAW;AAC3B,sBAAI,WAAW,IAAI,SAAS,QAAQ,WAAW,GAAG,EAAE,KAAK;AAAA,gBAC3D;AACA,oBAAI,WAAW,MAAM,QAAQ,kBAAkB,YAAY,MAAM,QAAQ,iBAAiB,IAAI,UAAU,QAAQ,IAAI,IAAI;AACxH,oBAAI,OAAO,KAAK,GAAG,EAAE,WAAW,KAAK,WAAW,OAAO,CAAC,MAAM,kBAAkB;AAC9E,wBAAM,IAAI;AAAA,gBACZ;AAAA,cACF;AACA,kBAAI,QAAQ,GAAG,GAAG;AAChB,sBAAM,MAAM,QAAQ,aAAa,KAAK,MAAM,QAAQ,WAAW;AAAA,cACjE;AACA,kBAAI,MAAM,QAAQ,aAAa,MAAM;AACnC,wBAAQ,MAAQ,WAAW;AACzB,sBAAI,GAAG,KAAK;AACZ,4BAAU,CAAC;AACX,uBAAK,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC5C,2BAAO,MAAM;AACb,4BAAQ,KAAK,KAAK,QAAQ;AAAA,kBAC5B;AACA,yBAAO;AAAA,gBACT,EAAG,EAAG,OAAO,QAAQ,EAAE,KAAK,GAAG;AAC/B,iBAAC,WAAW;AACV,sBAAI;AACJ,sBAAI;AACF,2BAAO,MAAM,MAAM,QAAQ,UAAU,OAAO,KAAK,EAAE,WAAW,GAAG;AAAA,kBACnE,SAAS,QAAP;AACA,0BAAM;AACN,2BAAO,MAAM,KAAK,SAAS,GAAG;AAAA,kBAChC;AAAA,gBACF,GAAG;AAAA,cACL;AACA,kBAAI,MAAM,QAAQ,oBAAoB,CAAC,MAAM,QAAQ,cAAc,OAAO,QAAQ,UAAU;AAC1F,oBAAI,CAAC,MAAM,QAAQ,uBAAuB;AACxC,yBAAO,CAAC;AACR,sBAAI,MAAM,QAAQ,WAAW,KAAK;AAChC,yBAAK,MAAM,QAAQ,WAAW,IAAI,MAAM,QAAQ;AAChD,2BAAO,IAAI,MAAM,QAAQ;AAAA,kBAC3B;AACA,sBAAI,CAAC,MAAM,QAAQ,mBAAmB,MAAM,QAAQ,WAAW,KAAK;AAClE,yBAAK,MAAM,QAAQ,WAAW,IAAI,MAAM,QAAQ;AAChD,2BAAO,IAAI,MAAM,QAAQ;AAAA,kBAC3B;AACA,sBAAI,OAAO,oBAAoB,GAAG,EAAE,SAAS,GAAG;AAC9C,yBAAK,MAAM,QAAQ,YAAY;AAAA,kBACjC;AACA,wBAAM;AAAA,gBACR,WAAW,GAAG;AACZ,oBAAE,MAAM,QAAQ,YAAY,EAAE,MAAM,QAAQ,aAAa,CAAC;AAC1D,6BAAW,CAAC;AACZ,uBAAK,OAAO,KAAK;AACf,wBAAI,CAAC,QAAQ,KAAK,KAAK,GAAG;AAAG;AAC7B,6BAAS,OAAO,IAAI;AAAA,kBACtB;AACA,oBAAE,MAAM,QAAQ,UAAU,KAAK,QAAQ;AACvC,yBAAO,IAAI;AACX,sBAAI,OAAO,KAAK,GAAG,EAAE,WAAW,KAAK,WAAW,OAAO,CAAC,MAAM,kBAAkB;AAC9E,0BAAM,IAAI;AAAA,kBACZ;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,MAAM,SAAS,GAAG;AACpB,uBAAO,MAAM,aAAa,GAAG,UAAU,GAAG;AAAA,cAC5C,OAAO;AACL,oBAAI,MAAM,QAAQ,cAAc;AAC9B,wBAAM;AACN,wBAAM,CAAC;AACP,sBAAI,YAAY;AAAA,gBAClB;AACA,sBAAM,eAAe;AACrB,sBAAM,UAAU,QAAQ;AACxB,uBAAO,MAAM,KAAK,OAAO,MAAM,YAAY;AAAA,cAC7C;AAAA,YACF;AAAA,UACF,EAAG,IAAI;AACP,mBAAU,SAAS,OAAO;AACxB,mBAAO,SAAS,MAAM;AACpB,kBAAI,WAAW;AACf,kBAAI,MAAM,MAAM,SAAS;AACzB,kBAAI,GAAG;AACL,kBAAE,YAAY;AACd,oBAAI,MAAM,QAAQ,oBAAoB,MAAM,QAAQ,yBAAyB,MAAM,QAAQ,oBAAoB,MAAM,QAAQ,qBAAqB,KAAK,QAAQ,QAAQ,EAAE,EAAE,KAAK,MAAM,KAAK;AACzL,oBAAE,MAAM,QAAQ,YAAY,EAAE,MAAM,QAAQ,aAAa,CAAC;AAC1D,8BAAY;AAAA,oBACV,SAAS;AAAA,kBACX;AACA,4BAAU,WAAW;AACrB,sBAAI,MAAM,QAAQ,WAAW;AAC3B,8BAAU,WAAW,UAAU,SAAS,QAAQ,WAAW,GAAG,EAAE,KAAK;AAAA,kBACvE;AACA,oBAAE,MAAM,QAAQ,UAAU,KAAK,SAAS;AAAA,gBAC1C;AACA,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF,EAAG,IAAI;AACP,eAAK,UAAU,SAAS;AACxB,iBAAO,KAAK,UAAU,UAAW,SAAS,OAAO;AAC/C,mBAAO,SAAS,MAAM;AACpB,kBAAI;AACJ,kBAAI,OAAO,IAAI;AACf,kBAAI,GAAG;AACL,uBAAO,EAAE,QAAQ;AAAA,cACnB;AAAA,YACF;AAAA,UACF,EAAG,IAAI;AAAA,QACT;AAEA,QAAAA,QAAO,UAAU,cAAc,SAAS,KAAK,IAAI;AAC/C,cAAI;AACJ,cAAK,MAAM,QAAS,OAAO,OAAO,YAAY;AAC5C,iBAAK,GAAG,OAAO,SAAS,QAAQ;AAC9B,mBAAK,MAAM;AACX,qBAAO,GAAG,MAAM,MAAM;AAAA,YACxB,CAAC;AACD,iBAAK,GAAG,SAAS,SAASC,MAAK;AAC7B,mBAAK,MAAM;AACX,qBAAO,GAAGA,IAAG;AAAA,YACf,CAAC;AAAA,UACH;AACA,cAAI;AACF,kBAAM,IAAI,SAAS;AACnB,gBAAI,IAAI,KAAK,MAAM,IAAI;AACrB,mBAAK,KAAK,OAAO,IAAI;AACrB,qBAAO;AAAA,YACT;AACA,kBAAM,IAAI,SAAS,GAAG;AACtB,gBAAI,KAAK,QAAQ,OAAO;AACtB,mBAAK,YAAY;AACjB,2BAAa,KAAK,YAAY;AAC9B,qBAAO,KAAK;AAAA,YACd;AACA,mBAAO,KAAK,UAAU,MAAM,GAAG,EAAE,MAAM;AAAA,UACzC,SAAS,QAAP;AACA,kBAAM;AACN,gBAAI,EAAE,KAAK,UAAU,aAAa,KAAK,UAAU,QAAQ;AACvD,mBAAK,KAAK,SAAS,GAAG;AACtB,qBAAO,KAAK,UAAU,YAAY;AAAA,YACpC,WAAW,KAAK,UAAU,OAAO;AAC/B,oBAAM;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,QAAAD,QAAO,UAAU,qBAAqB,SAAS,KAAK;AAClD,iBAAO,IAAI,QAAS,SAAS,OAAO;AAClC,mBAAO,SAAS,SAAS,QAAQ;AAC/B,qBAAO,MAAM,YAAY,KAAK,SAAS,KAAK,OAAO;AACjD,oBAAI,KAAK;AACP,yBAAO,OAAO,GAAG;AAAA,gBACnB,OAAO;AACL,yBAAO,QAAQ,KAAK;AAAA,gBACtB;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,EAAG,IAAI,CAAC;AAAA,QACV;AAEA,eAAOA;AAAA,MAET,EAAG,MAAM;AAET,cAAQ,cAAc,SAAS,KAAK,GAAG,GAAG;AACxC,YAAI,IAAI,SAAS;AACjB,YAAI,KAAK,MAAM;AACb,cAAI,OAAO,MAAM,YAAY;AAC3B,iBAAK;AAAA,UACP;AACA,cAAI,OAAO,MAAM,UAAU;AACzB,sBAAU;AAAA,UACZ;AAAA,QACF,OAAO;AACL,cAAI,OAAO,MAAM,YAAY;AAC3B,iBAAK;AAAA,UACP;AACA,oBAAU,CAAC;AAAA,QACb;AACA,iBAAS,IAAI,QAAQ,OAAO,OAAO;AACnC,eAAO,OAAO,YAAY,KAAK,EAAE;AAAA,MACnC;AAEA,cAAQ,qBAAqB,SAAS,KAAK,GAAG;AAC5C,YAAI,SAAS;AACb,YAAI,OAAO,MAAM,UAAU;AACzB,oBAAU;AAAA,QACZ;AACA,iBAAS,IAAI,QAAQ,OAAO,OAAO;AACnC,eAAO,OAAO,mBAAmB,GAAG;AAAA,MACtC;AAAA,IAEF,GAAG,KAAK,OAAI;AAAA;AAAA;;;AC5XZ;AAAA;AACA,KAAC,WAAW;AACV;AACA,UAAI,SAAS,UAAU,QAAQ,YAC7B,SAAS,SAAS,OAAO,QAAQ;AAAE,iBAAS,OAAO,QAAQ;AAAE,cAAI,QAAQ,KAAK,QAAQ,GAAG;AAAG,kBAAM,OAAO,OAAO;AAAA,QAAM;AAAE,iBAAS,OAAO;AAAE,eAAK,cAAc;AAAA,QAAO;AAAE,aAAK,YAAY,OAAO;AAAW,cAAM,YAAY,IAAI,KAAK;AAAG,cAAM,YAAY,OAAO;AAAW,eAAO;AAAA,MAAO,GACzR,UAAU,CAAC,EAAE;AAEf,iBAAW;AAEX,gBAAU;AAEV,eAAS;AAET,mBAAa;AAEb,cAAQ,WAAW,SAAS;AAE5B,cAAQ,aAAa;AAErB,cAAQ,kBAAmB,SAAS,YAAY;AAC9C,eAAO,iBAAiB,UAAU;AAElC,iBAAS,gBAAgB,SAAS;AAChC,eAAK,UAAU;AAAA,QACjB;AAEA,eAAO;AAAA,MAET,EAAG,KAAK;AAER,cAAQ,UAAU,QAAQ;AAE1B,cAAQ,SAAS,OAAO;AAExB,cAAQ,cAAc,OAAO;AAE7B,cAAQ,qBAAqB,OAAO;AAAA,IAEtC,GAAG,KAAK,OAAI;AAAA;AAAA;;;ACtCL,IAAM,6BAA6B,MAAY;AAClD,QAAM,gBAAgB;AAAA,IAElcAAc,aAAa;AACtC;;;ACjJO,IAAM,YAAN,MAAuB;AAAA,EAC1B,IAAI,OAAuB;AACvB,WAAO,KAAK,MAAM,MAAM;AAAA,EAC5B;AAAA,EAEA,IAAI,SAAiB;AACjB,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAOA,IAAI,QAAgB;AAChB,QAAI,QAAQ;AACZ,eAAW,QAAQ,KAAK,OAAO;AAC3B,UAAI,OAAO,KAAK,UAAU,UAAU;AAChC,iBAAS,KAAK;AAAA,MAClB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAOA,IAAI,OAAY;AACZ,WAAO,KAAK,MAAM,KAAK,MAAM,SAAS;AAAA,EAC1C;AAAA,EAEA,IAAI,UAAmB;AACnB,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EAEA,aAAa,MAAiC;AAxClD;AAyCQ,YAAO,UAAK,MAAM,KAAK,CAAC,SAAS,KAAK,SAAS,IAAI,MAA5C,mBAA+C;AAAA,EAC1D;AAAA,EAEA,QAAc;AACV,SAAK,MAAM,SAAS;AAAA,EACxB;AAAA,EAIA,YAAY,OAAwB;AAChC,QAAI,cAAc,CAAC;AACnB,QAAI,OAAO;AACP,UAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,sBAAc;AAAA,MAClB,WAAW,OAAO,UAAU,UAAU;AAClC,mBAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC/C,cAAI,UAAU,QAAQ,UAAU,QAAW;AAEvC,gBAAI,CAAC,MAAM,OAAO,IAAI,CAAC,KAAK,OAAO,UAAU,UAAU;AACnD,0BAAY,KAAK;AAAA,gBACb,MAAO,MAA8B;AAAA,gBACrC,OAAQ,MAA8B;AAAA,cAC1C,CAAC;AAAA,YACL,OAAO;AACH,0BAAY,KAAK;AAAA,gBACb;AAAA,gBACA;AAAA,cACJ,CAAwB;AAAA,YAC5B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,QAAQ,MAAc,OAAoB;AACtC,SAAK,MAAM,KAAK;AAAA,MACZ;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,cAAc,MAAc,OAAe,YAAY,MAAY;AAC/D,UAAM,QAAQ,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,SAAS,IAAI;AAC/D,QAAI,QAAQ,IAAI;AAEZ,UAAI,CAAC;AAAW;AAEhB,WAAK,MAAM,OAAO,OAAO,CAAC;AAE1B,UAAI,UAAU,UAAa,UAAU;AAAM;AAE3C,WAAK,cAAc,MAAM,KAAK;AAAA,IAClC,WAAW,UAAU,QAAW;AAC5B,WAAK,QAAQ,MAAM,KAAK;AAAA,IAC5B,OAAO;AACH,cAAQ,KAAK,gEAAgE,MAAM,KAAK;AAAA,IAC5F;AAAA,EACJ;AAAA,EAQA,WAAW,MAAuB;AAC9B,QAAI,QAAQ,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,SAAS,IAAI;AAC7D,QAAI,UAAU;AACd,WAAO,QAAQ,IAAI;AACf,gBAAU;AACV,WAAK,MAAM,OAAO,OAAO,CAAC;AAC1B,cAAQ,KAAK,MAAM,UAAU,CAAC,SAAS,KAAK,SAAS,IAAI;AAAA,IAC7D;AAEA,WAAO;AAAA,EACX;AAAA,EAQA,QAAQ,MAAuB;AAC3B,WAAO,KAAK,MAAM,KAAK,UAAQ,KAAK,SAAS,IAAI;AAAA,EACrD;AAAA,EAEA,mBAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,OAAO,QAAe,MAAsB,MAAc,OAA8B;AACpF,UAAM,QAAQ,IAAI,UAAU,IAAI;AAChC,UAAM,QAAQ,MAAM,KAAK;AACzB,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,OAAO,cAAqB,MAAsB,MAAc,OAAc,YAAY,MAAsB;AAC5G,UAAM,QAAQ,IAAI,UAAU,IAAI;AAChC,UAAM,cAAc,MAAM,OAAO,SAAS;AAC1C,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,OAAO,WAAkB,MAAsB,MAAc;AACzD,UAAM,QAAQ,IAAI,UAAU,IAAI;AAChC,UAAM,WAAW,IAAI;AACrB,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,OAAO,MAAM,MAAuB;AAChC,UAAM,QAAQ,IAAI,UAAU,IAAI;AAChC,WAAO,MAAM;AAAA,EACjB;AACJ;;;AChJO,IAAM,cAAc;AACpB,IAAM,gBAAgB,UAAU;AAChC,IAAM,QAAQ;AAAA,EACjB,qBAAqB;AAAA,EACrB,4BAA4B;AAAA,EAC5B,sCAAsC;AAAA,EACtC,kCAAkC;AAAA,EAClC,uBAAuB;AAAA,EACvB,yBAAyB;AAAA,EACzB,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,sBAAsB;AAAA,EACtB,eAAe;AAAA,EACf,cAAc;AAAA,EACd,gBAAgB;AAAA,EAChB,sBAAsB;AAAA,EACtB,eAAe;AAAA,EACf,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,sBAAsB;AAAA,EACtB,0BAA0B;AAAA,EAC1B,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,MAAM;AAAA,EACN,uBAAuB;AAAA,EACvB,0BAA0B;AAC9B;AACO,IAAM,YAAY;AAClB,IAAM,aAAa;AAAA,EACtB,UAAU;AACd;AACO,IAAM,mBAAmB;AAEzB,IAAM,oCAAoC;AAAA,EAC7C,KAAK;AAAA,EACL,SAAS;AAAA,EACT,UAAU;AAAA,EACV,MAAM;AAAA,EACN,cAAc;AAAA,EACd,aAAa;AACjB;AAEO,IAAM,oBAAoB;AAC1B,IAAM,cAAc;AACpB,IAAM,qBAAqB;AAC3B,IAAM,oBAAoB;AAG1B,IAAM,KAAK;AAAA,EACd,QAAQ;AAAA,IAEJ,eAAe;AAAA,MACX,iBAAiB;AAAA,QACb,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QAET,cAAc;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS;AAAA,MACb;AAAA,IACJ;AAAA,IAEA,+BAA+B;AAAA,IAC/B,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,EACvB;AAAA,EACA,KAAK;AAAA,IACD,QAAQ,CAAC,CAAC;AAAA,IACV,SAAS,CAAC,GAAG,CAAC;AAAA,EAClB;AAAA,EACA,SAAS;AAAA,IACL,OAAO;AAAA,MACH,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY;AAAA,IAGR,QAAQ;AAAA,MACJ,OAAO,EAAC,KAAK,EAAC;AAAA,MACd,MAAM,EAAC,KAAK,EAAC;AAAA,MACb,WAAW,EAAC,KAAK,EAAC;AAAA,MAClB,SAAS,EAAC,KAAK,EAAC;AAAA,MAChB,MAAM,EAAC,KAAK,EAAC;AAAA,MACb,SAAS,EAAC,KAAK,EAAC;AAAA,MAChB,UAAU,EAAC,KAAK,EAAC;AAAA,MACjB,UAAU,EAAC,KAAK,EAAC;AAAA,MACjB,WAAW,EAAC,KAAK,EAAC;AAAA,MAClB,OAAO,EAAC,KAAK,EAAC;AAAA,MACd,WAAW,EAAC,KAAK,EAAC;AAAA,MAClB,UAAU,EAAC,KAAK,EAAC;AAAA,MACjB,QAAQ,EAAC,KAAK,EAAC;AAAA,MACf,QAAQ,EAAC,KAAK,EAAC;AAAA,MACf,iBAAiB,EAAC,KAAK,EAAC;AAAA,MACxB,UAAU,EAAC,KAAK,EAAC;AAAA,MACjB,aAAa,EAAC,KAAK,GAAG,KAAK,GAAE;AAAA,IACjC;AAAA,IAEA,UAAU;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IAEA,mBAAmB;AAAA,EACvB;AAAA,EACA,OAAO;AAAA,IAEH,qBAAqB;AAAA,IACrB,yBAAyB;AAAA,EAC7B;AAAA,EACA,aAAa;AAAA,IACT,IAAI;AAAA,MACA,MAAM;AAAA,IACV;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM,EAAC,KAAK,EAAC;AAAA,MACb,MAAM,EAAC,KAAK,GAAG,KAAK,EAAC;AAAA,IACzB;AAAA,EACJ;AACJ;;;AC7IO,IAAM,aAAN,MAAiB;AAAA,EAWpB,OAAO,kBAAkB,OAA4B;AACjD,WAAO,MAAM,UAAU;AAAA,EAC3B;AAAA,EAOA,OAAO,oBAAoB,OAA4B;AAGnD,WAAO,MAAM;AAAA,EACjB;AAAA,EAQA,OAAO,UAAU,OAA4B;AACzC,WAAO,CAAC,WAAW,kBAAkB,KAAK,KAAK,WAAW,oBAAoB,KAAK;AAAA,EACvF;AAAA,EAMA,OAAO,kBAAkB,OAA0B;AAC/C,UAAM,cAAc,kBAAkB,WAAW,kBAAkB;AAAA,EACvE;AAAA,EAQA,OAAO,MAAM,OAAmB,UAAU,EAAC,gBAAgB,MAAK,GAAW;AACvE,QAAI,KAAK,kBAAkB,KAAK,KAAK,KAAK,oBAAoB,KAAK,GAAG;AAClE,aAAO,WAAW;AAAA,IACtB;AAGA,UAAM,aAAa,OAAO,MAAM,UAAU,WAAW,MAAM,QAAQ;AACnE,UAAM,sBAAsB,QAAQ,iBAAiB,GAAG,MAAM,0BAA0B;AAExF,WAAO,aAAa;AAAA,EACxB;AAAA,EAEA,WAAW,qBAA6B;AACpC,WAAO,GAAG,MAAM;AAAA,EACpB;AAAA,EAEA,WAAW,yBAAiC;AACxC,WAAO,GAAG,MAAM;AAAA,EACpB;AACJ;;;ACrEO,IAAM,YAAN,MAAgB;AAAA,EAMnB,OAAO,iBAAiB,OAAmB,OAA0B;AAXzE;AAYQ,QAAI,CAAC,WAAW,kBAAkB,KAAK;AAAG;AAE1C,QAAI,CAAC,UAAU,oBAAoB,KAAK,GAAG;AACvC,eAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAC3E;AAAA,IACJ;AAEA,eAAW,kBAAkB,KAAK;AAAA,EACtC;AAAA,EAOA,OAAO,oBAAoB,OAA4B;AAEnD,UAAM,uBAAuB,KAAK,SAAS,IAAI,aAAa,MAAM,gCAAgC,MAAM;AACxG,QAAI;AACA,aAAO;AAEX,WAAO,WAAW,oBAAoB,KAAK;AAAA,EAC/C;AAAA,EAEA,OAAO,UAAU,OAA4B;AACzC,QAAI,WAAW,kBAAkB,KAAK,KAAK,UAAU,oBAAoB,KAAK,GAAG;AAC7E,aAAO;AAAA,IACX;AACA,WAAO,WAAW,UAAU,KAAK;AAAA,EACrC;AAAA,EAEA,OAAO,cAAc,OAA4B;AAC7C,WAAO,MAAM,SAAS,UAAa,MAAM,SAAS;AAAA,EACtD;AAAA,EAEA,OAAO,cAAc,OAA4B;AAC7C,WAAO,CAAC,UAAU,cAAc,KAAK;AAAA,EACzC;AACJ;;;ACvCA,SAAe,kBAAkB,UAAkB,cAAyC;AAAA;AACxF,UAAM,WAAW,MAAM,eAAe,UAAU,YAAY;AAC5D,UAAM,UAAU,MAAM,YAAY,OAAO,QAAQ;AAEjD,QAAI,CAAC;AAAS,aAAO;AAErB,WAAO;AAAA,EACX;AAAA;AAIA,IAAM,iBAAiB,CAAO,UAAkB,iBAAiB;AAtBjE;AAuBI,QAAM,OAAO,MAAM,eAAe,UAAU,YAAY;AAExD,QAAM,WAAW;AAAA,IACb,OAAM,UAAK,SAAL,mBAAW;AAAA,IACjB,SAAS;AAAA,MACL,QAAO,kBAAa,UAAb,mBAAoB;AAAA,MAC3B,QAAO,kBAAa,UAAb,mBAAoB;AAAA,MAC3B,QAAO,UAAK,SAAL,mBAAW;AAAA,IACtB;AAAA,IACA,MAAM,aAAa;AAAA,IACnB,SAAS;AAAA,IACT,UAAU,KAAK,SAAS,IAAI,WAAW,WAAW,QAAQ;AAAA,EAC9D;AAGA,cAAY,cAAc,UAAU,SAAS,QAAQ;AAErD,SAAO;AACX;AAEA,SAAsB,sBAAsB,SAAS;AAAA;AACjD,UAAM,eAAe,uBAAuB,OAAO;AACnD,WAAO,MAAM,kBAAkB,2DAA2D,YAAY;AAAA,EAC1G;AAAA;AAEA,SAAS,uBAAuB,SAAS;AAGrC,MAAI,EAAC,OAAO,MAAM,aAAa,MAAK,IAAI;AAExC,QAAM,QAAQ,+BAAO;AACrB,QAAM,QAAQ,KAAK,KAAK,SAAS,iBAAiB;AAElD,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;;;ACrCO,IAAM,gBAAN,MAAoB;AAAA,EAKvB,OAAO,WAAW,oBAAyC,CAAC,GAAe;AACvE,UAAM,OAAmB;AAAA,MACrB,MAAM;AAAA,QACF,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,MAAM;AAAA,MACN,OAAO;AAAA,MACP,IAAI;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,CAAC;AAAA,MACV;AAAA,MACA,WAAW;AAAA,MACX,KAAK,CAAC;AAAA,MACN,uBAAuB;AAAA,MACvB,QAAQ;AAAA,QACJ,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,UAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO,YAAY,MAAM,iBAAiB;AAAA,EAC9C;AAAA,EAEA,OAAO,eAAe,wBAAiD,CAAC,GAAmB;AACvF,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,KAAK,CAAC;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,IACX,GAAG,qBAAqB;AAAA,EAC5B;AAAA,EAEA,OAAO,cAAc,uBAA+C,CAAC,GAAkB;AACnF,WAAO,YAAY;AAAA,MACf,aAAa,KAAK,gBAAgB;AAAA,MAClC,YAAY,KAAK,eAAe;AAAA,IACpC,GAAG,oBAAoB;AAAA,EAC3B;AAAA,EAEA,OAAO,YAAY,qBAA2C,CAAC,GAAgB;AAC3E,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,aAAa,KAAK,gBAAgB;AAAA,MAClC,QAAQ,KAAK,eAAe;AAAA,IAChC,GAAG,kBAAkB;AAAA,EACzB;AAAA,EAEA,OAAO,eAAe,wBAAiD,CAAC,GAAmB;AACvF,WAAO,YAAY;AAAA,MACf,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,UAAU;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,CAAC;AAAA,MACV;AAAA,MACA,mBAAmB;AAAA,QACf,OAAO;AAAA,QACP,OAAO;AAAA,QACP,KAAK;AAAA,MACT;AAAA,MACA,UAAU;AAAA,MACV,mBAAmB;AAAA,IACvB,GAAG,qBAAqB;AAAA,EAC5B;AAAA,EAEA,OAAO,gBAAgB,yBAAmD,CAAC,GAAoB;AAC3F,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,MAAM;AAAA,MACN,QAAQ;AAAA,IACZ,GAAG,sBAAsB;AAAA,EAC7B;AAAA,EAEA,OAAO,WAAW,oBAA6C,CAAC,GAAmB;AAE/E,QAAI,kBAAkB,aAAa;AAAW,aAAO,kBAAkB;AACvE,QAAI,kBAAkB,SAAS;AAAW,aAAO,kBAAkB;AAEnE,WAAO,YAAY;AAAA,MACf,UAAU;AAAA,MACV,MAAM;AAAA,QACF,MAAM;AAAA,UACF,OAAO;AAAA,UACP,KAAK;AAAA,UACL,UAAU;AAAA,QACd;AAAA,QACA,MAAM;AAAA,UACF,OAAO;AAAA,UACP,KAAK;AAAA,UACL,UAAU;AAAA,QACd;AAAA,QACA,MAAM;AAAA,UACF,OAAO;AAAA,UACP,KAAK;AAAA,UACL,UAAU;AAAA,QACd;AAAA,QACA,MAAM;AAAA,UACF,OAAO;AAAA,UACP,KAAK;AAAA,UACL,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,MACA,gBAAgB,CAAC;AAAA,IACrB,GAAG,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAO,eAAe,wBAAiD,CAAC,GAAmB;AACvF,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,UAAU;AAAA,MACV,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,MAAM;AAAA,MACN,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,OAAO,KAAK,UAAU;AAAA,MACtB,UAAU;AAAA,MACV,QAAQ,KAAK,WAAW;AAAA,MACxB,SAAS,KAAK,gBAAgB;AAAA,MAC9B,SAAS;AAAA,MACT,eAAe,CAAC;AAAA,IACpB,GAAG,qBAAqB;AAAA,EAC5B;AAAA,EAEA,OAAO,iBAAiB,0BAAqD,CAAC,GAAqB;AAE/F,WAAO,YAAY;AAAA,MACf,SAAS;AAAA,QACL,QAAQ;AAAA,UACJ,YAAY;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,UAAU,mBAAuC,CAAC,GAAc;AACnE,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,MAAM;AAAA,MACN,WAAW;AAAA,MACX,KAAK,CAAC;AAAA,IACV,GAAG,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,WAAW,oBAAyC,CAAC,GAAe;AACvE,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,KAAK,CAAC;AAAA,IACV,GAAG,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAO,gBAAgB,yBAAmD,CAAC,GAAoB;AAC3F,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,KAAK;AAAA,MACL,aAAa;AAAA,IACjB,GAAG,sBAAsB;AAAA,EAC7B;AAAA,EAEA,OAAO,UAAU,mBAAwC,CAAC,GAAe;AACrE,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,OAAO,CAAC;AAAA,MACR,OAAO,CAAC;AAAA,MACR,KAAK,CAAC;AAAA,MACN,WAAW;AAAA,IACf,GAAG,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,UAAU,mBAAuC,CAAC,GAAc;AACnE,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK,CAAC;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,IACZ,GAAG,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,SAAS,kBAAqC,CAAC,GAAa;AAC/D,WAAO,YAAY;AAAA,MACf,aAAa,cAAc,gBAAgB,gBAAgB,WAAW;AAAA,OACnE,cAAc,WAAW,EAAC,UAAU,gBAAgB,UAAU,MAAM,gBAAgB,KAAI,CAAC,IAF7E;AAAA,MAGf,QAAQ;AAAA,MACR,IAAI,CAAC;AAAA,IACT,IAAG,eAAe;AAAA,EACtB;AAAA,EAEA,OAAO,iBAAiB,0BAAsD,CAAC,GAAsB;AACjG,WAAO,YAAY;AAAA,MACf,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ,wBAAwB,QAAQ;AAAA,IAC5C,GAAG,uBAAuB;AAAA,EAC9B;AAAA,EAEA,OAAO,kBAAkB,2BAAuD,CAAC,GAAsB;AA/P3G;AAgQQ,WAAQ,YAAY;AAAA,MAChB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa,cAAc,kBAAgB,8BAAyB,SAAzB,mBAA+B,gBAAe,CAAC,CAAC;AAAA,QAC3F,YAAY,cAAc,iBAAe,8BAAyB,SAAzB,mBAA+B,eAAc,CAAC,CAAC;AAAA,MAC5F;AAAA,IACJ,GAAG,wBAAwB;AAAA,EAC/B;AAAA,EAEA,OAAO,eAAe,wBAAiD,CAAC,GAAmB;AA1Q/F;AA2QQ,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa,cAAc,kBAAgB,2BAAsB,SAAtB,mBAA4B,gBAAe,CAAC,CAAC;AAAA,QACxF,YAAY,cAAc,iBAAe,2BAAsB,SAAtB,mBAA4B,eAAc,CAAC,CAAC;AAAA,SAClF,cAAc,WAAW,EAAC,WAAU,2BAAsB,SAAtB,mBAA4B,UAAU,OAAM,2BAAsB,SAAtB,mBAA4B,KAAI,CAAC;AAAA,IAE5H,GAAG,qBAAqB;AAAA,EAC5B;AAAA,EAEA,OAAO,UAAU,mBAAwC,CAAC,GAAG;AACzD,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,KAAK,CAAC;AAAA,MACN,OAAO;AAAA,IACX,GAAG,gBAAgB;AAAA,EACvB;AAAA,EAEA,OAAO,iBAAiB,0BAAsD,CAAC,GAAG;AAC9E,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,KAAK,CAAC;AAAA,MACN,OAAO;AAAA,IACX,GAAG,uBAAuB;AAAA,EAC9B;AAAA,EAEA,OAAO,kBAAkB,oBAAgD,CAAC,GAAG;AACzE,WAAO,YAAY;AAAA,MACf,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,QACH,OAAO;AAAA,QACP,WAAW;AAAA,QACX,KAAK,CAAC;AAAA,QACN,MAAM;AAAA,MACV;AAAA,IACJ,GAAG,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAO,WAAW,oBAA6C,CAAC,GAAG;AAC/D,WAAO,YAAY;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,OAAO;AAAA,MACP,MAAM;AAAA,MACN,KAAK;AAAA,MACL,iBAAiB;AAAA,MACjB,QAAQ,cAAc,WAAW;AAAA,MACjC,WAAW,CAAC;AAAA,MACZ,OAAO;AAAA,QACH,OAAO;AAAA,QACP,WAAW;AAAA,QACX,KAAK,CAAC;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,WAAW;AAAA,QACP,OAAO;AAAA,QACP,MAAM;AAAA,MACV;AAAA,MACA,UAAU;AAAA,MACV,SAAS;AAAA,QACL,MAAM;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,KAAK;AAAA,QACL,aAAa;AAAA,MACjB;AAAA,MACA,UAAU;AAAA,QACN,MAAM;AAAA,QACN,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,KAAK;AAAA,MACT;AAAA,MACA,SAAS;AAAA,MACT,eAAe,CAAC;AAAA,IACpB,GAAG,iBAAiB;AAAA,EACxB;AAAA,EAEA,OAAO,aAAa,sBAA6C,CAAC,GAAiB;AAC/E,WAAO,YAAY;AAAA,MACf,OAAO;AAAA,MACP,OAAO;AAAA,MACP,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,MAAM;AAAA,MACN,QAAQ;AAAA,IACZ,GAAG,mBAAmB;AAAA,EAC1B;AACJ;AAGO,IAAM,eAAe;AAAA,EACxB,OAAO;AAAA,IACH,oBAAoB;AAAA,MAChcAAc,WAAW,EAAC,MAAM,EAAC,MAAM,IAAI,OAAO,GAAE,EAAC,CAAC;AAClE;;;AClaO,IAAe,cAAf,MAAqC;AAAA,EACxC,YAAsB,MAAgB;AAAhB;AAAA,EAAiB;AAC3C;;;ACgBO,IAAM,qBAAN,cAAiC,YAA+B;AAAA,EACnE,UAAU;AACN,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,UAAiC;AAC7B,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,iBAA0B;AACtB,WAAO,KAAK,UAAU,KAAK,KAAK,WAAW,KAAK,KAAK,UAAU;AAAA,EACnE;AAAA,EAKA,UAAmB;AACf,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAKA,iBAA0B;AACtB,UAAM,QAAQ,KAAK,QAAQ,EAAE;AAC7B,WAAO,KAAK,QAAQ,KAAK,UAAU;AAAA,EACvC;AAAA,EAEA,eAAwB;AA7C5B;AA8CQ,WAAO,KAAK,SAAS,KAAK,GAAC,UAAK,QAAQ,EAAE,UAAf,mBAAsB;AAAA,EACrD;AAAA,EAEA,oBAA6B;AAjDjC;AAkDQ,WAAO,KAAK,SAAS,OAAM,gBAAK,QAAQ,EAAE,UAAf,mBAAsB,QAAtB,YAA6B;AAAA,EAC5D;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,cAAc,IAAI;AAAA,EAClC;AAAA,EAEA,YAAqB;AAzDzB;AA0DQ,WAAO,KAAK,eAAe,OAAM,gBAAK,QAAQ,EAAE,WAAf,mBAAuB,MAAM,WAA7B,YAAuC,KAAK;AAAA,EACjF;AAAA,EAEA,iBAA0B;AACtB,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAC7B,UAAM,aAAa,KAAK,QAAQ;AAChC,WAAO,WAAW,aAAa;AAAA,EACnC;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,iBAA0B;AACtB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,uBAAgC;AAC5B,QAAI,CAAC,KAAK,eAAe;AAAG,aAAO;AACnC,UAAM,eAAe,KAAK;AAC1B,WAAO,aAAa,OAAO,SAAS;AAAA,EACxC;AAAA,EAEA,sBAA+B;AAC3B,QAAI,CAAC,KAAK,eAAe;AAAG,aAAO;AACnC,UAAM,eAAe,KAAK;AAC1B,WAAO,aAAa,OAAO,SAAS;AAAA,EACxC;AAAA,EAEA,YAAqB;AACjB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,YAAqB;AACjB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,SAAkB;AACd,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,YAAqB;AAnGzB;AAoGQ,QAAI,CAAC,KAAK,OAAO;AAAG,aAAO;AAC3B,UAAM,WAAW,KAAK,QAAQ;AAC9B,aAAQ,cAAS,MAAM,WAAf,YAAyB,KAAK;AAAA,EAC1C;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,YAAqB;AACjB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,YAAY,KAAK,KAAK,UAAU;AAAA,EAChD;AAAA,EAEA,gBAAyB;AACrB,QAAI,CAAC,KAAK,QAAQ;AAAG,aAAO;AAC5B,UAAM,YAAY,KAAK,QAAQ;AAC/B,WAAO,UAAU,aAAa;AAAA,EAClC;AAAA,EAEA,sBAA+B;AA3HnC;AA4HQ,QAAI,CAAC,KAAK,cAAc;AAAG,aAAO;AAClC,aAAO,gBAAK,QAAQ,MAAb,mBAAgB,WAAhB,mBAAwB,UAAS;AAAA,EAC5C;AAAA,EAEA,wBAAiC;AAhIrC;AAiIQ,QAAI,CAAC,KAAK,cAAc;AAAG,aAAO;AAClC,aAAO,gBAAK,QAAQ,MAAb,mBAAgB,WAAhB,mBAAwB,UAAS;AAAA,EAC5C;AAAA,EAEA,cAAuB;AACnB,QAAI,CAAC,KAAK,QAAQ;AAAG,aAAO;AAE5B,UAAM,YAAY,KAAK,QAAQ;AAC/B,WAAO,UAAU,SAAS;AAAA,EAC9B;AAAA,EAEA,kBAA2B;AACvB,QAAI,CAAC,KAAK,QAAQ;AAAG,aAAO;AAE5B,UAAM,YAAY,KAAK,QAAQ;AAC/B,WAAO,UAAU,SAAS;AAAA,EAC9B;AAAA,EAEA,iBAA0B;AACtB,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAC7B,UAAM,aAAa,KAAK,QAAQ;AAChC,WAAO,WAAW,aAAa;AAAA,EACnC;AAAA,EAEA,UAAmB;AACf,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,QAAQ,KAAK,KAAK,QAAQ,EAAE,UAAU;AAAA,EACtD;AAAA,EAEA,gBAAyB;AACrB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,gBAAyB;AACrB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,YAAqB;AACjB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,iBAA0B;AACtB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,gBAAyB;AACrB,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAC7B,UAAM,aAAa,KAAK,QAAQ;AAChC,WAAO,WAAW,aAAa;AAAA,EACnC;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,aAAsB;AA/L1B;AAgMQ,aAAO,UAAK,QAAQ,EAAE,eAAf,mBAA2B,aAAY;AAAA,EAClD;AAAA,EAEA,cAAuB;AACnB,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAC7B,UAAM,aAAa,KAAK,QAAQ;AAChC,WAAO,WAAW,aAAa;AAAA,EACnC;AAAA,EAEA,aAAsB;AAClB,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAC7B,UAAM,aAAa,KAAK,QAAQ;AAChC,WAAO,WAAW,aAAa;AAAA,EACnC;AAAA,EAEA,iBAA0B;AAEtB,WAAO,KAAK,SAAS,KAAK,KAAK,QAAQ,EAAE,OAAO,QAAQ,OAAO;AAAA,EACnE;AAAA,EAEA,QAAiB;AACb,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,QAAgB;AAEZ,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,IAAI,YAAqB;AAjO7B;AAkOQ,WAAO,CAAC,GAAC,UAAK,QAAQ,EAAE,gBAAf,mBAA4B;AAAA,EACzC;AAAA,EAEA,YAAoB;AArOxB;AAsOQ,YAAO,gBAAK,QAAQ,EAAE,gBAAf,mBAA4B,WAA5B,YAAsC;AAAA,EACjD;AAAA,EAEA,sBAAqC;AAzOzC;AA0OQ,YAAO,gBAAK,QAAQ,EAAE,eAAf,mBAA2B,sBAA3B,YAAgD,EAAE,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG;AAAA,EACzF;AAAA,EAEA,YAAoB;AA7OxB;AA8OQ,aAAO,UAAK,QAAQ,EAAE,eAAf,mBAA2B,WAAU;AAAA,EAChD;AAAA,EAEA,gBAAwB;AAjP5B;AAkPQ,YAAO,sBAAK,QAAQ,MAAb,mBAAgB,UAAhB,mBAAuB,UAAvB,YAAgC;AAAA,EAC3C;AAAA,EAEA,mBAA8C;AAC1C,UAAM,EAAE,MAAM,aAAa,MAAM,KAAK,IAAI,KAAK,QAAQ,EAAE,SAAS,CAAC;AACnE,WAAO,EAAE,MAAM,sBAAQ,GAAG,aAAa,oCAAe,GAAG,MAAM,sBAAQ,GAAG,MAAM,sBAAQ,EAAE;AAAA,EAC9F;AAAA,EAEA,UAAkB;AACd,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,iBAAyB;AA9P7B;AA+PQ,YAAO,gBAAK,QAAQ,MAAb,mBAAgB,YAAhB,YAA2B;AAAA,EACtC;AAAA,EAEA,UAAoC;AAChC,WAAO,KAAK,QAAQ,EAAE;AAAA,EAC1B;AAAA,EAEA,UAAU;AACN,QAAI,CAAC,KAAK,SAAS;AAAG,aAAO;AAG7B,UAAM,SAAS;AAAA,MACX,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,YAAY;AAAA,MAChB;AAAA,MACA,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,YAAY;AAAA,MAChB;AAAA,MACA,iBAAiB;AAAA,QACb,OAAO,KAAK,UAAU;AAAA,QACtB,YAAY;AAAA,MAChB;AAAA,MACA,UAAU;AAAA,QACN,OAAO,KAAK,UAAU;AAAA,QACtB,YAAY;AAAA,MAChB;AAAA,IACJ;AAEA,QAAI,KAAK,YAAY,GAAG;AACpB,YAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,UAAI,MAAM;AACN,iBAAS,CAAC,KAAK,GAAG,KAAK,OAAO,QAAQ,IAAI,GAAG;AACzC,iBAAO,IAAI,KAAK,QAAQ,IAAI;AAC5B,iBAAO,IAAI,KAAK,aAAa;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,cAAkC;AA1StC;AA2SQ,aAAO,gBAAK,QAAQ,MAAb,mBAAgB,eAAhB,mBAA4B,aAAY;AAAA,EACnD;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,KAAK,SAAS;AAAA,EAC9B;AAAA,EAEA,YAAsC;AAClC,WAAO,KAAK,QAAQ,EAAE;AAAA,EAC1B;AAAA,EAEA,uBAA2C;AAtT/C;AAuTQ,YAAO,UAAK,QAAQ,EAAE,WAAf,mBAAuB;AAAA,EAClC;AAAA,EAEA,oBAAwC;AA1T5C;AA2TQ,YAAO,gBAAK,QAAQ,EAAE,WAAf,mBAAuB,UAAvB,mBAA8B;AAAA,EACzC;AAAA,EAEA,iBAAqC;AA9TzC;AA+TQ,YAAO,UAAK,QAAQ,EAAE,WAAf,mBAAuB;AAAA,EAClC;AAAA,EAEA,qBAAyC;AAlU7C;AAmUQ,YAAO,UAAK,QAAQ,EAAE,WAAf,mBAAuB;AAAA,EAClC;AAAA,EAEA,sBAA0C;AAtU9C;AAuUQ,YAAO,UAAK,QAAQ,EAAE,WAAf,mBAAuB;AAAA,EAClC;AAAA,EAEA,iBAAqC;AA1UzC;AA2UQ,YAAO,gBAAK,QAAQ,EAAE,WAAf,mBAAuB,UAAvB,mBAA8B;AAAA,EACzC;AAAA,EAEA,kBAAmC;AA9UvC;AA+UQ,aAAO,UAAK,QAAQ,EAAE,WAAf,mBAAuB,kBAAiB,CAAC;AAAA,EACpD;AAAA,EAEA,0BAA8C;AAlVlD;AAmVQ,SAAI,UAAK,QAAQ,EAAE,WAAf,mBAAuB;AAAM,aAAO;AACxC,WAAO;AAAA,EACX;AAAA,EAEA,WAAmB;AACf,WAAO,KAAK,QAAQ,EAAE,SAAS;AAAA,EACnC;AAAA,EAEA,UAAkB;AACd,WAAO,KAAK,QAAQ,EAAE,QAAQ;AAAA,EAClC;AAAA,EAEA,wBAAgC;AA/VpC;AAgWQ,QAAI,CAAC,KAAK,eAAe;AAAG,aAAO;AACnC,UAAM,QAAO,sBAAK,QAAQ,MAAb,mBAAgB,UAAhB,mBAAuB,GAAG,UAA1B,YAAmC;AAChD,WAAO,OAAO,IAAI;AAAA,EACtB;AAAA,EAEA,WAAmB;AArWvB;AAsWQ,QAAI,KAAK,cAAc,GAAG;AACtB,cAAO,gBAAK,QAAQ,EAAE,UAAf,mBAAsB,UAAtB,YAA+B;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAA0C;AACtC,QAAI,gBAAgB,KAAK,KAAK;AAC1B,aAAO,KAAK,KAAK,OAAO;AAAA,EAChC;AAAA,EAEA,WAAmE;AAC/D,QAAI,EAAE,WAAW,KAAK,KAAK;AAAS;AAEpC,QAAI,KAAK,KAAK,SAAS;AACnB,aAAO,KAAK,KAAK,OAAO;AAE5B,QAAI,KAAK,KAAK,SAAS;AACnB,aAAO,KAAK,KAAK,OAAO;AAE5B,QAAI,KAAK,KAAK,SAAS;AACnB,aAAO,KAAK,KAAK,OAAO;AAAA,EAChC;AAAA,EAEA,iBAA0B;AA9X9B;AA+XQ,aAAO,gBAAK,QAAQ,EAAE,WAAf,mBAAuB,YAAvB,mBAAgC,UAAS;AAAA,EACpD;AAAA,EAEA,UAAmB;AACf,WAAO,CAAC,CAAC,KAAK,QAAQ;AAAA,EAC1B;AAAA,EAEA,kBAAoC;AAEhC,WAAO,KAAK,QAAQ,EAAE;AAAA,EAC1B;AACJ;;;ACxYO,IAAM,cAAN,MAAkB;AAAA,EAUrB,OAAO,oBAAoB,cAA8B;AACrD,mBAAe,KAAK,IAAI,cAAc,GAAG,WAAW,OAAO,YAAY,GAAG;AAC1E,WAAO,KAAK,KAAK,IAAK,eAAe,CAAE;AAAA,EAC3C;AAAA,EAMA,OAAO,kBAAkB,YAA4B;AACjD,WAAO,KAAK,IAAI,YAAY,GAAG,WAAW,OAAO,YAAY,GAAG;AAAA,EACpE;AAAA,EAOA,OAAO,oBAAoB,YAA4B;AACnD,WAAO,KAAK,IAAI,aAAa,GAAG,GAAG,WAAW,OAAO,YAAY,GAAG;AAAA,EACxE;AAAA,EAMA,OAAO,sBAA8B;AACjC,WAAO,KAAK,IAAI,GAAG,YAAY,GAAG,MAAM,GAAG,YAAY,OAAO,KAAK,GAAG;AAAA,EAC1E;AAAA,EAOA,OAAO,uBAAuB,YAA4B;AACtD,WAAO,KAAK,IAAI,YAAY,GAAG,WAAW,OAAO,YAAY,GAAG;AAAA,EACpE;AAAA,EAMA,OAAO,kBAAkB,OAAwB;AAC7C,WAAO,SAAS,YAAY,cAAc,KAAK,SAAS,YAAY,cAAc,KAAK,QAAQ,MAAM;AAAA,EACzG;AAAA,EAEA,OAAO,gBAAwB;AAC3B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,gBAAwB;AAC3B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,mBAAmB,OAAuB;AAC7C,YAAQ,KAAK,IAAI,OAAO,YAAY,cAAc,CAAC;AACnD,WAAO,KAAK,IAAI,OAAO,YAAY,cAAc,CAAC;AAAA,EACtD;AAAA,EAMA,OAAO,2BAA2B,YAAsB;AACpD,WAAO,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,YAAU,SAAS,UAAU;AAAA,EACzD;AACJ;;;ACpDO,IAAM,UAAN,cAAsB,KAAK;AAAA,EAY9B,IAAI,QAAkB;AAGlB,QAAI,KAAK,OAAO;AAEZ,aAAO,KAAK,MAAM,GAAG,QAAQ,IAAI,YAAU,OAAO,MAAM;AAAA,IAC5D;AAIA,WAAO,KAAK,MAAM,GAAG,MAAM,IAAI,UAAQ,KAAK,IAAI;AAAA,EACpD;AAAA,EAEA,IAAI,QAAgB;AAChB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,IAAI,YAAoB;AACpB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,IAAI,QAAyB;AACzB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAGA,IAAI,eAAwB;AACxB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,MAAM,MAAsB;AACxB,WAAO,KAAK,MAAM;AAAA,MAAO,CAAC,SAAS,WAAW,WAAW,OAAO,UAAU,IAAI;AAAA,MACrD;AAAA,IAAC;AAAA,EAC9B;AAAA,EAGA,IAAI,OAAe;AACf,WAAO,KAAK,MAAM;AAAA,MAAO,CAAC,MAAM,WAAW,GAAG,IAAI,QAAQ,SAAS,MAAM,IAAI,OAAO,IAAI;AAAA,MAC/D;AAAA,IAAC;AAAA,EAC9B;AAAA,EAEA,IAAI,WAAmB;AACnB,WAAO,KAAK,MAAM;AAAA,MAAO,CAAC,UAAU,WAAW,GAAG,IAAI,OAAO,SAAS,MAAM,IAAI,WAAW,IAAI;AAAA,MACtE;AAAA,IAAC;AAAA,EAC9B;AAAA,EASA,IAAI,OAAe;AAEf,QAAI,KAAK,OAAO;AAEZ,aAAO,KAAK,KAAK,GAAG;AAAA,IACxB;AAIA,WAAO,KAAK,MAAM,GAAG,MAAM;AAAA,EAC/B;AAAA,EAKA,IAAI,aAAqB;AACrB,WAAO,KAAK,KAAK,GAAG,QAAQ;AAAA,EAChC;AAAA,EAEA,IAAI,WAAoB;AACpB,WAAO,KAAK,WAAW,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,EACnD;AAAA,EAEA,IAAI,QAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AACJ;;;AChHO,IAAM,MAAM;AAAA,EACf,WAAW;AAAA,IACP,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,cAAc;AAAA,IACd,SAAS;AAAA,IACT,eAAe;AAAA,IACf,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,MAAM;AAAA,IACN,WAAW;AAAA,IACX,cAAc;AAAA,IACd,SAAS;AAAA,IACT,SAAS;AAAA,IACT,KAAK;AAAA,IACL,OAAO;AAAA,IACP,cAAc;AAAA,IACd,QAAQ;AAAA,EACZ;AAAA,EAGA,YAAY;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,iBAAiB;AAAA,IACjB,MAAM;AAAA,IACN,SAAS;AAAA,IACT,UAAU;AAAA,IACV,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA,IACV,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW;AAAA,EACf;AAAA,EAKA,QAAQ;AAAA,IACJ,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,iBAAiB;AAAA,IACjB,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,OAAO;AAAA,EACX;AAAA,EAEA,cAAc;AAAA,IACV,SAAS;AAAA,IACT,OAAO;AAAA,IACP,WAAW;AAAA,EACf;AAAA,EAEA,aAAa;AAAA,IACT,UAAU;AAAA,IACV,MAAM;AAAA,IACN,QAAQ;AAAA,EACZ;AAAA,EAEA,cAAc;AAAA,IACV,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW;AAAA,EACf;AAAA,EAEA,iBAAiB;AAAA,IACb,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,cAAc;AAAA,EAClB;AAAA,EAEA,YAAY;AAAA,IACR,UAAU;AAAA,IACV,MAAM;AAAA,EACV;AAAA,EAEA,aAAa;AAAA,IACT,OAAO;AAAA,IACP,KAAK;AAAA,IACL,OAAO;AAAA,EACX;AAAA,EAEA,kBAAkB;AAAA,IACd,QAAQ;AAAA,IACR,UAAU;AAAA,EACd;AAAA,EAEA,qBAAqB;AAAA,IACjB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,MAAM;AAAA,EACV;AAAA,EAEA,oBAAoB;AAAA,IAChB,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EAEA,qBAAqB;AAAA,IACjB,gBAAgB;AAAA,IAChB,eAAe;AAAA,EACnB;AAAA,EAEA,gBAAgB;AAAA,IACZ,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,QAAQ;AAAA,EACZ;AAAA,EAEA,eAAe;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AAAA,EAEA,WAAW;AAAA,IACP,SAAS;AAAA,IACT,WAAW;AAAA,IACX,WAAW;AAAA,EACf;AAAA,EAEA,kBAAkB;AAAA,IACd,OAAO;AAAA,IACP,OAAO;AAAA,IACP,QAAQ;AAAA,EACZ;AAAA,EAEA,cAAc;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EAEA,cAAc;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,EACd;AAAA,EAEA,YAAY;AAAA,IACR,OAAO;AAAA,MACH,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,kBAAkB;AAAA,IACd,UAAU;AAAA,IACV,WAAW;AAAA,EACf;AAAA,EAEA,iBAAiB;AAAA,IACb,UAAU;AAAA,IACV,OAAO;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,EACV;AAAA,EAEA,0BAA0B;AAAA,IACtB,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,cAAc;AAAA,IACd,WAAW;AAAA,EACf;AAAA,EAEA,cAAc;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,cAAc;AAAA,IACd,cAAc;AAAA,IACd,eAAe;AAAA,IACf,UAAU;AAAA,IACV,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,UAAU;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,IACL,WAAW;AAAA,IACX,eAAe;AAAA,IACf,aAAa;AAAA,IACb,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,eAAe;AAAA,IACf,WAAW;AAAA,IACX,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,qBAAqB;AAAA,IACrB,cAAc;AAAA,IACd,WAAW;AAAA,IACX,WAAW;AAAA,IACX,aAAa;AAAA,IACb,aAAa;AAAA,IACb,sBAAsB;AAAA,IACtB,qBAAqB;AAAA,IACrB,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,SAAS;AAAA,IACT,SAAS;AAAA,IACT,eAAe;AAAA,IACf,WAAW;AAAA,IACX,UAAU;AAAA,IACV,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,aAAa;AAAA,IACb,oBAAoB;AAAA,IACpB,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,IACT,UAAU;AAAA,IACV,WAAW;AAAA,IACX,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,EAC1B;AAAA,EAEA,aAAa;AAAA,IACT,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,QAAQ;AAAA,EACZ;AAAA,EAGA,8BAA8B;AAAA,IAC1B,KAAK;AAAA,IACL,UAAU;AAAA,IACV,UAAU;AAAA,IACV,QAAQ;AAAA,EACZ;AAAA,EAEA,kBAAkB;AAAA,IACd,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,iBAAiB;AAAA,IACjB,UAAU;AAAA,EACd;AAAA,EAEA,sBAAsB;AAAA,IAClB,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,QAAQ;AAAA,EACZ;AAAA,EAGA,mBAAmB;AAAA,IACf,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AAAA,EAEA,aAAa;AAAA,IACT,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,OAAO;AAAA,IACP,KAAK;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,EACd;AAAA,EAEA,gBAAgB;AAAA,IACZ,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AAAA,EAEA,OAAO;AAAA,IACH,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,aAAa;AAAA,EACjB;AAAA,EAOA,gBAAgB;AAAA,IACZ,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,cAAc;AAAA,IACd,cAAc;AAAA,IACd,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,yBAAyB;AAAA,IACzB,iBAAiB;AAAA,IACjB,sBAAsB;AAAA,IACtB,mBAAmB;AAAA,IACnB,wBAAwB;AAAA,IACxB,mBAAmB;AAAA,IACnB,wBAAwB;AAAA,IACxB,cAAc;AAAA,IACd,WAAW;AAAA,IACX,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,KAAK;AAAA,IACL,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,IACrB,yBAAyB;AAAA,IACzB,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ;AAAA,EACZ;AAAA,EAWA,eAAe;AAAA,IACX,OAAO;AAAA,IACP,WAAW;AAAA,IACX,SAAS;AAAA,IACT,OAAO;AAAA,IACP,eAAe;AAAA,IACf,CAAC,wBAAwB;AAAA,IACzB,CAAC,6BAA6B;AAAA,IAC9B,CAAC,uBAAuB;AAAA,IACxB,CAAC,wBAAwB;AAAA,IACzB,kBAAkB;AAAA,IAClB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,kBAAkB;AAAA,IAClB,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,EACZ;AAAA,EAKA,2BAA2B;AAAA,IACvB,SAAS;AAAA,IACT,SAAS;AAAA,IACT,UAAU;AAAA,EACd;AAAA,EAKA,aAAa;AAAA,IACT,SAAS;AAAA,IACT,gBAAgB;AAAA,EACpB;AAAA,EASA,cAAc;AAAA,IACV,SAAS;AAAA,MACL,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EAQA,oBAAoB;AAAA,IAChB,SAAS;AAAA,MACL,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EAKA,eAAe;AAAA,IACX,oBAAoB;AAAA,EACxB;AAAA,EAGA,uBAAuB;AAAA,EAKvB,WAAW;AAAA,IACP,kBAAkB;AAAA,IAClB,iBAAiB;AAAA,EACrB;AAAA,EAEA,cAAc;AAAA,IACV,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,OAAO;AAAA,EACX;AAAA,EAEA,aAAa;AAAA,IAET,KAAK;AAAA,IACL,UAAU;AAAA,IACV,SAAS;AAAA,IACT,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,UAAU;AAAA,IACV,KAAK;AAAA,IACL,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IAGP,WAAW;AAAA,IACX,cAAc;AAAA,IACd,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,aAAa;AAAA,IAGb,OAAO;AAAA,IAGP,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IAGR,QAAQ;AAAA,IACR,eAAe;AAAA,IAGf,WAAW;AAAA,IACX,OAAO;AAAA,IACP,OAAO;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,OAAO;AAAA,EACX;AAAA,EAEA,cAAc;AAAA,IACV,YAAY;AAAA,MACV,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,UAAU;AAAA,MACV,cAAc;AAAA,MACd,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,qBAAqB;AAAA,IACvB;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,QAAQ;AAAA,MACJ,KAAK;AAAA,MACL,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,SAAS;AAAA,IACb;AAAA,IACA,WAAW;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,MACX,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,aAAa;AAAA,IACT,SAAS;AAAA,IACT,OAAO;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,EACb;AAAA,EAEA,SAAS;AAAA,IACL,OAAO;AAAA,MACH,KAAK;AAAA,MACL,WAAW;AAAA,MACX,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACH,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,OAAO;AAAA,MACP,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,OAAO;AAAA,MACP,QAAQ;AAAA,IACZ;AAAA,IACA,eAAe;AAAA,MACX,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,WAAW;AAAA,IACf;AAAA,IACA,cAAc;AAAA,MACV,OAAO;AAAA,MACP,UAAU;AAAA,IACd;AAAA,EACJ;AAAA,EAEA,IAAI;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,OAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,WAAW;AAAA,IACP,OAAO;AAAA,MACH,OAAO;AAAA,MACP,KAAK;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAYA,iBAAiB;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AAAA,EAEA,sBAAsB;AAAA,IAClB,eAAe;AAAA,IACf,aAAa;AAAA,IACb,cAAc;AAAA,IACd,aAAa;AAAA,EACjB;AAAA,EAQA,WAAW;AAAA,IACX;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IAEA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,IACA;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,MAAM;AAAA,IACV;AAAA,EACA;AACJ;;;ACtsBO,IAAM,aAAN,MAAiB;AAAA,EAQpB,OAAO,WAAW,QAAoB,OAAkB,MAA4B;AAEhF,aAAS,UAAU,MAAM;AAEzB,QAAI,CAAC;AAAO,aAAO;AAEnB,QAAI,MAAM;AACN,aAAO,SAAS,WAAW,cAAc,OAAO,IAAI;AAAA,IACxD;AAEA,UAAM,YAAY,MAAM,cAAc,OAAO,SAAS;AACtD,QAAI,CAAC;AAAW,aAAO;AAEvB,QAAI,CAAC,OAAO,uBAAuB;AAC/B,cAAQ,MAAM,8CAA8C,OAAO,qDAAqD;AACxH,aAAO,wBAAwB;AAAA,IACnC;AAGA,YAAQ,OAAO,uBAAuB;AAAA,MAClC,KAAK;AACD,kBAAU,cAAc,OAAO,KAAK,UAAU,OAAO,UAAU,KAAK;AACpE;AAAA,MACJ,KAAK;AACD,kBAAU,cAAc,OAAO,KAAK,UAAU,OAAO,CAAC,UAAU,KAAK;AACrE;AAAA,MACJ,KAAK;AACD,kBAAU,cAAc,OAAO,KAAK,aAAc,OAAO,OAAO,UAAU,QAAS,OAAO,IAAI;AAC9F;AAAA,MACJ,KAAK;AAED,kBAAU,cAAc,OAAO,KAAK,iBAAiB,OAAO,OAAO,EAAE;AAErE,cAAM,cAAc,UAAU,UAAU,IAAI,IAAI,UAAU;AAC1D,kBAAU,cAAc,OAAO,KAAK,aAAa,KAAK,MAAM,OAAO,OAAO,WAAW,CAAC;AACtF;AAAA,IACR;AAEA,WAAO,QAAQ,QAAQ,UAAU,QAAQ,EAAC,KAAK,EAAC,CAAC;AAEjD,WAAO;AAAA,EACX;AAAA,EAQA,OAAO,cAAc,OAAiB,MAA6B;AAC/D,WAAO;AAAA,MACH,SAAS,MAAM,MAAM;AAAA,MACrB,QAAQ,KAAK,MAAM;AAAA,MACnB,UAAU,KAAK,QAAQ;AAAA,MACvB,UAAU,KAAK;AAAA,IACnB;AAAA,EACJ;AAAA,EASA,OAAO,UAAU,QAA6B;AAC1C,QAAI,OAAO,SAAS;AAAG,aAAO;AAC9B,QAAI,OAAO;AAAW,aAAO;AAC7B,QAAI,OAAO;AAAM,aAAO;AACxB,QAAI,OAAO;AAAS,aAAO;AAE3B,WAAO;AAAA,EACX;AACJ;;;AC3DO,IAAM,cAAc;AAAA,EAUvB,UAAU,SAAS,SAA6D,EAAC,MAAM,GAAG,OAAO,GAAG,WAAW,EAAC,GAAG,SAAoC;AACnJ,UAAM,OAAO,YAAY,iBAAiB;AAC1C,SAAK,KAAK,OAAO,OAAO;AACxB,SAAK,UAAU,OAAO,OAAO,aAAa;AAC1C,SAAK,MAAM,OAAO,OAAO,SAAS;AAGlC,UAAM,iBAAiB,YAAY,cAAc,aAAa;AAC9D,WAAO,IAAI,eAAe,MAAM,QAAW,OAAO;AAAA,EACtD;AAAA,EAYA,UAAU,SAAe,MAAe,OAAkB,SAAiD;AAAA;AAEvG,UAAI,CAAC;AAAO,gBAAQ,KAAK;AACzB,UAAI,EAAE,iBAAiB,WAAW;AAC9B,gBAAQ,MAAM,uGAAuG;AACrH;AAAA,MACJ;AAEA,YAAM,SAAS,KAAK,UAAU;AAC9B,UAAI,CAAC;AAAQ;AAEb,UAAI,CAAC,OAAO,MAAM;AACd,eAAO,OAAO;AACd,gBAAQ,KAAK,wEAAwE,eAAe;AAAA,MACxG;AAGA,UAAI,CAAC,KAAK,YAAY,MAAM,eAAe,OAAO,IAAI,GAAG;AACrD,gBAAQ,MAAM,6CAA6C,OAAO,iBAAiB;AACnF;AAAA,MACJ;AAIA,YAAM,MAAM,YAAY,cAAc,OAAO,IAAI;AACjD,YAAM,OAAO,MAAM,YAAY,2BAA2B,KAAK,MAAM,KAAK;AAC1E,YAAM,YAAY,EAAC,MAAM,MAAK;AAC9B,aAAO,IAAI,IAAI,MAAM,WAAW,OAAO;AAAA,IAC3C;AAAA;AAAA,EASA,YAAY,SAAe,QAAwB,OAAiB,SAAyD;AAAA;AACzH,UAAI,CAAC,OAAO,MAAM;AACd,eAAO,OAAO;AACd,gBAAQ,KAAK,wEAAwE,eAAe;AAAA,MACxG;AAGA,UAAI,CAAC,KAAK,YAAY,MAAM,eAAe,OAAO,IAAI,GAAG;AACrD,gBAAQ,MAAM,6CAA6C,OAAO,iBAAiB;AACnF;AAAA,MACJ;AAIA,YAAM,MAAM,YAAY,cAAc,OAAO,IAAI;AACjD,YAAM,OAAO,MAAM,YAAY,2BAA2B,QAAQ,OAAO,YAAY,iBAAiB,CAAC;AACvG,YAAM,YAAY,EAAC,MAAK;AAExB,aAAO,IAAI,IAAI,MAAM,WAAW,OAAO;AAAA,IAC3C;AAAA;AAAA,EASA,gBAAgB,SAAe,UAAkB,YAAoB,OAAiB,SAAuD;AAAA;AACzI,YAAM,OAAO,MAAM,QAAQ,cAAc,UAAU,UAAU;AAC7D,UAAI,CAAC,MAAM;AACP,gBAAQ,MAAM,yBAAyB,oCAAoC,YAAY;AACvF;AAAA,MACJ;AAEA,aAAO,YAAY,SAAS,MAAM,OAAO,OAAO;AAAA,IACpD;AAAA;AAAA,EAMA,aAAa,SAAe,IAA8C;AAAA;AAjJ9E;AAkJQ,YAAM,WAAU,UAAK,aAAL,mBAAe,IAAI;AACnC,UAAI,CAAC,SAAS;AACV,gBAAQ,MAAM,iDAAiD,+BAA+B;AAC9F;AAAA,MACJ;AAGA,YAAM,WAAW,QAAQ,QAAQ,aAAa,MAAM,IAAI;AACxD,UAAI,CAAC;AAAU;AAGf,YAAM,WAAW,QAAQ,MAAM,UAAU,QAAQ;AACjD,UAAI,CAAC,UAAU;AACX,gBAAQ,MAAM,kCAAkC,0CAA0C;AAC1F;AAAA,MACJ;AAEA,YAAM,QAAQ,SAAS,MAAM,IAAI,UAAQ,QAAQ,SAAS,IAAW,CAAC;AACtE,YAAM,YAAY,EAAC,MAAK;AACxB,aAAO,YAAY,aAAa,SAAS,MAAM,WAAW,SAAS,KAAK,OAAO;AAAA,IACnF;AAAA;AAAA,EAWA,mBAAmB,SAAe,IAAY,aAAqB,SAAyD;AAAA;AAjLhI;AAkLQ,UAAI,CAAC,KAAK;AAAM;AAEhB,YAAM,WAAU,UAAK,aAAL,mBAAe,IAAI;AACnC,UAAI,CAAC,SAAS;AACV,gBAAQ,MAAM,iDAAiD,+BAA+B;AAC9F;AAAA,MACJ;AAGA,YAAM,WAAW,QAAQ,MAAM,UAAU,QAAQ,QAAQ,aAAa,MAAM,IAAI,CAAC;AACjF,UAAI,CAAC,YAAY,CAAC,SAAS,QAAQ,CAAC,SAAS,OAAO;AAChD,gBAAQ,MAAM,kCAAkC,gDAAgD;AAChG;AAAA,MACJ;AAGA,YAAM,YAAY,YAAY,cAAc,WAAW;AACvD,UAAI,CAAC,WAAW;AACZ,gBAAQ,MAAM,qEAAqE,aAAa;AAChG;AAAA,MACJ;AAIA,UAAI,SAAS,QAAQ,wBAAwB,IACzC,QAAQ,yBAAyB,IACjC,MAAM,QAAQ,oBAAoB,SAAS,IAAI;AAGnD,eAAS,OAAO,OAAO,WAAS,MAAM,OAAO;AAE7C,UAAI,OAAO,WAAW,KAAK,KAAK,KAAK;AAAW,eAAO,KAAK,KAAK,KAAK,SAAS;AAE/E,UAAI,OAAO,WAAW;AAClB,iBAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,mCAAmC;AAAA;AAE7E,gBAAQ,IAAI,6DAA6D,QAAQ,QAAQ;AAE7F,iBAAW,SAAS,QAAQ;AACxB,cAAM,OAAO,MAAM,UAAU,0BAA0B,SAAS,MAAM,OAAO,EAAE;AAC/E,YAAI,CAAC;AAAM;AAEX,cAAM,YAAY,EAAC,MAAK;AACxB,cAAM,OAAO,IAAI,UAAU,MAAM,WAAW,OAAO;AAGnD,cAAM,KAAK,QAAQ;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA,EAWA,cAAc,SAAS,MAAgB,WAA2B,SAAoC;AAClG,UAAM,OAAO,KAAK,QAAQ;AAE1B,UAAM,MAAM,YAAY,cAAc,IAAI;AAE1C,WAAO,IAAI,IAAI,MAAM,WAAW,OAAO;AAAA,EAC3C;AAAA,EAQA,2BAA2B,SAAe,SAAsB,SAAoD;AAAA;AA3PxH;AA6PQ,YAAM,cAAc,QAAQ,MAAM,UAAU,QAAQ,IAAI;AAExD,UAAI,GAAC,4DAAa,YAAb,mBAAsB,YAAtB,mBAA+B,WAA/B,mBAAuC;AAAM,eAAO,QAAQ,MAAM,mEAAmE,OAAO;AACjJ,UAAI,CAAC,QAAQ;AAAO,eAAO,QAAQ,MAAM,oBAAoB,QAAQ,qDAAqD;AAE1H,YAAM,gBAAgB,YAAY,cAAc,YAAY,QAAQ,QAAQ,OAAO,IAAI;AAGvF,YAAM,OAAO,MAAM,YAAY,0BAA0B,eAAe,aAAa,QAAQ,OAAO,QAAQ,KAAK,WAAW;AAC5H,YAAM,YAAY,EAAC,OAAO,QAAQ,MAAK;AAGvC,aAAO,IAAI,cAAc,MAAM,WAAW,OAAO;AAAA,IACrD;AAAA;AAAA,EASA,kBAAkB,SAAe,MAAmB,SAAqD;AAAA;AAnR7G;AAoRQ,UAAI,GAAC,8CAAM,SAAN,mBAAY,WAAZ,mBAAoB,aAApB,mBAA8B;AAAM;AACzC,UAAI,CAAC,KAAK;AAAM,eAAO,QAAQ,MAAM,4DAA4D;AACjG,UAAI,CAAC,KAAK;AAAO,eAAO,QAAQ,MAAM,6DAA6D;AAGnG,YAAM,UAAU,YAAY,cAAe,KAAK,KAAK,OAAO,SAAS,IAAI;AACzE,UAAI,CAAC;AAAS,eAAO,QAAQ,MAAM,oBAAoB,KAAK,YAAY,qDAAqD,IAAI;AAEjI,YAAM,OAAO,YAAY,iBAAiB;AAC1C,WAAK,QAAQ,QAAQ;AACrB,WAAK,oBAAoB,KAAK,KAAK;AACnC,WAAK,UAAU,KAAK;AAEpB,YAAM,SAAS,YAAY;AAAA,QACvB,cAAc,WAAW,EAAC,MAAM,QAAQ,KAAI,CAAC;AAAA,QAC7C,MAAM,QAAQ,uBAAuB,KAAK,MAAM,KAAK,KAAK;AAAA,QAC1D,QAAQ,sBAAsB;AAAA,MAAC;AAEnC,YAAM,WAAW,MAAM,QAAQ,uBAAuB,QAAQ,KAAK,OAAO,IAAI;AAC9E,eAAS,YAAY,KAAK;AAG1B,YAAM,YAAY,EAAC,MAAM,KAAK,MAAM,OAAO,KAAK,MAAK;AACrD,aAAO,IAAI,QAAQ,UAAU,WAAW,OAAO;AAAA,IACnD;AAAA;AAAA,EAKA,mBAAmB,WAAiB;AAAA;AAjTxC;AAmTQ,YAAM,gBAAgB,QAAO,UAAK,SAAL,mBAAW,QAAQ,aAAa,MAAM,oBAAoB,KAAK;AAE5F,YAAM,OAAO,YAAY,SAAS,EAAC,MAAM,cAAa,CAAC;AACvD,YAAM,KAAK,QAAQ;AAEnB,UAAI,KAAK,WAAW;AAEhB,eAAM,UAAK,SAAL,mBAAW,QAAQ,aAAa,MAAM,qBAAqB,KAAK,KAAK;AAAA,MAC/E;AAAA,IACJ;AAAA;AAAA,EASA,eAAe,SAAS,UAAmC;AAEvD,QAAI,CAAC,KAAK,YAAY,MAAM,eAAe,QAAQ,GAAG;AAClD,cAAQ,MAAM,6CAA6C,yCAAyC,KAAK,YAAY,KAAK;AAC1H;AAAA,IACJ;AACA,WAAO,KAAK,YAAY,MAAM;AAAA,EAClC;AAAA,EASA,4BAA4B,SAAe,SAAS,MAAe,OAAoC;AAAA;AAEnG,YAAM,OAAO,YAAY,iBAAiB;AAG1C,UAAI,SAAS,KAAK,UAAU;AAC5B,UAAI,CAAC,UAAU,CAAC;AAAO,eAAO;AAE9B,eAAS,YAAY;AAAA,QACjB;AAAA,QACA,MAAM,QAAQ,uBAAuB,MAAM,KAAK;AAAA,QAChD,QAAQ,sBAAsB;AAAA,MAAC;AAEnC,aAAO,MAAM,YAAY,2BAA2B,QAAQ,OAAO,IAAI;AAAA,IAC3E;AAAA;AAAA,EAUA,4BAA4B,SAAe,QAAwB,OAAiB,MAAM;AAAA;AA7W9F;AA+WQ,WAAK,SAAS;AAEd,YAAM,OAAO,IAAI,UAAkB,KAAK,KAAK,GAAG;AAGhD,UAAI,OAAO,OAAO;AAEd,cAAM,SAAQ,WAAM,SAAS,OAAO,KAAK,MAA3B,YAAgC,MAAM,SAAS,OAAO,OAAO,EAAC,SAAS,KAAI,CAAC;AAG1F,YAAI,SAAS,CAAC,UAAU,UAAU,KAAK;AAAG,mBAAG,kBAAH,mBAAkB,KAAK,mCAAmC,EAAC,UAAU,KAAI;AAKnH,YAAI;AAAO,eAAK,cAAc,MAAM,SAAS,MAAM,MAAM,WAAW,MAAM,KAAK,CAAC;AAEhF,YAAI,OAAO;AAAM,eAAK,cAAc,sBAAsB,WAAW,sBAAsB;AAAA,MAC/F;AAEA,UAAI,OAAO,WAAW;AAClB,cAAM,YAAY,MAAM,aAAa,OAAO,SAAS;AAErD,YAAI;AAAW,eAAK,QAAQ,UAAU,OAAO,UAAU,KAAK;AAE5D,YAAI,aAAa,MAAM,mBAAmB,OAAO,SAAS;AAAG,gBAAM,gBAAgB,MAAM,IAAI;AAAA,MACjG;AAEA,UAAI,CAAC,OAAO,SAAS,OAAO,YAAY;AACpC,cAAM,YAAY,MAAM,aAAa,OAAO,UAAU;AAEtD,YAAI;AAAW,eAAK,QAAQ,UAAU,OAAO,UAAU,KAAK;AAE5D,YAAI,aAAa,MAAM,mBAAmB,OAAO,UAAU;AAAG,gBAAM,gBAAgB,MAAM,IAAI;AAAA,MAClG;AAKA,UAAI,OAAO,KAAK;AACZ,aAAK,KAAK,OAAO,OAAO,OAAO,GAAG;AAAA,MACtC;AAIA,UAAG,OAAO,eAAe;AACrB,eAAO,cAAc,QAAQ,SAAO,UAAU,cAAc,KAAK,UAAU,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC;AAAA,MACxG;AAGA,UAAI,OAAO,OAAO;AACd,cAAM,QAAQ,MAAM,SAAS;AAC7B,aAAK,KAAK,MAAM,UAAU,cAAc,KAAK,KAAK,KAAI,aAAa,MAAM,KAAK;AAAA,MAClF;AAGA,UAAI,OAAO,MAAM,MAAM;AAGnB,aAAK,MAAM,OAAO,OAAO,OAAO,MAAM,IAAI;AAAA,MAC9C;AAEA,UAAI,OAAO,MAAM,KAAK;AAClB,eAAO,MAAM,IAAI,QAAQ,SAAO,UAAU,cAAc,KAAK,MAAM,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC;AAAA,MAChG;AAEA,UAAI,OAAO,MAAM,WAAW;AAGxB,cAAM,QAAQ,MAAM,SAAS,OAAO,MAAM,SAAS;AACnD,YAAI;AAAO,eAAK,MAAM,MAAM,UAAU,cAAc,KAAK,MAAM,KAAK,MAAM,OAAO,MAAM,KAAK;AAC5F,YAAI,SAAS,MAAM,mBAAmB,OAAO,MAAM,SAAS;AAAG,gBAAM,gBAAgB,MAAM,IAAI;AAAA,MACnG;AAGA,UAAI,OAAO,UAAU,MAAM;AACvB,aAAK,UAAU,OAAO,OAAO,OAAO,UAAU,IAAI;AAAA,MACtD;AAIA,UAAI,WAAW,UAAU,OAAO,MAAM,GAAG;AACrC,aAAK,SAAS,QAAQ,MAAM,UAAU,OAAO,MAAM;AAAA,MACvD;AAGA,UAAI,OAAO,QAAQ,MAAM;AACrB,aAAK,UAAU,OAAO;AAAA,MAC1B;AAIA,YAAM,YAAiD,CAAC;AACxD,iBAAW,YAAY,KAAK,OAAO,WAAW;AAE1C,YAAI,SAAS,SAAS,GAAG,GAAG;AAExB,gBAAM,WAAW,SAAS,MAAM,GAAG;AACnC,cAAI,SAAS,SAAS;AAAG,oBAAQ,MAAM,kFAAkF,UAAU,KAAK,MAAM;AAG9I,gBAAM,CAAC,UAAU,UAAU,IAAI;AAC/B,oBAAU,aAAY,eAAU,cAAV,YAAuB,CAAC;AAC9C,oBAAU,UAAU,KAAK,UAAU;AAAA,QAGvC,OAAO;AACH,oBAAU,aAAY,eAAU,cAAV,YAAuB,CAAC;AAAA,QAClD;AAAA,MACJ;AAGA,iBAAW,CAAC,UAAU,UAAU,KAAK,OAAO,QAAQ,SAAS,GAAG;AAE5D,cAAM,QAAQ,IAAI,cAAc;AAChC,cAAM,QAAQ,MAAM,MAAM,UAAU,SAAS,UAAU,EAAC,WAAU,CAAC;AACnE,aAAK,UAAU,MAAM,UAAU,cAAc,KAAK,UAAU,KAAK,OAAO,KAAK;AAAA,MACjF;AAIA,WAAK,WAAW,OAAO;AAEvB,aAAO;AAAA,IACX;AAAA;AAAA,EAaA,2BAA2B,SAAe,eAAe,aAA8B,OAAiB,mBAA4B;AAAA;AAChI,UAAI,CAAC,YAAY,QAAQ,QAAQ,OAAO,MAAM;AAC1C,gBAAQ,MAAM,yGAAyG,aAAa,IAAI;AACxI;AAAA,MACJ;AACA,UAAI,CAAC,OAAO;AACR,gBAAQ,MAAM,yEAAyE,aAAa;AAAA,MACxG;AAGA,YAAM,OAAO,YAAY,iBAAiB;AAC1C,WAAK,oBAAoB;AACzB,WAAK,YAAY;AAEjB,WAAK,mBAAmB,CAAC;AAGzB,UAAI,SAAS,cAAc,WAAW,mBAC/B,YAAY,QAAQ,QAAQ,OAClC;AAED,eAAS,YAAY;AAAA,QACjB;AAAA,QACA,cAAc,uBAAuB;AAAA,QACrC,cAAc,sBAAsB;AAAA,MACxC;AAGA,aAAO,MAAM,YAAY,2BAA2B,QAAQ,OAAO,IAAI;AAAA,IAC3E;AAAA;AAAA,EAKA,kBAAkB,WAAgB;AAC9B,WAAO;AAAA,MACH,MAAM,cAAc,UAAU,EAAC,OAAO,eAAc,CAAC;AAAA,MACrD,OAAO,cAAc,UAAU,EAAC,OAAO,YAAW,CAAC;AAAA,MACnD,WAAW,cAAc,UAAU,EAAC,OAAO,gBAAe,CAAC;AAAA,MAC3D,QAAQ,cAAc,WAAW;AAAA,MACjC,WAAW,cAAc,UAAU,EAAC,OAAO,8BAA6B,CAAC;AAAA,MACzE,QAAQ,CAAC;AAAA,MACT,QAAQ,cAAc,WAAW;AAAA,MACjC,SAAS,CAAC;AAAA,IACd;AAAA,EACJ;AAAA,EAiBA,gCAAgC,SAAS,iBAAiB,gBAA8D;AAEpH,UAAM,eAAe,QAAQ,MAAM,UAAU,YAAY;AAGzD,eAAW,iBAAiB,gBAAgB;AACxC,UAAI,OAAO,KAAK,aAAa,EAAE,WAAW;AAAG;AAI7C,iBAAW,OAAO,OAAO,KAAK,cAAc,kBAAkB,CAAC,GAAG;AAC9D,YAAI,YAAY,qBAAqB,cAAc,eAAe,GAAG;AAAG;AAExE,qBAAa,OAAO,cAAc;AAAA,MACtC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAaA,qBAAqB,QAAwB,eAA2C,KAAsB;AAC1G,QAAI,CAAC,cAAc,eAAe,GAAG;AAAG,aAAO;AAM/C,UAAM,eAAe,CAAC,SAAS,aAAa,cAAc,OAAO;AACjE,QAAI,aAAa,SAAS,GAAG,GAAG;AAC5B,YAAM,cAAc,aAAa,KAAK,gBAAc,YAAY,2BAA2B,QAAQ,UAAU,CAAC;AAC9G,aAAO;AAAA,IACX;AAGA,WAAO,YAAY,2BAA2B,QAAQ,GAAG;AAAA,EAC7D;AAAA,EAWA,2BAA2B,QAAwB,KAAsB;AACrE,QAAI,CAAC,OAAO,eAAe,GAAG;AAAG,aAAO;AAGxC,UAAM,QAAQ,OAAO;AACrB,UAAM,OAAO,QAAQ,MAAM,QAAQ,KAAK;AAIxC,QAAI,SAAS;AAAU,aAAO,MAAM,SAAS;AAG7C,QAAI,SAAS;AAAS,aAAO,MAAM,SAAS;AAE5C,QAAI,SAAS,aAAa,QAAQ;AAAS,aAAO,OAAO,SAAS;AAElE,WAAO;AAAA,EACX;AAAA,EAMA,iBAAiB,OAAqC;AAClD,QAAI,CAAC;AAAO,aAAO;AACnB,WAAO,MAAM,IAAI,MAAM,iBAAiB;AAAA,EAC5C;AAAA,EAMA,iBAAiB,OAAqC;AAClD,WAAO,CAAC,YAAY,iBAAiB,KAAK;AAAA,EAC9C;AAAA,EAMA,0BAA0B,OAAqC;AAC3D,QAAI,CAAC;AAAO,aAAO;AACnB,WAAO,MAAM,IAAI,MAAM,gBAAgB;AAAA,EAC3C;AACJ;;;AC/oBO,IAAM,WAAW;AAAA,EACpB,QAAQ,CAAC,QAAQ,QAAQ,UAAU;AAC/B,QAAI,OAAO,QAAQ;AACf,YAAM,kBAA4B,CAAC;AACnC,UAAI,OAAO,OAAO,OAAO;AACrB,wBAAgB,KAAK,QAAQ,MAAM,OAAO,OAAO,KAAK,CAAC;AACvD,wBAAgB,KAAK,QAAQ,MAAM,OAAO,OAAO,SAAS,CAAC;AAAA,MAC/D,WAAW,OAAO,OAAO,YAAY;AACjC,wBAAgB,KAAK,QAAQ,MAAM,OAAO,OAAO,SAAS,CAAC;AAC3D,wBAAgB,KAAK,QAAQ,MAAM,OAAO,OAAO,UAAU,CAAC;AAAA,MAChE,WAAW,OAAO,OAAO,WAAW;AAChC,wBAAgB,KAAK,QAAQ,MAAM,OAAO,OAAO,SAAS,CAAC;AAAA,MAC/D;AACA,UAAI,OAAO,OAAO,KAAK;AACnB,wBAAgB,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,MAAM,OAAO,OAAO,MAAM;AAAA,MACtF;AACA,UAAI,gBAAgB,QAAQ;AACxB,eAAO,OAAO,gBAAgB,KAAK,KAAK;AAAA,MAC5C;AAEA,UAAI,OAAO,OAAO,QAAQ,MAAM;AAC5B,cAAM,EAAE,QAAQ,IAAI,OAAO;AAC3B,YAAI,QAAQ,SAAS;AAAU,iBAAO,cAAc,OAAO,QAAQ,MAAM,QAAQ,IAAI;AAAA,iBAC5E,QAAQ;AAAO,iBAAO,cAAc,OAAO,QAAQ,MAAM,QAAQ,KAAK,KAAK,QAAQ,MAAM,QAAQ,SAAS;AAAA,iBAC1G,QAAQ;AAAY,iBAAO,cAAc,OAAO,QAAQ,MAAM,QAAQ,SAAS,KAAK,QAAQ,MAAM,QAAQ,UAAU;AAAA,iBACpH,QAAQ;AAAW,iBAAO,cAAc,OAAO,QAAQ,MAAM,QAAQ,SAAS;AAAA,MAC3F;AAKA,UAAI,OAAO,OAAO,SAAS,MAAM,OAAO,OAAO,SAAS,YAAY,OAAO,OAAO,SAAS,QAAQ;AAC/F,cAAM,KAAK,GAAG,QAAQ,MAAM,OAAO,OAAO,IAAI,UAAU;AAAA,MAC5D;AACA,UAAI,OAAO,OAAO,OAAO;AACrB,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,cAAM,YAAY,MAAM,YAAY,GAAG,KAAK,KAAK,SAAS,IAAI,OAAO,MAAM,UAAU,MAAM;AAC3F,cAAM,WAAW,MAAM,QAAQ,MAAM,QAAQ;AAC7C,YAAI,WAAW;AACf,YAAI,WAAW;AACX,sBAAY;AAAA,QAChB;AACA,YAAI,UAAU;AACV,cAAI,WAAW;AACX,wBAAY;AAAA,UAChB;AACA,sBAAY;AAAA,QAChB;AAEA,YAAI,UAAU;AACV,gBAAM,KAAK,SAAS,UAAU;AAAA,QAClC;AAAA,MACJ;AACA,UAAI,OAAO,OAAO,OAAO,KAAK,OAAO;AACjC,cAAM,EAAE,OAAO,IAAI,OAAO;AAC1B,YAAI,eAAe;AACnB,YAAI,gBAAgB;AACpB,cAAM,YAAY,OAAO,YAAY,GAAG,KAAK,KAAK,SAAS,IAAI,WAAW,OAAO,UAAU,SAAS;AACpG,YAAI,OAAO,SAAS,WAAW;AAC3B,gBAAM,OAAO,OAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,YAAY,EAAE,OAAO,CAAC,IAAI;AAC7E,yBAAe,MAAM,YAAY,OAAO,QAAQ;AAAA,QACpD;AACA,YAAI,OAAO,QAAQ,OAAO;AAEtB,cAAI,OAAO,OAAO;AACd,gBAAI,OAAO,QAAQ,UAAU,eAAe;AACxC,8BAAgB;AAAA,YACpB,OAAO;AACH,8BAAgB,QAAQ,MAAM,OAAO,QAAQ,KAAK;AAAA,YACtD;AAAA,UACJ,OAAO;AACH,4BAAgB,QAAQ,MAAM,OAAO,QAAQ,KAAK;AAAA,UACtD;AAAA,QACJ;AACA,YAAI;AAAc,gBAAM,KAAK,YAAY;AACzC,YAAI;AAAe,gBAAM,KAAK,aAAa;AAC3C,YAAI,OAAO,MAAM,OAAO,GAAG;AAAO,gBAAM,KAAK,MAAM,OAAO,GAAG,OAAO;AAAA,MACxE;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,KAAK,CAAC,QAAQ,QAAQ,UAAU;AAC5B,UAAM,KAAK,UAAU,OAAO,WAAW,QAAQ;AAC/C,WAAO,SAAS,QAAQ,CAAC,YAAY;AACjC,YAAM,KAAK,GAAG,QAAQ,SAAS,QAAQ,KAAK;AAAA,IAChD,CAAC;AAAA,EACL;AAAA,EAEA,SAAS,CAAC,QAAQ,QAAQ,UAAU;AAChC,UAAM,KAAK,OAAO,IAAI;AACtB,UAAM,KAAK,GAAG,KAAK,KAAK,SAAS,gBAAgB,KAAK,OAAO,YAAY;AACzE,UAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,OAAO,SAAS;AACnE,QAAI,OAAO,WAAW;AAClB,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,eAAe,GAAG;AAAA,IACvD;AACA,QAAI,OAAO,QAAQ;AACf,YAAM,KAAK,KAAK,KAAK,SAAS,YAAY,CAAC;AAAA,IAC/C;AAAA,EACJ;AAAA,EAEA,WAAW,CAAC,QAAQ,QAAQ,UAAU;AAClC,UAAM,KAAK,QAAQ,MAAM,OAAO,IAAI,CAAC;AACrC,QAAI,OAAO;AAAM,YAAM,KAAK,OAAI,OAAO,MAAM;AAC7C,QAAI,OAAO;AAAU,YAAM,KAAK,YAAY,OAAO,UAAU;AAC7D,QAAI,OAAO;AAAU,YAAM,KAAK,YAAY,OAAO,UAAU;AAC7D,QAAI,OAAO;AAAc,YAAM,KAAK,gBAAgB,OAAO,cAAc;AACzE,QAAI,OAAO;AAAQ,YAAM,KAAK,UAAU,OAAO,QAAQ;AAAA,EAC3D;AAAA,EAEA,aAAa,CAAC,QAAQ,QAAQ,UAAU;AACpC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,UAAM,KAAK,MAAM,OAAO,IAAI;AAC5B,UAAM,KAAK,QAAQ,MAAM,OAAO,IAAI,CAAC;AAAA,EACzC;AAAA,EAEA,OAAO,CAAC,QAAQ,QAAQ,UAAU;AAC9B,QAAI,OAAO,OAAO;AACd,UAAI,OAAO,MAAM;AAAO,cAAM,KAAK,SAAS,OAAO,MAAM,MAAM,MAAM,KAAK,OAAO,MAAM,OAAO;AAC9F,UAAI,OAAO,MAAM;AAAM,cAAM,KAAK,QAAQ,OAAO,MAAM,MAAM;AAC7D,UAAI,OAAO,MAAM;AAAM,cAAM,KAAK,QAAQ,OAAO,MAAM,MAAM;AAC7D,UAAI,OAAO,MAAM;AAAM,cAAM,KAAK,QAAQ,OAAO,MAAM,MAAM;AAC7D,UAAI,OAAO,MAAM;AAAa,cAAM,KAAK,eAAe,OAAO,MAAM,aAAa;AAClF,UAAI,OAAO,MAAM;AAAW,cAAM,KAAK,aAAa,OAAO,MAAM,WAAW;AAAA,IAChF;AAAA,EACJ;AAAA,EAEA,MAAM,CAAC,QAAQ,QAAQ,UAAU;AAC7B,QAAI,OAAO;AAAY,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,gBAAgB,KAAK,OAAO,YAAY;AAChG,QAAI,OAAO;AAAQ,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,iBAAiB,KAAK,OAAO,QAAQ;AACzF,QAAI,OAAO;AAAS,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,OAAO,SAAS;AACvF,QAAI,OAAO;AAAI,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,QAAQ,KAAK,OAAO,IAAI;AACxE,QAAI,OAAO,MAAM;AAAQ,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,iBAAiB,KAAK,OAAO,MAAM,SAAS;AACtG,QAAI,OAAO,MAAM;AAAS,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,OAAO,MAAM,WAAW;AAAA,EACzG;AAAA,EAEA,SAAS,CAAC,QAAQ,QAAQ,UAAU;AAChC,UAAM,KAAK,KAAK,KAAK,SAAS,IAAI,aAAa,OAAO,KAAK,CAAC;AAAA,EAChE;AAAA,EAEA,cAAc,CAAC,QAAQ,QAAQ,UAAU;AACrC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,UAAM,KAAK,QAAQ,MAAM,OAAO,MAAM,GAAG,QAAQ,MAAM,OAAO,QAAQ,CAAC;AACvE,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,OAAO;AAAG,YAAM,KAAK,UAAU,MAAM;AAAA,aAChC,OAAO;AAAG,YAAM,KAAK,SAAS,MAAM;AAAA;AACxC,YAAM,KAAK,QAAQ;AAAA,EAC5B;AAAA,EAEA,WAAW,CAAC,QAAQ,QAAQ,UAAU;AAClC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,aAAS,MAAM,QAAQ,QAAQ,KAAK;AACpC,QAAI,OAAO;AAAS,YAAM,KAAK,OAAO,OAAO,SAAS;AAAA,EAC1D;AAAA,EAEA,SAAS,CAAC,QAAQ,QAAQ,UAAU;AAChC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,aAAS,MAAM,QAAQ,QAAQ,KAAK;AACpC,QAAI,OAAO;AAAS,YAAM,KAAK,OAAO,OAAO,SAAS;AAAA,EAC1D;AAAA,EAEA,QAAQ,CAAC,QAAoB,QAAQ,UAAU;AAC3C,QAAI,OAAO,cAAc,OAAO,WAAW;AAAQ,YAAM,KAAK,UAAU,OAAO,WAAW,QAAQ;AAClG,QAAI,OAAO,aAAa,aAAa;AACjC,iBAAW,QAAQ,OAAO,OAAO,OAAO,IAAI,GAAG;AAC3C,cAAM,KAAK,GAAG,QAAQ,MAAM,KAAK,GAAG,KAAK,KAAK,OAAO;AAAA,MACzD;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW,CAAC,QAAQ,QAAQ,UAAU;AAClC,QAAI,OAAO,cAAc,OAAO,WAAW;AAAQ,YAAM,KAAK,UAAU,OAAO,WAAW,QAAQ;AAAA,EACtG;AAAA,EAEA,SAAS,CAAC,QAAQ,QAAQ,UAAU;AAChC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,UAAM,KAAK,QAAQ,MAAM,OAAO,IAAI,CAAC;AAAA,EACzC;AAAA,EAEA,cAAc,CAAC,QAAQ,QAAQ,UAAU;AAErC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AAAA,EACzC;AAAA,EAEA,eAAe,CAAC,QAAQ,QAAQ,UAAU;AAEtC,UAAM,KAAK,KAAK,KAAK,SAAS,IAAI,aAAa,MAAM,OAAO,UAAU,CAAC;AAEvE,UAAM,KAAK,KAAK,KAAK,SAAS,IAAI,aAAa,UAAU,OAAO,SAAS,CAAC;AAE1E,UAAM,KAAK,KAAK,KAAK,SAAS,IAAI,aAAa,OAAO,OAAO,MAAM,CAAC;AAGpE,aAAS,OAAO,QAAQ,QAAQ,KAAK;AAAA,EACzC;AAAA,EAGA,OAAO,CAAC,QAAQ,QAAQ,UAAU;AAE9B,UAAM,KAAK,QAAQ,MAAM,OAAO,QAAQ,GAAG,QAAQ,MAAM,OAAO,IAAI,CAAC;AAGrE,QAAI,OAAO,aAAa,UAAU;AAC9B,YAAM,KAAK,QAAQ,MAAM,OAAO,OAAO,IAAI,CAAC;AAAA,IAChD,WAAW,OAAO,aAAa,UAAU;AAAA,IACzC,WAAW,OAAO,aAAa,YAAY;AACvC,YAAM,KAAK,OAAO,SAAS,IAAI;AAC/B,YAAM,KAAK,OAAO,SAAS,KAAK;AAAA,IACpC,WAAW,OAAO,aAAa,gBAAgB;AAC3C,UAAI,OAAO,aAAa;AAAU,cAAM,KAAK,UAAU;AACvD,UAAI,OAAO,aAAa;AAAQ,cAAM,KAAK,QAAQ;AACnD,UAAI,OAAO,aAAa;AAAe,cAAM,KAAK,eAAe;AACjE,UAAI,OAAO,aAAa;AAAU,cAAM,KAAK,UAAU;AAAA,IAC3D,WAAW,OAAO,aAAa,aAAa;AACxC,YAAM,KAAK,OAAO,SAAS,IAAI;AAC/B,YAAM,KAAK,OAAO,SAAS,UAAU,YAAY,QAAQ;AACzD,UAAI,OAAO,SAAS;AAAU,cAAM,KAAK,UAAU;AAAA,IACvD;AAEA,UAAM,KAAK,QAAQ,MAAM,OAAO,KAAK,CAAC;AAGtC,aAAS,OAAO,QAAQ,QAAQ,KAAK;AAGrC,UAAM,KAAK,QAAQ,MAAM,OAAO,QAAQ,CAAC;AAGzC,UAAM,EAAE,MAAM,IAAI;AAClB,QAAI,QAAQ;AAAG,YAAM,KAAK,WAAW,OAAO;AAAA,aACnC,QAAQ;AAAG,YAAM,KAAK,UAAU,OAAO;AAAA;AAC3C,YAAM,KAAK,SAAS;AAEzB,WAAO,OAAO;AAAA,EAClB;AAAA,EAEA,QAAQ,CAAC,QAAQ,QAAQ,OAAO,SAAkB;AAtPtD;AAuPQ,aAAS,OAAO,QAAQ,QAAQ,KAAK;AACrC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,OAAO,MAAM;AACnB,UAAI,KAAK,SAAS,OAAO,GAAG;AACxB,cAAM,KAAK,KAAK,QAAQ,SAAS,UAAU;AAAA,MAC/C;AAAA,IACJ;AAEA,UAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAI,gBAAgB,OAAO,UAAQ,YAAO,KAAK,YAAZ,mBAAqB,MAAK;AACzD,UAAI,cAAc;AACd,cAAM,WAAW,aAAa;AAC9B,cAAM,EAAE,SAAS,YAAY,IAAI,OAAO;AACxC,YAAI,aAAa;AAAM,gBAAM,KAAK,GAAG,aAAa,SAAS,QAAQ,SAAS,QAAQ,MAAM;AAC1F,YAAI,SAAS,MAAM;AAAQ,gBAAM,KAAK,GAAG,KAAK,KAAK,SAAS,iBAAiB,KAAK,SAAS,MAAM,SAAS;AAC1G,YAAI,SAAS,MAAM;AAAS,gBAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,SAAS,MAAM,WAAW;AACzG,YAAI,eAAe,YAAY;AAAK,gBAAM,KAAK,GAAG,KAAK,KAAK,SAAS,gBAAgB,MAAM,YAAY,SAAS,YAAY,MAAM;AAAA,MACtI;AAAA,IACJ;AAEA,SAAI,kBAAO,eAAP,mBAAmB,YAAnB,mBAA4B,OAAO;AACnC,YAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,OAAO,WAAW,QAAQ,OAAO;AAAA,IACxF;AAEA,QAAI,OAAO,aAAa,SAAS;AAC7B,UAAI,OAAO,MAAM,IAAI;AACjB,YAAI,WAAW,GAAG,KAAK,KAAK,SAAS,wBAAwB,KAAK,OAAO,MAAM,GAAG;AAClF,YAAI,6BAAM,OAAO;AACb,sBAAY,KAAK,KAAK,KAAK,SAAS,WAAW,KAAK,KAAK,MAAM,sBAAsB;AAAA,QACzF;AACA,cAAM,KAAK,QAAQ;AAAA,MACvB;AACA,UAAI,OAAO,MAAM,OAAO;AACpB,cAAM,WAAqB,CAAC;AAC5B,cAAM,EAAE,MAAM,IAAI,OAAO;AACzB,YAAI,MAAM;AAAa,mBAAS,KAAK,+BAA+B;AACpE,YAAI,MAAM;AAAW,mBAAS,KAAK,6BAA6B;AAChE,YAAI,MAAM;AAAY,mBAAS,KAAK,8BAA8B;AAClE,YAAI,MAAM;AAAW,mBAAS,KAAK,6BAA6B;AAChE,cAAM,KAAK,SAAS,IAAI,CAAC,MAAM,KAAK,KAAK,SAAS,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC;AAAA,MACnE;AACA,UAAI,OAAO,MAAM;AAAQ,cAAM,KAAK,MAAM,KAAK,OAAO,OAAO,OAAO,MAAM,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC;AAAA,IAChG,WAAW,OAAO,aAAa,SAAS;AACpC,UAAI,OAAO,MAAM,OAAO;AACpB,cAAM,cAAc,GAAG,KAAK,KAAK,SAAS,WAAW,KAAK,OAAO,MAAM;AAEvE,cAAM,WAAW,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,UAAU,CAAC;AAC9D,YAAI,WAAW,IAAI;AACf,gBAAM,OAAO,WAAW,GAAG,GAAG,WAAW;AAAA,QAC7C,OAAO;AACH,gBAAM,KAAK,WAAW;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ,WAAW,OAAO,aAAa,UAAU;AACrC,YAAM,EAAE,MAAM,IAAI,OAAO;AACzB,UAAI,+BAAO;AAAQ,cAAM,KAAK,GAAG,KAAK,KAAK,SAAS,iBAAiB,KAAK,MAAM,SAAS;AACzF,UAAI,+BAAO;AAAS,cAAM,KAAK,GAAG,KAAK,KAAK,SAAS,aAAa,KAAK,MAAM,WAAW;AAExF,UAAI,OAAO,OAAO,QAAQ;AACtB,cAAM,OAAO,OAAO,OAAO,OAAO,cAAa,6BAAM,SAAQ,KAAK,MAAM,OAAO,WAAW,OAAO,OAAO,OAAO,WAAW,QAAQ;AAClI,cAAM,SAAS,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,QAAQ,OAAO,OAAO,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO;AAChI,cAAM,KAAK,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,GAAG,CAAC;AAAA,MACpD;AAAA,IACJ;AAEA,UAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAI,cAAc;AACd,mBAAa,QAAQ,CAAC,QAAQ;AAC1B,cAAM,KAAK,GAAG,IAAI,MAAM;AAAA,MAC5B,CAAC;AAAA,IACL;AAAA,EACJ;AACJ;;;ACpTO,IAAM,gBAAN,MAAoB;AAAA,EACvB,OAAO,eAAe,MAAM,MAAM,QAA4B;AAC1D,WAAO,EAAC,MAAM,MAAM,OAAM;AAAA,EAC9B;AAAA,EAEA,OAAa,KAAK,MAAM,MAAM;AAAA;AAC1B,UAAI,CAAC,KAAK;AAAQ;AAElB,YAAM,UAAU,cAAc,eAAe,MAAM,IAAI;AACvD,cAAQ,MAAM,4DAA4D,OAAO;AACjF,YAAM,KAAK,OAAO,KAAK,eAAe,OAAO;AAAA,IACjD;AAAA;AAAA,EAEA,OAAa,UAAU,MAAM,MAAM;AAAA;AAC/B,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAQ,CAAC,KAAK;AAAO;AAC/C,UAAI,KAAK,KAAK;AAAM,eAAO,QAAQ,MAAM,+CAA+C;AAExF,YAAM,SAAS,KAAK,MAAM,KAAK,UAAQ,KAAK,IAAI;AAChD,UAAI,CAAC;AAAQ,eAAO,QAAQ,MAAM,mEAAmE;AAErG,YAAM,UAAU,cAAc,eAAe,MAAM,MAAM,OAAO,EAAE;AAClE,cAAQ,MAAM,4DAA4D,OAAO;AACjF,YAAM,KAAK,OAAO,KAAK,eAAe,OAAO;AAAA,IACjD;AAAA;AACJ;;;AC5BO,IAAM,oBAAN,MAAwB;AAAA,EAM3B,OAAO,UAAU,QAAwC;AACrD,WAAO,OAAO;AAAA,EAClB;AAAA,EAOA,OAAO,YAAY,MAAiC;AAChD,QAAI,CAAC;AAAM;AAEX,QAAI,QAAQ,KAAK,MAAM,GAAG;AAC1B,QAAI;AAGJ,QAAI,MAAM,OAAO,cAAc;AAC3B,YAAM,MAAM;AACZ,YAAM,CAAC,OAAO,UAAU,EAAE,IAAI,MAAM,MAAM,GAAG,CAAC;AAC9C,cAAQ,MAAM,MAAM,CAAC;AACrB,YAAM,OAAO,KAAK,MAAM,IAAI,GAAG,SAAS,UAAU;AAClD,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,YAAY,EAAE;AAAA,IAC7B,OAGK;AACD,YAAM,CAAC,SAAS,KAAK,IAAI,MAAM,MAAM,GAAG,CAAC;AACzC,cAAQ,MAAM,MAAM,CAAC;AACrB,YAAM,aAAa,OAAO,SAAS,WAAW;AAC9C,YAAM,WAAW,IAAI,KAAK;AAAA,IAC9B;AAGA,WAAO,OAAQ,MAAM,SAAS,GAAI;AAC9B,YAAM,CAAC,cAAc,UAAU,IAAI,MAAM,MAAM,GAAG,CAAC;AACnD,YAAM,IAAI,oBAAoB,cAAc,UAAU;AACtD,cAAQ,MAAM,MAAM,CAAC;AAAA,IACzB;AACA,WAAO,OAAO;AAAA,EAClB;AAAA,EAEA,OAAa,sCAAsC,YAAqB,eAAwB;AAAA;AAC5F,YAAM,iBAAiB,kBAAkB,UAAU,UAAU;AAC7D,YAAM,oBAAoB,kBAAkB,UAAU,aAAa;AAEnE,YAAM,cAAc,UAAU,MAAM,sBAAsB,EAAC,gBAAgB,kBAAiB,CAAC;AAAA,IACjG;AAAA;AAAA,EAMA,OAAa,yCAAyC,SAAgD;AAAA;AAlE1G;AAmEQ,cAAQ,IAAI,+DAA+D,OAAO;AAClF,UAAI,GAAC,UAAK,SAAL,mBAAW;AAAM,eAAO,QAAQ,MAAM,qEAAqE,KAAK,IAAI;AAEzH,YAAM,aAAa,kBAAkB,YAAY,QAAQ,KAAK,cAAc;AAC5E,YAAM,SAAS,kBAAkB,YAAY,QAAQ,KAAK,iBAAiB;AAE3E,UAAI,CAAC,cAAc,CAAC;AAAQ,eAAO,QAAQ,MAAM,0EAA0E;AAE3H,YAAM,kBAAkB,0BAA0B,YAAY,MAAM;AAAA,IACxE;AAAA;AAAA,EAWA,OAAa,mBAAmB,YAAqB,QAAiB;AAAA;AAvF1E;AAwFQ,cAAQ,IAAI,oCAAoC,OAAO,0BAA0B,WAAW,QAAQ,YAAY,MAAM;AACtH,UAAI,WAAW,OAAO,OAAO;AAAI,eAAO,QAAQ,KAAK,4DAA4D;AACjH,YAAM,iBAAiB,OAAO,kBAAkB;AAChD,UAAI,CAAC;AAAgB,gBAAO,QAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,gDAAgD;AACvH,UAAI,CAAC,WAAW;AAAwB;AAExC,UAAI,kBAAkB,4BAA4B,UAAU,KAAK,kBAAkB,4BAA4B,MAAM;AACjH,cAAM,kBAAkB,0BAA0B,YAAY,MAAM;AAAA;AAEpE,cAAM,kBAAkB,sCAAsC,YAAY,MAAM;AAAA,IACxF;AAAA;AAAA,EAUA,OAAqB,0BAA0B,YAAqB,QAA+B;AAAA;AAC/F,UAAI,CAAC,kBAAkB,4BAA4B,UAAU,KAAK,CAAC,kBAAkB,4BAA4B,MAAM;AAAG,eAAO,QAAQ,MAAM,yCAAyC,UAAU;AAElM,YAAM,iBAAiB,WAAW,YAAY,WAAW;AACzD,UAAI,CAAC;AAAgB,eAAO,QAAQ,MAAM,qDAAqD,UAAU;AACzG,YAAM,iBAAiB,OAAO,kBAAkB;AAChD,UAAI,CAAC;AAAgB,eAAO,QAAQ,MAAM,qCAAqC;AAG/E,UAAI,eAAe;AAAmB,cAAM,kBAAkB,4BAA4B,MAAM;AAGhG,YAAM,iBAAiB,kBAAkB,UAAU,UAAU;AAC7D,YAAM,kBAAkB,uBAAuB,QAAQ,cAAc;AAGrE,YAAM,oBAAoB,kBAAkB,UAAU,MAAM;AAC5D,YAAM,iBAAiB,eAAe,OAAO;AAC7C,UAAI,eAAe,SAAS,iBAAiB;AAAG;AAEhD,aAAO,kBAAkB,wBAAwB,YAAY,CAAC,GAAG,gBAAgB,iBAAiB,CAAC;AAAA,IACvG;AAAA;AAAA,EAOA,OAAa,2BAA2B,QAA2B;AAAA;AAC/D,UAAI,CAAC;AAAQ;AAEb,cAAQ,IAAI,kCAAkC,OAAO,2BAA2B;AAEhF,YAAM,kBAAkB,4BAA4B,MAAM;AAC1D,YAAM,kBAAkB,4BAA4B,MAAM;AAAA,IAC9D;AAAA;AAAA,EAQA,OAAa,4BAA4B,YAAqB,YAAoB;AAAA;AAC9E,cAAQ,IAAI,4CAA4C,yBAAyB;AACjF,YAAM,iBAAiB,WAAW,aAAa;AAC/C,YAAM,SAAS,kBAAkB,YAAY,UAAU;AAGvD,UAAI,QAAQ;AACR,cAAM,iBAAiB,OAAO,kBAAkB;AAChD,YAAI;AAAgB,gBAAM,kBAAkB,4BAA4B,MAAM;AAAA,MAClF;AAGA,UAAI,CAAC;AAAgB;AACrB,YAAM,cAAc,eAAe,OAAO,eAAe,OAAO,kBAAgB,iBAAiB,UAAU;AAC3G,YAAM,kBAAkB,wBAAwB,YAAY,WAAW;AAAA,IAC3E;AAAA;AAAA,EASA,OAAa,4BAA4B,YAAqB;AAAA;AAC1D,cAAQ,IAAI,oDAAoD,WAAW,MAAM;AAEjF,YAAM,kBAAkB,gCAAgC,UAAU;AAClE,YAAM,kBAAkB,gCAAgC,UAAU;AAAA,IACtE;AAAA;AAAA,EAEA,OAAqB,uBAAuB,QAAiB,gBAAwB;AAAA;AACjF,UAAI,CAAC,OAAO;AAAoB,eAAO,QAAQ,MAAM,yDAAyD,MAAM;AACpH,YAAM,OAAO,OAAO,EAAC,qCAAqC,eAAc,CAAC;AAAA,IAC7E;AAAA;AAAA,EAOA,OAAqB,4BAA4B,QAAiB;AAAA;AAC9D,UAAI,CAAC,OAAO;AAAoB,eAAO,QAAQ,MAAM,yDAAyD,MAAM;AACpH,UAAI,CAAC,kBAAkB,4BAA4B,MAAM;AAAG;AAC5D,YAAM,OAAO,OAAO,EAAC,qCAAqC,GAAE,CAAC;AAAA,IACjE;AAAA;AAAA,EAEA,OAAqB,wBAAwB,YAAqB,aAAuB;AAAA;AACrF,UAAI,CAAC,WAAW;AAAwB,eAAO,QAAQ,MAAM,sDAAsD,UAAU;AAC7H,YAAM,WAAW,OAAO,EAAC,uBAAuB,YAAW,CAAC;AAAA,IAChE;AAAA;AAAA,EAEA,OAAqB,gCAAgC,YAAqB;AAAA;AACtE,UAAI,CAAC,WAAW;AAAwB,eAAO,QAAQ,MAAM,sDAAsD,UAAU;AAC7H,YAAM,WAAW,OAAO,EAAC,uBAAuB,CAAC,EAAC,CAAC;AAAA,IACvD;AAAA;AAAA,EAOA,OAAqB,4BAA4B,QAAgB;AAAA;AAC7D,UAAI,CAAC,OAAO;AAAoB,eAAO,QAAQ,MAAM,yDAAyD,MAAM;AACpH,YAAM,iBAAiB,OAAO,kBAAkB;AAChD,UAAI,CAAC;AAAgB;AAGrB,YAAM,aAAa,kBAAkB,YAAY,eAAe,iBAAiB;AACjF,UAAI,CAAC;AAAY;AACjB,UAAI,CAAC,kBAAkB,4BAA4B,UAAU;AAAG;AAEhE,YAAM,iBAAiB,WAAW,aAAa;AAC/C,UAAI,CAAC;AAAgB;AAGrB,YAAM,aAAa,kBAAkB,UAAU,MAAM;AACrD,YAAM,cAAc,eAAe,OAAO,eAAe,OAAO,kBAAgB,iBAAiB,UAAU;AAC3G,YAAM,kBAAkB,wBAAwB,YAAY,WAAW;AAAA,IAC3E;AAAA;AAAA,EAEA,OAAqB,gCAAgC,YAAqB;AAAA;AACtE,UAAI,CAAC,WAAW;AAAwB,eAAO,QAAQ,MAAM,sDAAsD,UAAU;AAC7H,YAAM,iBAAiB,WAAW,aAAa;AAC/C,UAAI,CAAC;AAAgB;AAErB,YAAM,iBAAiB,eAAe,OAAO;AAG7C,UAAI,gBAAgB;AAChB,cAAM,UAAU,eAAe,IAAI,gBAAc,kBAAkB,YAAY,UAAU,CAAC;AAC1F,mBAAW,UAAU,SAAS;AAC1B,cAAI,CAAC;AAAQ;AACb,gBAAM,kBAAkB,4BAA4B,MAAM;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAQA,OAAO,kBAAkB,YAAgC;AACrD,UAAM,UAAqB,CAAC;AAC5B,UAAM,iBAAiB,WAAW,aAAa;AAC/C,QAAI,CAAC;AAAgB,aAAO;AAE5B,mBAAe,OAAO,eAAe,QAAQ,UAAQ;AACjD,YAAM,SAAS,kBAAkB,YAAY,IAAI;AACjD,UAAI,CAAC;AAAQ,eAAO,QAAQ,KAAK,4BAA4B,WAAW,6BAA6B,iCAAiC;AACtI,cAAQ,KAAK,MAAM;AAAA,IACvB,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAUA,OAAa,mBAAmB,MAAe,MAA6B,IAAY;AAAA;AACpF,cAAQ,IAAI,uDAAuD,KAAK,QAAQ,IAAI;AAEpF,UAAI,KAAK;AAAwB,eAAO,MAAM,kBAAkB,gCAAgC,IAAI;AAEpG,UAAI,KAAK;AAAoB,eAAO,MAAM,kBAAkB,4BAA4B,IAAI;AAAA,IAChG;AAAA;AAAA,EAEA,OAAO,4BAA4B,QAA0B;AA7RjE;AA8RQ,aAAO,UAAK,SAAL,mBAAW,SAAQ,OAAO;AAAA,EACrC;AACJ;;;AC7RO,SAAS,oBAAoB,QAAkB;AAClD,WAAS,kBAAkB,MAAM;AACjC,WAAS,wBAAwB,MAAM;AAC3C;AAGO,IAAM,WAAN,MAAe;AAAA,EAClB,OAAO,kBAAkB,QAAkB;AAEvC,WAAO,WAAW;AAAA,EACtB;AAAA,EAMA,OAAO,wBAAwB,QAAkB;AAC7C,UAAM,uBAAuB,YAAY,2BAA2B,OAAO,MAAM;AACjF,WAAO,OAAO,OAAO,IAAI,EAAE,QAAQ,eAAa;AAC5C,gBAAU,QAAQ,qBAAqB,IAAI;AAE3C,gBAAU,WAAW;AAAA,IACzB,CAAC;AAAA,EACL;AACJ;;;ACbO,IAAM,YAAN,MAAgB;AAAA,EAQnB,OAAO,kBAAkB,WAA8B,OAAiB,YAAwB;AAC5F,QAAI,WAAW,KAAK,SAAS,UAAU;AACnC,gBAAU,8BAA8B,WAAW,OAAO,UAAU;AAAA,IACxE,OAAO;AACH,gBAAU,qBAAqB,WAAW,KAAK;AAAA,IACnD;AAAA,EACJ;AAAA,EAEA,OAAe,8BAA8B,WAA8B,OAAiB,YAAwB;AAEhH,UAAM,mBAAmB,QAAQ,iBAAiB,UAAU;AAC5D,QAAI,oBAAoB,iBAAiB,qBAAqB;AAC1D,aAAO,UAAU,4BAA4B,iBAAiB,MAAuB,WAAW,KAAK;AAAA,IACzG;AAEA,cAAU,uBAAuB,WAAW,KAAK;AAEjD,UAAM,QAAQ,MAAM,SAAS;AAC7B,cAAU,sBAAsB,WAAW,OAAO,UAAU;AAC5D,cAAU,oBAAoB,WAAW,OAAO,WAAW,QAAQ,IAAI;AAAA,EAC3E;AAAA,EAEA,OAAe,4BAA4B,WAA0B,WAA8B,OAAiB;AAChH,QAAI,UAAU,KAAK,SAAS,QAAQ;AAChC,gBAAU,cAAc,WAAW,MAAM,aAAa,WAAW,GAAG,IAAI,WAAW,SAAS;AAAA,IAChG,OAEK;AACD,gBAAU,cAAc,WAAW,MAAM,aAAa,MAAM,GAAG,IAAI,WAAW,IAAI;AAAA,IACtF;AAEA;AAAA,EACJ;AAAA,EAEA,OAAe,uBAAuB,WAA8B,OAAiB;AACjF,UAAM,OAAO,MAAM,cAAc,MAAM;AACvC,QAAI,MAAM;AACN,gBAAU,cAAc,KAAK,SAAS,YAAY,KAAK,KAAK;AAAA,IAChE;AAEA,UAAM,MAAM,MAAM,YAAY,MAAM;AACpC,QAAI,KAAK;AACL,gBAAU,cAAc,aAAa,GAAG;AAAA,IAC5C;AAEA,UAAM,eAAe,SAAS;AAAA,EAClC;AAAA,EAEA,OAAe,sBAAsB,WAA8B,OAAuB,YAAwB;AAtEtH;AAuEQ,UAAM,cAAa,WAAM,WAAW,QAAQ,WAAzB,YAAmC;AACtD,UAAM,aAAa,MAAM,QAAQ;AACjC,UAAM,KAAK,QAAQ,UAAU,WAAW,EAAE;AAE1C,cAAU,cAAc,UAAU,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC;AAAA,EAC/D;AAAA,EAEA,OAAe,oBAAoB,WAA8B,OAAuB,SAAiB;AA9E7G;AA+EQ,UAAM,cAAa,WAAM,aAAN,YAAkB;AACrC,QAAI,YAAY;AACZ,gBAAU,cAAc,IAAI,aAAa,UAAU,UAAU;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,OAAe,qBAAqB,WAA8B,OAAiB;AAC/E,UAAM,YAAY,MAAM;AAIxB,QAAI,UAAU,WAAW,eAAe,UAAU;AAC9C,UAAI,MAAM,UAAU,GAAE;AAElB,kBAAU,4BAA4B,WAAW,SAAS;AAAA,MAC9D,OACK;AACD,kBAAU,sBAAsB,WAAW,OAAO,SAAS;AAAA,MAC/D;AAAA,IACJ,OAEK;AACD,gBAAU,4BAA4B,WAAW,SAAS;AAAA,IAC9D;AAAA,EACJ;AAAA,EAEA,OAAe,sBAAsB,WAA8B,OAAiB,WAA+B;AAC/G,cAAU,cAAc,WAAW,MAAM,aAAa,WAAW,GAAG,IAAI,WAAW,SAAS;AAE5F,QAAI,CAAC,UAAU,QAAQ;AACnB;AAAA,IACJ;AAEA,cAAU,cAAc,WAAW,UAAU,OAAO,UAAU,IAAI,iBAAiB,QAAQ;AAAA,EAC/F;AAAA,EAEA,OAAe,4BAA4B,WAA+B,WAA8B;AACpG,QAAI,CAAC,UAAU,QAAQ;AACnB;AAAA,IACJ;AAEA,UAAM,eAAe,UAAU,OAAO;AACtC,QAAI,cAAc;AACd,gBAAU,cAAc,sCAAsC,YAAY;AAAA,IAC9E;AAEA,SAAK,cAAc,WAAW,UAAU,OAAO,UAAU,IAAI,iBAAiB,QAAQ;AAAA,EAC1F;AAAA,EAEA,OAAe,cAAc,WAA8B,iBAAmC,OAAgB;AAC1G,UAAM,aAAa,QAAQ,UAAU,eAAe;AACpD,cAAU,cAAc,OAAO,UAAU;AAAA,EAC7C;AAAA,EAaA,OAAO,aAAa,OAAiB,YAAwB,MAAkC;AAM3F,QAAI,WAAW,KAAK,UAAU,UAAU,MAAM,UAAU,GAAG;AACvD,aAAO,QAAQ,mBAAmB,YAAY,WAAW,OAAO,yBAAyB;AAAA,IAC7F;AAEA,WAAO,QAAQ,mBAAmB,YAAY,MAAM,cAAc;AAAA,EACtE;AAAA,EAQC,OAAO,6BAA6B,QAAoB,OAA8B;AACnF,UAAM,gBAAgB,UAAU,MAAM;AAEtC,QAAI,OAAO,KAAK,UAAU,YAAY;AAElC,UAAI,CAAC,MAAM,YAAY,KAAK,CAAC,MAAM,SAAS,KAAK,CAAC,MAAM,UAAU,KAAK,CAAC,MAAM,UAAU,GAAG;AACvF,eAAO;AAAA,MACX;AAEA,YAAM,gBAAgB,MAAM,iBAAiB,MAAM;AACnD,UAAI,eAAe;AACf,cAAM,4BAA4B,cAAc,QAAQ,OAAO;AAE/D,YAAI,2BAA2B;AAC3B,wBAAc,KAAK,QAAQ;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAQA,OAAO,iCAAiC,QAAoB,OAA8B;AACtF,UAAM,gBAAgB,UAAU,MAAM;AAEtC,QAAI,OAAO,KAAK,UAAU,UAAU;AAChC,YAAM,YAAY,MAAM;AAIxB,UAAI,CAAC,MAAM,YAAY,GAAG;AACtB,eAAO;AAAA,MACX;AAEA,UAAI,UAAU,WAAW,eAAe,UAAU;AAC9C,YAAI,UAAU,OAAO,SAAS;AAC1B,wBAAc,KAAK,QAAQ;AAAA,QAC/B,OACK;AACD,wBAAc,KAAK,QAAQ;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;;;AC9MO,IAAM,cAAN,MAAkB;AAAA,EACrB,OAAO,yBAAyB,QAA2B;AACvD,eAAW,SAAS,QAAQ;AACxB,UAAI,YAAY,yBAAyB,KAAK;AAAG,eAAO;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA,EAMA,OAAO,yBAAyB,OAAwB;AACpD,WAAO,YAAY,yBAAyB,KAAK,IAAI;AAAA,EACzD;AAAA,EAKA,OAAO,yBAAyB,OAAuB;AACnD,WAAO,KAAK,IAAI,QAAQ,GAAG,OAAO,+BAA+B,CAAC;AAAA,EACtE;AAAA,EAOA,OAAO,qBAAqB,OAAe,MAAsB;AAG7D,WAAO,KAAK,IAAI,OAAO,GAAG,CAAC;AAC3B,YAAQ,KAAK,IAAI,OAAO,CAAC;AAGzB,UAAM,eAAe,QAAQ,OAAO,GAAG,OAAO;AAC9C,WAAO,YAAY,wBAAwB,YAAY;AAAA,EAC3D;AAAA,EAQA,OAAO,wBAAwB,OAAuB;AAClD,WAAO,KAAK,IAAI,OAAO,CAAC;AAAA,EAC5B;AAAA,EAWA,OAAO,WAAW,cAAsB,cAA+B;AACnE,WAAO,eAAe;AAAA,EAC1B;AAAA,EAWA,OAAO,aAAa,cAAsB,cAA+B;AACrE,WAAO,iBAAiB;AAAA,EAC5B;AAAA,EAWA,OAAO,aAAa,cAAsB,cAA+B;AACrE,WAAO,CAAC,YAAY,WAAW,cAAc,YAAY;AAAA,EAC7D;AAAA,EAWA,OAAO,qBAAqB,UAAoB,cAAsB,cAAsB,QAAgC;AACxH,QAAI,WAAW,QAAQ,MAAM,UAAU,MAAM;AAG7C,QAAI,eAAe;AAAG,qBAAe;AACrC,QAAI,eAAe;AAAG,qBAAe;AAGrC,cAAU,cAAc,SAAS,KAAK,gBAAgB,YAAY;AAClE,cAAU,cAAc,SAAS,KAAK,gBAAgB,CAAC,YAAY;AACnE,aAAS,QAAQ,QAAQ,UAAU,UAAU,EAAC,KAAK,EAAC,CAAC;AAGrD,eAAW,YAAY,yBAAyB,UAAU,QAAQ;AAElE,WAAO;AAAA,EACX;AAAA,EASA,OAAO,+BAA+B,QAAgC;AAClE,WAAO,QAAQ,MAAM,UAAU,MAAM;AAAA,EACzC;AAAA,EAOA,OAAO,sBAAsB,QAAgC;AACzD,UAAM,iBAAiB,QAAQ,MAAM,UAAU,MAAM;AAGrD,mBAAe,WAAW,EAAC,MAAM,eAAe,OAAO,EAAC;AACxD,YAAQ,UAAU,gBAAgB,EAAC,KAAK,EAAC,CAAC;AAE1C,WAAO;AAAA,EACX;AAAA,EAUA,OAAO,wBAAwB,OAAiB,QAAoB,MAA0B;AAC1F,QAAI,OAAO;AAAG,aAAO;AAGrB,QAAI,EAAC,SAAQ,IAAI,UAAU,aAAa,OAAO,QAAQ,IAAI;AAE3D,YAAQ,UAAU,UAAU,EAAC,KAAK,EAAC,CAAC;AAEpC,WAAO;AAAA,EACX;AAAA,EASA,OAAO,oBAAoB,OAAmB,QAAgC;AAC1E,UAAM,gBAAgB,QAAQ,MAAM,UAAU,KAAK;AAGnD,QAAI,OAAO,GAAG,SAAS;AAAG,aAAO;AAEjC,YAAQ,MAAM,oFAAoF;AAClG,cAAU,cAAc,cAAc,KAAK,UAAU,OAAO,GAAG,KAAK;AACpE,kBAAc,QAAQ,QAAQ,UAAU,eAAe,EAAC,KAAK,EAAC,CAAC;AAE/D,WAAO;AAAA,EACX;AAAA,EAQC,OAAO,yBAAyB,QAAoB,OAA+B;AAGhF,QAAI,gBAAgB,UAAU,MAAM;AACpC,QAAI,MAAM,UAAU,KAAK,cAAc,QAAQ,UAAU,iBAAiB,cAAc,KAAK,UAAU,QAAQ;AAC3G,oBAAc,KAAK,QAAQ;AAAA,IAC/B;AAEA,UAAM,mBAAmB,QAAQ,iBAAiB,MAAM;AACxD,QAAI,oBAAoB,iBAAiB,qBAAqB;AAE1D,aAAO;AAAA,IACX;AAEA,oBAAgB,UAAU,6BAA6B,eAAe,KAAK;AAC3E,WAAO,UAAU,iCAAiC,eAAe,KAAK;AAAA,EAC1E;AACJ;;;ACpNO,IAAM,aAAN,MAAiB;AAAA,EAOpB,OAAO,qBAAqB,eAAuB,gBAAgC;AAC/E,WAAO,iBAAiB;AAAA,EAC5B;AACJ;;;ACOO,IAAM,aAAN,cAAyB,OAA0B;AAAA,EAYtD,YAAY,MAAsB,SAA6B;AAE3D,UAAM,MAAM,OAAO;AAEnB,UAAM,EAAC,cAAc,aAAY,IAAI;AACrC,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAErB,SAAK,gBAAgB,KAAK,gBAAgB,KAAK;AAE/C,SAAK,YAAY,KAAK,gBAAgB;AAEtC,SAAK,oBAAoB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtD,WAAK,oBAAoB;AAEzB,WAAK,mBAAmB;AAAA,IAC5B,CAAC;AAAA,EACL;AAAA,EAEM,QAAQ;AAAA;AACV,YAAM,uCAAM,cAAN,IAAY;AAElB,UAAI,KAAK,UAAU;AAEf,mBAAW,MAAM,KAAK,kBAAkB,KAAK,SAAS,GAAG,GAAG;AAAA,MAChE;AAAA,IACJ;AAAA;AAAA,EAEA,kBAAkB,MAAc;AAC5B,UAAM,kBAAkB,IAAI;AAE5B,SAAK,GAAG,UAAU,yBAAyB,KAAK,eAAe,KAAK,IAAI,CAAC;AAAA,EAC7E;AAAA,EAGM,OAAO,QAAQ;AAAA;AAhEzB;AAiEQ,WAAK,kBAAiB,YAAO,SAAP,YAAe,OAAO;AAE5C,WAAK,cAAc;AAEnB,6CAAM,eAAN,MAAa,MAAM;AAEnB,YAAM,KAAK,YAAY,YAAY,KAAK,UAAU,KAAK,UAAU,KAAK,QAAS,EAAE;AAAA,IACrF;AAAA;AAAA,EAEM,YAAY,MAAc;AAAA;AAE5B,WAAK,YAAY,MAAM,KAAK,cAAc,MAAM,KAAK,cAAc;AAGnE,iBAAW,MAAM,KAAK,kBAAkB,KAAK,SAAS,GAAG,GAAG;AAAA,IAChE;AAAA;AAAA,EAMA,gBAAgB;AAEZ,QAAI,CAAC,KAAK,QAAQ;AAA0B;AAE5C,QAAK,CAAC,KAAK;AAAO,YAAM,IAAI,MAAM,6DAA6D;AAC/F,UAAM,KAAK,IAAI,iBAAiB,KAAK,MAAM,EAAC,SAAS,CAAC,EAAC,CAAC;AAExD,UAAM,OAAO,GAAG;AAEhB,SAAK,YAAY,IAAI;AAAA,EACzB;AAAA,EAEA,YAAY,MAAM;AAEd,YAAQ,MAAM,YAAY,KAAK,KAAK,cAAc,IAAI;AAAA,EAC1D;AAAA,EAGA,UAAU;AAEN,SAAK,KAAK,UAAU,KAAK,KAAK,WAAW,KAAK;AAC9C,SAAK,sBAAsB,KAAK,KAAK,OAAO;AAG5C,UAAM,OAAO,MAAM,QAAQ;AAG3B,WAAO,YAAY,MAAM,iCAClB,KAAK,OADa;AAAA,MAErB,SAAS;AAAA,IACb,EAAC;AAAA,EACL;AAAA,EAMA,IAAI,UAAU;AACV,WAAO,CAAC;AAAA,EACZ;AAAA,EAMA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAEM,SAAuB;AAAA;AACzB,YAAM,KAAK,OAAO,IAAI;AAEtB,UAAI,KAAK,sBAAsB,UAAa,KAAK,cAAc,QAAW;AACtE,eAAO,KAAK,gBAAgB;AAAA,MAChC;AACA,aAAO,MAAM,KAAK;AAAA,IACtB;AAAA;AAAA,EAEA,kBAA0B;AACtB,WAAO,CAAC;AAAA,EACZ;AAAA,EAIA,IAAI,WAAoB;AACpB,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA,EAMA,IAAI,WAAoB;AACpB,WAAO,CAAC,KAAK,kBAAkB,KAAK,mBAAmB;AAAA,EAC3D;AAAA,EAGA,OAAO,aAAqC;AACxC,WAAO,CAAC;AAAA,EACZ;AAAA,EAIA,sBAAsB,SAAS;AAC3B,WAAO,KAAK,OAAO,EAAE,QAAQ,UAAQ,QAAQ,MAAM,OAAO,IAAI;AAAA,EAClE;AAAA,EAKM,aAAa,MAAoC;AAAA;AACnD,YAAM,eAAe,KAAK,gBAAgB,KAAK;AAC/C,UAAI;AACA,aAAK,UAAU,MAAM;AAAA,UAAe,KAAK,gBAAgB,KAAK;AAAA,UAC1B,KAAK,gBAAgB;AAAA,QAAI;AAEjE,YAAM,OAAO,MAAM,uCAAM,qBAAN,MAAmB,IAAI;AAC1C,WAAK,OAAO,KAAK,OAAO,CAAC,GAAG,OAAO,cAAc,eAAe,EAAE;AAClE,UAAK,CAAC,KAAK;AAAO,aAAK,OAAO,KAAK,KAAK,MAAM,EAAE;AAChD,aAAO;AAAA,IACX;AAAA;AAAA,EAKM,eAAe,OAAO;AAAA;AACxB,YAAM,KAAK,MAAM;AAEjB,UAAK,KAAK,QAAQ,0BAA2B;AACzC,aAAK,cAAc;AACnB,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ;AAAA;AAAA,EAKA,aAAa,MAA2B;AAAA,EAAC;AAC7C;;;ACxMO,IAAM,0BAAN,cAAsC,WAAW;AAAA,EAEpD,YAAY,QAAqB,QAAoB,SAAU;AAC3D,UAAM,aAAa,wBAAwB,cAAc,QAAQ,MAAM;AACvE,UAAM,YAAY,OAAO;AAAA,EAC7B;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AAEb,YAAQ,UAAU,CAAC,OAAO,aAAa;AACvC,YAAQ,YAAY;AACpB,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,cAAc,QAAqB,QAAoC;AAC1E,UAAM,QAAQ,KAAK,KAAK,SAAS,6BAA6B;AAC9D,UAAM,eAAe;AAGrB,UAAM,cAAoB,OAAO,IAAI,OAAK;AAAE,aAAO,EAAC,OAAM,EAAC;AAAA,IAAE,CAAC;AAC9D,UAAM,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,IACJ;AAEA,UAAM,UAAU;AAAA,MACZ,QAAQ;AAAA,QACJ,OAAO,KAAK,KAAK,SAAS,mCAAmC;AAAA,MACjE;AAAA,IACJ;AAEA,UAAM,eAAe,MAAM;AAE3B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACb;AAAA,EACJ;AACJ;;;ACzCO,IAAM,wBAAN,MAA4B;AAAA,EAQzB,eAAe,QAAoB,QAAqB;AAAA;AAE1D,YAAM,0BAA0B,MAAM,IAAI,wBAAwB,QAAQ,MAAM;AAChF,YAAM,wBAAwB,OAAO;AAErC,UAAI,wBAAwB,UAAU;AAClC;AAAA,MACJ;AAEA,aAAO,QAAQ,CAAC,UAAU;AACtB,aAAK,mBAAmB,OAAO,MAAM;AAAA,MACzC,CAAC;AAAA,IACL;AAAA;AAAA,EAMM,mBAAmB,OAAkB,QAAoB;AAAA;AAC3D,UAAI,OAAO,SAAS,GAAG;AACnB;AAAA,MACJ;AAIA,eAAS,KAAK,8BAA8B,OAAO,MAAM;AAIzD,UAAI,OAAO,KAAK,UAAU,UAAU;AAChC,iBAAS,MAAM,MAAM,gBAAgB,MAAM;AAAA,MAC/C;AAEA,UAAI,OAAO,KAAK,UAAU,QAAQ;AAC9B,iBAAS,MAAM,MAAM,cAAc,MAAM;AAAA,MAC7C;AAEA,UAAI,OAAO,KAAK,UAAU,YAAY;AAClC,cAAM,MAAM,kBAAkB,MAAM;AAAA,MACxC;AAAA,IAMJ;AAAA;AAAA,EAEQ,8BAA8B,OAAkB,QAAgC;AACpF,UAAM,gBAAgB,UAAU,MAAM;AACtC,QAAI,CAAC,MAAM,QAAQ,GAAG;AAClB,aAAO;AAAA,IACX;AAGA,QAAI,OAAO,KAAK,UAAU,QAAQ;AAC9B,oBAAc,KAAK,QAAQ;AAAA,IAC/B;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAwB,KAAkB,MAAM,MAAM;AACzD,SAAK,GAAG,SAAS,iBAAiB,WAAS,sBAAsB,6BAA6B,MAAM,KAAK,CAAC;AAAA,EAC9G;AAAA,EAQA,OAAa,6BAA6B,MAAM,OAAO;AAAA;AAvF3D;AAwFQ,YAAM,gBAAgB;AACtB,YAAM,eAAe;AACrB,YAAM,cAAc,EAAE,MAAM,aAAa;AAEzC,YAAM,QAAQ,OAAO,YAAY,KAAK,aAAa,CAAC;AACpD,YAAM,OAAO,OAAO,YAAY,KAAK,YAAY,CAAC;AAClD,YAAM,KAAK,OAAO,YAAY,KAAK,UAAU,CAAC;AAC9C,YAAM,UAAU,OAAO,YAAY,KAAK,eAAe,CAAC;AACxD,UAAI,SAAS,QAAQ,iBAAiB,OAAO,MAAM,IAAI,OAAO;AAE9D,UAAI,SAAS,QAAQ,6BAA6B;AAGlD,UAAI,OAAO,WAAW,GAAG;AACrB,cAAM,YAAY,KAAK,KAAK,WAAW;AAEvC,cAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AACpD,YAAI,CAAC;AAAM;AACX,cAAM,KAAK,kBAAkB;AAG7B,YAAI,KAAK;AAAY,eAAK,QAAQ,QAAQ,YAAU,OAAO,KAAK,OAAO,KAAiB,CAAC;AAAA;AAEpF,iBAAO,KAAK,KAAK,KAAiB;AAAA,MAC3C;AAGA,UAAI,OAAO,WAAW,GAAG;AACrB,iBAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,mCAAmC;AAC7E;AAAA,MACJ;AAEA,YAAM,IAAI,sBAAsB,EAAE,eAAe,QAAQ,MAAM;AAAA,IACnE;AAAA;AACJ;;;ACzGO,IAAM,aAAN,cAAyB,WAAW;AAAA,EAIvC,YAAY,MAAM,UAA8B,CAAC,GAAG;AAEhD,YAAQ,2BAA2B;AACnC,UAAM,MAAM,OAAO;AAAA,EACvB;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AAEb,YAAQ,UAAU,CAAC,OAAO,aAAa;AACvC,YAAQ,YAAY;AACpB,YAAQ,SAAS;AAEjB,YAAQ,QAAQ;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,kBAAkB,MAAc;AAC5B,UAAM,kBAAkB,IAAI;AAG5B,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,QAAQ,qBAAqB;AAAA,EACvE;AAAA,EAOA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAGA,UAAU;AAxDd;AAyDQ,UAAM,OAAO,MAAM,QAAQ;AAG3B,SAAK,YAAW,UAAK,KAAK,KAAK,YAAf,mBAAwB;AACxC,SAAK,YAAY,OAAO,KAAK;AAC7B,SAAK,UAAU;AAGf,SAAK,SAAS;AAEd,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,QAAQ;AACR,UAAM,OAAO,KAAK;AAClB,WAAO,KAAK,KAAK,SAAS,KAAK,KAAK,KAAK;AAAA,EAC7C;AAAA,EAKA,IAAI,UAAU;AACV,WAAO;AAAA,MACH,MAAM;AAAA,QACF,OAAO,KAAK,KAAK,SAAS,UAAU;AAAA,QACpC,MAAM;AAAA,MACV;AAAA,MACA,QAAQ;AAAA,QACJ,OAAO,KAAK,KAAK,SAAS,2BAA2B;AAAA,MACzD;AAAA,IACJ;AAAA,EACJ;AAAA,EAMA,aAAa,MAA4C;AACrD,WAAO,KAAK,KAAK,KAAK;AAAA,EAC1B;AAAA,EAQA,YAAY,MAAM;AAEd,QAAI,KAAK,mBAAmB;AAAU;AAGtC,WAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAG3C,YAAM,aAAa,QAAQ,MAAM,YAAY,KAAK,MAAM,GAAG;AAC3D,UAAI,QAAQ,MAAM,QAAQ,UAAU,MAAM,YAAY,CAAC,WAAW,eAAe,KAAK;AAAG;AAGzF,aAAO,KAAK;AAGZ,UAAI,WAAW,UAAU;AAAO;AAEhC,UAAI,UAAU,QAAQ,UAAU;AAC5B,eAAO,WAAW;AAAA;AAElB,mBAAW,WAAW,EAAC,MAAM,sBAAsB,OAAO,OAAO,KAAK,EAAC;AAAA,IAC/E,CAAC;AAID,YAAQ,MAAM,YAAY,KAAK,MAAM,IAAI;AAGzC,SAAK,KAAK,KAAK,kBAAkB;AACjC,SAAK,KAAK,KAAK,oBAAoB;AAAA,EACvC;AACJ;;;ACxIA,IAAqB,WAArB,cAAsC,iBAAiB;AAAA,EAMnD,OAAO,SAAS,MAAe,YAA+C;AARlF;AASQ,QAAI,CAAC,OAAO;AAAO;AAGnB,UAAM,gBAAgB;AAEtB,UAAM,eAAe;AAAA,MACjB,GAAG;AAAA,MACH,OAAM,UAAK,SAAL,mBAAW;AAAA,MACjB,WAAW;AAAA,MACX,GAAG;AAAA,MACH,GAAG;AAAA,MACH,YAAW,UAAK,SAAL,mBAAW;AAAA,IAC1B;AAGA,UAAM,QAAQ,KAAK,aAAa;AAEhC,iBAAa,eAAc,+BAAO,WAAU;AAC5C,iBAAa,cAAa,+BAAO,YAAW;AAE5C,UAAME,YAAW,IAAI,yBAAyB,cAAc,EAAC,QAAQ,OAAO,MAAK,CAAC;AAElF,UAAM,WAAW,IAAI,SAASA,SAAQ;AACtC,aAAS,OAAO;AAChB,aAAS,aAAa;AACtB,WAAO;AAAA,EACX;AAAA,EAEM,cAAc;AAAA;AAChB,UAAI,CAAC,OAAO,SAAS,CAAC,KAAK,MAAM;AAAS;AAE1C,YAAM,eAAe,OAAO;AAC5B,UAAI,CAAC;AAAc;AAEnB,YAAM,KAAK,KAAK;AAChB,WAAK,MAAM,SAAS;AACpB,WAAK,MAAM,QAAQ,SAAS,IAAI;AAChC,WAAK,yBAAyB,YAAY;AAAA,IAC9C;AAAA;AAAA,EAEA,yBAAyB,cAA2B;AAChD,QAAI,CAAC,OAAO,SAAS,CAAC,OAAO,SAAS,CAAC,OAAO;AAAK;AAEnD,UAAM,WAAW,CAAC;AAClB,QAAI,WAAW;AAGf,aAAS,QAAQ,CAAC,UAAU;AACxB,YAAM,gBAAgB;AACtB,UAAI,CAAC,OAAO;AAAM;AAClB,UAAI,MAAM,KAAK,IAAI;AACnB,UAAI,MAAM,YAAY;AAAI;AAC1B,YAAM,WAAW,MAAM,KAAK,iBAAiB,KAAK,KAAK;AACvD,YAAM,UAAU,OAAO,KAAK,mBAAmB,SAAS,GAAG,SAAS,GAAG,CAAC;AAExE,WAAK,SAAS,aAAa,EAAC,GAAG,QAAQ,GAAG,GAAG,QAAQ,EAAC,CAAC;AAGvD,WAAK,QAAQ;AACb,iBAAW;AAAA,IACf;AAGA,aAAS,QAAQ,MAAM;AACnB,UAAI,CAAC,OAAO,SAAS,CAAC,KAAK,MAAM,WAAW,CAAC,OAAO,SAAS,CAAC,OAAO;AAAK;AAE1E,WAAK,MAAM,QAAQ,eAAe;AAClC,aAAO,MAAM,IAAI,aAAa,SAAS,KAAK;AAC5C,aAAO,MAAM,IAAI,aAAa,SAAS,KAAK;AAC5C,aAAO,IAAI,KAAK,gBAAgB;AAChC,aAAO,IAAI,KAAK,UAAU;AAC1B,mBAAa,SAAS;AAEtB,UAAI,KAAK;AAAY,aAAK,WAAW;AAAA,IACzC;AAGA,aAAS,QAAQ,CAAC,UAAU;AAtFpC;AAwFY,eAAS,MAAM,KAAK;AAEpB,UAAI,CAAC,OAAO;AAAM;AAGlB,YAAM,UAAU,OAAO,KAAK,mBAAmB,KAAK,GAAG,KAAK,GAAG,CAAC;AAGhE,YAAM,eAAe,KAAK,SAAS,SAAS;AAC5C,mBAAa,IAAI,QAAQ;AACzB,mBAAa,IAAI,QAAQ;AAGzB,mBAAO,UAAP,mBAAc,wBAAwB,oBAAoB,CAAC,YAAY;AAAA,IAC3E;AAGA,aAAS,QAAQ,CAAC,UAAU;AACxB,UAAI,MAAM;AAAS,cAAM,eAAe;AACxC,YAAM,gBAAgB;AACtB,UAAI,CAAC,OAAO;AAAM;AAElB,UAAI,QAAQ,OAAO,KAAK,OAAO,MAAM,WAAW,SAAS,KAAK;AAC9D,UAAI,OAAO,MAAM,WAAW,QAAQ;AAGpC,YAAM,YAAY,KAAK,SAAS,YAAY,OAAO,KAAK,KAAK,MAAM,MAAM;AAEzE,WAAK,SAAS,aAAa,EAAC,UAAS,CAAC;AACtC,WAAK,QAAQ;AAAA,IACjB;AAGA,WAAO,MAAM,GAAG,aAAa,SAAS,KAAK;AAC3C,WAAO,MAAM,GAAG,aAAa,SAAS,KAAK;AAC3C,WAAO,IAAI,KAAK,gBAAgB,SAAS;AACzC,WAAO,IAAI,KAAK,UAAU,SAAS;AAAA,EACvC;AACJ;;;AC7HO,IAAM,YAAY;AAAA,EAKrB,uBAAuB;AAAA,EAOvB,0BAA0B,CAAC,UAAkB,MAAc;AACvD,WAAO,UAAU,UAAU;AAAA,EAC/B;AAAA,EASA,eAAe,CAAC,MAAc,WAAmB,iBAAkC;AAE/E,QAAI,YAAY;AACZ,aAAO,eAAe,aAAa,OAAO;AAE9C,WAAO,OAAO;AAAA,EAClB;AAAA,EAQA,SAAQ,CAAC,MAAc,cAA+B;AAElD,WAAO,KAAK,IAAI,MAAM,CAAC;AACvB,gBAAY,KAAK,IAAI,WAAW,CAAC;AAGjC,QAAI,YAAY;AAAG,aAAO,QAAQ;AAAA;AAC7B,aAAO,OAAO;AAAA,EACvB;AAAA,EASA,UAAU,CAAC,UAAkB,SAA0B;AAEnD,eAAW,KAAK,IAAI,UAAU,CAAC;AAC/B,WAAO,KAAK,IAAI,MAAM,CAAC;AAEvB,WAAO,WAAW,KAAK,MAAM,OAAO,CAAC;AAAA,EACzC;AAAA,EAQA,kBAAkB,CAAC,SAAkB,aAA+B;AAChE,WAAO,CAAC,WAAW;AAAA,EACvB;AACJ;;;ACgDO,IAAM,cAAN,MAAkB;AAAA,EAQrB,YAAY,MAAM,WAA2B,SAAuB;AAEhE,SAAK,QAAQ,uCAAW;AACxB,SAAK,OAAO,uCAAW;AACvB,SAAK,SAAQ,uCAAW,UAAS,CAAC;AAClC,SAAK,UAAU,CAAC;AAEhB,cAAU,WAAW,CAAC;AAEtB,SAAK,OAAO,KAAK,aAAa,MAAM,OAAO;AAE3C,SAAK,oBAAoB;AAEzB,YAAQ,IAAI,0BAA0B,KAAK,YAAY,aAAa,IAAI;AAAA,EAC5E;AAAA,EAUA,aAAa,MAAM,SAAsB;AAxJ7C;AAyJQ,SAAK,OAAO,KAAK,QAAQ,KAAK;AAI9B,SAAK,mBAAmB,KAAK,oBAAoB,QAAQ,eAAe,EAAE,IAAI,WAAM;AA7J5F,UAAAC;AA6J+F,cAAAA,MAAA,MAAM,UAAN,gBAAAA,IAAa;AAAA,KAAI,EAAE,OAAO,UAAQ,CAAC,CAAC,IAAI;AAG/H,SAAK,kBAAkB,KAAK,qBAAmB,UAAK,UAAL,mBAAY;AAC3D,SAAK,iBAAiB,KAAK,oBAAkB,UAAK,SAAL,mBAAW;AAGxD,SAAK,QAAQ,KAAK,SAAS,KAAK,YAAY;AAG5C,YAAQ,WAAW,QAAQ,aAAa,SAAY,QAAQ,WAAW,KAAK,SAAS,IAAI,WAAW,WAAW,QAAQ;AACvH,YAAQ,aAAa,QAAQ,eAAe,SAAY,QAAQ,aAAa;AAC7E,YAAQ,cAAc,QAAQ,gBAAgB,SAAY,QAAQ,cAAc;AAGhF,SAAK,UAAU;AAGf,SAAK,aAAY,UAAK,cAAL,YAAkB;AAEnC,SAAK,eAAe,KAAK,iBAAiB,SAAY,KAAK,eAAe;AAC1E,SAAK,eAAe,KAAK,iBAAiB,SAAY,KAAK,eAAe;AAG1E,SAAK,OAAO,KAAK,QAAQ,cAAc,UAAU,EAAC,OAAO,eAAc,CAAC;AACxE,SAAK,YAAY,KAAK,aAAa,cAAc,UAAU,EAAC,OAAO,gBAAe,CAAC;AACnF,SAAK,QAAQ,KAAK,SAAS,cAAc,UAAU,EAAC,OAAO,YAAW,CAAC;AAEvE,SAAK,SAAS,KAAK,UAAU,CAAC;AAI9B,SAAK,OAAO,OAAO,KAAK,OAAO,QAAQ,cAAc,UAAU,EAAC,OAAO,WAAU,CAAC;AAClF,SAAK,OAAO,eAAe,KAAK,OAAO,gBAAgB,cAAc,UAAU,EAAC,OAAO,mBAAkB,CAAC;AAC1G,SAAK,OAAO,UAAU,KAAK,OAAO,WAAW,cAAc,UAAU,EAAC,OAAO,cAAa,CAAC;AAC3F,SAAK,OAAO,WAAW,KAAK,OAAO,YAAY,cAAc,UAAU,EAAC,OAAO,eAAc,CAAC;AAE9F,SAAK,UAAU,KAAK,WAAW;AAC/B,SAAK,YAAY,KAAK,sBAAsB,KAAK,SAAS;AAE1D,SAAK,SAAS,KAAK,UAAU,cAAc,WAAW;AAEtD,WAAO;AAAA,EACX;AAAA,EAOA,sBAAsB,WAAwB;AAC1C,WAAO,aAAa,cAAc,UAAU,EAAC,OAAO,8BAA6B,CAAC;AAAA,EACtF;AAAA,EAEA,IAAI,OAAe;AACf,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,SAAS;AACL,WAAO;AAAA,MACH,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EAMA,WAAW,oBAA4B;AACnC,WAAO,KAAK,IAAI,GAAG,GAAG,IAAI,OAAO;AAAA,EACrC;AAAA,EAMA,WAAW,mBAA2B;AAClC,WAAO,KAAK,IAAI,GAAG,GAAG,IAAI,MAAM;AAAA,EACpC;AAAA,EAKA,OAAO,wBAAoD;AACvD,WAAO,CAAC;AAAA,EACZ;AAAA,EAWA,OAAa,uBAAuB,MAAe,OAAsD;AAAA;AACrG,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA,EAEA,OAAa,uBAAuB,QAAwB,OAAiB,MAAM;AAAA;AAC/E,aAAO,YAAY,2BAA2B,QAAQ,OAAO,IAAI;AAAA,IACrE;AAAA;AAAA,EAeA,OAAa,0BAA0B,UAAU,OAAiB,mBAAiE;AAAA;AAC/H,cAAQ,MAAM,gCAAgC,KAAK,8CAA8C;AACjG;AAAA,IACJ;AAAA;AAAA,EAEA,WAAW,QAAgB;AACvB,WAAO,aAAa,KAAK;AAAA,EAC7B;AAAA,EAKA,IAAI,eAAwB;AACxB,WAAO,KAAK,KAAK,UAAU,IAAI,SAAS;AAAA,EAC5C;AAAA,EASA,IAAI,UAAkB;AAClB,UAAM,OAAO,QAAQ,UAAU,KAAK,KAAK,MAAM,EAAC,KAAK,EAAC,CAAC;AACvD,WAAO,KAAK,aAAa,MAAM,KAAK,eAAe;AAAA,EACvD;AAAA,EAYA,aAAa,MAAc,SAA0B;AAEjD,UAAM,iBAAiB,UAAU,OAAO;AACxC,WAAO,IAAI,cAAc,YAAY,oBAAoB;AAAA,EAC7D;AAAA,EASA,IAAI,OAAe;AAEf,QAAI,OAAO,KAAK,KAAK,IAAI,OAAO,SAAO,IAAI,UAAU,CAAC,EAAE,IAAI,SAAO,GAAG,KAAK,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,OAAO;AAIjH,QAAI,YAAY,KAAK,UAAU,WACzB,CAAC,KAAK,KAAK,SAAS,KAAK,UAAU,SAAS,IAAI,CAAC,IACjD,KAAK,UAAU,IAAI,IAAI,SAAO,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC;AAChE,QAAI,QAAQ,KAAK,MAAM,WACjB,CAAC,KAAK,KAAK,SAAS,KAAK,MAAM,SAAS,IAAI,CAAC,IAC7C,KAAK,MAAM,IAAI,IAAI,SAAO,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC;AAI5D,QAAI,KAAK,KAAK,OAAO;AAAG,WAAK,KAAK,OAAO,KAAK,KAAK,IAAI,CAAC;AACxD,QAAI,KAAK,UAAU,OAAO,KAAK,CAAC,KAAK,UAAU;AAAU,gBAAU,KAAK,OAAO,KAAK,UAAU,IAAI,CAAC;AACnG,QAAI,KAAK,MAAM,OAAO,KAAK,CAAC,KAAK,MAAM;AAAU,YAAM,KAAK,OAAO,KAAK,MAAM,IAAI,CAAC;AAGnF,QAAI,OAAO,KAAK,KAAK,KAAK,EAAE,KAAK,KAAK,GAAG,KAAK,KAAK;AAGnD,QAAI,UAAU,SAAS,KAAK,KAAK,UAAU,QAAQ;AAAG,aAAO,GAAG,SAAS,UAAU,KAAK,KAAK,EAAE,KAAK;AACpG,QAAI,MAAM,SAAS,KAAK,KAAK,MAAM,QAAQ;AAAG,aAAO,GAAG,SAAS,MAAM,KAAK,KAAK,EAAE,KAAK;AAExF,WAAO;AAAA,EACX;AAAA,EAOA,IAAI,UAAmB;AACnB,WAAO,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK,UAAU,IAAI,SAAS,KAAK,KAAK,MAAM,IAAI,SAAS;AAAA,EAChG;AAAA,EAKA,IAAI,QAAgB;AAEhB,WAAO,GAAG,KAAK,KAAK,SAAS,KAAK,YAAY,KAAK;AAAA,EACvD;AAAA,EAKA,aAAsB;AAGlB,UAAM,OAAO,IAAI,QAAQ,KAAK,OAAO;AACrC,SAAK,MAAM,KAAK,IAAI;AACpB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAQA,oBAAoB;AAChB,WAAO,IAAI,WAAW,EAAC,MAAM,MAAM,cAAc,KAAK,gBAAe,CAAC;AAAA,EAC1E;AAAA,EAKA,aAAa;AACT,QAAI,CAAC,KAAK,KAAK;AAAS,WAAK,KAAK,UAAU,CAAC;AAC7C,SAAK,KAAK,QAAQ,aAAa;AAAA,EACnC;AAAA,EAKM,aAA+B;AAAA;AAhazC;AAiaQ,UAAI,GAAC,UAAK,KAAK,YAAV,mBAAmB;AAAY,eAAO;AAE3C,YAAM,SAAS,KAAK,kBAAkB;AAEtC,YAAM,OAAO,MAAM,OAAO,OAAO;AACjC,UAAI,OAAO;AAAU,eAAO;AAG5B,WAAK,OAAO;AACZ,YAAM,KAAK,6BAA6B;AAGxC,WAAK,kBAAkB;AACvB,WAAK,oBAAoB;AAEzB,aAAO;AAAA,IACX;AAAA;AAAA,EAMM,+BAA+B;AAAA;AAAA,IAAC;AAAA;AAAA,EAOtC,kBAAkB;AAAA,EAAC;AAAA,EAKnB,oBAAoB;AAChB,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAQA,qBAAqB;AACjB,UAAM,OAAO,IAAI,UAAU,KAAK,KAAK,GAAG;AAGxC,SAAK,WAAW,6BAA6B;AAG7C,QAAI,KAAK,KAAK,UAAU,UAAU;AAE9B,iBAAW,YAAY,KAAK,KAAK,UAAU,KAAK;AAC5C,aAAK,WAAW,SAAS,IAAI;AAAA,MACjC;AAEA,WAAK,cAAc,+BAA+B,KAAK,KAAK,UAAU,SAAS,KAAK;AACpF;AAAA,IACJ;AAGA,eAAW,YAAY,KAAK,KAAK,UAAU,KAAK;AAE5C,WAAK,cAAc,SAAS,MAAM,SAAS,KAAK;AAAA,IACpD;AAAA,EACJ;AAAA,EAKA,sBAAsB;AAClB,SAAK,KAAK,UAAU,QAAQ,QAAQ,UAAU,KAAK,KAAK,SAAS;AAEjE,SAAK,KAAK,KAAK,QAAQ,QAAQ,UAAU,KAAK,KAAK,MAAM,EAAC,KAAK,EAAC,CAAC;AACjE,SAAK,KAAK,UAAU,QAAQ,QAAQ,UAAU,KAAK,KAAK,WAAW,EAAC,KAAK,EAAC,CAAC;AAC3E,SAAK,KAAK,MAAM,QAAQ,QAAQ,UAAU,KAAK,KAAK,OAAO,EAAC,KAAK,EAAC,CAAC;AAEnE,YAAQ,MAAM,6CAA6C,KAAK,YAAY,QAAQ,KAAK,IAAI;AAAA,EACjG;AAAA,EAKM,WAA0B;AAAA;AAE5B,iBAAW,QAAQ,KAAK,OAAO;AAE3B,YAAI,CAAC,KAAK;AACN,gBAAM,KAAK,SAAS,EAAC,OAAO,KAAI,CAAC;AAAA,MACzC;AAEA,WAAK,KAAK,YAAY;AACtB,WAAK,uBAAuB;AAE5B,aAAO;AAAA,IACX;AAAA;AAAA,EAKM,gBAAgB;AAAA;AAAA,IAAC;AAAA;AAAA,EAMjB,oBAAoB;AAAA;AAEtB,UAAI,CAAC,KAAK,SAAS,KAAK,KAAK,iBAAiB;AAE1C,cAAMC,aAAW,MAAM,SAAS,KAAK,KAAK,eAAe,MAAK;AAE9D,aAAK,QAAQA,qBAAoB,gBAC7BA,UAAS,QACTA;AAAA,MACR;AACA,UAAI,CAAC,KAAK,QAAQ,KAAK,KAAK;AACxB,aAAK,QAAO,MAAM,SAAS,KAAK,KAAK,cAAc,MAAgB;AACvE,UAAI,KAAK,QAAQ,WAAW,KAAK,KAAK,KAAK,kBAAkB;AACzD,aAAK,UAAU,CAAC;AAChB,mBAAW,QAAQ,KAAK,KAAK,kBAAkB;AAC3C,gBAAMA,YAAW,MAAM,SAAS,IAAI;AACpC,cAAI,CAACA;AAAU;AAEf,gBAAM,QAAQA,qBAAoB,WAAWA,UAAS,SAAS,IAAIA;AACnE,cAAI,EAAE,iBAAiB;AAAgB;AAEvC,eAAK,QAAQ,KAAK,KAAsB;AAAA,QAC5C;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAKM,sBAAsB;AAAA;AAExB,WAAK,KAAK,SAAS,WAAW,WAAW,KAAK,KAAK,QAAQ,KAAK,OAAO,KAAK,IAAI;AAAA,IACpF;AAAA;AAAA,EAOA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,QAAQ;AAAA,EAC9B;AAAA,EAOM,2BAA4B;AAAA;AAC9B,YAAM,KAAK,sBAAsB;AACjC,YAAM,KAAK,qBAAqB;AAAA,IACpC;AAAA;AAAA,EAKM,wBAAwB;AAAA;AAC1B,UAAI,CAAC,KAAK;AAAO;AAEjB,UAAI,KAAK,KAAK,OAAO,UAAU,SAAS;AAAG;AAE3C,iBAAW,QAAQ,KAAK,eAAe;AACnC,cAAM,EAAC,MAAM,MAAK,IAAI,MAAM,KAAK,qBAAqB,KAAK,OAAO,IAAI;AACtE,kBAAU,cAAc,KAAK,KAAK,UAAU,KAAK,MAAM,OAAO,IAAI;AAAA,MACtE;AAAA,IACJ;AAAA;AAAA,EAUM,qBAAqB,OAAiB,MAA6D;AAAA;AACrG,YAAM,QAAQ,MAAM,MAAM,UAAU,SAAS,IAAI;AACjD,YAAM,OAAO,KAAK,sBAAsB,IAAI;AAE5C,aAAO,EAAC,MAAM,MAAK;AAAA,IACvB;AAAA;AAAA,EAEA,sBAAsB,MAA6B;AAC/C,WAAO,IAAI,cAAc;AAAA,EAC7B;AAAA,EAKM,uBAAuB;AAAA;AAAA,IAAC;AAAA;AAAA,EAK9B,yBAAyB;AAErB,SAAK,KAAK,OAAO,OAAO,KAAK,cAAc;AAC3C,SAAK,KAAK,OAAO,eAAe,KAAK,sBAAsB;AAC3D,SAAK,KAAK,OAAO,UAAU,KAAK,iBAAiB;AACjD,SAAK,KAAK,OAAO,WAAW,KAAK,kBAAkB;AAEnD,YAAQ,MAAM,gDAAgD,KAAK,YAAY,QAAQ,KAAK,IAAI;AAAA,EACpG;AAAA,EAKA,IAAI,OAAmB;AACnB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAKA,IAAI,QAAoB;AACpB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAOA,IAAI,WAAoB;AACpB,UAAM,aAAa,KAAK,SAAS,IAAI,aAAa,MAAM,WAAW;AACnE,WAAO,cAAc,CAAC,KAAK,mBAAmB,KAAK,MAAM,QAAQ;AAAA,EACrE;AAAA,EAOA,IAAI,iBAA0B;AAC1B,WAAO,KAAK,KAAK,QAAQ,KAAK,MAAM;AAAA,EACxC;AAAA,EAKA,IAAI,YAAwB;AACxB,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAKA,IAAI,eAAwB;AACxB,WAAO,KAAK,UAAU,QAAQ;AAAA,EAClC;AAAA,EAKA,mBAA+B;AAE3B,UAAM,OAAO,KAAK,WAAW,KAAK,eAAe,KAAK;AAGtD,UAAM,OAAO,KAAK,eACd,KAAK,IAAI,KAAK,QAAQ,KAAK,UAAU,OAAO,CAAC,IAC7C,KAAK;AAGT,UAAM,UAAU,cAAc,UAAU;AAAA,MACpC,OAAO;AAAA,MACP;AAAA,IACJ,CAAC;AACD,YAAQ,QAAQ,QAAQ,UAAU,SAAS,EAAC,KAAK,EAAC,CAAC;AAEnD,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,UAAsB;AACtB,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EAKA,gBAA4B;AACxB,UAAM,WAAW,KAAK,MAAM,OAAO,CAACC,OAAM,SAASA,QAAO,KAAK,MAAM,CAAC;AACtE,UAAM,OAAO,cAAc,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,MAAM,KAAK,WACP,KAAK,IAAI,KAAK,MAAM,OAAO,QAAQ,IACnC;AAAA,IACR,CAAC;AACD,SAAK,QAAQ,QAAQ,UAAU,MAAM,EAAC,KAAK,EAAC,CAAC;AAE7C,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,OAAmB;AACnB,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EAEA,IAAI,eAA2B;AAE3B,WAAO,KAAK,KAAK,OAAO,gBAAgB,cAAc,UAAU,EAAC,OAAO,mBAAkB,CAAC;AAAA,EAC/F;AAAA,EAKA,oBAAgC;AAC5B,UAAM,eAAe,KAAK,MAAM,OAAO,CAACC,WAAU,SAASA,YAAW,KAAK,UAAU,CAAC;AACtF,UAAM,WAAW,cAAc,UAAU;AAAA,MACrC,OAAO;AAAA,MACP,MAAM;AAAA,IACV,CAAC;AACD,aAAS,QAAQ,QAAQ,UAAU,UAAU,EAAC,KAAK,EAAC,CAAC;AAErD,WAAO;AAAA,EACX;AAAA,EAKA,wBAAoC;AAChC,QAAI,CAAC,KAAK;AAAU,aAAO,cAAc,UAAU,EAAC,OAAO,mBAAkB,CAAC;AAE9E,UAAM,eAAe,KAAK;AAC1B,iBAAa,MAAM,UAAU,QAAQ,aAAa,KAAK,YAAY,KAAK,KAAK,KAAK;AAElF,YAAQ,UAAU,cAAc,EAAC,KAAK,EAAC,CAAC;AAExC,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,WAAoB;AACpB,WAAO,KAAK,iBAAiB,KAAK,KAAK;AAAA,EAC3C;AAAA,EAOA,IAAI,gBAAyB;AACzB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,WAAuB;AACvB,WAAO,KAAK,KAAK,OAAO;AAAA,EAC5B;AAAA,EAKA,IAAI,WAAoB;AACpB,WAAO,UAAU,SAAS,KAAK,SAAS,OAAO,KAAK,KAAK,KAAK;AAAA,EAClE;AAAA,EAKA,IAAI,mBAA4B;AAC5B,WAAO,UAAU,iBAAiB,KAAK,SAAS,KAAK,QAAQ;AAAA,EACjE;AAAA,EAOA,IAAI,UAAmB;AAEnB,UAAM,OAAO,KAAK,WAAW,KAAK,eAAe,KAAK;AACtD,WAAO,UAAU,QAAQ,KAAK,OAAO,KAAK,UAAU,KAAK;AAAA,EAC7D;AAAA,EAOA,IAAI,UAAmB;AAEnB,QAAI,KAAK,YAAY,KAAK,UAAU,UAAU;AAAG,aAAO;AAExD,QAAI,KAAK,aAAa,QAAQ,KAAK,KAAK,UAAU,QAAQ;AAAG,aAAO,KAAK,aAAa,QAAQ,KAAK,UAAU;AAE7G,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA,EAKA,IAAI,aAAsB;AAEtB,QAAI,CAAC,KAAK;AAAU,aAAO;AAG3B,WAAO,KAAK,YAAY,KAAK;AAAA,EACjC;AAAA,EAKA,IAAI,UAAmB;AACnB,WAAO;AAAA,EACX;AAAA,EAUA,IAAI,mBAA4B;AAC5B,WAAO,KAAK,WAAW,KAAK;AAAA,EAChC;AAAA,EAKA,IAAI,eAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,eAAuB;AACvB,QAAI,KAAK;AAAU,aAAO;AAC1B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,UAAmB;AACnB,WAAO,CAAC,CAAC,KAAK,KAAK,WAAW,KAAK,KAAK,QAAQ,SAAS;AAAA,EAC7D;AAAA,EAKA,IAAI,WAAoB;AACpB,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,UAAsC;AACtC,QAAI,CAAC,KAAK;AAAM;AAChB,WAAO,KAAK,KAAK,gBAAgB;AAAA,EACrC;AAAA,EAKA,IAAI,aAAsB;AACtB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAOA,IAAI,YAAqB;AAErB,WAAO,CAAC,QAAQ,MAAM,QAAQ,KAAK,KAAK,MAAM;AAAA,EAClD;AAAA,EAMA,IAAI,cAAsB;AACtB,UAAM,WAAW,KAAK,KAAK;AAC3B,UAAM,gBAAgB,KAAK,eAAe,IAAI,KAAK,UAAU,WAAW;AACxE,UAAM,YAAY,KAAK,WAAW,IAAI,KAAK,MAAM,WAAW;AAC5D,WAAO,GAAG,YAAY,iBAAiB;AAAA,EAC3C;AAAA,EAEA,IAAI,kBAA2B;AAC3B,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EAEA,IAAI,kBAA2B;AAC3B,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EASA,IAAI,kBAA2B;AA55BnC;AA65BQ,QAAI,CAAC,KAAK,WAAW;AACjB,cAAQ,MAAM,gFAAgF;AAC9F,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,UAAU;AACf,eAAG,kBAAH,mBAAkB,KAAK,wCAAwC,EAAC,UAAU,KAAI;AAC9E,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,mBAAmB,KAAK,iBAAiB;AAC9C,eAAG,kBAAH,mBAAkB,KAAK,8CAA8C,EAAC,UAAU,KAAI;AACpF,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EASA,IAAI,kBAA2B;AAt7BnC;AAu7BQ,QAAI,KAAK,mBAAmB,KAAK,iBAAiB;AAC9C,eAAG,kBAAH,mBAAkB,KAAK,8CAA8C,EAAC,UAAU,KAAI;AACpF,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AAAA,EAUA,oBAAoB;AAChB,QAAI,CAAC,KAAK;AAAO;AAEjB,UAAM,QAAQ,IAAI,UAAU,KAAK,KAAK,GAAG;AAGzC,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,WAAW,kBAAkB;AACnC;AAAA,IACJ;AAIA,UAAM,OAAO,KAAK,MAAM,QAAQ,EAAE;AAClC,UAAM,cAAc,oBAAoB,MAAM,IAAI;AAGlD,QAAI,CAAC,KAAK;AAAW;AAGrB,UAAM,cAAc;AACpB,UAAM,UAAU,KAAK,aAAa,MAAM,WAAW;AACnD,UAAM,OAAO,IAAI,QAAQ,OAAO;AAChC,SAAK,MAAM,KAAK,IAAI;AAAA,EACxB;AAAA,EAOA,oBAAoB;AAt+BxB;AAu+BQ,QAAI,CAAC,KAAK;AAAO;AAEjB,UAAM,QAAQ,IAAI,UAAU,KAAK,KAAK,GAAG;AAGzC,QAAI,CAAC,KAAK,iBAAiB;AACvB,YAAM,WAAW,kBAAkB;AACnC;AAAA,IACJ;AAKA,UAAM,WAAW,KAAK,MAAM,KAAK,MAAM,SAAS;AAChD,UAAM,OAAO,SAAS,aAAa,SAAS;AAC5C,QAAI,QAAQ,GAAG;AACX,eAAG,kBAAH,mBAAkB,KAAK,gDAAgD,EAAC,UAAU,KAAI;AACtF,aAAO;AAAA,IACX;AAIA,UAAM,cAAc,oBAAoB,MAAM,IAAI;AAGlD,UAAM,UAAU,GAAG;AACnB,UAAM,OAAO,IAAI,QAAQ,OAAO;AAChC,SAAK,MAAM,KAAK,IAAI;AAAA,EACxB;AAAA,EASA,+BAAwC;AA5gC5C;AA8gCQ,QAAI,CAAC,KAAK;AAAO,aAAO;AAGxB,QAAI,KAAK,mBAAmB,KAAK,iBAAiB;AAC9C,UAAI,KAAK,MAAM,QAAQ,EAAE,QAAQ,GAAG;AAChC,iBAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,2BAA2B;AACtE,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAOM,4BAA8C;AAAA;AAChD,UAAI,CAAC,KAAK;AAAO,eAAO;AAGxB,UAAI,KAAK,mBAAmB,KAAK,iBAAiB;AAC9C,cAAM,KAAK,MAAM,QAAQ;AAAA,MAC7B;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAOM,qCAAuD;AAAA;AACzD,YAAM,oBAAoB,KAAK,SAAS,IAAI,aAAa,MAAM,wBAAwB;AAEvF,UAAI,mBAAmB;AACnB,YAAI,CAAC,KAAK,6BAA6B;AAAG,iBAAO;AAAA,MACrD;AAEA,aAAO,MAAM,KAAK,0BAA0B;AAAA,IAChD;AAAA;AAAA,EAiBM,UAAyB;AAAA;AAC3B,YAAM,KAAK,cAAc;AACzB,YAAM,KAAK,kBAAkB;AAC7B,YAAM,KAAK,yBAAyB;AACpC,YAAM,KAAK,oBAAoB;AAE/B,WAAK,gBAAgB;AAGrB,WAAK,kBAAkB;AACvB,WAAK,oBAAoB;AAGzB,YAAM,gBAAgB,MAAM,KAAK,WAAW;AAC5C,UAAI,CAAC;AAAe,eAAO;AAG3B,YAAM,yBAAyB,MAAM,KAAK,mCAAmC;AAC7E,UAAI,CAAC;AAAwB,eAAO;AAEpC,WAAK,WAAW;AAEhB,YAAM,KAAK,SAAS;AACpB,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,kBAAkB;AAE7B,aAAO;AAAA,IACX;AAAA;AAAA,EAKO,0BAAyC;AAAA;AA1mCpD;AA2mCQ,cAAQ,MAAM,kBAAkB,KAAK,YAAY,qCAAqC;AAEtF,UAAI,CAAC,KAAK,KAAK,iBAAiB;AAC5B,iBAAG,kBAAH,mBAAkB,KAAK,4DAA4D,EAAC,UAAU,KAAI;AAClG,eAAO;AAAA,MACX;AAAC;AACD,UAAI,CAAC,KAAK;AAAkB,eAAO;AAGnC,YAAM,KAAK,kBAAkB;AAG7B,WAAK,KAAK,eAAe;AACzB,WAAK,kBAAkB;AAGvB,WAAK,oBAAoB;AAEzB,YAAM,yBAAyB,MAAM,KAAK,mCAAmC;AAC7E,UAAI,CAAC;AAAwB,eAAO;AAGpC,WAAK,KAAK,eAAe;AAEzB,YAAM,KAAK,SAAS;AACpB,YAAM,KAAK,eAAe;AAC1B,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,kBAAkB;AAE7B,aAAO;AAAA,IACX;AAAA;AAAA,EAMM,0BAAyC;AAAA;AA/oCnD;AAgpCQ,cAAQ,MAAM,kBAAkB,KAAK,YAAY,gCAAgC;AAEjF,UAAI,CAAC,KAAK,KAAK,iBAAiB;AAC5B,iBAAG,kBAAH,mBAAkB,KAAK,4DAA4D,EAAC,UAAU,KAAI;AAClG,eAAO;AAAA,MACX;AAAC;AACD,UAAI,CAAC,KAAK;AAAiB,eAAO;AAGlC,YAAM,KAAK,kBAAkB;AAE7B,WAAK,KAAK,eAAe;AACzB,WAAK,kBAAkB;AAGvB,WAAK,oBAAoB;AAEzB,YAAM,yBAAyB,MAAM,KAAK,mCAAmC;AAC7E,UAAI,CAAC;AAAwB,eAAO;AAGpC,YAAM,KAAK,SAAS;AACpB,YAAM,KAAK,eAAe;AAG1B,WAAK,KAAK,eAAe;AAEzB,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,kBAAkB;AAE7B,aAAO;AAAA,IACX;AAAA;AAAA,EAQM,iBAAiB;AAAA;AACnB,UAAI,KAAK,SAAS;AACd,cAAM,KAAK,eAAe;AAAA,MAC9B,OAAO;AACH,cAAM,KAAK,eAAe;AAAA,MAC9B;AAAA,IACJ;AAAA;AAAA,EAQM,iBAAiB;AAAA;AAAA,IAAC;AAAA;AAAA,EAQlB,iBAAiB;AAAA;AAAA,IAAC;AAAA;AAAA,EAQlB,oBAAoB;AAAA;AACtB,cAAQ,MAAM,sBAAsB,KAAK,YAAY,mBAAmB,IAAI;AAE5E,UAAI,KAAK,SAAS;AACd,cAAM,KAAK,aAAa;AAAA,MAC5B,OAAO;AACH,cAAM,KAAK,aAAa;AAAA,MAC5B;AAEA,YAAM,KAAK,oBAAoB;AAE/B,UAAI,KAAK,UAAU;AACf,cAAM,KAAK,kBAAkB;AAAA,MACjC;AAAA,IACJ;AAAA;AAAA,EAMM,eAAgB;AAAA;AAAA,IAAC;AAAA;AAAA,EAMjB,eAAe;AAAA;AAAA,IAAC;AAAA;AAAA,EAKhB,sBAAsB;AAAA;AACxB,YAAM,OAAO,MAAM,YAAY,iBAAiB,MAAM,KAAK,KAAK,OAAO;AACvE,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAKM,oBAAoB;AAAA;AA7vC9B;AA8vCQ,UAAI,CAAC,KAAK;AAAe;AAEzB,YAAM,OAAO,QAAQ,MAAM,UAAU,KAAK,IAAI;AAG9C,UAAI,CAAC,KAAK;AAAM;AAGhB,YAAM,OAAO,IAAI,UAAU,KAAK,KAAK,GAAG;AAExC,YAAM,uBAAuB,KAAK,aAAa,kBAAkB,KAAK;AACtE,YAAM,oBAAoB,UAAU,yBAAyB,oBAAoB;AAGjF,UAAI,KAAK,KAAK,UAAU;AACpB,aAAK,KAAK,SAAS,QAAQ,KAAK,IAAI,KAAK,KAAK,SAAS,QAAQ,GAAG,CAAC;AAAA,MACvE,OAAO;AACH,aAAK,cAAc,oBAAoB,iBAAiB;AAAA,MAC5D;AAEA,cAAQ,UAAU,KAAK,MAAM,EAAC,KAAK,EAAC,CAAC;AAErC,UAAI,CAAC,UAAU,cAAc,KAAK,KAAK,OAAO,KAAK,UAAU,OAAO,KAAK,aAAa,KAAK,GAAG;AAC1F,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,sCAAsC,EAAC,UAAU,KAAI;AAAA,MACvF;AAGA,YAAM,KAAK,kBAAkB;AAG7B,YAAM,UAAU,YAAY,cAAc,KAAK,IAAI;AACnD,UAAI,CAAC;AAAS;AAEd,WAAK,YAAY;AACjB,YAAM,OAAO,IAAI,QAAQ,MAAM,EAAC,OAAO,KAAK,OAAO,MAAM,KAAK,KAAI,GAAG,KAAK,KAAK,OAAO;AAGtF,WAAK,KAAK,eAAe;AACzB,WAAK,kBAAkB;AACvB,WAAK,KAAK,eAAe;AACzB,WAAK,kBAAkB;AAGvB,UAAI,CAAC,KAAK,UAAU;AAChB,aAAK,KAAK,WAAW;AACrB,aAAK,sBAAsB;AAAA,MAC/B;AAEA,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAQM,iBAAiB;AAAA;AAvzC3B;AAyzCQ,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK,QAAQ,CAAC,KAAK;AAAO;AAE/C,cAAQ,MAAM,2CAA2C;AAKzD,YAAM,OAAO,KAAK,MAAM,KAAK,MAAM,SAAS;AAG5C,UAAI,UAAuB;AAE3B,UAAI,KAAK,uBAAuB,KAAK,OAAO;AAExC,kBAAU,KAAK,MAAM,OAAO,UAAK;AAv0C7C,cAAAH;AAu0CgD,kBAAAA,MAAA,KAAK,UAAL,gBAAAA,IAAY,mBAAmB,MAAM;AAAA,SAAQ;AAAA,MACrF;AAEA,YAAI,UAAK,KAAK,YAAV,mBAAmB,cAAa,cAAY,UAAK,KAAK,YAAV,mBAAmB,cAAa,aAAa;AACzF,kBAAU,WAAW,CAAC;AACtB,kBAAU,CAAC,GAAG,KAAK,MAAM,OAAO,UAAQ,KAAK,IAAI,GAAG,GAAG,OAAO;AAAA,MAClE;AAGA,YAAM,UAAQ,UAAK,KAAK,YAAV,mBAAmB,cAAa;AAC9C,YAAM,gBAAc,UAAK,KAAK,YAAV,mBAAmB,cAAa;AAGpD,WAAK,OAAO,YAAY,MAAM,KAAK,MAAM,aAAa,SAAS,OAAO,KAAK,KAAK,WAAW;AAAA,IAC/F;AAAA;AAAA,EAKM,YAA8C;AAAA;AA11CxD;AA21CQ,UAAI,GAAC,UAAK,KAAK,YAAV,mBAAmB;AAAa;AAGrC,YAAM,eAAe,KAAK,4BAA4B;AACtD,YAAM,UAAU,MAAM,eAAe,KAAK,sBAAsB,YAAY;AAE5E,YAAM,cAAc,KAAK,oBAAoB,OAAO;AACpD,YAAM,UAAU,EAAC,UAAU,KAAK,UAAS;AAGzC,YAAM,UAAU,MAAM,YAAY,OAAO,aAAa,OAAO;AAE7D,UAAI,CAAC;AAAS;AAGd,WAAK,KAAK,cAAc,QAAQ;AAEhC,YAAM,KAAK,eAAe;AAE1B,aAAO;AAAA,IACX;AAAA;AAAA,EASA,8BAA8B;AAx3ClC;AA23CQ,UAAM,iBAAe,UAAK,UAAL,mBAAY,gBAAgB,UAAS,CAAC;AAC3D,UAAM,QAAQ,aAAa,UAAU,IAAI,aAAa,KAAK;AAE3D,WAAO;AAAA,MACH,OAAO,KAAK,KAAK;AAAA,MACjB,MAAM;AAAA,MAEN,SAAS;AAAA,QACL,OAAO,KAAK;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,MAAM,KAAK;AAAA,MACX,gBAAgB,KAAK,mCAAmC;AAAA,MACxD,eAAe,KAAK,kCAAkC;AAAA,MACtD,iBAAiB,KAAK;AAAA,MACtB,iBAAiB,KAAK;AAAA,MACtB,eAAa,UAAK,SAAL,mBAAW,kBAAiB;AAAA,MAGzC,oBAAoB,KAAK;AAAA,IAC7B;AAAA,EACJ;AAAA,EAKA,IAAI,sBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAQA,IAAI,yBAAkC;AA/5C1C;AAg6CQ,aAAO,UAAK,SAAL,mBAAW,qBAAoB;AAAA,EAC1C;AAAA,EAKA,IAAI,sBAA+B;AAE/B,UAAM,gBAAgB,KAAK,SAAS,IAAI,aAAa,MAAM,qBAAqB;AAEhF,WAAO,iBAAiB,CAAC,CAAC,KAAK,QAAQ,KAAK,KAAK,QAAQ,CAAC,CAAC,KAAK;AAAA,EACpE;AAAA,EAKA,IAAI,oBAAmC;AACnC,QAAI,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,KAAK,QAAQ;AAAM;AACnD,WAAO,YAAY,cAAc,KAAK,KAAK,QAAQ,IAAI;AAAA,EAC3D;AAAA,EAQA,qCAAqC;AACjC,UAAM,UAAU,KAAK;AAErB,QAAI,CAAC;AAAS,aAAO,CAAC;AAEtB,UAAM,SAAS;AAAA,MAEX,MAAM,QAAQ;AAAA,MACd,OAAO,QAAQ;AAAA,IACnB;AAGA,QAAI,KAAK,KAAK,QAAQ,KAAK;AACvB,aAAO,SAAS,IAAI,KAAK,KAAK,QAAQ;AAAA,IAC1C;AAEA,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAKA,oCAAwD;AACpD,UAAM,UAA8B,CAAC;AACrC,UAAM,mBAAmB,KAAK;AAC9B,QAAI,CAAC;AAAkB,aAAO;AAE9B,QAAI,iBAAiB,QAAQ,OAAO,YAAY;AAC5C,cAAQ,KAAK;AAAA,QACT,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,MACX,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,YAAoB;AAp+C5B;AAq+CQ,YAAO,gBAAK,KAAK,YAAV,mBAAmB,aAAnB,YAAyC,KAAK,SAAS,IAAI,QAAQ,UAAU;AAAA,EACxF;AAAA,EAOA,oBAAoB,SAAiB;AA7+CzC;AAg/CQ,UAAM,iBAAe,UAAK,UAAL,mBAAY,gBAAgB,UAAS,CAAC;AAC3D,UAAM,QAAQ,aAAa,WAAW,IAAI,aAAa,GAAG,KAAK;AAE/D,UAAM,SAAQ,UAAK,UAAL,mBAAY;AAC1B,UAAM,SAAQ,UAAK,SAAL,mBAAW;AAEzB,UAAM,UAAU;AAChB,UAAM,OAAO,IAAI,QAAQ,OAAO;AAEhC,SAAK,SAAS,EAAC,OAAO,MAAK,CAAC;AAE5B,UAAM,cAAc;AAAA,MAChB,OAAM,UAAK,SAAL,mBAAW;AAAA,MAEjB,MAAM,MAAM,mBAAmB;AAAA,MAC/B,SAAS;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MAGA,OAAO;AAAA,QACH,CAAC,cAAc,EAAC,CAAC,MAAM,OAAO,KAAK,OAAO,EAAC;AAAA,QAC3C,kBAAkB;AAAA,MACtB;AAAA,MACA,OAAO,OAAO,OAAO;AAAA,IACzB;AAIA,gBAAY,cAAc,aAAa,KAAK,SAAS;AAErD,WAAO;AAAA,EACX;AAAA,EAWA,OAAa,qBAAqB,SAAsB,MAAM,MAAM;AAAA;AAChE,WAAK,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,oBAAoB;AAC7D,WAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,KAAK,0BAA0B;AAC1E,WAAK,KAAK,qBAAqB,EAAE,GAAG,SAAS,QAAQ,qBAAqB;AAC1E,WAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,KAAK,2BAA2B;AACzE,WAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,iBAAiB;AAC9D,WAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,KAAK,iBAAiB;AACjE,WAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,eAAe;AAE1D,4BAAsB,wBAAwB,SAAS,MAAM,IAAI;AAEjE,YAAM,KAAK,mBAAmB,SAAS,MAAM,IAAI;AAAA,IACrD;AAAA;AAAA,EAEA,OAAa,mBAAmB,SAAsB,MAAM,MAAM;AAAA;AA7iDtE;AA8iDQ,YAAM,OAAO,MAAM,YAAY,YAAY,QAAQ,EAAY;AAC/D,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,kBAAkB;AAG7B,UAAI,CAAC,KAAK,SAAS,CAAC,KAAK,MAAM;AAC3B,aAAK,KAAK,kBAAkB,EAAE,YAAY,iBAAiB;AAAA,MAC/D,WACS,KAAK,KAAK,QAAQ,KAAK,KAAK,eAAa,UAAK,UAAL,mBAAY,UAAS;AACnE,aAAK,KAAK,kBAAkB,EAAE,YAAY,iBAAiB;AAAA,MAC/D;AAAA,IACJ;AAAA;AAAA,EAMA,OAAa,kBAAkB,OAAO;AAAA;AA/jD1C;AAgkDQ,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,UAAI,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC,UAAU,CAAC,OAAO;AAAO;AAEtD,YAAM,aAAa,EAAE,MAAM,aAAa;AACxC,YAAM,UAAU,WAAW,KAAK,SAAS;AACzC,YAAM,SAAQ,YAAO,WAAP,mBAAe,IAAI;AAEjC,UAAI,SAAS,iBAAiB,OAAO;AACjC,cAAM,QAAQ;AAAA,MAClB,OAAO;AACH,iBAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,uBAAuB;AAAA,MACrE;AAAA,IACJ;AAAA;AAAA,EAOA,OAAa,gBAAgB,OAAO;AAAA;AArlDxC;AAslDQ,YAAM,eAAe;AAErB,YAAM,aAAa,CAAC,YAAY,iBAAiB,KAAK;AACtD,YAAM,UAAU,EAAE,MAAM,aAAa;AAErC,YAAM,QAAO,aAAQ,KAAK,MAAM,MAAnB,YAAwB;AACrC,YAAM,OAAO,MAAM,SAAS,IAAI;AAEhC,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,6CAA6C,IAAI;AAEjF,WAAK,WAAW,KAAK;AAAA,IACzB;AAAA;AAAA,EAEA,OAAa,iBAAiB,SAAkB,MAAM,MAAM;AAAA;AAExD,WAAK,KAAK,eAAe,EAAE,KAAK,CAAO,OAAO,YAAY;AArmDlE;AAsmDY,kBAAU,EAAE,OAAO;AACnB,cAAM,KAAK,QAAQ,KAAK,WAAW;AACnC,cAAM,WAAU,UAAK,aAAL,mBAAe,IAAI;AACnC,YAAI,CAAC;AAAS;AAEd,cAAM,KAAK,qBAAqB,SAAS,SAAS,QAAQ,SAAS,CAAC;AAAA,MACxE,EAAC;AAAA,IACL;AAAA;AAAA,EAOA,OAAa,4BAA4B,OAAO;AAAA;AAC5C,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAGtB,YAAM,UAAU,EAAE,MAAM,aAAa;AACrC,YAAM,OAAO,QAAQ,QAAQ,eAAe;AAC5C,YAAM,YAAY,KAAK,KAAK,WAAW;AACvC,YAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AACpD,UAAI,CAAC;AAAM;AAGX,YAAM,KAAK,kBAAkB;AAG7B,UAAI,CAAC,KAAK;AAAM;AAChB,YAAM,WAAW,SAAS,SAAS,KAAK,IAAI;AAC5C,UAAI,CAAC;AAAU;AACf,YAAM,SAAS,YAAY;AAAA,IAC/B;AAAA;AAAA,EAOA,OAAO,0BAA0B,MAAM,SAAS;AAC5C,UAAM,eAAe,CAAO,OAAO;AAC/B,YAAM,YAAY,GAAG,KAAK,EAAE;AAC5B,YAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AACpD,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,oDAAoD;AAEpF,YAAM,KAAK,wBAAwB;AAAA,IACvC;AAEA,UAAM,eAAe,CAAO,OAAO;AAC/B,YAAM,YAAY,GAAG,KAAK,EAAE;AAC5B,YAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AACpD,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,oDAAoD;AAEpF,YAAM,KAAK,wBAAwB;AAAA,IACvC;AAEA,UAAM,aAAa,CAAO,OAAO;AA/pDzC;AAgqDY,YAAM,YAAY,GAAG,KAAK,EAAE;AAC5B,YAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AACpD,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,oDAAoD;AAGpF,UAAI,CAAC,KAAK,eAAe;AACrB,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,+BAA+B,EAAC,UAAU,KAAI;AAAA,MAChF;AAEA,YAAM,KAAK,kBAAkB;AAAA,IACjC;AAGA,UAAM,eAAe,QAAQ,IAAI;AAEjC,YAAQ,KAAK;AAAA,MACT,MAAM,KAAK,KAAK,SAAS,kBAAkB;AAAA,MAC3C,UAAU;AAAA,MACV,WAAW;AAAA,MACX,MAAM;AAAA,IACV,CAAC;AAED,YAAQ,KAAK;AAAA,MACT,MAAM,KAAK,KAAK,SAAS,kBAAkB;AAAA,MAC3C,UAAU;AAAA,MACV,WAAW;AAAA,MACX,MAAM;AAAA,IACV,CAAC;AAED,YAAQ,KAAK;AAAA,MACT,MAAM,KAAK,KAAK,SAAS,YAAY;AAAA,MACrC,UAAU;AAAA,MACV,WAAW;AAAA,MACX,MAAM;AAAA,IACV,CAAC;AAGD,YAAQ,KAAK,YAAY;AAEzB,WAAO;AAAA,EACX;AAAA,EASA,OAAa,qBAAqB,OAAO;AAAA;AACrC,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY;AACxD,YAAM,UAAU,KAAK,KAAK,aAAa;AACvC,UAAI,QAAQ,GAAG,UAAU;AAAG,gBAAQ,QAAQ,GAAG;AAAA;AAC1C,gBAAQ,UAAU,GAAG;AAAA,IAC9B;AAAA;AAAA,EAQA,OAAa,2BAA2B,OAAO;AAAA;AAC3C,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY;AACxD,YAAM,UAAU,KAAK,KAAK,mBAAmB;AAC7C,UAAI,QAAQ,GAAG,UAAU;AAAG,gBAAQ,QAAQ,GAAG;AAAA;AAC1C,gBAAQ,UAAU,GAAG;AAAA,IAC9B;AAAA;AAAA,EAOA,OAAa,kBAAkB,OAAO;AAAA;AAClC,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,YAAM,UAAU,EAAE,MAAM,aAAa;AACrC,YAAM,eAAe,QAAQ,KAAK,QAAQ;AAE1C,YAAM,YAAY,QAAQ,QAAQ,eAAe,EAAE,KAAK,WAAW;AACnE,YAAM,OAAO,MAAM,YAAY,YAAY,SAAS;AAEpD,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,sDAAsD,kDAAkD,aAAa;AAErJ,YAAM,KAAK,kBAAkB;AAC7B,YAAM,iBAAiB,cAAc,cAAc,IAAI;AAAA,IAC3D;AAAA;AACJ;;;ACvuDO,IAAM,cAAN,cAA0B,YAAY;AAAA,EAIzC,YAAY,MAAM,WAA2B,SAAuB;AAChE,UAAM,MAAM,WAAW,OAAO;AAK9B,UAAM,aAAa,KAAK,UAAU,YAAY,cAAc,KAAK,QAAQ,IAAI,IAAI;AACjF,SAAK,UAAU,IAAI,WAAW,KAAK,WAAW,CAAC,CAAC;AAAA,EACpD;AAAA,EAEA,aAAa,MAAM,SAAe;AAC9B,WAAO,MAAM,aAAa,MAAM,OAAO;AAGvC,WAAO,KAAK;AACZ,WAAO,KAAK;AAEZ,WAAO;AAAA,EACX;AAAA,EAEM,oBAAoB;AAAA;AACtB,YAAM,wCAAM,0BAAN,IAAwB;AAC9B,YAAM,KAAK,QAAQ,kBAAkB;AAAA,IACzC;AAAA;AAAA,EAEA,OAAa,0BAA0B,aAA8B,OAAO,mBAAiE;AAAA;AACzI,UAAI,CAAC,YAAY,SAAS;AACtB,gBAAQ,MAAM,uEAAuE,aAAa,IAAI;AACtG;AAAA,MACJ;AAEA,UAAI,YAAY,QAAQ,SAAS,IAAI;AACjC,gBAAQ,KAAK,4DAA4D,YAAY,QAAQ,sCAAsC,IAAI;AAAA,MAC3I;AACA,UAAI,CAAC,OAAO;AACR,gBAAQ,MAAM,yEAAyE,IAAI;AAC3F;AAAA,MACJ;AAGA,YAAM,OAAO;AAAA,QAET,OAAO,YAAY,QAAQ,eAAe;AAAA,QAE1C;AAAA,QAEA,MAAM,cAAc,UAAU,EAAC,OAAO,eAAc,CAAC;AAAA,QACrD,OAAO,cAAc,UAAU,EAAC,OAAO,YAAW,CAAC;AAAA,QACnD,WAAW,cAAc,UAAU,EAAC,OAAO,gBAAe,CAAC;AAAA,QAC3D,QAAQ,CAAC;AAAA,QAET,gBAAgB,YAAY;AAAA,QAC5B,SAAS;AAAA,MACb;AAKA,WAAK,UAAU,OAAO,YAAY,OAAO,QAAQ;AAIjD,UAAI,SAAS,cAAc,WAAW;AAGtC,eAAS,YAAY;AAAA,QAA+B;AAAA,QAEhD,YAAY;AAAA,QAEZ,KAAK,sBAAsB;AAAA,MAC/B;AAGA,UAAI,YAAY,gBAAgB;AAC5B,cAAM,OAAO,MAAM,SAAS,YAAY,cAAc;AACtD,YAAI,MAAM;AACN,gBAAM,aAAa,MAAM,KAAK,uBAAuB,MAAM,KAAK;AAChE,mBAAS,YAAY,+BAA+B,QAAQ,UAAU;AAAA,QAC1E;AAAA,MACJ;AAEA,aAAO,MAAM,KAAK,uBAAuB,QAAQ,OAAO,IAAI;AAAA,IAChE;AAAA;AAAA,EAKA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,sBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,yBAAkC;AAClC,WAAO;AAAA,EACX;AAAA,EAKM,uBAAuB;AAAA;AACzB,UAAI,CAAC,KAAK;AAAM;AAGhB,YAAM,aAAa,KAAK,KAAK,kBAAkB;AAG/C,iBAAW,YAAY,WAAW,MAAM;AACpC,kBAAU,cAAc,KAAK,KAAK,UAAU,KAAK,SAAS,MAAM,SAAS,OAAO,IAAI;AAAA,MACxF;AAAA,IACJ;AAAA;AAAA,EAOA,OAAa,mBAAmB,OAAO;AAAA;AACnC,YAAM,eAAe;AAErB,YAAM,SAAS,EAAE,MAAM,aAAa;AACpC,YAAM,OAAO,OAAO,QAAQ,eAAe;AAG3C,YAAM,YAAY,KAAK,KAAK,WAAW;AACvC,YAAM,oBAAoB,OAAO,KAAK,QAAQ;AAE9C,YAAM,aAAa,CAAC,YAAY,iBAAiB,KAAK;AACtD,YAAM,YAAY,kBAAkB,WAAW,mBAAmB,EAAC,WAAU,CAAC;AAAA,IAClF;AAAA;AAAA,EAEA,OAAa,qBAAqB,SAAsB,MAAM,MAAM;AAAA;AAChE,WAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,YAAY,kBAAkB;AAAA,IAC3E;AAAA;AACJ;;;ACjKO,IAAM,cAAN,cAA0B,YAAY;AAAA,EAGzC,aAAa,MAAM,SAAU;AACzB,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,UAAM,SAAS,KAAK,UAAU,KAAK,QAAQ,SAAS,cAAc,WAAW;AAE7E,SAAK,iBAAiB,QAAQ,MAAM,UAAU,MAAM;AACpD,SAAK,iBAAiB,QAAQ,MAAM,UAAU,MAAM;AAEpD,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,uBAAgC;AAChC,WAAO,KAAK,KAAK,WAAW;AAAA,EAChC;AAAA,EAEA,IAAI,qBAA6B;AAC7B,WAAO,KAAK,KAAK,UAAU;AAAA,EAC/B;AACJ;;;ACpCO,IAAM,sBAAN,cAAkC,YAAY;AAAA,EAGjD,aAAa,MAAM,SAAe;AAC9B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,iBAAiB,CAAC;AACvB,SAAK,gBAAgB;AACrB,SAAK,eAAe;AAEpB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,aAAa;AAAA,MACb,cAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,UAAU,SAAS;AAAA,EACzC;AAAA,EAEM,sBAAsB;AAAA;AACxB,WAAK,qBAAqB;AAC1B,WAAK,kBAAkB;AACvB,YAAM,gDAAM,4BAAN,IAA0B;AAAA,IACpC;AAAA;AAAA,EAEA,uBAAuB;AA3D3B;AA4DQ,QAAI,CAAC,KAAK;AAAO;AACjB,UAAM,QAAQ,KAAK;AAGnB,SAAK,KAAK,iBAAiB;AAAA,MACvB,cAAc;AAAA,QACV,OAAO;AAAA,QACP,QAAO,WAAM,wBAAwB,MAA9B,mBAAiC;AAAA,QACxC,SAAS;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAO,WAAM,gBAAgB,YAAY,MAAlC,mBAAqC;AAAA,QAC5C,SAAS;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAO,WAAM,gBAAgB,gBAAgB,MAAtC,mBAAyC;AAAA,QAChD,SAAS;AAAA,MACb;AAAA,IACJ;AAIA,UAAM,uBAAuB,MAAM,mBAAmB,EAAE,OAAO,CAAC,WAAW,OAAO,aAAa;AAC/F,yBAAqB,QAAQ,CAAC,WAAW;AArFjD,UAAAI;AAsFY,WAAK,KAAK,eAAe,SAAS,OAAO,UAAU;AAAA,QAC/C,OAAO;AAAA,QACP,QAAQ,OAAO,QAAQ;AAAA,QACvB,QAAOA,MAAA,MAAM,gBAAgB,OAAO,eAAe,CAAC,MAA7C,gBAAAA,IAAgD;AAAA,QACvD,SAAS;AAAA,MACb;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,oBAAoB;AAChB,QAAI,CAAC,KAAK,QAAQ;AAAM;AACxB,SAAK,KAAK,gBAAgB,KAAK,QAAQ,KAAK;AAC5C,QAAI,CAAC,KAAK,KAAK;AAAe;AAE9B,QAAI,CAAC,KAAK;AAAO;AAMjB,UAAM,uBAAuB,KAAK,MAAM,mBAAmB,EAAE,OAAO,CAAC,WAAW,OAAO,aAAa;AACpG,yBAAqB,QAAQ,YAAU;AACnC,WAAK,KAAK,eAAe,KAAK,IAAI,KAAK,KAAK,cAAc,OAAO,SAAS,CAAC;AAAA,IAC/E,CAAC;AAED,UAAM,aAAa,KAAK,QAAQ;AAChC,UAAM,gBAAgB,WAAW,SAAS;AAC1C,UAAM,eAAe,KAAK,KAAK;AAC/B,SAAK,KAAK,eAAe,WAAW,qBAAqB,eAAe,YAAY;AAAA,EACxF;AAAA,EAEA,sBAAsB;AAClB,UAAM,oBAAoB;AAC1B,SAAK,6BAA6B;AAAA,EACtC;AAAA,EAEA,qBAAqB;AACjB,SAAK,uBAAuB;AAC5B,SAAK,+BAA+B;AACpC,SAAK,4BAA4B;AACjC,SAAK,+BAA+B;AACpC,UAAM,mBAAmB;AAAA,EAC7B;AAAA,EAEA,yBAAyB;AAErB,SAAK,KAAK,QAAQ,QAAQ,MAAM,QAAQ,KAAK,KAAK,KAAK,MAAM,WACzD,OAAO,KAAK,KAAK,KAAK,IACtB,KAAK,KAAK;AAGd,cAAU,cAAc,KAAK,KAAK,UAAU,KAAK,aAAa,KAAK,KAAK,KAAK;AAAA,EACjF;AAAA,EAEA,iCAAiC;AAC7B,UAAM,UAAU,KAAK,KAAK,eAAe,KAAK,KAAK,kBAAkB,EAAC,OAAO,qBAAqB,OAAO,GAAG,MAAM,EAAC;AAGnH,cAAU,cAAc,KAAK,KAAK,UAAU,KAAK,qBAAqB,QAAQ,KAAK;AAAA,EACvF;AAAA,EAEA,8BAA8B;AAC1B,QAAI,CAAC,KAAK,KAAK;AAAe;AAE9B,cAAU,cAAc,KAAK,KAAK,UAAU,KAAK,mBAAmB,KAAK,KAAK,YAAY;AAAA,EAC9F;AAAA,EAKA,iCAAiC;AAC7B,QAAI,CAAC,KAAK,QAAQ;AAAM;AACxB,QAAI,CAAC,KAAK,QAAQ,KAAK;AAAgB;AAEvC,UAAM,WAAW,KAAK,QAAQ,KAAK,gBAAgB;AAEnD,QAAI,CAAC,SAAS;AAAS;AAEvB,cAAU,cAAc,KAAK,KAAK,UAAU,KAAK,SAAS,OAAO,OAAO,SAAS,OAAO,CAAC;AAAA,EAC7F;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,YAAY,aAAa,KAAK,QAAQ,KAAK,OAAO,KAAK,KAAK,KAAK;AAAA,EAC5E;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,YAAY,WAAW,KAAK,QAAQ,KAAK,OAAO,KAAK,KAAK,KAAK;AAAA,EAC1E;AAAA,EAEM,iBAAiB;AAAA;AACnB,WAAK,KAAK,iBAAiB,YAAY,sBAAsB,KAAK,KAAK,cAAc;AAErF,YAAM,gDAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAEM,iBAAiB;AAAA;AACnB,UAAI,CAAC,KAAK;AAAO;AAEjB,WAAK,KAAK,iBAAiB,YAAY,qBAAqB,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,KAAK,OAAO,KAAK,KAAK,cAAc;AAE1I,YAAM,gDAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAEM,eAAe;AAAA;AACjB,YAAM,OAAO,MAAM,YAAY,0BAA0B,MAAM,KAAK,KAAK,OAAO;AAChF,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAEA,+BAA+B;AAnMnC;AAqMQ,QAAI,KAAK,SAAS,KAAK,KAAK,UAAU,KAAK,QAAQ;AAC/C,YAAM,SAAoB,KAAK;AAC/B,YAAM,YAAY,OAAO,kBAAkB,KAAK,KAAK;AACrD,UAAI,aAAa,UAAU,aAAa,KAAK,KAAK,SAAS,GAAG;AAC1D,iBAAG,kBAAH,mBAAkB,KAAK,mCAAmC,EAAC,UAAU,KAAI;AACzE,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO,MAAM,6BAA6B;AAAA,EAC9C;AAAA,EAKA,+BAA+B;AAC3B,QAAI,CAAC,KAAK;AAAO;AACjB,QAAI,CAAC,KAAK,KAAK;AAAe;AAE9B,UAAM,gBAAgB,KAAK,KAAK,eAAe,KAAK,KAAK;AACzD,QAAI,CAAC;AAAe;AAGpB,SAAK,KAAK,SAAS,cAAc;AAAA,EACrC;AAAA,EAEA,oCAAoC;AAChC,UAAM,UAAU,MAAM,kCAAkC;AAGxD,QAAI,CAAC,KAAK,KAAK;AAAe,aAAO;AAErC,UAAM,gBAAgB,KAAK,KAAK,eAAe,KAAK,KAAK;AACzD,QAAI,CAAC;AAAe,aAAO;AAE3B,YAAQ,KAAK;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO,OAAO,cAAc,OAAO;AAAA,IACvC,CAAC;AAED,WAAO;AAAA,EACX;AACJ;;;ACrOO,IAAM,mBAAN,MAAuB;AAAA,EAM1B,WAAW,wBAAsD;AAC7D,UAAM,WAAW,oBAAI,IAAI;AACzB,aAAS,IAAI,cAAc,MAAG;AAnBtC;AAmByC,sBAAG,kBAAH,mBAAkB,MAAM;AAAA,KAAgD;AACzG,aAAS,IAAI,uBAAuB,iBAAiB,uBAAuB;AAE5E,WAAO;AAAA,EACX;AAAA,EAUA,OAAa,cAAc,cAA6B,MAAmB;AAAA;AACvE,YAAM,UAAU,iBAAiB,sBAAsB,IAAI,YAAY;AAEvE,UAAI,CAAC;AACD,eAAO,QAAQ,MAAM,gCAAgC,yCAAyC;AAElG,YAAM,QAAQ,IAAI;AAAA,IAEtB;AAAA;AAAA,EAIA,OAAa,iBAAiB,QAAkB,SAAkB,OAAe;AAAA;AA7CrF;AA8CQ,UAAI,CAAC,YAAY,kBAAkB,KAAK,GAAG;AACvC,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,gCAAgC;AAAA,MACrF;AAEA,iBAAW,UAAU,SAAS;AAC1B,cAAM,OAAO,SAAS,QAAQ,KAAK;AAAA,MACvC;AAAA,IACJ;AAAA;AAAA,EAOC,OAAa,wBAAwB,MAA2B;AAAA;AA5DrE;AA6DQ,UAAI,EAAE,gBAAgB;AAAsB;AAE5C,UAAI,CAAC,KAAK,KAAK;AAAQ;AACvB,aAAM,UAAK,UAAL,mBAAY,uBAAuB,KAAK,KAAK;AAAA,IACvD;AAAA;AACJ;;;ACwBO,IAAM,UAAN,cAAsB,KAAK;AAAA,EAA3B;AAAA;AAMH,kBAAa,CAAC;AAAA;AAAA,EAad,IAAI,QAAkB;AAClB,WAAO,MAAM;AAAA,EACjB;AAAA,EAUA,IAAI,aAAmC;AAEnC,QAAI,CAAC,KAAK;AAAO;AAEjB,QAAI,KAAK,iBAAiB;AAAU,aAAO,KAAK;AAKhD,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAEA,IAAY,UAA8B;AAEtC,WAAO,IAAI,mBAAmB,IAAoC;AAAA,EACtE;AAAA,EAGA,kBAAgC;AAC5B,WAAO,KAAK,QAAQ,aAAa,MAAM,YAAY,KAAqB,cAAc,aAAa;AAAA,EACvG;AAAA,EACM,gBAAgB,UAAwB;AAAA;AAC1C,aAAO,KAAK,QAAQ,aAAa,MAAM,cAAc,QAAQ;AAAA,IACjE;AAAA;AAAA,EACA,oBAAoC;AAChC,WAAO,KAAK,QAAQ,aAAa,MAAM,cAAc,KAAsB,EAAE,OAAO,EAAE;AAAA,EAC1F;AAAA,EACM,kBAAkB,OAAuB;AAAA;AAC3C,aAAO,KAAK,QAAQ,aAAa,MAAM,gBAAgB,KAAK;AAAA,IAChE;AAAA;AAAA,EACA,0BAAgD;AAC5C,WAAO,KAAK,QAAQ,aAAa,MAAM,oBAAoB,KAA6B,EAAE,OAAO,EAAE;AAAA,EACvG;AAAA,EACM,wBAAwB,OAA6B;AAAA;AACvD,aAAO,KAAK,QAAQ,aAAa,MAAM,sBAAsB,KAAK;AAAA,IACtE;AAAA;AAAA,EACA,sBAAqC;AACjC,WAAO,KAAK,QAAQ,aAAa,MAAM,aAAa,KAAsB,EAAE,OAAO,EAAE;AAAA,EACzF;AAAA,EACM,oBAAoB,kBAAiC;AAAA;AACvD,aAAO,KAAK,QAAQ,aAAa,MAAM,eAAe,gBAAgB;AAAA,IAC1E;AAAA;AAAA,EAKA,iBAAwB;AACpB,QAAI,QAAQ,KAAK,QAAQ,aAAa,MAAM,aAAa;AAEzD,YAAQ,QAAQ,QAAQ,CAAC;AAGzB,QAAI,SAAS,CAAC,MAAM,QAAQ,KAAK,GAAG;AAChC,cAAQ,QAAQ,4BAA4B,KAAK;AAAA,IACrD;AAGA,YAAQ,MAAM,IAAI,UAAQ;AACtB,UAAI,KAAK,WAAW,CAAC,MAAM,QAAQ,KAAK,OAAO,GAAG;AAC9C,aAAK,UAAU,QAAQ,4BAA4B,KAAK,OAAO;AAAA,MACnE;AAQA,aAAO;AAAA,IACX,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAMM,eAAe,OAAc;AAAA;AAG/B,YAAM,KAAK,QAAQ,aAAa,MAAM,eAAe,KAAK;AAAA,IAC9D;AAAA;AAAA,EAEM,mBAAmB;AAAA;AACrB,YAAM,KAAK,UAAU,aAAa,MAAM,aAAa;AAAA,IACzD;AAAA;AAAA,EAEA,IAAI,iBAA0B;AAC1B,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC;AAAQ,aAAO;AACpB,WAAO,CAAC,CAAC,OAAO,QAAQ;AAAA,EAC5B;AAAA,EAEA,IAAI,UAAmB;AACnB,UAAM,SAAS,KAAK,UAAU;AAC9B,WAAO,CAAC,EAAE,UAAU,OAAO,SAAS,OAAO,OAAO,SAAS,OAAO,aAAa,OAAO,cAAc,OAAO;AAAA,EAC/G;AAAA,EAKA,IAAI,mBAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAOA,cAAc;AAxOlB;AAyOQ,UAAM,YAAY;AAClB,SAAK,mBAAmB;AAGxB,SAAK,SAAS,CAAC;AAEf,QAAI,KAAK,SAAS,OAAO;AAErB,UAAI,OAAO,KAAK,OAAO,aAAa,UAAU;AAI1C,aAAK,OAAO,WAAW,OAAO,OAAO,KAAK,OAAO,QAAQ;AAAA,MAC7D;AAAA,IACJ;AACA,UAAM,eAAe,KAAK,gBAAgB;AAC1C,UAAM,eAAe,KAAK,gBAAgB;AAE1C,UAAM,aAAa,KAAK,kBAAkB;AAC1C,QAAI,YAAY;AAEZ,UAAI,WAAW,sBAAsB,QAAW;AAC5C,mBAAW,oBAAoB,EAAE,OAAO,GAAG,KAAK,GAAG,OAAO,GAAG;AAAA,MACjE;AAEA,YAAM,SAAS,OAAO,WAAW,WAAW,WAAW,IAAI,WAAW;AACtE,iBAAW,kBAAkB,MAAM,IAAI,KAAK,KAAK,SAAS,CAAC;AAG3D,UAAI,CAAC,WAAW;AAAS,mBAAW,UAAU,EAAC,MAAM,GAAG,OAAO,GAAG,KAAK,CAAC,EAAC;AAEzE,YAAM,eAAe,IAAI,UAAkB;AAC3C,mBAAa,QAAQ,CAAC,kBAAkB;AACpC,YAAI,cAAc,OAAO,WAAY,cAAc,OAAO,UAAU,GAAG;AACnE,uBAAa,cAAc,cAAc,MAAgB,cAAc,OAAO,OAAO;AAAA,QACzF;AAAA,MACJ,CAAC;AAED,iBAAW,QAAQ,MAAM,aAAa;AACtC,iBAAW,QAAQ,QAAQ,QAAQ,UAAU,WAAW,OAAO;AAAA,IACnE;AAEA,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,QAAQ;AACR,aAAO,UAAU;AACjB,aAAO,MAAM,MAAM,CAAC;AACpB,aAAO,OAAO,MAAM,CAAC;AACrB,aAAO,OAAO,GAAG,MAAM,CAAC;AACxB,aAAO,gBAAgB,CAAC;AAIxB,UAAI,OAAO,OAAO,0BAA0B,KAAK;AAC7C,eAAO,OAAO,wBAAwB;AAAA,MAC1C;AAGA,WAAI,UAAK,UAAL,mBAAY,QAAQ;AACpB,eAAO,OAAO,SAAS;AAAA,UACnB,SAAS,KAAK,MAAM;AAAA,UACpB,QAAQ,KAAK;AAAA,UACb,UAAU,KAAK;AAAA,UACf,UAAU,KAAK;AAAA,QACnB;AAAA,MACJ;AAGA,YAAM,aAAa,IAAI,UAAU,OAAO,MAAM,GAAG;AACjD,YAAM,UAAU,IAAI,UAAU,OAAO,aAAa;AAClD,mBAAa,QAAQ,CAAC,QAAQ;AAC1B,cAAM,eAAe,IAAI,eAAe;AACxC,YAAI,CAAC;AAAc;AAGnB,YAAI,aAAa,OAAO;AAAU,qBAAW,cAAc,IAAI,MAAgB,aAAa,OAAO,QAAQ;AAE3G,YAAI,aAAa,OAAO;AAAW,kBAAQ,cAAc,IAAI,MAAgB,aAAa,OAAO,SAAS;AAAA,MAE9G,CAAC;AAED,UAAI,cAAc;AAEd,cAAM,WAAW,aAAa;AAE9B,eAAO,OAAO,MAAM,UAAU,cAAc,OAAO,OAAO,KAAK,aAAa,MAAgB,SAAS,MAAM;AAE3G,eAAO,OAAO,GAAG,MAAM,UAAU,cAAc,OAAO,OAAO,GAAG,KAAK,aAAa,MAAgB,SAAS,EAAE;AAE7G,YAAI,SAAS;AAAU,qBAAW,cAAc,aAAa,MAAgB,SAAS,QAAQ;AAG9F,YAAI,SAAS,SAAS;AAClB,iBAAO,OAAO,QAAQ,QAAQ,SAAS;AAAA,QAC3C,OAAO;AACH,iBAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,QAAQ;AAAA,QACxD;AAGA,YAAI,SAAS,YAAY;AACrB,iBAAO,OAAO,KAAK,QAAQ,SAAS;AAAA,QACxC,OAAO;AACH,iBAAO,OAAO,KAAK,QAAQ,OAAO,OAAO,KAAK;AAAA,QAClD;AAAA,MACJ,OAAO;AAEH,eAAO,OAAO,QAAQ,QAAQ,OAAO,OAAO,QAAQ;AACpD,eAAO,OAAO,KAAK,QAAQ,OAAO,OAAO,KAAK;AAAA,MAClD;AAGA,aAAO,OAAO,QAAQ,QAAQ,UAAU,OAAO,MAAM;AACrD,aAAO,OAAO,GAAG,QAAQ,QAAQ,UAAU,OAAO,OAAO,EAAE;AAE3D,aAAO,MAAM,QAAQ,QAAQ,UAAU,OAAO,KAAK;AAAA,IACvD;AAEA,UAAM,QAAQ,KAAK,eAAe;AAClC,QAAI,OAAO;AACP,UAAI,MAAM,IAAI;AACV,cAAM,aAAa,IAAI,UAAU;AACjC,qBAAa,QAAQ,CAAC,QAAQ;AAG1B,cAAI,IAAI,OAAO;AAAI,uBAAW,cAAc,IAAI,MAAM,IAAI,OAAO,EAAE;AAAA,QAEvE,CAAC;AAED,cAAM,GAAG,MAAM,WAAW;AAE1B,YAAI,MAAM;AAAI,gBAAM,GAAG,QAAQ,QAAQ,UAAU,MAAM,EAAE;AAAA,MAC7D;AAAA,IACJ;AAEA,UAAM,aAAa,KAAK,aAAa;AACrC,QAAI,YAAY;AAEZ,iBAAW,OAAO,OAAO,WAAW,OAAO,OAAO,OAAO,WAAW;AAAA,IACxE;AAIA,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAED,4BAAoB,KAAK,MAAM;AAAA,IACvC;AAAA,EACJ;AAAA,EAEM,eAAe;AAAA;AACjB,YAAM,UAAU;AAAA,QACZ,OAAO,KAAK;AAAA,QACZ,aAAa,KAAK,YAAY;AAAA,QAC9B,MAAM;AAAA,QACN,iBAAiB,KAAK;AAAA,QACtB,OAAO,KAAK,eAAe;AAAA,MAC/B;AACA,aAAO,MAAM,sBAAsB,OAAO;AAAA,IAC9C;AAAA;AAAA,EAOM,WAAW,OAAmB;AAAA;AAEhC,YAAM,eAAe,YAAY,0BAA0B,KAAK,KAAK,CAAC,KAAK;AAC3E,UAAI;AAAc,eAAO,MAAM,KAAK,aAAa;AAEjD,UAAI,CAAC,KAAK;AAAO;AAEjB,YAAM,aAAa,CAAC,YAAY,iBAAiB,KAAK;AACtD,YAAM,OAAO,MAAM,YAAY,SAAS,MAAM,KAAK,OAAO,EAAC,WAAU,CAAC;AACtE,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,QAAQ;AAAA,IAC3B;AAAA;AAAA,EAYI,YAAY,cAAY,CAAC,GAAG;AACxB,UAAM,SAAS,UAAU,KAAK,MAAM;AACpC,UAAM,EAAE,OAAO,IAAI;AAGnB,QAAI,CAAC,OAAO;AAAa,aAAO,cAAc,EAAC,MAAM,IAAI,QAAQ,IAAI,OAAO,GAAE;AAG9E,QAAI,CAAC,OAAO,YAAY;AAAO,aAAO,YAAY,QAAQ;AAE1D,WAAO,YAAY,QAAQ,WAAW,WAAW,OAAO,YAAY,OAAO,iCAAI,cAAJ,EAAiB,OAAO,MAAK,EAAC;AAEzG,UAAM,QAAQ,CAAC;AAGf,UAAM,sBAAsB,SAAS,KAAK;AAC1C,QAAI;AAAqB,0BAAoB,UAAU,MAAM,GAAG,QAAQ,OAAO,IAAI;AAInF,WAAO,aAAa,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAE3C,WAAO;AAAA,EACX;AAAA,EAEA,oBAA4B;AACxB,UAAM,WAAW,KAAK,YAAY;AAClC,WAAO,WAAW,WAAY,KAAK,KAAK,SAAS,YAAY;AAAA,EACjE;AAAA,EAOA,oBAAuC;AACnC,UAAM,QAAQ,IAAI,UAAkB;AAEpC,QAAI,KAAK,eAAe,GAAG;AACvB,UAAI,KAAK,gBAAgB;AACrB,cAAM,cAAc,WAAW,EAAE;AAAA,MACrC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,gBAA6C;AACtD,QAAI,KAAK,WAAW,KAAK,gBAAgB;AAErC,YAAM,SAAS,KAAK;AAGpB,UAAI,WAAW,KAAK,kBAAkB,EAAE;AAGxC,UAAI,iDAAgB,OAAO;AACvB,mBAAW,eAAe,MAAM;AAAA,MACpC;AAGA,UAAI,OAAO;AAAU,oBAAY;AACjC,YAAM,UAAU;AAEhB,aAAO;AAAA,QACH,QAAQ;AAAA,QACR;AAAA,MACJ;AAAA,IAEJ,WAAW,KAAK,WAAW;AAEvB,YAAM,SAAS,KAAK;AAEpB,YAAM,WAAW,OAAO,OAAO,MAAM;AACrC,YAAM,UAAU,OAAO,OAAO,MAAM;AAEpC,aAAO;AAAA,QACH,QAAQ;AAAA,QACR;AAAA,MACJ;AAAA,IAEJ,WAAW,KAAK,kBAAkB;AAC9B,YAAM,OAAO,KAAK,gBAAgB;AAClC,YAAM,OAAO,KAAK;AAElB,UAAI,CAAC;AAAM,eAAO,EAAC,QAAQ,GAAG,SAAS,EAAC;AAGxC,YAAM,WAAW,KAAK,OAAO,MAAM;AAEnC,YAAM,UAAU,KAAK,OAAO,MAAM;AAElC,aAAO;AAAA,QACH,QAAQ;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,kBAA2B;AACvB,UAAM,iBAAiB,KAAK,SAAS,CAAC,GAAG,OAAO,CAAC,SAC7C,KAAK,UACL,KAAK,WAAW,CAAC;AAGrB,WAAO,cAAc;AAAA,EACzB;AAAA,EAEA,kBAA6B;AACzB,YAAQ,KAAK,SAAS,CAAC,GAAG,OAAO,CAAC,SAC9B,KAAK,wBACL,KAAK,WAAW,CAAC;AAAA,EACzB;AAAA,EAEA,IAAI,mBAA4B;AAC5B,UAAM,OAAO,KAAK,gBAAgB;AAClC,QAAI,CAAC;AAAM,aAAO;AAElB,UAAM,SAAS,KAAK;AACpB,WAAO,OAAO,MAAM,SAAS;AAAA,EACjC;AAAA,EAMM,eAAe,KAAK;AAAA;AACtB,YAAM,KAAK,gBAAgB,KAAK,gBAAgB,EAAC,eAAe,OAAO,QAAQ,KAAI,CAAC;AAAA,IACxF;AAAA;AAAA,EAQA,QAAQ,SAAe,GAAY;AAC/B,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EAKA,IAAI,WAAmB;AACnB,UAAM,OAAO,KAAK,QAAQ,QAAQ;AAClC,QAAI,CAAC;AAAM,aAAO;AAElB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EAMM,QAAQ,OAAO;AAAA;AACjB,UAAI,KAAK,SAAS;AAAU;AAG5B,YAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,QAAQ,QAAQ,KAAK;AAChE,aAAO,MAAM,KAAK,OAAO,EAAC,6BAA6B,MAAK,CAAC;AAAA,IACjE;AAAA;AAAA,EAEM,aAAa;AAAA;AAtkBvB;AAukBQ,UAAI,KAAK,SAAS;AAAU;AAG5B,YAAM,aAAa,CAAC;AAEpB,YAAM,OAAO,KAAK,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,KAAK,QAAQ;AAErE,iBAAW,+BAA+B,KAAK,OAAO,KAAK,QAAQ;AAInE,UAAI,KAAK,OAAO,KAAK,QAAQ,aAAa;AAEtC,mBAAW,+BAA+B,KAAK,IAAI,GAAG,KAAK,OAAO,KAAK,YAAY,QAAQ,CAAC;AAAA,MAChG;AAEA,YAAM,KAAK,OAAO,UAAU;AAM5B,YAAM,iBAAiB,KAAK,SAAS,CAAC,GACjC,OAAO,CAAC,MAAM,EAAE,SAAS,MAAM,EAC/B,OAAO,CAAC,KAAqB,SAAkB;AA/lB5D,YAAAC;AAkmBgB,YAAI,KAAK,QAAQ,KAAK,KAAK,OAAO,WAAW,UAAU;AAEnD,gBAAM,WAAW,KAAK,SAAS;AAE/B,gBAAM,MAAM,OAAO,SAAS,OAAO,WAAW,aAAa,WAAW,IAAI,SAAS,OAAO,WAAW;AAGrG,cAAI,MAAM,OAAO,GAAG;AAChB,aAAAA,MAAA,GAAG,kBAAH,gBAAAA,IAAkB,KAAK,wCAAwC,EAAC,UAAU,KAAI;AAAA,UAClF;AAGA,mBAAS,OAAO,WAAW,WAAW,KAAK,IAAI,GAAG,MAAM,IAAI;AAC5D,cAAI,KAAK,QAAQ;AAAA,QACrB;AAEA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAET,UAAI,iBAAiB,cAAc,QAAQ;AACvC,cAAM,KAAK,kBAAkB,aAAa;AAG1C,iBAAG,kBAAH,mBAAkB,KAAK,kCAAkC,EAAC,UAAU,KAAI;AAAA,MAC5E;AAAA,IACJ;AAAA;AAAA,EAEM,gBAAgB,IAAY,IAAuE;AAAA,+CAAnF,IAAY,MAAc,UAAqD,CAAC,GAAG;AACrG,YAAM,gBAAgB,QAAQ,iBAAiB;AAC/C,YAAM,SAAS,QAAQ,UAAU;AAGjC,YAAM,aAAiC,CAAC;AACxC,YAAM,YAAY,KAAK,MAAM,OAAO,UAAQ,KAAK,SAAS,IAAI;AAE9D,iBAAW,QAAQ,WAAW;AAC1B,YAAI,CAAC,iBAAiB,KAAK,OAAO;AAAI;AAEtC,cAAM,QAAQ,SAAS,CAAC,KAAK,OAAO,WAAW,WAAW,OAAO,KAAK;AAEtE,mBAAW,KAAK,EAAC,KAAK,KAAK,IAAI,8BAA8B,MAAK,CAAC;AAAA,MACvE;AAEA,UAAI;AAAY,cAAM,KAAK,kBAAkB,UAAU;AAAA,IAC3D;AAAA;AAAA,EAOM,UAAU,IAAI;AAAA;AAChB,YAAM,KAAK,gBAAgB,IAAI,QAAQ,EAAC,eAAe,KAAI,CAAC;AAAA,IAChE;AAAA;AAAA,EAEM,gBAAgB;AAAA;AAClB,UAAI,KAAK,SAAS;AAAO;AAIzB,YAAM,WAAW,QAAQ,MAAM,QAAQ,KAAK,OAAO,QAAQ,MAAM,WAE7D,OAAO,OAAO,KAAK,OAAO,QAAQ,IAElC,KAAK,OAAO;AAEhB,UAAI,CAAC;AAAU;AAGf,eAAS,KAAK;AAAA,QACV,MAAM;AAAA,QACN,KAAK;AAAA,QACL,aAAa;AAAA,MACjB,CAAC;AAED,YAAM,KAAK,OAAO,EAAC,mBAAmB,SAAQ,CAAC;AAAA,IACnD;AAAA;AAAA,EAEA,mBAAoC;AAEhC,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,UAAU,CAAC,KAAK;AAAO,aAAO,CAAC;AAGpC,UAAM,QAAQ,IAAI,UAAU,UAAU,KAAK,gBAAgB,CAAC,CAAC;AAE7D,UAAM,QAAQ,KAAK,MAAM,gBAAgB,KAAK,eAAe,CAAC;AAC9D,UAAM,YAAY,KAAK,MAAM,cAAc,KAAK,mBAAmB,CAAC;AACpE,UAAM,aAAa,KAAK,MAAM,cAAc,KAAK,oBAAoB,CAAC;AAEtE,QAAI,aAAa,UAAU;AAAO,YAAM,QAAQ,UAAU,OAAO,UAAU,KAAK;AAGhF,QAAI,OAAO;AACP,YAAM,cAAc,MAAM,SAAS,MAAM,MAAM,MAAM,KAAK;AAC1D,gBAAU,iBAAiB,OAAO,KAAK;AAAA,IAC3C,WACS,cAAc,WAAW,OAAO;AACrC,YAAM,QAAQ,WAAW,OAAO,WAAW,KAAK;AAAA,IACpD;AAEA,UAAM,OAAO,KAAK,wBAAwB;AAC1C,QAAI;AAAM,YAAM,cAAc,MAAM,CAAC;AAGrC,UAAM,MAAM,SAAS,KAAK,OAAO,OAAO,OAAO,CAAC;AAChD,QAAI;AAAK,YAAM,cAAc,eAAe,GAAG;AAE/C,UAAM,OAAkD,CAAC;AACzD,QAAI,cAAc;AAAW,WAAK,KAAK,SAAS;AAChD,QAAI,eAAe;AAAW,WAAK,KAAK,UAAU;AAClD,QAAI,UAAU;AAAW,WAAK,KAAK,KAAK;AAExC,SAAK,MAAM,gBAAgB,KAAK;AAChC,SAAK,MAAM,gBAAgB,OAAO,IAAI;AACtC,SAAK,gBAAgB,KAAK;AAE1B,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,kBAAkB;AA1tBtB;AA2tBQ,UAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAI,CAAC;AAAc,aAAO;AAC1B,QAAI,aAAa,UAAU;AAAI,aAAO;AACtC,WAAO,KAAK,IAAI,KAAK,sBAAsB,IAAI,OAAK,UAAK,gBAAgB,MAArB,mBAAwB,UAAS,IAAI,CAAC;AAAA,EAC9F;AAAA,EAEA,gBAAgB,OAA0B;AACtC,QAAI,KAAK,gBAAgB;AACrB,YAAM,SAAS,KAAK,gBAAgB;AACpC,UAAI;AAAQ,cAAM,cAAc,cAAc,MAAM;AAAA,IACxD;AAAA,EACJ;AAAA,EAEA,IAAI,QAAiB;AACjB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,IAAI,QAAiC;AACjC,QAAI,KAAK,OAAO;AAEZ,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,cAAuB;AACvB,WAAO,KAAK,QAAQ,YAAY;AAAA,EACpC;AAAA,EAEA,IAAI,cAA6C;AAC7C,QAAI,KAAK,aAAa;AAElB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,SAAkB;AAClB,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC/B;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,SAAmC;AACnC,QAAI,KAAK,QAAQ;AAEb,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,iBAA0B;AAC1B,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,iBAAmD;AAC/C,QAAI,KAAK,gBAAgB;AAErB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,uBAAgC;AAChC,WAAO,KAAK,QAAQ,qBAAqB;AAAA,EAC7C;AAAA,EAEA,IAAI,sBAA+B;AAC/B,WAAO,KAAK,QAAQ,oBAAoB;AAAA,EAC5C;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,YAAyC;AACzC,QAAI,KAAK,WAAW;AAEhB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,YAAyC;AACzC,QAAI,KAAK,WAAW;AAEhB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,eAAwB;AACxB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,eAA6C;AACzC,QAAI,KAAK;AAEL,aAAO;AAAA,EACf;AAAA,EAGA,IAAI,SAAkB;AAClB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAEA,IAAI,SAAiC;AACjC,QAAI,KAAK,QAAQ;AAEb,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAOM,cAAc,OAAO;AAAA;AACvB,UAAI,KAAK,SAAS;AAAO;AAGzB,YAAM,WAAW,KAAK,OAAO,SAAS,OAAO,OAAO,CAAC;AACrD,YAAM,KAAK,OAAO,EAAC,mBAAmB,SAAQ,CAAC;AAAA,IACnD;AAAA;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,WAAuC;AACnC,QAAI,KAAK,SAAS,GAAG;AAEjB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEM,gBAAgB,QAAkB,QAAoB,OAAuB;AAAA;AAC/E,cAAQ,MAAM,iBAAiB,KAAK,YAAY,+CAA+C;AAAA,IACnG;AAAA;AAAA,EAEM,aAAa,MAAc,QAAoB,OAAO,QAAkB;AAAA;AAC1E,UAAI,SAAS,WAAW;AACpB,cAAM,KAAK,gBAAgB,QAAQ,QAAQ,KAAK;AAAA,MACpD;AACA,UAAI,SAAS,UAAU;AACnB,cAAM,KAAK,WAAW,KAAK;AAAA,MAC/B;AAAA,IACJ;AAAA;AAAA,EAWA,OAAO,mBAAmB,MAA2B;AA13BzD;AA23BQ,QAAI,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,KAAK,SAAS,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO;AAAO;AAEvF,UAAM,OAAO,KAAK,KAAK,YAAY;AACnC,QAAI;AACJ,UAAM,eAAe,KAAK,KAAK,SAAS;AACxC,QAAI;AAAc,cAAQ,QAAQ,mBAAmB,YAAY;AAAA;AAC5D,eAAQ,UAAK,WAAL,mBAAa,IAAI,KAAK,KAAK,SAAS;AAEjD,QAAI,CAAC;AAAO;AACZ,UAAM,SAAS,KAAK,KAAK,QAAQ;AACjC,WAAO,MAAM,MAAM,IAAI,MAAM;AAAA,EACjC;AAAA,EAEA,OAAO,aAAa;AAChB,QAAI,CAAC,KAAK,SAAS,CAAC,KAAK;AAAM;AAC/B,UAAM,EAAE,UAAU,IAAI,KAAK;AAE3B,UAAM,EAAE,WAAW,IAAI,OAAO;AAC9B,UAAM,UAAU,WAAW,OAAO,CAAC,KAAK,MAAO,EAAE,QAAQ,IAAI,OAAO,CAAC,EAAE,KAAK,CAAC,IAAI,KAAM,CAAC,CAAC;AACzF,QAAI,aAAa,WAAW,WAAW;AAAG,cAAQ,KAAK,SAAS;AAChE,QAAI,CAAC,QAAQ;AAAQ,YAAM,IAAI,MAAM,wDAAwD;AAC7F,WAAO;AAAA,EACX;AAAA,EAEA,iBAAoC;AAChC,QAAI,CAAC,KAAK;AAAS,aAAO,CAAC;AAE3B,WAAO,CAAC;AAAA,MACJ,OAAO,KAAK,kBAAkB;AAAA,MAC9B,MAAM,KAAK;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EAEA,kBAA8C;AAC1C,QAAI,CAAC,KAAK,SAAS;AAAG;AAEtB,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACxC;AAAA,EASM,iBAAiB,IAAwB;AAAA,+CAAxB,UAAU,UAAU,CAAC,GAAG;AAC3C,UAAI,CAAC,MAAM,QAAQ,QAAQ;AAAG,mBAAW,CAAC,QAAQ;AAElD,UAAI,KAAK,SAAS,UAAU;AACxB,cAAM,eAAe,UAAU,KAAK,eAAe,CAAC;AAEpD,iBAAS,QAAQ,CAAC,WAAW;AA/6BzC;AAg7BgB,gBAAM,OAAO,UAAU,MAAM;AAC7B,eAAK,MAAM,SAAS,EAAE;AACtB,cAAI,KAAK,SAAS,UAAU,KAAK,SAAS,gBAAgB;AACtD,iBAAI,wCAAM,WAAN,mBAAc,eAAd,mBAA0B,UAAU;AACpC,mBAAK,OAAO,WAAW,WAAW;AAAA,YACtC;AACA,yBAAa,KAAK,IAAI;AAAA,UAC1B;AAAA,QACJ,CAAC;AAED,cAAM,KAAK,eAAe,YAAY;AAAA,MAC1C;AACA,WAAK,mBAAmB;AACxB,WAAK,YAAY;AACjB,WAAK,OAAO,KAAK;AAEjB,aAAO;AAAA,IACX;AAAA;AAAA,EAKA,qBAAqB;AACjB,SAAK,QAAQ,KAAK,SAAS,CAAC;AAE5B,UAAM,QAAQ,KAAK,eAAe;AAClC,QAAI,CAAC;AAAO;AAGZ,UAAM,SAAS,KAAK,MAAM,OAAO,CAAC,QAAQ,SAAS;AAC/C,aAAO,KAAK,MAAgB;AAC5B,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAGL,UAAM,YAAY,MAAM,IAAI,CAAC,SAAS;AAElC,YAAM,OAAO,KAAK,OAAO,EAAC,WAAW,EAAC,CAAC,KAAK,KAAK,KAAK,MAAM,2BAA2B,MAAK,EAAC,IACpE,CAAC;AAC1B,aAAO,YAAY,MAAM,IAAI;AAG7B,UAAI,KAAK,OAAO,QAAQ;AACpB,cAAM,cAAc,OAAO,KAAK;AAGhC,oBAAY,aAAa,IAAI;AAC7B,oBAAY,YAAY;AACxB,eAAO;AAAA,MAGX,OAAO;AAIH,eAAO,IAAI,QAAQ,MAAM,EAAC,QAAQ,KAA2B,CAAC;AAAA,MAClE;AAAA,IACJ,CAAC;AAED,SAAK,QAAQ;AAAA,EACjB;AAAA,EAGA,aAAa,QAA6B;AACtC,UAAM,QAAQ,KAAK;AACnB,QAAI,CAAC;AAAO;AACZ,WAAO,MAAM,KAAK,CAAC,SAAS,KAAK,OAAO,MAAM;AAAA,EAClD;AAAA,EAGM,kBAAkB,SAAS;AAAA;AAC7B,YAAM,QAAQ,UAAU,KAAK,eAAe,CAAC;AAC7C,UAAI,CAAC;AAAO;AACZ,gBAAU,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO;AACrD,UAAI,CAAC,WAAW,QAAQ,WAAW;AAAG;AACtC,cAAQ,QAAQ,CAAC,gBAAgB;AAC7B,cAAM,QAAQ,MAAM,UAAU,CAAC,MAAM,EAAE,QAAQ,YAAY,GAAG;AAC9D,YAAI,UAAU;AAAI;AAClB,cAAM,OAAO,MAAM;AAGnB,eAAO,YAAY;AAEnB,YAAI,MAAM;AACN,wBAAc,aAAa,WAAW;AACtC,sBAAY,MAAM,WAAW;AAC7B,gBAAM,SAAS;AAAA,QAEnB;AAAA,MACJ,CAAC;AAED,YAAM,KAAK,eAAe,KAAK;AAC/B,WAAK,mBAAmB;AACxB,WAAK,YAAY;AACjB,WAAK,OAAO,KAAK;AACjB,aAAO;AAAA,IACX;AAAA;AAAA,EAUM,qBAAqB,cAAc,MAAM,SAAwB;AAAA;AACnE,YAAM,KAAK,kBAAkB,IAAI;AACjC,aAAO;AAAA,IACX;AAAA;AAAA,EAOM,gBAAgB,SAAS;AAAA;AAC3B,YAAM,QAAQ,UAAU,KAAK,eAAe,CAAC;AAC7C,UAAI,CAAC;AAAO;AAEZ,YAAM,MAAM,MAAM,UAAU,CAAC,MAAM,EAAE,QAAQ,WAAW,OAAO,EAAE,GAAG,MAAM,OAAO;AACjF,UAAI,QAAQ;AAAI,cAAM,IAAI,MAAM,0CAA0C,SAAS;AACnF,YAAM,OAAO,KAAK,CAAC;AAEnB,YAAM,KAAK,iBAAiB;AAC5B,YAAM,KAAK,eAAe,KAAK;AAC/B,YAAM,KAAK,mBAAmB;AAC9B,YAAM,KAAK,YAAY;AACvB,YAAM,KAAK,OAAO,KAAK;AACvB,aAAO;AAAA,IACX;AAAA;AAAA,EAOA,gBAAgB;AAzjCpB;AA0jCQ,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,WAAW,IAAI;AACf,eAAG,kBAAH,mBAAkB,MAAM,6BAA6B,EAAC,UAAU,KAAI;AAAA,IACxE;AAEA,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAKA,gBAAgB;AArkCpB;AAukCQ,QAAI,CAAC,GAAG,aAAa;AACjB,eAAG,kBAAH,mBAAkB,KAAK,mCAAmC,EAAC,UAAU,KAAI;AACzE;AAAA,IACJ;AAEA,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,WAAW,IAAI;AACf,eAAG,kBAAH,mBAAkB,MAAM,6BAA6B,EAAC,UAAU,KAAI;AAAA,IACxE;AAEA,UAAM,CAAC,MAAM,IAAI,IAAI,OAAO,MAAM,GAAG;AAGrC,OAAG,SAAS,cAAc,MAAM,EAAE,MAAM,SAAS,IAAI,EAAE,CAAC;AAAA,EAC5D;AAAA,EAKA,aAAa;AACT,UAAM,SAAS,KAAK,UAAU;AAE9B,QAAI,QAAQ,MAAM,MAAM,GAAG;AACvB,aAAO,KAAK,cAAc;AAAA,IAC9B;AAEA,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EAEA,iBAA0B;AAEtB,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC;AAAQ,aAAO;AACpB,WAAO,CAAC,CAAC,OAAO,OAAO,KAAK;AAAA,EAChC;AAAA,EAEA,YAAsC;AAClC,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,cAAuB;AACnB,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC;AAAQ,aAAO;AACpB,WAAO,OAAO;AAAA,EAClB;AAAA,EAEA,oBAA8C;AAC1C,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,WAAmE;AAC/D,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,iBAA4C;AACxC,QAAI,KAAK;AACL,aAAO,KAAK,SAAS;AAAA,EAC7B;AAAA,EAEA,cAAsB;AAClB,QAAI,KAAK,gBAAgB;AACrB,aAAO,KAAK,KAAK,SAAS,uBAAuB;AAAA,IACrD;AACA,QAAI,KAAK,eAAe;AACpB,aAAO,KAAK,KAAK,SAAS,uBAAuB;AAAA,IACrD;AACA,QAAI,KAAK,eAAe;AACpB,aAAO,KAAK,KAAK,SAAS,iBAAiB;AAAA,IAC/C;AACA,QAAI,KAAK,SAAS;AACd,aAAO,KAAK,KAAK,SAAS,eAAe;AAAA,IAC7C;AACA,QAAI,KAAK,SAAS;AACd,aAAO,KAAK;AAAA,IAChB;AAEA,WAAO;AAAA,EACX;AAAA,EASA,IAAI,iBAA0B;AAC1B,WAAO,KAAK,QAAQ,eAAe,KAAK,KAAK;AAAA,EACjD;AAAA,EAEA,IAAI,UAAmB;AACnB,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAChC;AAAA,EAEA,IAAI,UAAqC;AACrC,QAAI,KAAK,SAAS;AAEd,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,eAAwB;AACxB,WAAO,KAAK,QAAQ,aAAa;AAAA,EACrC;AAAA,EAEA,IAAI,oBAA6B;AAC7B,WAAO,KAAK,QAAQ,kBAAkB;AAAA,EAC1C;AAAA,EAEA,IAAI,WAAoB;AACpB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,WAAoB;AACpB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,IAAI,WAAuC;AACvC,QAAI,KAAK,UAAU;AAEf,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,iBAA0B;AAC1B,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,IAAI,gBAAyB;AACzB,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,IAAI,cAAuB;AACvB,WAAO,KAAK,QAAQ,YAAY;AAAA,EACpC;AAAA,EAEA,IAAI,cAA6C;AAC7C,QAAI,KAAK,aAAa;AAElB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAyB;AACzB,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,IAAI,sBAA+B;AAC/B,WAAO,KAAK,QAAQ,oBAAoB;AAAA,EAC5C;AAAA,EAEA,IAAI,wBAAiC;AACjC,WAAO,KAAK,QAAQ,sBAAsB;AAAA,EAC9C;AAAA,EAEA,IAAI,cAAuB;AACvB,WAAO,KAAK,QAAQ,YAAY;AAAA,EACpC;AAAA,EAEA,IAAI,kBAA2B;AAC3B,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACxC;AAAA,EAEA,IAAI,UAAmB;AACnB,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAChC;AAAA,EAEA,IAAI,UAAqC;AACrC,QAAI,KAAK,SAAS;AAEd,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAyB;AACzB,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,IAAI,gBAAiD;AACjD,QAAI,KAAK,eAAe;AAEpB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,gBAAyB;AACzB,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,IAAI,gBAAiD;AACjD,QAAI,KAAK,eAAe;AAEpB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,IAAI,YAAyC;AACzC,QAAI,KAAK,WAAW;AAEhB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,iBAA0B;AAC1B,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,IAAI,iBAAmD;AACnD,QAAI,KAAK,gBAAgB;AAErB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,IAAI,WAAoB;AACpB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,IAAI,WAAuC;AACvC,QAAI,KAAK,UAAU;AAEf,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAGA,eAA0D;AACtD,WAAO,KAAK,UAAU,KAAK,YAAY;AAAA,EAC3C;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,QAAQ,YAAY;AAAA,EACpC;AAAA,EAEA,IAAI,cAA6C;AAC7C,QAAI,KAAK,YAAY,GAAG;AAEpB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,QAAQ,WAAW;AAAA,EACnC;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,QAAQ,YAAY;AAAA,EACpC;AAAA,EAEA,aAAsB;AAClB,WAAO,KAAK,QAAQ,WAAW;AAAA,EACnC;AAAA,EAEA,iBAA0B;AACtB,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,YAAoB;AAChB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,sBAAqC;AACjC,WAAO,KAAK,QAAQ,oBAAoB;AAAA,EAC5C;AAAA,EAEA,YAAoB;AAChB,WAAO,KAAK,QAAQ,UAAU;AAAA,EAClC;AAAA,EAEA,gBAAwB;AACpB,WAAO,KAAK,QAAQ,cAAc;AAAA,EACtC;AAAA,EAEA,mBAA8C;AAC1C,WAAO,KAAK,QAAQ,iBAAiB;AAAA,EACzC;AAAA,EAEA,iBAAyB;AACrB,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,UAAU;AACN,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAChC;AAAA,EAEA,iBAAqC;AACjC,WAAO,KAAK,QAAQ,eAAe;AAAA,EACvC;AAAA,EAEA,qBAAyC;AACrC,WAAO,KAAK,QAAQ,mBAAmB;AAAA,EAC3C;AAAA,EAEA,sBAA0C;AACtC,WAAO,KAAK,QAAQ,oBAAoB;AAAA,EAC5C;AAAA,EAEA,kBAAmC;AAC/B,WAAO,KAAK,QAAQ,gBAAgB;AAAA,EACxC;AAAA,EAEA,0BAA8C;AAC1C,WAAO,KAAK,QAAQ,wBAAwB;AAAA,EAChD;AAAA,EAEA,IAAI,WAAmB;AACnB,WAAO,KAAK,QAAQ,SAAS;AAAA,EACjC;AAAA,EAEA,UAAkB;AACd,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAChC;AAAA,EAEA,sBAAsB,eAAwB,MAAc;AACxD,QAAI,KAAK,KAAK,QAAQ,sBAAsB;AAC5C,QAAI,gBAAgB,KAAK,OAAO;AAC5B,YAAM,KAAK,MAAM,sBAAsB;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,WAAmB;AAp5CvB;AAq5CQ,QAAI,KAAK,eAAe;AAEpB,YAAM,SAAS,KAAK;AACpB,cAAO,YAAO,MAAM,UAAb,YAAsB;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,eAAwC;AACpC,UAAM,aAAa,KAAK,kBAAkB;AAC1C,QAAI,cAAc,uBAAuB;AACrC,aAAO,WAAW;AAAA,EAC1B;AAAA,EAEA,iBAA0B;AACtB,QAAI,CAAC,KAAK;AAAgB,aAAO;AACjC,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC;AAAQ,aAAO;AACpB,WAAO,OAAO,QAAQ,SAAS;AAAA,EACnC;AAAA,EAOM,MAAM,IAAY,OAAoB,MAAM;AAAA;AA/6CtD;AAg7CQ,YAAM,OAAO,KAAK;AAClB,UAAI,CAAC,QAAQ,CAAC;AAAI;AAGlB,YAAM,QAAS,OAAO,MAAM,QAAQ,wBAAwB,MAAM,EAAE,KAAI,UAAK,WAAL,mBAAa,IAAI;AACzF,UAAI,CAAC,SAAS,CAAC,MAAM,KAAK,GAAG;AACzB,gBAAQ,MAAM,qBAAqB,2CAA2C,4BAA4B;AAC1G;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,KAAK;AAC1B,UAAI,CAAC;AAAQ;AAGb,YAAM,eAAe,cAAc,iBAAiB;AAAA,QAChD,IAAI,MAAM;AAAA,QACV,MAAM,MAAM;AAAA,QACZ,MAAM;AAAA,QACN;AAAA,QAEA,MAAM,EAAC,QAAQ,OAAO,KAAK,OAAM;AAAA,MACrC,CAAC;AACD,WAAK,OAAO,GAAG,KAAK,YAAY;AAEhC,YAAM,KAAK,OAAO,EAAC,aAAa,KAAK,OAAO,GAAE,CAAC;AAAA,IACnD;AAAA;AAAA,EAMM,SAAS,OAAe;AAAA;AAC1B,UAAI,MAAM,KAAK,KAAK,QAAQ;AAAG;AAE/B,YAAM,OAAO,KAAK;AAClB,UAAI,CAAC;AAAM;AACX,UAAI,KAAK,OAAO,GAAG,UAAU;AAAO;AAEpC,WAAK,OAAO,GAAG,OAAO,OAAO,CAAC;AAE9B,YAAM,KAAK,OAAO,EAAC,aAAa,KAAK,OAAO,GAAE,CAAC;AAAA,IACnD;AAAA;AAAA,EAEA,IAAI,gBAAyB;AACzB,WAAO,KAAK,eAAe,QAAQ,KAAK,KAAK,kBAAkB;AAAA,EACnE;AAAA,EAOM,iBAAiB,MAAqB;AAAA;AAp+ChD;AAq+CQ,UAAI,CAAC,KAAK,UAAU,KAAK,kBAAkB;AAAU,eAAO;AAG5D,WAAK,MAAM,KAAK;AAIhB,YAAM,KAAK,OAAO,kBAAkB,IAAI;AAKxC,aAAM,UAAK,UAAL,mBAAY,OAAO;AAEzB,aAAO;AAAA,IACX;AAAA;AAAA,EAEM,OAAO,MAAM,SAAyB;AAAA;AAExC,UAAI,KAAK,eAAe;AACpB,eAAO,KAAK,iBAAiB,IAAI;AAAA,MACrC;AAIA,aAAO,MAAM,oCAAM,eAAN,MAAa,MAAM,OAAO;AAAA,IAC3C;AAAA;AAAA,EAcM,SAAS,QAAe,OAAe,SAA6D;AAAA;AACtG,UAAI,CAAC,OAAO;AAAO;AAEnB,UAAI,CAAC,KAAK,QAAQ;AACd,gBAAQ,MAAM,8CAA8C;AAC5D;AAAA,MACJ;AAGA,YAAM,SAAQ,mCAAS,UAAS,OAAO;AACvC,YAAM,OAAO,mCAAS;AAItB,YAAM,SAAS,QAAQ,YAAY,MAAM,IAAc,OAAO,IAAI,6BAAM,EAAY;AACpF,YAAM,OAAO,KAAK;AAElB,UAAI,CAAC;AAAM;AAEX,YAAM,gBAAe,mCAAS,aAAY,IAAI,KAAK,aAAa,MAAM;AACtE,WAAK,OAAO,MAAM,UAAU,YAAY,mBAAmB,eAAe,KAAK;AAE/E,YAAM,KAAK,OAAO,EAAC,gBAAgB,KAAK,OAAO,MAAK,CAAC;AAAA,IACzD;AAAA;AAAA,EAEA,aAAa,QAAwB;AACjC,UAAM,OAAO,KAAK;AAClB,WAAO,OAAO,KAAK,OAAO,MAAM,UAAU;AAAA,EAC9C;AAAA,EAEA,cAAqC;AACjC,UAAM,OAAO,KAAK;AAClB,QAAI,CAAC;AAAM;AACX,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAaA,SAAS,QAAkB,MAAgB,SAAmC;AAC1E,QAAI,CAAC,OAAO;AAAO,aAAO;AAC1B,QAAI,CAAC,KAAK;AAAQ,aAAO;AAGzB,UAAM,SAAQ,mCAAS,UAAS,OAAO;AACvC,WAAO,QAAQ,OAAO,gBAAgB;AAEtC,UAAM,SAAS,QAAQ,YAAY,MAAM,IAAc,OAAO,IAAc,6BAAM,EAAY;AAC9F,UAAM,OAAO,KAAK;AAElB,QAAI,CAAC;AAAM,aAAO;AAElB,WAAO,KAAK,OAAO,MAAM,WAAW;AAAA,EACxC;AAAA,EAOM,aAAa;AAAA;AACf,UAAI,CAAC,KAAK;AAAQ;AAElB,YAAM,OAAO,KAAK;AAElB,UAAI,CAAC;AAAM;AAGX,YAAM,aAAa,CAAC;AACpB,iBAAW,UAAU,OAAO,KAAK,KAAK,OAAO,KAAK,GAAG;AACjD,mBAAW,KAAK,YAAY;AAAA,MAChC;AAEA,YAAM,KAAK,OAAO,EAAC,gBAAgB,WAAU,CAAC;AAAA,IAClD;AAAA;AAAA,EAKM,UAAU,QAAgB;AAAA;AAC5B,UAAI,CAAC,KAAK;AAAQ;AAElB,YAAM,aAAa,CAAC;AACpB,iBAAW,KAAK,YAAY;AAE5B,YAAM,KAAK,OAAO,EAAC,gBAAgB,WAAU,CAAC;AAAA,IAClD;AAAA;AAAA,EAMM,iBAAiB,QAAiB;AAAA;AAIpC,YAAM,kBAAkB,mBAAmB,MAAM,MAAM;AAAA,IAC3D;AAAA;AAAA,EAMM,qBAAqB,QAAiB;AAAA;AACxC,YAAM,KAAK,iBAAiB,MAAM;AAAA,IACtC;AAAA;AAAA,EAEM,oBAAoB,OAAe;AAAA;AACrC,YAAM,iBAAiB,KAAK,aAAa;AACzC,UAAI,CAAC;AAAgB;AAGrB,UAAI,eAAe,OAAO,eAAe,WAAW;AAAW;AAC/D,YAAM,oBAAoB,eAAe,OAAO,eAAe;AAC/D,YAAM,aAAa;AACnB,aAAO,MAAM,kBAAkB,4BAA4B,YAAY,iBAAiB;AAAA,IAC5F;AAAA;AAAA,EAEM,0BAA0B;AAAA;AAC5B,YAAM,iBAAiB,KAAK,aAAa;AACzC,UAAI,CAAC;AAAgB;AAErB,aAAO,MAAM,kBAAkB,4BAA4B,IAAI;AAAA,IACnE;AAAA;AAAA,EAEA,wBAA0C;AACtC,QAAI,CAAC,KAAK;AAAQ,aAAO,CAAC;AAE1B,UAAM,QAAQ,KAAK,YAAY;AAC/B,QAAI,CAAC;AAAO,aAAO,CAAC;AAIpB,WAAO,OAAO,QAAQ,KAAK,EACtB,OAAO,CAAC,CAAC,QAAQC,MAAK,MAAM,QAAQ,cAAc,MAAM,CAAC,EACzD,IAAI,CAAC,CAAC,QAAQA,MAAK,MAAO,iCACpB,QAAQ,mBAAmB,MAAM,IADb;AAAA,MAEvB,OAAAA;AAAA,MACA;AAAA,IACJ,EAAE;AAAA,EACV;AAAA,EAKA,IAAI,oBAAyC;AACzC,UAAM,iBAAiB,KAAK,kBAAkB;AAC9C,QAAI,CAAC;AAAgB;AACrB,QAAI,CAAC,eAAe;AAAmB;AAEvC,WAAO,kBAAkB,YAAY,eAAe,iBAAiB;AAAA,EACzE;AAAA,EAKA,IAAI,iBAA4B;AAC5B,UAAM,aAAa,KAAK,YAAY,KAAK;AACzC,QAAI,CAAC;AAAY,aAAO,CAAC;AAEzB,WAAO,kBAAkB,kBAAkB,IAAI;AAAA,EACnD;AAAA,EAKA,IAAI,yBAAkC;AAClC,WAAO,KAAK,YAAY,KAAK;AAAA,EACjC;AAAA,EAKA,IAAI,qBAA8B;AAC9B,UAAM,iBAAiB,KAAK,kBAAkB;AAC9C,WAAO,CAAC,CAAC;AAAA,EACb;AAAA,EAKM,wBAAwB;AAAA;AAC1B,UAAI,KAAK;AAAwB,cAAM,kBAAkB,4BAA4B,IAAI;AACzF,UAAI,KAAK;AAAoB,cAAM,kBAAkB,2BAA2B,IAAI;AAAA,IACxF;AAAA;AAAA,EAEM,UAAU,SAAS,SAAS,MAAM;AAAA;AACpC,YAAM,YAAY,CAAC;AAEnB,cAAQ,gCAAgC,KAAK,MAAM,SAAS,SAAS;AACrE,YAAM,oCAAM,mBAAN,MAAiB,SAAS,SAAS,IAAI;AAI7C,UAAI,CAAC,QAAQ,MAAM,QAAQ,SAAS;AAAG,cAAM,KAAK,OAAO,SAAS;AAAA,IACtE;AAAA;AAAA,EAOO,WAAW,SAAS,SAAsC,MAAY;AAAA;AAGzE,UAAI,QAAQ,SAAS,SAAS,QAAQ,cAAc,OAAO;AAEvD,gBAAQ,gCAAgC,KAAK,MAAM,SAAS,OAAO;AAAA,MACvE;AAEA,YAAM,oCAAM,mBAAN,MAAiB,SAAS,SAAS,IAAI;AAAA,IACjD;AAAA;AACJ;;;ACnuDO,IAAM,iBAAN,MAAqB;AAAA,EACxB,OAAO,yBAAyB,QAAwB;AACpD,UAAM,EAAE,WAAW,IAAI;AAEvB,QAAI,WAAW,eAAe;AAAU,iBAAW,UAAU,WAAW;AAAA,aAC/D,WAAW,eAAe;AAAU,iBAAW,UAAU,WAAW;AAAA,SACxE;AACD,iBAAW,UAAU,WAAW;AAChC,iBAAW,aAAa;AAAA,IAC5B;AAEA,eAAW,QAAQ,KAAK,QAAQ,QAAQ,UAAU,WAAW,QAAQ,MAAM,EAAC,KAAK,GAAG,KAAK,EAAC,CAAC;AAC3F,QAAI,WAAW;AAAM,iBAAW,QAAQ,KAAK,QAAQ;AACrD,eAAW,QAAQ,KAAK,QAAQ,KAAK,IAAI,GAAG,WAAW,QAAQ,KAAK,KAAK;AACzE,eAAW,QAAQ,KAAK,OAAO,GAAG,WAAW,QAAQ,KAAK;AAE1D,eAAW,QAAQ,KAAK,QAAQ,QAAQ,UAAU,WAAW,QAAQ,IAAI;AAAA,EAC7E;AAAA,EAEA,OAAO,qBAAqB,QAAwB;AAChD,UAAM,EAAE,YAAY,YAAY,UAAU,IAAI;AAE9C,eAAW,UAAU,KAAK,OAAO,WAAW,UAAU,QAAQ,WAAW,SAAS;AAClF,eAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,kBAAkB,CAAC;AAExI,eAAW,UAAU,KAAK,OAAO;AACjC,eAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,uBAAuB,CAAC;AAAA,EACjJ;AAAA,EAEA,OAAO,kBAAkB,QAAyC;AAC9D,UAAM,EAAE,YAAY,YAAY,UAAU,IAAI;AAE9C,eAAW,OAAO,KAAK,OAAO,WAAW,UAAU,QAAQ;AAC3D,eAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,oBAAoB,CAAC;AAEpI,eAAW,OAAO,KAAK,OAAO;AAC9B,eAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,yBAAyB,CAAC;AAAA,EAC7I;AAAA,EAEA,OAAO,kBAAkB,QAA0C;AAC/D,UAAM,EAAE,YAAY,YAAY,WAAW,OAAO,IAAI;AACtD,QAAI,QAAQ;AAER,iBAAW,OAAO,KAAK,OAAO,WAAW,UAAU,QAAQ,OAAO,OAAO,gBAAgB;AACzF,iBAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,oBAAoB,CAAC;AAEpI,iBAAW,OAAO,KAAK,OAAQ,OAAO,UAAU,IAAI;AACpD,iBAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,yBAAyB,CAAC;AAAA,IAC7I;AAAA,EACJ;AACJ;;;AChDO,IAAM,gBAAN,MAAoB;AAAA,EAOvB,OAAO,iBAAiB,QAAwB;AAC5C,QAAI,YAAY,cAAc;AAC9B,gBAAY,UAAU,OAAO,cAAc,eAAe;AAC1D,gBAAY,UAAU,OAAO,cAAc,kBAAkB;AAC7D,kBAAc,eAAe,QAAQ,SAAS;AAAA,EAClD;AAAA,EAEA,WAAW,kBAAkB;AACzB,WAAO,CAAC,QAAQ,SAAS;AAAA,EAC7B;AAAA,EAEA,WAAW,qBAAqB;AAC5B,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,WAAW,kBAAkB;AACzB,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,eAAe,QAAgC,WAAW;AAC7D,QAAI,CAAC,OAAO,WAAW;AACnB,aAAO,YAAY,CAAC;AAAA,IACxB;AAGA,cAAU,KAAK;AAEf,cAAU,QAAQ,QAAQ;AAI1B,UAAM,SAAS,CAAC;AAChB,eAAW,YAAY,WAAW;AAC9B,aAAO,YAAY,OAAO,OAAO,UAAU,SAAS,KAAK;AAAA,IAC7D;AAEA,WAAO,YAAY;AAAA,EACvB;AAAA,EAEA,OAAO,mBAAmB,QAAgC;AACtD,UAAM,EAAE,WAAW,IAAI;AACvB,eAAW,CAAC,MAAM,SAAS,KAAK,OAAO,QAAQ,UAAU,GAAG;AAExD,UAAI,CAAC,IAAI,WAAW,eAAe,IAAI,KAAK,CAAC;AAAW;AAExD,gBAAU,MAAM,CAAC;AAAA,IACrB;AAAA,EACJ;AAAA,EAEA,OAAO,eAAe,QAA0D;AAC5E,UAAM,EAAC,MAAK,IAAI;AAEhB,UAAM,MAAM,CAAC;AAAA,EACjB;AAAA,EAEA,OAAO,eAAe,QAAgC;AAClD,UAAM,EAAC,OAAM,IAAI;AACjB,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAChD,UAAI,CAAC,IAAI,OAAO,eAAe,IAAI,KAAK,CAAC;AAAO;AAEhD,YAAM,MAAM,CAAC;AAAA,IACjB;AAAA,EACJ;AACJ;;;ACrGO,IAAM,iBAAN,MAAqB;AAAA,EAIxB,OAAO,kBAAkB,QAAwB;AAC7C,UAAM,EAAC,WAAU,IAAI;AAGrB,eAAW,MAAM,SAAS;AAC1B,eAAW,UAAU,SAAS;AAC9B,eAAW,KAAK,SAAS;AACzB,eAAW,QAAQ,SAAS;AAG5B,aAAS,CAAC,MAAM,SAAS,KAAK,OAAO,QAAQ,UAAU,GAAG;AAGtD,UAAI,SAAS,UAAU,UAAU,YAAY;AAAW;AAExD,qBAAe,iBAAiB,MAAM,SAAS;AAAA,IACnD;AAAA,EACJ;AAAA,EAOA,OAAO,iBAAiB,MAAc,WAA2B;AAE7D,QAAI,CAAC,IAAI,WAAW,eAAe,IAAI,KAAK,CAAC;AAAW;AAIxD,mBAAe,mBAAmB,MAAM,SAAS;AAGjD,cAAU,QAAQ,IAAI,WAAW;AAAA,EACrC;AAAA,EAQA,OAAO,mBAAmB,MAAc,WAA2B;AAE/D,QAAI,CAAC,IAAI,WAAW,eAAe,IAAI,KAAK,CAAC;AAAW;AAIxD,UAAM,QAAQ,GAAG,WAAW,OAAO;AACnC,YAAQ,UAAU,WAAW,KAAK;AAAA,EACtC;AACJ;;;ACnDO,IAAM,aAAN,MAAiB;AAAA,EAMpB,OAAO,cAAc,QAA0C,OAA6B;AACxF,UAAM,EAAE,QAAQ,YAAY,UAAU,IAAI;AAE1C,UAAM,aAAa,CAAC,YAAY,UAAU,mBAAmB,QAAQ;AAGrE,eAAW,QAAQ,CAAC,QAAQ;AACxB,YAAM,QAAQ,IAAI,UAAU,OAAO,KAAK,GAAG;AAC3C,YAAM,cAAc,iBAAiB,OAAO,KAAK,IAAI;AAErD,YAAM,WAAW,WAAW;AAC5B,aAAO,KAAK,MAAM,MAAM;AACxB,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC9B,CAAC;AACD,WAAO,kBAAkB,MAAM;AAC/B,WAAO,SAAS;AAChB,WAAO,OAAO;AACd,WAAO,SAAS;AAChB,WAAO,kBAAkB,QAAQ;AAGjC,UAAM,SAAS,MAAM,KAAK,CAAC,SAAS,KAAK,WAAW,KAAK,KAAK,SAAS,CAAC;AAExE,QAAI,QAAQ;AACR,aAAO,SAAS,OAAO,MAAM;AAE7B,YAAM,mBAAmB,OAAO,oBAAoB;AAEpD,aAAO,kBAAkB,MAAM,iBAAiB,MAAM,OAAO,UAAU,YAAY;AACnF,aAAO,kBAAkB,QAAQ,iBAAiB;AAClD,aAAO,SAAS,OAAO,UAAU;AACjC,aAAO,eAAe,OAAO,YAAY;AACzC,aAAO,OAAO,OAAO,QAAQ;AAC7B,aAAO,OAAO,OAAO,QAAQ;AAC7B,YAAM,aAAa,OAAO,QAAQ;AAClC,UAAI,YAAY;AAEZ,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACnD,cAAI,SAAS,OAAO,MAAM;AACtB,mBAAO,KAAK,OAAO,MAAM;AACzB,mBAAO,KAAK,aAAa,MAAM;AAAA,UACnC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,WACS,OAAO,YAAY,aAAa;AACrC,aAAO,SAAS,OAAO,QAAQ,UAAU,WAAW,SAAS;AAC7D,aAAO,gBAAgB,OAAO,QAAQ,UAAU,WAAW,KAAK;AAChE,aAAO,SAAS,QAAQ,UAAU,WAAW,SAAS;AACtD,aAAO,OAAO,OAAO,QAAQ,UAAU,WAAW,QAAQ;AAC1D,aAAO,OAAO,OAAO,QAAQ,UAAU,WAAW,SAAS;AAC3D,aAAO,OAAO,KAAK,KAAK,SAAS,mBAAmB;AAAA,IACxD;AAGA,QAAI,OAAO,kBAAkB,QAAQ,OAAO,kBAAkB,KAAK;AAC/D,aAAO,kBAAkB,QAAQ,OAAO,kBAAkB;AAAA,IAC9D;AAAA,EACJ;AAAA,EAMA,OAAO,mCAAmC,QAAsC;AAC5E,UAAM,EAAE,QAAQ,YAAY,OAAO,IAAI;AAGvC,WAAO,KAAK,IAAI,gBAAgB,EAAE,QAAQ,CAAC,kBAAkB;AACzD,UAAI,CAAC,OAAO,eAAe,aAAa,GAAG;AACvC,eAAO,QAAQ,MAAM,qEAAqE;AAAA,MAC9F;AAEA,YAAM,YAAY,OAAO;AAIzB,qBAAe,iBAAiB,eAAe,SAAS;AACxD,YAAM,EAAE,OAAO,MAAM,KAAK,MAAM,IAAI;AACpC,YAAM,SAAS;AAGf,aAAO,iBAAiB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAGA,iBAAW,iBAAiB;AAAA,QACxB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,iCAAiC,QAAsC,QAAiB;AAC3F,UAAM,EAAE,QAAQ,WAAW,IAAI;AAC/B,aAAS,0BAAU,OAAO;AAC1B,UAAM,mBAAmB,CAAC,aAAa,SAAS,YAAY,WAAW;AAEvE,qBAAiB,QAAQ,CAAC,aAAa;AACnC,UAAI,WAAW,cAAc,QAAW;AACpC,mBAAW,UAAU,OAAO,0BAAU;AACtC,gBAAQ,UAAU,WAAW,SAAS;AAAA,MAC1C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,iCAAiC,QAAsC,QAAiB;AAC3F,UAAM,EAAE,OAAO,IAAI;AACnB,aAAS,0BAAU,OAAO;AAC1B,UAAM,mBAAmB,CAAC,YAAY,iBAAiB;AACvD,qBAAiB,QAAQ,CAAC,cAAc;AACpC,aAAO,WAAW,OAAO;AAAA,IAC7B,CAAC;AACD,KAAC,GAAG,kBAAkB,UAAU,QAAQ,EAAE,QAAQ,CAAC,UAAU;AACzD,cAAQ,UAAU,OAAO,MAAM;AAAA,IACnC,CAAC;AAAA,EACL;AAAA,EAMA,OAAO,2BAA2B,QAAsC,SAAiB,GAAG;AACxF,eAAW,iCAAiC,QAAQ,MAAM;AAC1D,eAAW,iCAAiC,QAAQ,MAAM;AAAA,EAC9D;AACJ;;;AC9IO,IAAM,WAAN,MAAe;AAAA,EAMlB,OAAO,aAAa,QAAyC,OAA6B;AACtF,UAAM,EAAE,MAAM,IAAI;AAClB,UAAM,OAAO;AACb,UAAM,QAAQ;AAKd,eAAW,WAAW,OAAO,KAAK,IAAI,YAAY,GAAG;AACjD,YAAM,WAAW;AAAA,IACrB;AAEA,UAAM,gBAAgB,IAAI,UAAkB,MAAM,GAAG;AACrD,UAAM,gBAAgB,MAAM,OAAO,CAAC,SAAS,KAAK,eAAe,KAAK,KAAK,WAAW,CAAC;AACvF,mDAAe,QAAQ,CAAC,SAAS;AAE7B,UAAI,KAAK,SAAS,GAAG;AAEjB,YAAI,KAAK,kBAAkB,GAAG;AAC1B,wBAAc,cAAc,KAAK,QAAQ,GAAG,KAAK,cAAc,CAAC;AAAA,QACpE,OACK;AACD,gBAAM,aAAa,KAAK,cAAc;AACtC,cAAI,aAAa,MAAM,MAAM;AACzB,kBAAM,OAAO,KAAK,cAAc;AAChC,kBAAM,QAAQ,KAAK,QAAQ;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ;AAGA,iBAAW,WAAW,OAAO,KAAK,IAAI,YAAY,GAAG;AACjD,cAAM,YAAY,KAAK,iBAAiB,EAAE;AAAA,MAC9C;AAAA,IACJ;AAEA,QAAI,OAAO,UAAU;AAAU,oBAAc,cAAc,KAAK,KAAK,SAAS,WAAW,GAAG,OAAO,UAAU,QAAQ;AAErH,UAAM,QAAQ,QAAQ,UAAU,KAAK;AAAA,EACzC;AAAA,EAKA,OAAO,gBAAgB,QAAwB,OAA6B;AACxE,UAAM,EAAE,WAAW,IAAI;AACvB,UAAM,QAAQ,IAAI,UAAkB;AAEpC,UACK,OAAO,CAAC,SAAS,KAAK,WAAW,KAAK,KAAK,WAAW,CAAC,EACvD,QAAQ,CAAC,SAAS;AACf,UAAI,KAAK,eAAe,GAAG;AACvB,cAAM,cAAc,KAAK,QAAQ,GAAG,CAAC,OAAO,KAAK,eAAe,CAAC,CAAC;AAAA,MACtE;AAAA,IACJ,CAAC;AAEL,UAAM,aAAa,OAAO,UAAU;AACpC,QAAI,cAAc,CAAC,OAAO,MAAM,UAAU,GAAG;AACzC,YAAM,cAAc,aAAa,OAAO,UAAU,CAAC;AAAA,IACvD;AAGA,eAAW,QAAQ,OAAO,GAAG,WAAW,SAAS;AACjD,eAAW,QAAQ,MAAM,MAAM;AAC/B,eAAW,QAAQ,QAAQ,QAAQ,UAAU,WAAW,OAAO;AAAA,EACnE;AACJ;;;AC3EO,IAAM,aAAN,MAAiB;AAAA,EAIpB,OAAO,cAAc,QAAwB;AACzC,UAAM,EAAE,UAAU,QAAQ,UAAU,IAAI,OAAO;AAC/C,QAAI,UAAU;AACV,UAAI,CAAC,SAAS,OAAO;AACjB,iBAAS,QAAQ,CAAC;AAAA,MACtB;AAKA,UAAI,MAAM,QAAQ,SAAS,KAAK,KAAK,SAAS,MAAM,UAAU,GAAG;AAC7D,iBAAS,QAAQ,CAAC;AAAA,MACtB;AAEA,eAAS,YAAY;AAAA,IACzB;AAGA,UAAM,eAAe,CAAC,UAAU;AA3BxC;AA4BY,UAAI,CAAC,MAAM;AAAM,cAAM,OAAO;AAC9B,WAAI,WAAM,UAAN,mBAAa,QAAQ;AACrB,iBAAS,SAAS,MAAM,OAAO;AAC3B,gBAAM,MAAM,UAAU,cAAc,MAAM,KAAK,MAAM,KAAK,OAAO,MAAM,KAAK,CAAC;AAAA,QACjF;AAAA,MACJ;AACA,YAAM,QAAQ,QAAQ,UAAU,KAAK;AAGrC,mCAA6B,KAAK;AAAA,IACtC;AAGA,eAAW,SAAS,OAAO,OAAO,MAAM,GAAG;AACvC,UAAI,CAAC,MAAM,QAAQ;AACf,qBAAa,KAAK;AAAA,MACtB;AAAA,IACJ;AAEA,UAAM,UAAU,OAAO,QAAQ,OAAO,OAAO,SAAS,KAAK;AAE3D,YAAQ,QAAQ,CAAC,CAAC,KAAK,GAAG,MAAuC,IAAI,WAAW,OAAO,OAAO,OAAO,SAAS,MAAM,IAAI;AAExH,aAAS,SAAS,OAAO,OAAO,SAAS,KAAK,GAAG;AAC7C,mBAAa,KAAK;AAClB,YAAM,YAAY;AAAA,IACtB;AAGA,aAAS,CAAC,EAAE,KAAK,KAAK,OAAO,QAAQ,SAAS,GAAG;AAC7C,YAAMC,WAAU,OAAO,QAAQ,MAAM,KAAK;AAE1C,YAAM,QAAQA,SACT,OAAO,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,OAAO,EAChC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM;AAC1B,qBAAa,KAAK;AAGlB,cAAM,YAAY,MAAM;AACxB,YAAI,MAAM;AACV,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACb;AAGA,aAAS,CAAC,UAAU,UAAU,KAAK,OAAO,QAAQ,MAAM,GAAG;AACvD,iBAAW,QAAQ,IAAI,aAAa;AAAA,IACxC;AAAA,EACJ;AACJ;AAQO,IAAM,+BAA+B,CAAC,eAAe;AAExD,QAAM,WAAW;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,WAAW;AAAA,IACX,KAAK,CAAC;AAAA,IACN,OAAO,CAAC;AAAA,IACR,QAAQ;AAAA,EACZ;AAMA,cAAY,YAAY,UAAU,EAAC,WAAW,MAAK,CAAC;AACxD;;;AC7FO,IAAM,aAAa;AAAA,EAYtB,qBAAqB,QAAoB,QAAoB,QAAgC;AACzF,WAAO,OAAO,KAAK,IAAI,OAAO,OAAO,OAAO,KAAK;AACjD,WAAO,QAAQ,IAAI,OAAO;AAE1B,WAAO;AAAA,EACX;AAAA,EAWC,oBAAoB,OAAmC;AACpD,WAAO,cAAc,WAAW;AAAA,MAC5B,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA,IACjB,CAAC;AAAA,EACJ;AACL;;;ACrCO,IAAM,aAAN,MAAiB;AAAA,EACpB,OAAO,cAAc,QAAwB;AACzC,UAAM,EAAE,QAAQ,WAAW,QAAQ,IAAI;AAGvC,WAAO,SAAS,MAAM,UAAU,cAAc,OAAO,SAAS,KAAK,aAAa,OAAO,UAAU,iBAAiB,CAAC;AACnH,WAAO,OAAO,MAAM,UAAU,cAAc,OAAO,OAAO,KAAK,aAAa,OAAO,UAAU,eAAe,CAAC;AAC7G,WAAO,OAAO,MAAM,UAAU,cAAc,OAAO,OAAO,KAAK,aAAa,OAAO,UAAU,eAAe,CAAC;AAG7G,WAAO,OAAO,SAAS,YAAY;AAEnC,aAAS,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC9C,cAAQ,UAAU,KAAK;AACvB,YAAM,QAAQ,IAAI,OAAO;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEA,OAAO,+BAA+B,QAAwB;AAE1D,UAAM,EAAE,QAAQ,WAAW,IAAI;AAG/B,WAAO,SAAS,OAAO,KAAK,MAAM,IAAI,WAAW,SAAS,QAAQ,WAAW,KAAK,QAAQ,WAAW,SAAS,SAAS,CAAC;AACxH,WAAO,OAAO,OAAO,KAAK,MAAM,IAAI,WAAW,MAAM,QAAQ,WAAW,UAAU,QAAQ,WAAW,UAAU,SAAS,CAAC;AACzH,WAAO,OAAO,OAAO,KAAK,MAAM,IAAI,WAAW,SAAS,QAAQ,WAAW,UAAU,QAAQ,WAAW,QAAQ,SAAS,CAAC;AAAA,EAC9H;AAAA,EAKA,OAAO,qBAAqB,QAAwB;AAChD,UAAM,EAAC,QAAQ,WAAW,SAAS,WAAU,IAAI;AAEjD,QAAI,YAAY,SAAS;AAErB,aAAO,SAAS,WAAW,qBAAqB,OAAO,QAAQ,OAAO,QAAQ,OAAO,MAAM;AAC3F,aAAO,OAAO,MAAM,UAAU,cAAc,OAAO,OAAO,KAAK,aAAa,OAAO,UAAU,eAAe,CAAC;AAC7G,cAAQ,UAAU,OAAO,MAAM;AAG/B,aAAO,QAAQ,WAAW,oBAAoB,WAAW,KAAK;AAC9D,aAAO,MAAM,SAAS;AACtB,cAAQ,UAAU,OAAO,KAAK;AAAA,IAClC;AAAA,EACJ;AACJ;;;AC9CO,IAAM,wBAAN,MAA4B;AAAA,EAC/B,OAAO,YAAY,QAA6C;AAC5D,UAAM,EAAE,OAAO,YAAY,UAAU,IAAI;AAEzC,UAAM,KAAK,OAAO,IAAI,KAAK,KAAK,WAAW,UAAU,QAAQ,CAAC;AAC9D,UAAM,KAAK,MAAM,MAAM,KAAK,OAAO,OAAO,UAAU,UAAU;AAC9D,UAAM,KAAK,QAAQ,IAAI,YAAY;AACnC,UAAM,KAAK,WAAW;AAAA,EAC1B;AAAA,EAEA,OAAO,gBAAgB,QAAiD;AACpE,UAAM,EAAE,OAAO,YAAY,UAAU,IAAI;AAEzC,UAAM,SAAS,OAAO,IAAI,KAAK,KAAK,WAAW,KAAK,QAAQ,CAAC;AAC7D,UAAM,SAAS,MAAM,MAAM,SAAS,OAAO,OAAO,UAAU,cAAc;AAC1E,UAAM,SAAS,SAAS,MAAM,WAAW,KAAK,QAAQ,OAAO,UAAU,uBAAuB;AAC9F,UAAM,SAAS,QAAQ,IAAI,YAAY;AACvC,UAAM,SAAS,WAAW;AAAA,EAC9B;AAAA,EAEA,OAAO,aAAa,QAA4C;AAE5D,0BAAsB,YAAY,MAAM;AAExC,UAAM,EAAE,OAAO,YAAY,UAAU,IAAI;AAEzC,UAAM,KAAK,QAAQ;AACnB,UAAM,KAAK,WAAW;AAGtB,UAAM,YAAY,WAAW,UAAU,QAAQ,WAAW,KAAK,QAC3D,WAAW,YACX,WAAW;AAEf,UAAM,SAAS,OAAO,IAAI,KAAK,KAAK,UAAU,QAAQ,CAAC;AACvD,UAAM,SAAS,MAAM,MAAM,SAAS,OAAO,OAAO,UAAU,cAAc;AAC1E,UAAM,SAAS,SAAS,MAAM,WAAW,KAAK;AAC9C,UAAM,SAAS,QAAQ;AACvB,UAAM,SAAS,WAAW;AAAA,EAC9B;AACJ;;;AC1CO,IAAM,eAAN,MAAmB;AAAA,EACtB,OAAO,gBAAgB,QAA4C;AAC/D,UAAM,EAAE,YAAY,UAAU,IAAI;AAElC,UAAM,WAAW,OAAO;AAExB,aAAS,KAAK,QAAQ,WAAW,QAAQ,SAAS,IAAI,OAAO,UAAU,OAAO,KAAK,IAAI,UAAU,SAAS,KAAK,GAAG,EAAE;AACpH,aAAS,IAAI,QAAQ,WAAW,QAAQ,SAAS,IAAI,OAAO,UAAU,MAAM,KAAK,IAAI,UAAU,SAAS,IAAI,GAAG,EAAE;AAAA,EACrH;AACJ;;;ACVO,IAAM,eAAe;AAAA,EAcxB,4BAA4B,kBAAwB,GAAG,aAAmB,GAAW;AACjF,WAAO,aAAa;AAAA,EACxB;AAAA,EAiBA,OAAO,aAAqB,qBAA6B,gBAAsB,GAAW;AACtF,UAAM,sBAAsB,KAAK,IAAI,cAAc,eAAe,CAAC;AACnE,WAAO,KAAK,MAAM,sBAAsB,mBAAmB;AAAA,EAC/D;AAAA,EAQA,cAAc,QAAe,mBAAyB,IAAY;AAC9D,WAAO,SAAS;AAAA,EACpB;AACJ;;;AC7CO,IAAM,aAAN,MAAiB;AAAA,EACpB,OAAO,cAAc,QAA8D;AAC/E,UAAM,EAAE,WAAW,MAAM,IAAI;AAG7B,UAAM,kBAAkB,OAAO,UAAU,kBAAkB;AAC3D,UAAM,sBAAsB,aAAa,4BAA4B,eAAe;AAGpF,UAAM,KAAK,iBAAiB,OAAO,UAAU,sBAAsB;AACnE,UAAM,SAAS,iBAAiB,OAAO,UAAU,0BAA0B;AAG3E,UAAM,aAAa,MAAM,KAAK,WAAW,IAAI,aAAa,OAAO,MAAM,KAAK,OAAO,qBAAqB,MAAM,KAAK,cAAc;AACjI,UAAM,iBAAiB,MAAM,SAAS,WAAW,IAAI,aAAa,OAAO,MAAM,SAAS,OAAO,qBAAqB,MAAM,SAAS,cAAc;AAGjJ,UAAM,KAAK,SAAS;AACpB,UAAM,SAAS,SAAS;AAGxB,WAAO,SAAS;AAAA,MACZ,OAAO,aAAa;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACxBO,IAAM,UAAN,MAAc;AAAA,EACjB,OAAO,eAAe,QAA4B;AAE9C,YAAQ,uBAAuB,MAAM;AAAA,EACzC;AAAA,EAMA,OAAO,uBAAuB,QAA4B;AAhB9D;AAkBQ,UAAM,EAAC,YAAY,SAAQ,IAAI;AAC/B,UAAM,mBAAmB,aAAa,MAAM,mBAAmB,aAAa,CAAC;AAE7E,eAAW,CAAC,MAAM,SAAS,KAAK,OAAO,QAAQ,UAAU,GAAG;AAExD,UAAI,CAAC,MAAM,QAAQ,UAAU,GAAG,GAAG;AAC3B,gBAAQ,MAAM,yDAAyD,WAAW,CAAC,MAAM,QAAQ,UAAU,GAAG,CAAC;AAAA,MACvH,OAAO;AAGH,cAAM,QAAQ,IAAI,UAAU,UAAU,GAAG;AACzC,cAAM,WAAW,gBAAgB;AAGjC,cAAM,YAAW,sBAAiB,eAAjB,mBAA8B;AAC/C,YAAI,OAAO,UAAU,UAAU;AAC3B,gBAAM,QAAQ,kBAAkB,QAAQ;AAAA,QAC5C;AAGA,kBAAU,MAAM,MAAM;AAEtB,uBAAe,mBAAmB,MAAM,SAAS;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ;AACJ;;;AC9BO,IAAM,gBAAN,MAAoB;AAAA,EACvB,OAAO,gBAAgB,QAAuB;AAC1C,kBAAc,iBAAiB,MAAM;AACrC,kBAAc,mBAAmB,MAAM;AACvC,kBAAc,eAAe,MAAM;AACnC,kBAAc,eAAe,MAAM;AAAA,EACvC;AAAA,EAUA,OAAO,mBAAmB,QAAuB,OAA6B;AAC1E,mBAAe,kBAAkB,MAAM;AAEvC,YAAQ,eAAe,MAAM;AAE7B,eAAW,cAAc,MAAM;AAE/B,aAAS,aAAa,QAAQ,KAAK;AACnC,aAAS,gBAAgB,QAAQ,KAAK;AAEtC,eAAW,cAAc,QAAQ,KAAK;AACtC,eAAW,mCAAmC,MAAM;AAGpD,eAAW,+BAA+B,MAAM;AAChD,eAAW,cAAc,MAAM;AAC/B,eAAW,qBAAqB,MAAM;AAEtC,QAAI,OAAO,UAAU,OAAO,IAAI,UAAU;AACtC,4BAAsB,aAAa,MAAM;AAAA,IAC7C,OAAO;AACH,4BAAsB,gBAAgB,MAAM;AAC5C,4BAAsB,YAAY,MAAM;AAAA,IAC5C;AAEA,iBAAa,gBAAgB,MAAM;AACnC,eAAW,cAAc,MAAM;AAE/B,mBAAe,qBAAqB,MAAM;AAC1C,mBAAe,kBAAkB,MAAM;AACvC,mBAAe,kBAAkB,MAAM;AACvC,mBAAe,yBAAyB,MAAM;AAAA,EAClD;AACJ;;;ACjDO,IAAM,cAAN,MAAkB;AAAA,EACrB,OAAO,gBAAgB,MAAmB;AACtC,kBAAc,iBAAiB,IAAI;AACnC,kBAAc,mBAAmB,IAAI;AACrC,kBAAc,eAAe,IAAI;AACjC,kBAAc,eAAe,IAAI;AAAA,EACrC;AAAA,EAEA,OAAO,mBAAmB,MAAmB,OAA6B;AACtE,mBAAe,kBAAkB,IAAI;AACrC,eAAW,cAAc,IAAI;AAE7B,aAAS,aAAa,MAAM,KAAK;AACjC,aAAS,gBAAgB,MAAM,KAAK;AAEpC,eAAW,cAAc,MAAM,KAAK;AACpC,eAAW,mCAAmC,IAAI;AAGlD,eAAW,+BAA+B,IAAI;AAC9C,eAAW,cAAc,IAAI;AAC7B,eAAW,qBAAqB,IAAI;AAEpC,0BAAsB,gBAAgB,IAAI;AAC1C,0BAAsB,YAAY,IAAI;AAEtC,iBAAa,gBAAgB,IAAI;AACjC,eAAW,cAAc,IAAI;AAE7B,mBAAe,qBAAqB,IAAI;AACxC,mBAAe,kBAAkB,IAAI;AACrC,mBAAe,kBAAkB,IAAI;AACrC,mBAAe,yBAAyB,IAAI;AAAA,EAChD;AACJ;;;AChCO,IAAM,aAAN,MAAiB;AAAA,EACpB,OAAO,gBAAgB,MAAkB;AACrC,eAAW,qBAAqB,IAAI;AAEpC,kBAAc,iBAAiB,IAAI;AACnC,kBAAc,mBAAmB,IAAI;AACrC,kBAAc,eAAe,IAAI;AACjC,kBAAc,eAAe,IAAI;AAAA,EACrC;AAAA,EAEA,OAAO,mBAAmB,MAAkB,OAA6B;AACrE,eAAW,sBAAsB,IAAI;AAErC,mBAAe,kBAAkB,IAAI;AACrC,eAAW,cAAc,IAAI;AAE7B,eAAW,+BAA+B,IAAI;AAC9C,eAAW,cAAc,IAAI;AAC7B,eAAW,qBAAqB,IAAI;AAEpC,eAAW,mBAAmB,IAAI;AAElC,0BAAsB,YAAY,IAAI;AACtC,0BAAsB,gBAAgB,IAAI;AAE1C,iBAAa,gBAAgB,IAAI;AACjC,eAAW,cAAc,IAAI;AAE7B,mBAAe,yBAAyB,IAAI;AAAA,EAChD;AAAA,EAEA,OAAO,qBAAqB,MAAkB;AAE1C,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,OAAO,sBAAsB,MAAkB;AAC3C,UAAM,YAAY,KAAK,uBAAuB,KAAK,UAAU;AAE7D,QAAI,WAAW;AACX,YAAM,EAAC,YAAY,QAAQ,YAAY,OAAO,UAAS,IAAI;AAG3D,iBAAW,CAAC,OAAO,KAAK,KAAK,OAAO,QAAQ,UAAU,UAAU,GAAG;AAC/D,YAAI,WAAW,WAAW,QAAW;AACjC,qBAAW,OAAO,OAAO,QAAQ;AAAA,QACrC;AAAA,MACJ;AAGA,iBAAW,CAAC,SAAS,KAAK,KAAK,OAAO,QAAQ,OAAO,MAAM,GAAG;AAE1D,YAAI,UAAU,cAAc,KAAK;AAAG;AAGpC,cAAM,OAAO,UAAU,OAAO,KAAK,CAAC,MAAM,MAAM,OAAO,IAAI,QAAQ;AAAA,MACvE;AAGA,iBAAW,UAAU,KAAK,OAAO,QAAQ,IAAI,UAAU,OAAO,OAAO,UAAU,oBAAoB;AACnG,iBAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,kBAAkB,CAAC;AACxI,iBAAW,UAAU,KAAK,OAAO;AACjC,iBAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,uBAAuB,CAAC;AAE7I,iBAAW,OAAO,KAAK,OAAO,QAAQ,IAAI,UAAU,cAAc,OAAO,UAAU,yBAAyB;AAC5G,iBAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,oBAAoB,CAAC;AACpI,iBAAW,OAAO,KAAK,OAAO;AAC9B,iBAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,yBAAyB,CAAC;AAAA,IAC7I;AAAA,EACJ;AAAA,EAEA,OAAO,mBAAmB,MAAkB;AAvFhD;AAwFQ,UAAM,EAAC,OAAO,WAAU,IAAI;AAC5B,UAAM,SAAQ,gBAAW,QAAQ,UAAnB,YAA4B,KAAK;AAC/C,UAAM,QAAQ,QAAQ,UAAU,KAAK;AAAA,EACzC;AAAA,EAKA,OAAO,uBAAuB,YAAwB;AAClD,UAAM,YAAY;AAAA,MAEd,YAAY;AAAA,QACR,MAAM;AAAA,QACN,SAAS;AAAA,QACT,UAAU;AAAA,QACV,UAAU;AAAA,QACV,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,QACX,UAAU;AAAA,QACV,OAAO;AAAA,QACP,SAAS;AAAA,MACb;AAAA,MAEA,MAAM;AAAA,MACN,aAAa;AAAA,MAEb,QAAQ,CAAC;AAAA,IACb;AACA,YAAQ,YAAY;AAAA,MAChB,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO,KAAK,aAAa,cAAc,cAAc,kBAAkB,gBAAgB;AACjG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,iBAAiB,cAAc,WAAW,gBAAgB;AAC9H;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,cAAc,cAAc,sBAAsB,WAAW,gBAAgB;AACnG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,gBAAgB;AAClF;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,UAAU,cAAc,gBAAgB;AAC5G;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,UAAU,SAAS,oBAAoB,gBAAgB,cAAc,gBAAgB;AACzI;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO,KAAK,UAAU,aAAa,iBAAiB,oBAAoB,cAAc,gBAAgB;AAChH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,gBAAgB,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,gBAAgB,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,cAAc,cAAc,qBAAqB,YAAY,YAAY,gBAAgB;AAC/G;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,WAAW,aAAa,iBAAiB,cAAc,gBAAgB;AAC7F;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,gBAAgB,cAAc,cAAc,sBAAsB,gBAAgB;AACxG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MAEJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,WAAW,gBAAgB;AAC7G;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,cAAc,WAAW,gBAAgB;AAC3H;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,UAAU,gBAAgB;AAC5G;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,iBAAiB,gBAAgB;AACnG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,gBAAgB,cAAc,gBAAgB;AAClG;AAAA,MAEJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,WAAW,gBAAgB;AAC7F;AAAA,MAEJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,OAAO,cAAc,gBAAgB,cAAc,gBAAgB;AACvH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,OAAO,cAAc,gBAAgB,cAAc,gBAAgB;AACvH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,OAAO,cAAc,gBAAgB,cAAc,gBAAgB;AACvH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,OAAO,cAAc,gBAAgB,cAAc,gBAAgB;AACvH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,OAAO,cAAc,gBAAgB,cAAc,gBAAgB;AACvH;AAAA,MAEJ,KAAK;AACD,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,gBAAgB;AAClF;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,mBAAmB,cAAc,gBAAgB,gBAAgB;AACrH;AAAA,MAGJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,cAAc,gBAAgB;AAChG;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,cAAc,gBAAgB,gBAAgB;AAChH;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,cAAc,YAAY,gBAAgB;AAC5G;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,aAAa,iBAAiB,mBAAmB,gBAAgB,cAAc,cAAc,gBAAgB;AACnI;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,WAAW;AAChC,kBAAU,OAAO,KAAK,aAAa,iBAAiB,cAAc,gBAAgB;AAClF;AAAA,MACJ,KAAK;AACD,kBAAU,WAAW,OAAO;AAC5B,kBAAU,WAAW,UAAU;AAC/B,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,WAAW;AAChC,kBAAU,WAAW,YAAY;AACjC,kBAAU,WAAW,QAAQ;AAC7B,kBAAU,WAAW,YAAY;AACjC,kBAAU,OAAO;AACjB,kBAAU,OAAO;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA;AAAA,IACR;AACA,WAAO;AAAA,EACX;AACJ;;;AC9ZO,IAAM,aAAN,MAAiB;AAAA,EACpB,OAAO,gBAAgB,MAAkB;AACrC,eAAW,qBAAqB,IAAI;AAEpC,kBAAc,iBAAiB,IAAI;AACnC,kBAAc,mBAAmB,IAAI;AACrC,kBAAc,eAAe,IAAI;AAAA,EACrC;AAAA,EAEA,OAAO,mBAAmB,MAAkB,OAA6B;AACrE,eAAW,8BAA8B,IAAI;AAC7C,eAAW,wBAAwB,IAAI;AACvC,eAAW,oBAAoB,IAAI;AAEnC,mBAAe,kBAAkB,IAAI;AACrC,eAAW,cAAc,IAAI;AAE7B,eAAW,cAAc,IAAI;AAE7B,eAAW,mCAAmC,IAAI;AAElD,eAAW,8BAA8B,IAAI;AAC7C,eAAW,wBAAwB,IAAI;AAEvC,mBAAe,yBAAyB,IAAI;AAAA,EAChD;AAAA,EAEA,OAAO,qBAAqB,MAAkB;AAE1C,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,OAAO,wBAAwB,MAAkB;AAC7C,UAAM,EAAC,YAAY,OAAO,WAAU,IAAI;AAExC,UAAM,YAAY,KAAK,uBAAuB,UAAU;AAGxD,eAAW,UAAU,OAAO,QAAQ,UAAU;AAC9C,YAAQ,UAAU,WAAW,SAAS;AAAA,EAC1C;AAAA,EAEA,OAAO,8BAA8B,MAAkB;AACnD,UAAM,EAAC,OAAO,QAAQ,WAAU,IAAI;AAEpC,UAAM,aAAa,CAAC,UAAU,UAAU,mBAAmB,UAAU;AAErE,UAAM,YAAY,KAAK,uBAAuB,UAAU;AAGxD,eAAW,QAAQ,CAAC,QAAQ;AACxB,UAAI,OAAO,SAAS,QAAW;AAC3B,eAAO,KAAK,OAAO,QAAQ,UAAU;AACrC,eAAO,KAAK,QAAQ,QAAQ,UAAU,OAAO,IAAI;AAAA,MACrD;AAAA,IACJ,CAAC;AAED,WAAO,SAAS;AAAA,EACpB;AAAA,EAEA,OAAO,oBAAoB,MAAkB;AACzC,UAAM,EAAC,QAAQ,OAAO,WAAU,IAAI;AAEpC,UAAM,YAAY,KAAK,uBAAuB,UAAU;AAIxD,eAAW,CAAC,SAAS,KAAK,KAAK,OAAO,QAAQ,OAAO,MAAM,GAAG;AAC1D,YAAM,OAAO,UAAU,OAAO,KAAK,CAAC,MAAM,MAAM,OAAO,IAAI,QAAQ;AAAA,IACvE;AAAA,EACJ;AAAA,EAEA,OAAO,8BAA8B,MAAkB;AACnD,UAAM,EAAC,QAAQ,OAAO,UAAS,IAAI;AAEnC,WAAO,kBAAkB,MAAM,IAAI,KAAK,KAAK,QAAQ,CAAC,IAAI,OAAO,UAAU,YAAY;AAAA,EAC3F;AAAA,EAEA,OAAO,wBAAwB,MAAkB;AAC7C,UAAM,EAAC,YAAY,OAAO,YAAY,UAAS,IAAI;AAGnD,eAAW,aAAa;AAExB,UAAM,YAAY,KAAK,uBAAuB,UAAU;AAGxD,eAAW,OAAO,KAAK,OAAO,QAAQ,IAAI,UAAU;AACpD,cAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,UAAU,oBAAoB;AAC/F,YAAQ,UAAU,WAAW,OAAO,MAAM,EAAC,KAAK,EAAC,CAAC;AAElD,eAAW,OAAO,KAAK,OAAO;AAC9B,cAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,UAAU,yBAAyB;AACpG,YAAQ,UAAU,WAAW,OAAO,MAAM,EAAC,KAAK,EAAC,CAAC;AAAA,EACtD;AAAA,EAMA,OAAO,uBAAuB,YAAwB;AAClD,UAAM,YAAY;AAAA,MACd,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,WAAW;AAAA,MACX,MAAM;AAAA,MAEN,QAAQ,CAAC,UAAU;AAAA,IACvB;AACA,YAAQ,YAAY;AAAA,MAChB,KAAK;AACD,kBAAU,SAAS;AACnB,kBAAU,kBAAkB;AAC5B,kBAAU,WAAW;AACrB,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,SAAS;AAC/B;AAAA,MACJ,KAAK;AACD,kBAAU,SAAS;AACnB,kBAAU,kBAAkB;AAC5B,kBAAU,WAAW;AACrB,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,WAAW,oBAAoB;AACrD;AAAA,MACJ,KAAK;AACD,kBAAU,SAAS;AACnB,kBAAU,kBAAkB;AAC5B,kBAAU,WAAW;AACrB,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,oBAAoB;AAC1C;AAAA,MACJ,KAAK;AACD,kBAAU,SAAS;AACnB,kBAAU,kBAAkB;AAC5B,kBAAU,WAAW;AACrB,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,eAAe,SAAS;AAC9C;AAAA,MACJ,KAAK;AACD,kBAAU,SAAS;AACnB,kBAAU,kBAAkB;AAC5B,kBAAU,WAAW;AACrB,kBAAU,OAAO;AACjB,kBAAU,OAAO,KAAK,sBAAsB,UAAU;AACtD;AAAA,IACR;AACA,WAAO;AAAA,EACX;AACJ;;;ACxJO,IAAM,cAAN,MAAkB;AAAA,EACrB,OAAO,gBAAgB,QAAqB;AACxC,kBAAc,iBAAiB,MAAM;AACrC,kBAAc,mBAAmB,MAAM;AACvC,kBAAc,eAAe,MAAM;AACnC,kBAAc,eAAe,MAAM;AAAA,EACvC;AAAA,EAEA,OAAO,mBAAmB,QAAqB,OAA6B;AACxE,gBAAY,oBAAoB,MAAM;AACtC,gBAAY,kBAAkB,MAAM;AACpC,gBAAY,wBAAwB,MAAM;AAC1C,gBAAY,cAAc,MAAM;AAEhC,mBAAe,kBAAkB,MAAM;AACvC,eAAW,cAAc,MAAM;AAE/B,eAAW,cAAc,MAAM;AAC/B,gBAAY,wBAAwB,MAAM;AAE1C,eAAW,mCAAmC,MAAM;AACpD,eAAW,iCAAiC,MAAM;AAElD,gBAAY,gBAAgB,MAAM;AAElC,gBAAY,qBAAqB,MAAM;AACvC,mBAAe,kBAAkB,MAAM;AACvC,mBAAe,yBAAyB,MAAM;AAE9C,gBAAY,aAAa,MAAM;AAAA,EACnC;AAAA,EAEA,OAAO,oBAAoB,QAAqB;AA9CpD;AA+CQ,UAAM,EAAE,eAAe,UAAU,IAAI;AAErC,aAAS,CAAC,KAAK,IAAI,KAAK,OAAO,QAAQ,aAAa,GAAG;AAEnD,UAAI,OAAO,KAAK,QAAQ,UAAU;AAC9B,aAAK,MAAM,IAAI,UAAU,KAAK,GAAG,EAAE;AAAA,MACvC;AACA,YAAM,QAAQ,IAAI,UAAU,KAAK,GAAG;AAEpC,YAAM,cAAc,kBAAiB,UAAK,SAAL,YAAa,CAAC;AAEnD,WAAK,MAAM,MAAM;AACjB,cAAQ,UAAU,IAAI;AAEtB,WAAK,QAAQ,IAAI,QAAQ,MAAM;AAAA,IACnC;AAGA,QAAI,WAAW;AACX,oBAAc,eAAe,SAAS;AACtC,oBAAc,kBAAkB,SAAS;AACzC,oBAAc,MAAM,SAAS;AAC7B,oBAAc,SAAS,SAAS;AAAA,IACpC,OAAO;AACH,oBAAc,eAAe,SAAS;AACtC,oBAAc,kBAAkB,SAAS;AACzC,oBAAc,MAAM,SAAS;AAC7B,oBAAc,SAAS,SAAS;AAAA,IACpC;AAAA,EACJ;AAAA,EAKA,OAAO,kBAAkB,QAA0B;AAC/C,UAAM,EAAE,YAAY,cAAc,IAAI;AAGtC,UAAM,eAAe,CAAC,YAAY,aAAa,SAAS,aAAa,UAAU;AAE/E,UAAM,aAAa,QAAQ,UAAU,cAAc,KAAK;AAExD,iBAAa,QAAQ,CAAC,UAAU;AAC5B,UAAI,WAAW,WAAW,QAAW;AACjC,mBAAW,OAAO,OAAO;AAAA,MAC7B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,cAAc,QAA0B;AAC3C,UAAM,EAAE,QAAQ,eAAe,UAAU,IAAI;AAE7C,WAAO,OAAO,OAAO,QAAQ,UAAU,cAAc,MAAM;AAG3D,WAAO,SAAS,iCAAK,cAAc,SAAnB,EAA2B,QAAQ,KAAK;AACxD,WAAO,WAAW,iCAAM,YAAY,cAAc,oBAAoB,cAAc,WAAlE,EAA6E,QAAQ,KAAK;AAC5G,WAAO,QAAQ,iCAAM,YAAY,cAAc,iBAAiB,cAAc,QAA/D,EAAuE,QAAQ,KAAK;AAAA,EACvG;AAAA,EAKA,OAAO,wBAAwB,QAA0B;AACrD,UAAM,EAAC,QAAQ,cAAa,IAAI;AAEhC,WAAO,SAAS,cAAc,MAAM;AAAA,EACxC;AAAA,EAEA,OAAO,wBAAwB,QAA0B;AACrD,UAAM,EAAE,OAAO,YAAY,QAAQ,SAAS,UAAU,IAAI;AAE1D,UAAM,WAAW,KAAK,KAAK,QAAQ,UAAU,WAAW,IAAI,IAAI,CAAC;AAEjE,QAAI,SAAS;AACT,YAAM,SAAS,OAAO,IAAI;AAC1B,YAAM,SAAS,MAAM,MAAM,SAAS,QAAQ,OAAO,UAAU,iBAAiB,KAAK;AAAA,IACvF,OAAO;AACH,YAAM,SAAS,OAAO,KAAK;AAC3B,YAAM,SAAS,MAAO,MAAM,SAAS,QAAQ,OAAO,UAAU,iBAAiB,KAAK;AAAA,IACxF;AACA,UAAM,SAAS,QAAQ,IAAI,YAAY;AAEvC,UAAM,SAAS,OAAO,UAAU;AAChC,WAAO,kBAAkB,MAAM,IAAI,KAAK,KAAK,SAAS,CAAC,IAAI,OAAO,UAAU,YAAY;AAAA,EAC5F;AAAA,EAEA,OAAO,gBAAgB,QAA0B;AAC7C,UAAM,EAAE,eAAe,UAAU,UAAU,IAAI;AAE/C,QAAI,aAAa,QAAQ,UAAU,YAAY,cAAc,iBAAiB,cAAc,KAAK;AAGjG,aAAS,KAAK,OAAO,IAAI,KAAK,IAAI,GAAG,aAAa,CAAC;AACnD,aAAS,KAAK,QAAQ,SAAS,KAAK;AAEpC,aAAS,IAAI,OAAO,KAAK,KAAK,IAAI,GAAG,aAAa,CAAC;AACnD,aAAS,IAAI,QAAQ,SAAS,IAAI;AAAA,EACtC;AAAA,EAEA,OAAO,qBAAqB,QAA0B;AAClD,UAAM,EAAE,eAAe,YAAY,UAAU,IAAI;AAEjD,UAAM,QAAQ,QAAQ,UAAU,cAAc,KAAK;AAEnD,eAAW,UAAU,KAAK,OAAO,QAAQ;AACzC,eAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,kBAAkB,CAAC;AACxI,eAAW,UAAU,KAAK,OAAO;AACjC,eAAW,UAAU,KAAK,MAAM,UAAU,cAAc,WAAW,UAAU,KAAK,KAAK,aAAa,OAAO,UAAU,uBAAuB,CAAC;AAE7I,YAAQ,UAAU,WAAW,UAAU,IAAI;AAC3C,YAAQ,UAAU,WAAW,UAAU,IAAI;AAAA,EAC/C;AAAA,EAEA,OAAO,aAAa,QAA0B;AAC1C,UAAM,EAAE,OAAO,UAAU,IAAI;AAE7B,UAAM,MAAM,UAAU,cAAc,MAAM,KAAK,iBAAiB,OAAO,MAAM,OAAO,CAAC;AACrF,UAAM,MAAM,UAAU,cAAc,MAAM,KAAK,aAAa,OAAO,UAAU,QAAQ,CAAC;AAEtF,YAAQ,UAAU,KAAK;AAAA,EAC3B;AACJ;;;AClIO,IAAM,oBAAN,MAAwB;AAAA,EAgB3B,YAAY,MAAoC,WAAwC;AACpF,SAAK,SAAS,KAAK,mBAAmB,IAAI;AAC1C,SAAK,YAAY;AAAA,EACrB;AAAA,EAQA,mBAAmB,OAAkC,CAAC,GAAuB;AAEzE,WAAO,kCAAI,EAAC,QAAQ,CAAC,EAAC,IAAM;AAAA,EAChC;AAAA,EAKA,IAAI,eAAwB;AACxB,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EAKA,IAAI,wBAAiC;AACjC,WAAO,KAAK,cAAc,UAAa,KAAK,UAAU;AAAA,EAC1D;AAAA,EAKA,IAAI,wBAAiC;AACjC,WAAO,KAAK,cAAc,UAAa,KAAK,UAAU;AAAA,EAC1D;AAAA,EAKA,IAAI,SAA8B;AAC9B,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAKA,IAAI,YAAqB;AAErB,WAAO,CAAC,QAAQ,MAAM,QAAQ,KAAK,OAAO,MAAM;AAAA,EACpD;AAAA,EAKA,IAAI,WAAoB;AACpB,WAAO,KAAK,QAAQ,eAAe,OAAO;AAAA,EAC9C;AAAA,EAKA,IAAI,oBAA6B;AAC7B,WAAO,KAAK,QAAQ,OAAO,eAAe,OAAO;AAAA,EACrD;AAAA,EAKA,IAAI,eAAwB;AACxB,WAAO,KAAK,aAAa,KAAK;AAAA,EAClC;AAAA,EAYA,WAAW,UAAkB,OAAwB;AACjD,WAAO,KAAK,QAAQ,OAAO,cAAc;AAAA,EAC7C;AAAA,EAQA,UAAU,UAAkB,OAAe;AACvC,SAAK,OAAO,OAAO,YAAY;AAC/B,SAAK,+BAA+B;AAAA,EACxC;AAAA,EAOA,YAAY,UAAkB;AAC1B,WAAO,KAAK,OAAO,OAAO;AAC1B,SAAK,+BAA+B;AAAA,EACxC;AAAA,EAMA,SAAS,UAAkB;AACvB,WAAO,KAAK,OAAO,OAAO,eAAe,QAAQ;AAAA,EACrD;AAAA,EAQA,gBAAgB,UAAkB,OAAe;AAC7C,QAAI,KAAK,WAAW,UAAU,KAAK,GAAG;AAClC,WAAK,YAAY,QAAQ;AAAA,IAC7B,OAAO;AACH,WAAK,UAAU,UAAU,KAAK;AAAA,IAClC;AAAA,EACJ;AAAA,EASA,MAAM,UAAyC,CAAC,GAAG;AAhMvD;AAkMQ,QAAI,CAAC,KAAK,WAAW,QAAQ,WAAW,QAAQ,QAAQ;AAEpD,WAAK,UAAU;AAAA,QACX,QAAQ,CAAC;AAAA,QACT,OAAO;AAAA,MACX;AAAA,IACJ;AAGA,SAAK,UAAS,aAAQ,WAAR,YAAkB,KAAK;AAGrC,UAAM,cAAa,aAAQ,eAAR,YAAsB;AAGzC,UAAM,UAAgC,CAAC;AAIvC,QAAI,KAAK,aAAa,KAAK,uBAAuB;AAE9C,UAAI,CAAC,KAAK;AAAU,eAAO,QAAQ,MAAM,kBAAkB,KAAK,YAAY,qEAAqE;AAEjJ,YAAM,QAAQ,KAAK,UAAU;AAC7B,WAAK,6BAA6B,OAAO,OAAO;AAAA,IACpD;AAGA,YAAQ,KAAK,KAAK,MAAM;AAGxB,YAAQ,QAAQ,YAAU,QAAQ,MAAM,YAAY,KAAK,SAAS,MAAM,CAAC;AAGzE,QAAI,cAAc,WAAW,SAAS,GAAG;AACrC,aAAO,KAAK,KAAK,QAAQ,MAAM,EAAE,QAAQ,CAAC,cAAc;AACpD,YAAI,CAAC,WAAW,SAAS,SAAS;AAAG,iBAAO,KAAK,QAAQ,OAAO;AAAA,MACpE,CAAC;AAAA,IACL;AAGA,QAAI,CAAC,KAAK,YAAY,KAAK;AAAmB,WAAK,QAAQ,QAAQ,KAAK,QAAQ,OAAO;AAGvF,QAAI,KAAK;AAAU,WAAK,QAAQ,QAAQ,KAAK,QAAQ;AAAA;AAChD,WAAK,QAAQ,QAAQ,KAAK,iBAAiB;AAEhD,YAAQ,MAAM,sDAAqD,gBAAK,cAAL,mBAAgB,aAAhB,mBAA0B,eAAe,KAAK,QAAQ,SAAS,KAAK,OAAO;AAAA,EAClJ;AAAA,EAQA,6BAA6B,OAAiB,SAA+B;AA1PjF;AA2PQ,UAAM,SAAQ,WAAM,SAAS,MAAf,mBAAkB;AAEhC,QAAI,CAAC;AAAO;AACZ,UAAM,cAAc,KAAK,wBAAwB,KAAK;AACtD,QAAI,CAAC;AAAa;AAGlB,YAAQ,KAAK,WAAW;AAAA,EAC5B;AAAA,EAEA,wBAAwBC,WAAiE;AAErF,QAAI,CAAC,KAAK;AAAU;AAEpB,UAAM,YAAY,2BAA2B,qBAAqBA,SAAQ;AAE1E,WAAO,UAAU,OAAO,KAAK;AAAA,EACjC;AAAA,EAWA,mBAA2B;AACvB,WAAO,OAAO,OAAO,KAAK,QAAQ,MAAM,EAAE,OAAO,CAAC,KAAK,YAAY,MAAM,SAAS,CAAC,KAAK;AAAA,EAC5F;AAAA,EASA,IAAI,QAAgB;AAChB,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,MAAM;AAAA,IACf;AACA,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EAKA,QAAQ;AACJ,SAAK,SAAS,KAAK,mBAAmB;AAEtC,SAAK,MAAM,EAAC,SAAS,KAAI,CAAC;AAE1B,SAAK,yBAAyB;AAAA,EAClC;AAAA,EAEA,iCAAiC;AAC7B,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK;AAAW;AACvC,SAAK,UAAU,OAAO,KAAK,YAAY,KAAK;AAAA,EAChD;AAAA,EAEA,kCAAkC;AAC9B,QAAI,CAAC,KAAK,YAAY,CAAC,KAAK;AAAW;AACvC,SAAK,UAAU,QAAQ,KAAK,YAAY,KAAK;AAAA,EACjD;AAAA,EAEA,2BAA2B;AACvB,SAAK,+BAA+B;AACpC,SAAK,gCAAgC;AAAA,EACzC;AACJ;;;AC3TO,IAAM,0BAAN,cAAsC,kBAAkB;AAAA,EAAxD;AAAA;AAGH,oBAAsC;AAAA;AAC1C;;;ACJO,IAAM,gBAAN,cAA4B,kBAAkB;AAAA,EAA9C;AAAA;AAGH,oBAAsC;AAAA;AAC1C;;;ACFO,IAAM,wBAAN,cAAoC,kBAAkB;AAAA,EAAtD;AAAA;AAGH,oBAAsC;AAAA;AAAA,EAGtC,IAAI,SAAsC;AACtC,WAAO,GAAG,OAAO,cAAc;AAAA,EACnC;AAAA,EAUA,aAAa,QAA0C;AACnD,WAAO;AAAA,MACH,OAAO,OAAO,OAAO,CAAC,OAAe,UAAmB,UAAU,KAAK,OAAO,QAAQ,QAAQ,IAAI,OAAQ,CAAC;AAAA,MAC3G,UAAU,OAAO,OAAO,CAAC,OAAe,UAAmB,UAAU,KAAK,OAAO,WAAW,QAAQ,IAAI,OAAQ,CAAC;AAAA,MACjH,OAAO,OAAO,OAAO,CAAC,OAAe,UAAmB,UAAU,KAAK,OAAO,QAAQ,QAAQ,IAAI,OAAQ,CAAC;AAAA,MAC3G,SAAS,OAAO,OAAO,CAAC,OAAe,UAAmB,UAAU,KAAK,OAAO,UAAU,QAAQ,IAAI,OAAQ,CAAC;AAAA,IACnH;AAAA,EACJ;AAAA,EAOA,mBAA2B;AAEvB,QAAI,KAAK,QAAQ,OAAO;AACpB,aAAO,KAAK,QAAQ,OAAO;AAG/B,UAAM,mBAAmB,OAAO,QAAQ,KAAK,QAAQ,MAAM;AAE3D,UAAM,eAAe,iBAAiB,IAAI,CAAC,CAAC,UAAU,KAAK,MAAM,QAAQ,QAAQ,CAAC;AAElF,UAAM,QAAQ,KAAK,aAAa,YAAY;AAE5C,QAAI,MAAM,UAAU,KAAK,MAAM,SAAS,GAAG;AACvC,aAAO,KAAK,OAAO;AAAA,IACvB,WACS,MAAM,UAAU,KAAK,MAAM,YAAY,GAAG;AAC/C,aAAO,KAAK,OAAO;AAAA,IACvB,WACS,MAAM,aAAa,KAAK,MAAM,SAAS,GAAG;AAC/C,aAAO,KAAK,OAAO;AAAA,IACvB,WACS,MAAM,UAAU,GAAG;AACxB,aAAO,KAAK,OAAO;AAAA,IACvB;AAEA,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,YAAY,UAAwB;AAChC,QAAI,KAAK,OAAO,OAAO,cAAc,KAAK,QAAQ,OAAO;AAAW,WAAK,UAAU,UAAU,CAAC;AAAA;AACzF,aAAO,KAAK,OAAO,OAAO;AAAA,EACnC;AACJ;;;AC/BO,IAAM,6BAAN,MAAiC;AAAA,EAoBpC,YAAY,MAAqCC,WAAoC;AAGjF,QAAI,CAAC,QAAQ,QAAQ,MAAM,QAAQ,IAAI,MAAM,UAAU;AACnD,aAAO,2BAA2B;AAAA,IACtC;AAEA,SAAK,SAAS,KAAM,oBAAoB,IAAI;AAC5C,SAAK,WAAWA;AAGhB,SAAK,WAAW;AAAA,MACZ,OAAO,IAAI,cAAa,KAAK,OAAO,OAAO,IAAI;AAAA,MAC/C,kBAAkB,IAAI,wBAAwB,KAAK,OAAO,kBAAkB,IAAI;AAAA,MAChF,eAAe,IAAI,sBAAsB,KAAK,OAAO,eAAe,IAAI;AAAA,IAC5E;AAAA,EACJ;AAAA,EAKA,IAAI,QAAsB;AACtB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAKA,IAAI,mBAA4C;AAC5C,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAKA,IAAI,gBAAuC;AACvC,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EAQA,oBAAoB,MAA2E;AAE3F,WAAO,QAAQ,MAAM,UAAU,IAAI;AAEnC,eAAW,CAAC,UAAU,SAAS,KAAK,OAAO,QAAQ,2BAA2B,iBAAiB,GAAG;AAC9F,UAAI,CAAC,KAAK,eAAe,QAAQ;AAAG,aAAK,YAAY;AAAA,IACzD;AAEA,WAAO;AAAA,EACX;AAAA,EAQA,YAAY,UAA8C,UAAkD,CAAC,GAAW;AACpH,UAAM,WAAW,KAAK,SAAS;AAG/B,QAAI,QAAQ,YAAY;AACpB,eAAS,MAAM,EAAC,YAAY,QAAQ,WAAU,CAAC;AAAA,IACnD;AAEA,WAAO,SAAS;AAAA,EACpB;AAAA,EAcA,SAAS,UAAyC,CAAC,GAAG;AAElD,SAAK,UAAU,CAAC;AAGhB,WAAO,QAAQ,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC,UAAU,OAAO,MAAM;AAxJvE;AA2JY,aAAO,QAAQ,KAAK,OAAO,UAAU,MAAM,EAAE,QAAQ,CAAC,CAAC,UAAU,KAAK,MAAM;AACxE,gBAAQ,OAAO;AAAA,UACX,KAAK;AAAA,UACL,KAAK;AACD,mBAAO,KAAK,OAAO,UAAU,OAAO;AAAA,QAC5C;AAAA,MACJ,CAAC;AAGD,cAAQ,WAAU,aAAQ,YAAR,YAAmB;AACrC,cAAQ,SAAS,KAAK,OAAO;AAC7B,cAAQ,MAAM,OAAO;AAGrB,WAAK,QAAQ,YAAY,QAAQ;AAAA,IACrC,CAAC;AAAA,EACL;AAAA,EAQA,OAAa,mBAAmBA,WAAmC;AAAA;AAC/D,UAAIA,qBAAoB,UAAU;AAE9B,cAAMA,UAAS,OAAO,EAAC,gCAAgC,KAAI,GAAG,EAAC,QAAQ,MAAK,CAAC;AAC7E,cAAMA,UAAS,OAAO,EAAC,8BAA8B,2BAA2B,kBAAiB,CAAC;AAAA,MACtG,OAAO;AACH,cAAMA,UAAS,UAAU,aAAa,MAAM,QAAQ;AACpD,cAAMA,UAAS,QAAQ,aAAa,MAAM,UAAU,2BAA2B,iBAAiB;AAAA,MACpG;AAAA,IACJ;AAAA;AAAA,EASA,OAAa,wBAAwBA,WAAmC,UAAmF;AAAA;AACvJ,YAAM,YAAY,2BAA2B,qBAAqBA,SAAQ;AAE1E,UAAI,CAAC,UAAU,OAAO,eAAe,QAAQ;AAAG,eAAO;AACvD,gBAAU,OAAO,YAAY,2BAA2B;AAExD,YAAM,2BAA2B,qBAAqBA,WAAU,UAAU,MAAM;AAChF,aAAO;AAAA,IACX;AAAA;AAAA,EAQA,OAAa,qBAAqBA,WAAwE;AAAA;AACtG,aAAO,MAAM,2BAA2B,wBAAwBA,WAAU,eAAe;AAAA,IAC7F;AAAA;AAAA,EAQA,OAAa,uBAAuBA,WAAwE;AAAA;AACxG,aAAO,MAAM,2BAA2B,wBAAwBA,WAAU,kBAAkB;AAAA,IAChG;AAAA;AAAA,EAQA,OAAa,aAAaA,WAAwE;AAAA;AAC9F,aAAO,MAAM,2BAA2B,wBAAwBA,WAAU,OAAO;AAAA,IACrF;AAAA;AAAA,EAKA,WAAW,mBAAoB;AAC3B,WAAO;AAAA,MACH,QAAQ,CAAC;AAAA,IACb;AAAA,EACJ;AAAA,EAKA,WAAW,oBAAkD;AACzD,WAAO;AAAA,MACH,eAAe,2BAA2B;AAAA,MAC1C,OAAO,2BAA2B;AAAA,MAClC,kBAAkB,2BAA2B;AAAA,IACjD;AAAA,EACJ;AAAA,EAKA,IAAI,kBAA2B;AAC3B,WAAO,KAAK,oBAAoB,OAAO,MAAM;AAAA,EACjD;AAAA,EAKA,IAAI,kBAA2B;AAC3B,WAAO,KAAK,oBAAoB,OAAO,MAAM;AAAA,EACjD;AAAA,EAQC,OAAO,yBAAyBA,WAAiE;AAC9F,QAAIA,qBAAoB,UAAU;AAC9B,aAAOA,UAAS,OAAO;AAAA,IAC3B,OAAO;AACH,aAAOA,UAAS,QAAQ,aAAa,MAAM,QAAQ;AAAA,IACvD;AAAA,EACJ;AAAA,EAOA,OAAO,aAAaA,WAA+D;AAG/E,QAAIA,qBAAoB,UAAU;AAC9B,aAAOA,UAAS,sBAAsB;AAAA,IAC1C;AAEA,WAAO,2BAA2B,qBAAqBA,SAAQ;AAAA,EACnE;AAAA,EAQA,OAAO,qBAAqBA,WAA+D;AAGvF,UAAM,OAAO,2BAA2B,yBAAyBA,SAAQ;AACzE,WAAO,IAAI,2BAA2B,MAAMA,SAAQ;AAAA,EACxD;AAAA,EAQA,OAAa,qBAAqBA,WAAmC,WAAyC;AAAA;AAC1G,UAAIA,qBAAoB,UAAU;AAE9B,cAAMA,UAAS,OAAO,EAAC,gCAAgC,KAAI,GAAG,EAAC,QAAQ,MAAK,CAAC;AAC7E,cAAMA,UAAS,OAAO,EAAC,8BAA8B,UAAS,CAAC;AAAA,MACnE,OAAO;AAEH,cAAMA,UAAS,UAAU,aAAa,MAAM,QAAQ;AACpD,cAAMA,UAAS,QAAQ,aAAa,MAAM,UAAU,SAAS;AAAA,MACjE;AAAA,IACJ;AAAA;AAAA,EAKM,iBAAiB;AAAA;AACnB,UAAI,CAAC,KAAK;AAAU,eAAO,QAAQ,MAAM,mBAAmB,KAAK,YAAY,+CAA+C;AAC5H,YAAM,2BAA2B,qBAAqB,KAAK,UAAU,KAAK,MAAM;AAAA,IACpF;AAAA;AAAA,EAKM,WAAW;AAAA;AACb,UAAI,CAAC,KAAK;AAAU,eAAO,QAAQ,MAAM,mBAAmB,KAAK,YAAY,8CAA8C;AAC3H,YAAM,2BAA2B,mBAAmB,KAAK,QAAQ;AAEjE,WAAK,SAAS,2BAA2B,yBAAyB,KAAK,QAAQ;AAAA,IACnF;AAAA;AAAA,EAKM,wBAAwB;AAAA;AAC1B,UAAI,CAAC,OAAO,SAAS,CAAC,OAAO;AAAO;AACpC,UAAI,CAAC,KAAK;AAAiB;AAG3B,YAAM,QAAQ,KAAK;AACnB,UAAI,OAAO,MAAM,OAAO,MAAM;AAAI;AAGlC,aAAO,MAAM,OAAO,QAAQ,WAAM;AAzW1C;AAyW6C,2BAAM,UAAN,mBAAa,wBAAwB;AAAA,OAAU;AAAA,IACxF;AAAA;AACJ;;;AC7VO,IAAM,SAAN,MAAa;AAAA,EAChB,OAAO,gBAAgB,MAAc;AACjC,kBAAc,mBAAmB,IAAI;AACrC,kBAAc,eAAe,IAAI;AAEjC,WAAO,iBAAiB,IAAI;AAC5B,WAAO,iBAAiB,IAAI;AAC5B,WAAO,mBAAmB,IAAI;AAAA,EAClC;AAAA,EAEA,OAAO,mBAAmB,MAAc,OAA6B;AACjE,WAAO,wBAAwB,IAAI;AAEnC,eAAW,cAAc,IAAI;AAE7B,WAAO,sBAAsB,IAAI;AACjC,WAAO,sBAAsB,IAAI;AAEjC,eAAW,mCAAmC,IAAI;AAElD,WAAO,cAAc,IAAI;AACzB,WAAO,mBAAmB,IAAI;AAE9B,WAAO,kBAAkB,IAAI;AAC7B,mBAAe,yBAAyB,IAAI;AAAA,EAChD;AAAA,EAQA,OAAO,iBAAiB,MAAc;AAGlC,UAAM,QAAQ,KAAK,SAAS,CAAC;AAE7B,QAAI,CAAC,MAAM;AAAQ,YAAM,SAAS,cAAc,UAAU;AAE1D,SAAK,QAAQ;AAAA,EACjB;AAAA,EAMA,OAAO,iBAAiB,MAAc;AAClC,QAAI,YAAY,cAAc;AAC9B,gBAAY,UAAU,OAAO,cAAc,eAAe;AAC1D,kBAAc,eAAe,MAAM,SAAS;AAAA,EAChD;AAAA,EAEA,OAAO,cAAc,MAAc;AAC/B,SAAK,OAAO,SAAS,YAAY,kBAAkB,KAAK,KAAK,MAAM;AAAA,EACvE;AAAA,EAEA,OAAO,mBAAmB,MAAc;AACpC,UAAM,EAAE,WAAW,OAAO,OAAO,IAAI;AAIrC,WAAO,kBAAkB,MAAM,OAAO,UAAU,eAAe,IAAI,YAAY,oBAAoB,OAAO,MAAgB;AAG1H,UAAM,OAAO,OAAO,YAAY,oBAAoB,OAAO,MAAgB;AAC3E,UAAM,OAAO,MAAM,UAAU,cAAc,MAAM,OAAO,KAAK,aAAa,OAAO,UAAU,eAAe,CAAC;AAC3G,UAAM,OAAO,MAAM,OAAO,kBAAkB;AAC5C,UAAM,OAAO,QAAQ,IAAI,YAAY;AAAA,EACzC;AAAA,EAEA,OAAO,kBAAkB,MAAc;AACnC,UAAM,EAAE,YAAY,WAAW,KAAK,IAAI;AAIxC,eAAW,aAAa;AAGxB,eAAW,OAAO,KAAK,OAAO,YAAY,oBAAoB,KAAK,MAAM;AACzE,eAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,oBAAoB,CAAC;AAEpI,eAAW,OAAO,KAAK,OAAO,YAAY,oBAAoB;AAC9D,eAAW,OAAO,KAAK,MAAM,UAAU,cAAc,WAAW,OAAO,KAAK,KAAK,aAAa,OAAO,UAAU,yBAAyB,CAAC;AAAA,EAC7I;AAAA,EAKA,OAAO,sBAAsB,MAAc;AACvC,QAAI,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,KAAK;AAAM;AAEtC,WAAO,KAAK,KAAK,KAAK,IAAI,EAAE,QAAQ,qBAAmB;AACnD,YAAM,YAA6B,KAAK,KAAK,KAAK;AAClD,WAAK,OAAO,UAAU,KAAK,OAAO,UAAU;AAC5C,WAAK,OAAO,UAAU,KAAK,aAAa;AAAA,IAC5C,CAAC;AAAA,EACL;AAAA,EAKA,OAAO,mBAAmB,MAAc;AACpC,UAAM,EAAE,WAAW,IAAI;AAEvB,eAAW,aAAa,OAAO,OAAO,UAAU,GAAG;AAC/C,gBAAU,SAAS;AAAA,IACvB;AAAA,EACJ;AAAA,EAEA,OAAO,sBAAsB,MAAc;AACvC,UAAM,EAAE,YAAY,KAAK,IAAI;AAE7B,eAAW,MAAM,OAAO,KAAK,IAAI,UAAU,GAAG;AAC1C,UAAI,CAAC,WAAW,eAAe,EAAE;AAAG;AAEpC,UAAI,CAAC,SAAS,QAAQ,WAAW,WAAW,EAAE,SAAS,EAAE;AAAG;AAE5D,YAAM,YAAY,WAAW;AAI7B,gBAAU,OAAO;AAEjB,YAAM,QAAQ,IAAI,UAAU,UAAU,GAAG;AACzC,YAAM,QAAQ,mBAAmB,YAAY,uBAAuB,KAAK,MAAM,CAAC;AAChF,gBAAU,MAAM,MAAM;AAEtB,qBAAe,iBAAiB,IAAI,SAAS;AAAA,IACjD;AAAA,EACJ;AAAA,EAKA,OAAO,wBAAwB,MAAc;AACzC,UAAM,EAAE,OAAO,IAAI;AAEnB,eAAW,MAAM,OAAO,KAAK,IAAI,gBAAgB,GAAG;AAChD,UAAI,CAAC,OAAO,eAAe,EAAE;AAAG;AAEhC,YAAM,YAAY,OAAO;AACzB,qBAAe,iBAAiB,IAAI,SAAS;AAAA,IACjD;AAAA,EACJ;AAEJ;;;AC9IO,IAAM,gBAAN,MAAoB;AAAA,EAGvB,YAAYC,WAAoB;AAE5B,QAAIA,UAAS,OAAO,gBAAgB;AAChC,cAAQ,MAAM,gGAAgG;AAElH,SAAK,WAAWA;AAAA,EACpB;AAAA,EAQM,OAAO,MAAoC;AAAA;AAnCrD;AAoCQ,cAAQ,IAAI,qCAAqC,MAAM;AAEvD,aAAO,cAAc,aAAa,IAAI;AAEtC,UAAI,KAAK,WAAW;AAAG,eAAO,QAAQ,MAAM,0FAA0F;AACtI,UAAI,KAAK,OAAO,IAAI;AAAG,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,mCAAmC;AAC3G,UAAI,KAAK,SAAS,iBAAiB,SAAS;AAAM;AAElD,YAAM,aAAa;AAAA,QACf,sBAAsB;AAAA,UAClB,CAAC,OAAO;AAAA,YACJ;AAAA,YACA,OAAO;AAAA,YACP,SAAS,CAAC;AAAA,UACd;AAAA,QACJ;AAAA,MACJ;AAEA,cAAQ,IAAI,uDAAuD,UAAU;AAE7E,YAAM,KAAK,SAAS,OAAO,YAAY,EAAC,QAAQ,MAAK,CAAC;AAEtD,aAAO;AAAA,IACX;AAAA;AAAA,EAQM,OAAO,IAAoE;AAAA,+CAApE,MAAc,SAAiB,KAAK,SAAS,iBAAiB,MAAM;AAnErF;AAoEQ,cAAQ,IAAI,qCAAqC,8BAA8B,QAAQ;AAEvF,UAAI,KAAK,SAAS,iBAAiB,SAAS;AACxC,gBAAO,QAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,0CAA0C;AAEhG,UAAI,CAAC,KAAK,OAAO,IAAI;AACjB,eAAO,QAAQ,MAAM,yCAAyC,4CAA4C,QAAQ;AAGtH,UAAI,CAAC,KAAK,OAAO,MAAM;AACnB,iBAAS,KAAK,SAAS,iBAAiB;AAG5C,YAAM,aAAa,QAAQ,uBAAuB,sBAAsB,IAAI;AAG5E,UAAI,KAAK,SAAS,iBAAiB,SAAS,QAAQ;AAEhD,mBAAW,sBAAsB,oBAAoB;AAAA,UAEjD,GAAG,KAAK,SAAS,OAAO,YAAY,MAAM;AAAA,UAE1C,GAAG,KAAK,SAAS,OAAO,YAAY,QAAQ;AAAA,QAChD;AAAA,MACJ;AAEA,cAAQ,IAAI,uDAAuD,UAAU;AAE7E,YAAM,KAAK,SAAS,OAAO,YAAY,EAAC,QAAQ,MAAK,CAAC;AAAA,IAC1D;AAAA;AAAA,EASA,OAAO,MAAe;AAElB,WAAO,SAAS,OAAO,KAAK,KAAK,SAAS,OAAO,WAAW,EACrC,KAAK,eAAa,UAAU,YAAY,MAAM,KAAK,YAAY,CAAC;AAAA,EAC3F;AAAA,EAOA,OAAO,MAAiC;AAEpC,WAAO,KAAK,SAAS,OAAO,YAAY;AAAA,EAC5C;AAAA,EAKA,SAA0B;AAEtB,WAAO,KAAK,SAAS,OAAO;AAAA,EAChC;AAAA,EAQM,OAAO,SAAiB,SAAuC;AAAA;AACjE,cAAQ,IAAI,yCAAyC,cAAc,SAAS;AAE5E,gBAAU,cAAc,aAAa,OAAO;AAE5C,UAAI,QAAQ,WAAW;AAAG,eAAO,QAAQ,MAAM,0FAA0F;AACzI,UAAI,KAAK,SAAS,iBAAiB,SAAS;AAAS;AACrD,UAAI,YAAY;AAAS;AAEzB,YAAM,YAAY,KAAK,OAAO,OAAO;AACrC,UAAI,CAAC;AAAW;AAGhB,gBAAU,OAAO;AACjB,gBAAU,QAAQ;AAElB,YAAM,aAAa;AAAA,QACf,sBAAsB;AAAA,UAClB,CAAC,KAAK,YAAY;AAAA,UAClB,CAAC,UAAW;AAAA,QAChB;AAAA,MACJ;AAEA,cAAQ,IAAI,uDAAuD,UAAU;AAE7E,YAAM,KAAK,SAAS,OAAO,YAAY,EAAC,QAAQ,MAAK,CAAC;AAEtD,aAAO;AAAA,IACX;AAAA;AAAA,EASM,SAAS,MAAc,OAA4B,oBAA6B,MAAM;AAAA;AACxF,cAAQ,IAAI,+CAA+C,QAAQ,KAAK;AAGxE,UAAI,KAAK,SAAS,iBAAiB,SAAS,QAAQ,CAAC,KAAK,OAAO,IAAI;AAAG;AACxE,UAAI,iBAAiB;AAAS,gBAAQ,CAAC,KAAK;AAC5C,UAAI,MAAM,WAAW;AAAG;AAExB,UAAI,mBAAmB;AAEnB,mBAAW,QAAQ;AAAO,gBAAM,KAAK,WAAW,IAAI;AAAA,MACxD;AAGA,UAAI,KAAK,SAAS,iBAAiB,SAAS;AAAM;AAElD,iBAAW,QAAQ,OAAO;AAEtB,YAAI,KAAK;AAAI,eAAK,SAAS,OAAO,YAAY,MAAM,QAAQ,KAAK,KAAK,EAAE;AAAA,MAC5E;AAGA,YAAM,aAAa,EAAC,CAAC,sBAAsB,iBAAiB,KAAK,SAAS,OAAO,YAAY,MAAM,QAAO;AAE1G,cAAQ,IAAI,sDAAsD,UAAU;AAC5E,YAAM,KAAK,SAAS,OAAO,UAAU;AAAA,IACzC;AAAA;AAAA,EAQM,WAAW,MAAe,MAAe;AAAA;AAC3C,cAAQ,IAAI,gDAAgD,QAAQ,KAAK,SAAS,iBAAiB,SAAS,IAAI;AAGhH,UAAI,KAAK,SAAS,iBAAiB,SAAS;AAAM;AAIlD,YAAM,cAA+B,OAEjC,CAAC,KAAK,SAAS,OAAO,YAAY,KAAK,IAEvC,OAAO,OAAO,KAAK,SAAS,OAAO,WAAW,EAAE,OAAO,CAAC,EAAC,QAAO,MAAM,QAAQ,SAAS,KAAK,EAAY,CAAC;AAG7G,UAAI,YAAY,WAAW;AAAG;AAG9B,YAAM,aAAa,CAAC;AACpB,iBAAW,aAAa,aAAa;AACjC,cAAM,UAAU,UAAU,QAAQ,OAAO,QAAM,OAAO,KAAK,EAAE;AAC7D,mBAAW,sBAAsB,UAAU,kBAAkB;AAAA,MACjE;AAEA,cAAQ,IAAI,kDAAkD,UAAU;AACxE,UAAI;AAAY,cAAM,KAAK,SAAS,OAAO,UAAU;AAAA,IACzD;AAAA;AAAA,EAOA,OAAO,aAAa,MAAsB;AACtC,WAAO,QAAQ,gBAAgB,IAAI;AAAA,EACvC;AACJ;;;ACjOO,IAAM,eAAN,MAAmB;AAAA,EAItB,YAAYC,WAAoB;AAC5B,SAAK,WAAWA;AAAA,EACpB;AAAA,EASM,SAAS,IAAgE;AAAA,+CAAhE,MAAc,UAA6B,CAAC,GAAoB;AAE3E,UAAI,KAAK,UAAU;AAAW,eAAO,KAAK;AAGzC,YAAM,YAAY,KAAK,SAAS,sBAAsB;AAEvD,UAAI,UAAU,OAAO,eAAe,IAAI;AAAG,eAAO,UAAU,YAAY,MAAM,EAAC,YAAY,QAAQ,WAAU,CAAC;AAG9G,aAAO,KAAK,SAAS,YAAY,IAAI,KAAK;AAAA,IAC9C;AAAA;AAAA,EAKA,IAAI,SAAiB;AACjB,WAAO,KAAK,SAAS,iBAAiB;AAAA,EAC1C;AACJ;;;ACpCO,IAAM,oBAAN,cAAgC,YAAY;AAAA,EAG/C,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAGvC,SAAK,aAAa,KAAK,OAAO;AAC9B,SAAK,aAAa,KAAK,OAAO;AAE9B,WAAO;AAAA,EACX;AAAA,EAEA,oBAAoB;AAChB,SAAK,0BAA0B;AAE/B,UAAM,kBAAkB;AAAA,EAC5B;AAAA,EAEA,4BAA4B;AACxB,QAAI,CAAC,KAAK;AAAO;AAGjB,SAAK,KAAK,KAAK,MAAM,CAAC;AACtB,UAAM,OAAO,IAAI,UAAU,KAAK,KAAK,GAAG;AAExC,UAAM,aAAa,KAAK,MAAM,aAAa,KAAK,KAAK,UAAU;AAC/D,UAAM,aAAa,KAAK,MAAM,aAAa,KAAK,KAAK,UAAU;AAG/D,QAAI;AAAY,WAAK,QAAQ,WAAW,OAAO,WAAW,KAAK;AAC/D,QAAI;AAAY,WAAK,QAAQ,WAAW,OAAO,WAAW,KAAK;AAG/D,QAAI,cAAc,KAAK,MAAM,mBAAmB,KAAK,KAAK,UAAU;AAAG,WAAK,MAAM,gBAAgB,MAAM,IAAI;AAC5G,QAAI,cAAc,KAAK,MAAM,mBAAmB,KAAK,KAAK,UAAU;AAAG,WAAK,MAAM,gBAAgB,MAAM,IAAI;AAAA,EAChH;AACJ;;;ACxDO,IAAM,gBAAgB;AAAA,EAMzB,uBAAuB,CAAC,cAA+B;AACnD,WAAO,cAAc;AAAA,EACzB;AACJ;;;ACwEO,IAAM,WAAN,cAAuB,MAAM;AAAA,EAmBhC,YAAY,MAAM,SAAU;AACxB,UAAM,MAAM,OAAO;AAlBvB,4BAAkC;AAAA,MAC9B,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS,CAAC;AAAA,IACd;AAGA,iBAA4B;AAaxB,SAAK,YAAY,IAAI,cAAc,IAAI;AACvC,SAAK,YAAY,IAAI,aAAa,IAAI;AAAA,EAC1C;AAAA,EAEA,oBAAoB;AAChB,UAAM,KAAK,KAAK,QAAQ,aAAa,gBAAgB;AACrD,WAAO,OAAO,SAAY,KAAK;AAAA,EACnC;AAAA,EAEM,kBAAkB,OAAO;AAAA;AAC3B,YAAM,MAAM,SAAS,KAAK;AAC1B,UAAI,CAAC,MAAM,GAAG,GAAG;AACb,eAAO,KAAK,QAAQ,aAAa,kBAAkB,GAAG;AAAA,MAC1D;AAAA,IACJ;AAAA;AAAA,EAOA,cAAc;AACV,UAAM,YAAY;AAAA,EACtB;AAAA,EASA,kBAAkB;AACd,UAAM,gBAAgB;AAEtB,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAED,sBAAc,gBAAgB,KAAK,MAAM;AACzC;AAAA,MACJ,KAAK;AAED,oBAAY,gBAAgB,KAAK,MAAM;AACvC;AAAA,MACJ,KAAK;AAED,mBAAW,gBAAgB,KAAK,MAAM;AACtC;AAAA,MACJ,KAAK;AAED,mBAAW,gBAAgB,KAAK,MAAM;AACtC;AAAA,MACJ,KAAK;AAED,oBAAY,gBAAgB,KAAK,MAAM;AACvC;AAAA,MACJ,KAAK;AAED,eAAO,gBAAgB,KAAK,MAAM;AAClC;AAAA,IACR;AAAA,EACJ;AAAA,EAKA,2BAA2B;AAGvB,UAAM,yBAAyB;AAAA,EAMnC;AAAA,EAMA,qBAAqB;AAxLzB;AA2LQ,QAAI;AACA,YAAM,mBAAmB;AAAA,IAC7B,SAAS,OAAP;AACE,cAAQ,MAAM,0GAA0G,KAAK,eAAe,KAAK,KAAK;AACtJ,cAAQ,MAAM,KAAK;AACnB,eAAG,kBAAH,mBAAkB,MAAM,uHAAuH,KAAK,eAAe,KAAK;AAAA,IAC5K;AAAA,EACJ;AAAA,EAQA,qBAAqB;AACjB,UAAM,mBAAmB;AAGzB,UAAM,mBAAmB,KAAK,MAAM,IAAI,CAAC,SAAS,IAAI,mBAAmB,IAAoC,CAAC;AAC9G,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAED,sBAAc,mBAAmB,KAAK,QAAQ,gBAAgB;AAC9D;AAAA,MACJ,KAAK;AAED,oBAAY,mBAAmB,KAAK,QAAQ,gBAAgB;AAC5D;AAAA,MACJ,KAAK;AAED,mBAAW,mBAAmB,KAAK,QAAQ,gBAAgB;AAC3D;AAAA,MACJ,KAAK;AAED,mBAAW,mBAAmB,KAAK,QAAQ,gBAAgB;AAC3D;AAAA,MACJ,KAAK;AAED,oBAAY,mBAAmB,KAAK,QAAQ,gBAAgB;AAC5D;AAAA,MACJ,KAAK;AAED,eAAO,mBAAmB,KAAK,QAAQ,gBAAgB;AACvD;AAAA,IACR;AAAA,EACJ;AAAA,EAKA,6BAA6B;AACzB,UAAM,UAAU,KAAK,QAAQ,OAAO,CAACC,UAA6B,WAAW;AACzE,UAAI,OAAO,KAAK;AAAU,eAAOA;AAGjC,aAAOA,SAAQ,OAAO,OAAO,KAAK,QAC7B,OAAO,YAAU,OAAO,SAAS,MAAM,oBAAoB,QAAQ,EACnE,IAAI,YAAU;AArP/B;AAuPoB,iBAAS,QAAQ,MAAM,UAAU,MAAM;AAEvC,eAAO,SAAS;AAChB,eAAO,YAAW,YAAO,aAAP,YAAoB,OAAO,OAAO;AAEpD,eAAO;AAAA,MACX,CAAC,CAAC;AAAA,IACV,GAAG,CAAC,CAAC;AAGL,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;AAE9C,eAAW,UAAU,SAAS;AAE1B,aAAO,OAAO,MAAM,MAAM,MAAM;AAAA,IACpC;AAAA,EACJ;AAAA,EAMA,wBAAwB,aAAuB;AAC3C,UAAM,UAAU,KAAK,2BAA2B,WAAW;AAC3D,SAAK,0BAA0B,OAAO;AAAA,EAC1C;AAAA,EAOA,0BAA0B,SAA6B;AACnD,UAAM,YAAY,CAAC;AAEnB,eAAW,UAAU,SAAS;AAE1B,YAAM,SAAS,OAAO,OAAO,MAAM,MAAM,MAAM;AAC/C,UAAI,WAAW;AAAM,kBAAU,OAAO,OAAO;AAAA,IACjD;AAEA,SAAK,YAAY,kCAAI,KAAK,YAAc,QAAQ,MAAM,aAAa,SAAS;AAAA,EAChF;AAAA,EAMA,2BAA2B,aAA2C;AAElE,UAAM,UAAU,KAAK,QAAQ,OAAO,CAACA,UAA6B,WAAW;AACzE,UAAI,OAAO,KAAK;AAAU,eAAOA;AAGjC,aAAOA,SAAQ,OAAO,OAAO,KAAK,QAC7B,OAAO,YAAU,YAAY,KAAK,gBAAc,OAAO,IAAI,SAAS,UAAU,CAAC,CAAC,EAChF,IAAI,YAAU;AA/S/B;AAiToB,iBAAS,QAAQ,MAAM,UAAU,MAAM;AAEvC,eAAO,SAAS;AAChB,eAAO,YAAW,YAAO,aAAP,YAAoB,OAAO,OAAO;AAEpD,eAAO;AAAA,MACX,CAAC,CAAC;AAAA,IACV,GAAG,CAAC,CAAC;AAGL,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;AAE9C,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,cAAqC;AAE7C,WAAO,KAAK,OAAO,UAAU;AAAA,EACjC;AAAA,EAKA,gBAAgB,WAA4C;AAExD,QAAI,CAAC;AAAW;AAGhB,UAAM,SAAS,KAAK,gBAAgB;AACpC,UAAM,QAAQ,OAAO;AACrB,QAAI;AAAO,aAAO;AAGlB,WAAO,OAAO,OAAO,MAAM,EAAE,KAAK,CAAAC,WAASA,OAAM,SAAS,SAAS;AAAA,EACvE;AAAA,EAEA,cAAc,IAAyC;AACnD,QAAI,OAAO;AAAW;AACtB,UAAM,aAAa,KAAK,cAAc;AACtC,QAAI,CAAC;AAAY;AACjB,WAAO,WAAW;AAAA,EACtB;AAAA,EAEA,gBAAgB,UAA4C;AACxD,QAAI,aAAa;AAAW;AAE5B,UAAM,eAAe,KAAK,gBAAgB;AAC1C,QAAI;AACA,aAAO,aAAa;AAAA,EAC5B;AAAA,EAEA,uBAAuB,eAAgD;AACnE,QAAI,kBAAkB;AAAW,aAAO;AACxC,UAAM,YAAY,KAAK,cAAc,aAAa;AAClD,QAAI,EAAC,uCAAW;AAAO,aAAO;AAC9B,WAAO,KAAK,UAAU,UAAU,KAAK;AAAA,EACzC;AAAA,EAEA,UAAU,WAA4C;AAClD,QAAI,CAAC;AAAW,aAAO;AAEvB,WAAO,KAAK,OAAO,OAAO;AAAA,EAC9B;AAAA,EAEA,mBAA2B;AAEvB,QAAI,EAAE,YAAY,KAAK;AAAS,aAAO;AAEvC,WAAO,KAAK,KAAK,OAAO,OAAO,SAAS;AAAA,EAC5C;AAAA,EAMM,QAAQ,KAAa,IAAI;AAAA;AAC3B,YAAM,OAAO,KAAK,QAAQ;AAC1B,UAAI,QAAQ,KAAK,UAAU;AAAG;AAE9B,YAAM,WAAW,KAAK,OAAO,IAAI,KAAK,OAAO,KAAK;AAElD,YAAM,OAAO,KAAK,IAAI,KAAK,OAAO,WAAW,EAAE;AAG/C,YAAM,KAAK,OAAO,EAAC,6BAA6B,KAAI,CAAC;AAAA,IACzD;AAAA;AAAA,EAEA,UAA8B;AAE1B,WAAO,KAAK,OAAO,WAAW;AAAA,EAClC;AAAA,EAEA,WAAoB;AAEhB,WAAO,WAAW,KAAK;AAAA,EAC3B;AAAA,EAOA,SAAS,QAAoC;AAGzC,UAAM,QAAQ,WAAW,KAAK,SAE1B,QAAQ,MAAM,UAAU,KAAK,OAAO,KAAK,IACzC,cAAc,eAAe;AAEjC,aAAS,UAAU,cAAc,WAAW;AAE5C,YAAQ,UAAU,MAAM;AACxB,YAAQ,UAAU,OAAO,EAAE;AAG3B,QAAI,OAAO,GAAG,UAAU;AACpB,gBAAU,cAAc,MAAM,KAAK,UAAU,OAAO,GAAG,KAAK;AAGhE,QAAI,OAAO,QAAQ,UAAU,IAAI;AAC7B,YAAM,wBAAwB,MAAM,OAAO,QAAQ,UAAU;AAC7D,UAAI,wBAAwB;AACxB,kBAAU,cAAc,MAAM,KAAK,eAAe,qBAAqB;AAAA,IAC/E;AAEA,YAAQ,UAAU,OAAO,EAAC,KAAK,EAAC,CAAC;AAEjC,WAAO;AAAA,EACX;AAAA,EAEA,kBAAuC;AAEnC,QAAI,EAAE,YAAY,KAAK;AAAS;AAEhC,UAAM,SAAS,KAAK,OAAO;AAC3B,QAAI,OAAO;AAAQ,aAAO,KAAK,MAAM,IAAI,OAAO,MAAM;AAAA,EAC1D;AAAA,EAEA,0BAAsD;AAClD,QAAI,KAAK,UAAU,GAAG;AAClB,aAAO,KAAK,gBAAgB,OAAO;AAAA,IACvC,WAAW,KAAK,YAAY,GAAG;AAC3B,YAAM,YAAY,KAAK,YAAY;AACnC,UAAI,WAAW;AAEX,YAAI,MAAM,UAAU,OAAO;AAC3B,YAAI,CAAC;AAAK,gBAAM;AAChB,eAAO,KAAK,cAAc,GAAG;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAgC;AAC5B,WAAO,KAAK,MAAM,OAAO,CAAC,SAAkB,KAAK,WAAW,KAAK,KAAK,QAAQ;AAAA,EAClF;AAAA,EAKA,wBAAgC;AAE5B,QAAI,QAAQ;AACZ,UAAM,WAAW,KAAK,cAAc,UAAU;AAC9C,QAAI,UAAU;AACV,eAAS,KAAK,KAAK,SAAS,QAAQ,CAAC;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,kBAA0B;AAEtB,QAAI,EAAE,YAAY,KAAK;AAAS,aAAO;AAEvC,WAAO,SAAS,KAAK,OAAO,OAAO,MAAM;AAAA,EAC7C;AAAA,EAEA,gBAA4B;AAExB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAWA,aAAa,MAA8B;AAEvC,UAAM,QAAQ,KAAK,gBAAgB;AACnC,QAAI,SAAS,MAAM;AAAO,aAAO,MAAM;AAGvC,UAAM,aAAa,KAAK,cAAc;AACtC,WAAO,WAAW;AAAA,EACtB;AAAA,EAEA,YAAoB;AAEhB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,SAAS,MAA0B;AAC/B,UAAM,SAAS,KAAK,UAAU;AAC9B,WAAO,OAAO;AAAA,EAClB;AAAA,EAKA,UAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,cAAuB;AACnB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,UAAU;AAEN,QAAI,EAAE,YAAY,KAAK,WAAW,EAAE,SAAS,KAAK;AAAS,aAAO;AAGlE,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,IAAI;AAAA,EACjD;AAAA,EAEA,YAAY;AACR,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,OAAO;AACH,WAAO,KAAK,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAMA,IAAI,qBAA8B;AAC9B,WAAO,KAAK,YAAY,KAAK,KAAK,UAAU;AAAA,EAChD;AAAA,EAEA,0BAA8C;AAE1C,QAAI,EAAE,iBAAiB,KAAK;AAAS;AAGrC,YAAQ,KAAK,OAAO,aAAa;AAAA,MAC7B,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX;AACI;AAAA,IACR;AAAA,EACJ;AAAA,EAEA,sBAA8C;AAC1C,QAAI,CAAC,KAAK,UAAU;AAAG;AAEvB,UAAM,OAAO,KAAK,wBAAwB;AAC1C,WAAO,KAAK,gBAAgB,IAAI;AAAA,EACpC;AAAA,EAEA,IAAI,YAAqB;AACrB,WAAO,KAAK,UAAU,MAAM;AAAA,EAChC;AAAA,EAEA,YAA6B;AAEzB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAEA,kBAA0B;AAEtB,WAAO,KAAK,OAAO,OAAO;AAAA,EAC9B;AAAA,EAKA,IAAI,aAAsB;AACtB,WAAO,CAAC,aAAa,UAAU,UAAU,SAAS,EAAE,SAAS,KAAK,IAAI;AAAA,EAC1E;AAAA,EAKA,IAAI,iBAA0B;AAC1B,WAAO,CAAC,aAAa,WAAW,UAAU,UAAU,SAAS,EAAE,SAAS,KAAK,IAAI;AAAA,EACrF;AAAA,EAKA,IAAI,aAAsB;AAEtB,WAAO,KAAK,OAAO,YAAY;AAAA,EACnC;AAAA,EAMA,IAAI,YAAqB;AACrB,QAAI,KAAK,SAAS;AAAG,aAAO;AAE5B,QAAI,KAAK,YAAY,KAAK,KAAK,OAAO,YAAY;AAAa,aAAO;AAEtE,WAAO;AAAA,EACX;AAAA,EAUA,QAAQ,SAAiB,UAAU,EAAC,gBAAgB,OAAO,SAAS,MAAK,GAAW;AAChF,UAAM,QAAQ,QAAQ,UAAU,KAAK,gBAAgB,OAAO,IAAI,KAAK,SAAS,OAAO;AACrF,QAAI,CAAC,SAAS,CAAC,MAAM;AAAW,aAAO;AACvC,QAAI,CAAC,UAAU,UAAU,KAAK;AAAG,aAAO;AAExC,UAAM,YAAY,KAAK,aAAa,MAAM,SAAS;AAGnD,UAAM,iBAAiB,OAAO,UAAU,UAAU,WAAW,UAAU,QAAQ;AAC/E,UAAM,aAAa,OAAO,MAAM,UAAU,WAAW,MAAM,QAAQ;AAEnE,QAAI,WAAW,kBAAkB,KAAK,KAAK,WAAW,oBAAoB,KAAK,GAAG;AAC9E,aAAO,WAAW,qBAAqB;AAAA,IAC3C;AAEA,UAAM,sBAAsB,QAAQ,iBAAiB,GAAG,MAAM,0BAA0B;AACxF,WAAO,aAAa,iBAAiB;AAAA,EACzC;AAAA,EAeA,SAAS,IAAY,UAAU,EAAC,SAAS,MAAK,GAA2B;AACrE,QAAI,QAAQ;AACR,aAAO,KAAK,gBAAgB,EAAE;AAGlC,UAAM,EAAC,OAAM,IAAI,KAAK;AAGtB,QAAI,OAAO,OAAO,eAAe,EAAE,GAAG;AAClC,aAAO,OAAO,OAAO;AAAA,IACzB;AACA,QAAI,OAAO,SAAS,MAAM,eAAe,EAAE,GAAG;AAC1C,aAAO,OAAO,SAAS,MAAM;AAAA,IACjC;AAEA,eAAW,eAAe,OAAO,WAAW;AACxC,UAAI,OAAO,UAAU,eAAe,WAAW,GAAG;AAC9C,cAAM,WAAW,OAAO,UAAU;AAClC,YAAI,SAAS,MAAM,eAAe,EAAE,GAAG;AACnC,iBAAO,SAAS,MAAM;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EASA,gBAAgB,aAA6C;AACzD,QAAI,CAAC;AAAa;AAElB,UAAM,gBAAgB,CAAC,UAA8B,MAAM,QAAQ,KAAK,KAAK,SAAS,MAAM,KAAK,IAAI,MAAM;AAE3G,UAAM,SAAS,KAAK,UAAU;AAE9B,eAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,OAAO,MAAM,GAAG;AACrD,UAAI,gBAAgB,cAAc,KAAK;AACnC,eAAO,iCAAI,QAAJ,EAAW,GAAE;AAAA,IAC5B;AAEA,eAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,OAAO,SAAS,KAAK,GAAG;AAC7D,UAAI,gBAAgB,cAAc,KAAK;AACnC,eAAO,iCAAI,QAAJ,EAAW,GAAE;AAAA,IAC5B;AAGA,eAAW,eAAe,OAAO,WAAW;AACxC,UAAI,CAAC,OAAO,UAAU,eAAe,WAAW;AAAG;AAEnD,YAAM,iBAAiB,OAAO,UAAU,aAAa;AACrD,iBAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,cAAc,GAAG;AACtD,YAAI,gBAAgB,cAAc,KAAK;AACnC,iBAAO,iCAAI,QAAJ,EAAW,GAAE;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA,EASA,cAAc,SAAyB;AACnC,UAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,QAAI,CAAC,OAAO;AACR,aAAO;AAAA,IACX;AAEA,WAAO,MAAM,QAAQ,MAAM,QAAQ,MAAM,OAAO,MAAM,OAAO;AAAA,EACjE;AAAA,EAYM,kBAAkB,IAAmH;AAAA,+CAAnH,UAAiC,QAA2B,EAAC,MAAM,mBAAkB,GAA8B;AAEvI,UAAI,CAAC,KAAK,OAAO,OAAO,UAAU,eAAe,QAAQ,GAAG;AACxD,gBAAQ,MAAM,qEAAqE,UAAU;AAC7F;AAAA,MACJ;AAEA,cAAQ,cAAc,UAAU,KAAK;AACrC,YAAM,KAAK,SAAS,EAAE;AACtB,YAAM,QAAQ,CAAC;AACf,YAAM,MAAM;AACZ,YAAM,YAAY,2BAA2B;AAC7C,YAAM,aAAa,CAAC;AACpB,iBAAW,aAAa;AAExB,YAAM,KAAK,OAAO,UAAU;AAE5B,aAAO;AAAA,IACX;AAAA;AAAA,EAQM,iBAAyG;AAAA,+CAA1F,YAAiC,EAAC,MAAM,mBAAkB,GAAgC;AAC3G,YAAM,QAAQ,cAAc,UAAU,SAAS;AAE/C,YAAM,mBAAmB;AACzB,YAAM,wBAAwB,QAAQ,+BAA+B,kBAAkB,KAAK;AAE5F,UAAI,CAAC;AAAuB;AAE5B,YAAM,EAAC,iBAAiB,GAAE,IAAI;AAE9B,YAAM,KAAK,OAAO,eAAyB;AAE3C,aAAO;AAAA,IACX;AAAA;AAAA,EAMM,oBAAoB,SAAiB;AAAA;AACvC,YAAM,aAAa,QAAQ,uBAAuB,gCAAgC,OAAO;AACzF,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EAQM,iBAAiB,OAAwB;AAAA;AAC3C,YAAM,eAAe;AAAA,QACjB,MAAM;AAAA,QACN,OAAO,CAAC;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,QAEP,KAAK;AAAA,MACT;AACA,cAAQ,kCACD,eACA;AAGP,YAAM,KAAK,SAAS,EAAE;AACtB,YAAM,QAAQ,CAAC;AACf,YAAM,MAAM;AACZ,YAAM,YAAY;AAClB,YAAM,aAAa,CAAC;AACpB,iBAAW,aAAa;AAExB,YAAM,KAAK,OAAO,UAAU;AAE5B,aAAO;AAAA,IACX;AAAA;AAAA,EAOM,qBAAqB,SAAiB,UAAiC;AAAA;AACzE,YAAM,aAAa,QAAQ,uBAAuB,2BAA2B,kBAAkB,OAAO;AACtG,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EAOM,kBAAkB,SAAiB;AAAA;AAj2B7C;AAk2BQ,YAAM,eAAe,KAAK,gBAAgB;AAC1C,UAAI,CAAC,aAAa,eAAe,OAAO;AAAG;AAC3C,YAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,UAAI,CAAC;AAAO;AAIZ,UAAI,MAAM,SAAS,MAAM,MAAM,UAAU,UAAa,MAAM,UAAU,IAAI;AACtE,cAAM,KAAK,UAAU,OAAO;AAG5B,YAAI,CAAC,KAAK,eAAe;AACrB,iBAAM,UAAK,UAAL,mBAAY;AACtB;AAAA,MACJ;AAGA,YAAM,aAAa,QAAQ,uBAAuB,wBAAwB,OAAO;AACjF,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EASM,UAAU,SAAiB;AAAA;AAC7B,UAAI,CAAC;AAAS;AACd,YAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,UAAI,CAAC;AAAO;AAEZ,YAAM,SAAS;AACf,YAAM,aAAa,QAAQ,mBAAmB,wBAAwB,WAAW,KAAK;AACtF,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EAOM,UAAU,SAAiB;AAAA;AAC7B,UAAI,CAAC;AAAS;AACd,YAAM,QAAQ,KAAK,SAAS,OAAO;AACnC,UAAI,CAAC;AAAO;AAEZ,YAAM,SAAS;AACf,YAAM,aAAa,QAAQ,mBAAmB,wBAAwB,WAAW,KAAK;AACtF,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EAOM,mBAAmB;AAAA;AA55B7B;AA65BQ,YAAM,aAAa,CAAC;AAEpB,YAAM,SAAS,KAAK,gBAAgB;AACpC,iBAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC9C,YAAI,MAAM,WAAW,MAAM;AACvB,gBAAM,SAAS;AACf,qBAAW,wBAAwB,QAAQ;AAAA,QAC/C;AAAA,MACJ;AAEA,UAAI,CAAC;AAAY;AAEjB,YAAM,KAAK,OAAO,UAAU;AAG5B,UAAI,CAAC,KAAK,eAAe;AACrB,eAAM,UAAK,UAAL,mBAAY;AAAA,IAC1B;AAAA;AAAA,EAKM,aAAa;AAAA;AACf,YAAM,KAAK,MAAM,kBAAkB;AAAA,IACvC;AAAA;AAAA,EAQM,iBAAiB,SAA4B;AAAA;AAC/C,YAAM,SAAS,KAAK,gBAAgB;AAEpC,YAAM,aAAa,KAAK,MAAM,iBAAiB,mCAAS,KAAK;AAC7D,YAAM,UAAU,KAAK,MAAM,cAAc,aAAa;AACtD,YAAM,OAAO,IAAI,QAAQ,CAAC,GAAG,EAAC,OAAO,KAAI,GAAG,EAAC,WAAU,CAAC;AAGxD,YAAM,OAAO,IAAI,UAAkB,KAAK,KAAK,GAAG;AAChD,WAAK,QAAQ,sCAAsC,MAAM;AACzD,WAAK,QAAQ,sCAAsC,MAAM;AAGzD,YAAM,OAAO,IAAI,UAAkB;AACnC,WAAK,gBAAgB,IAAI;AACzB,WAAK,KAAK,UAAU,MAAM,KAAK;AAE/B,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAUM,eAAe,UAAoB,YAA4B,SAA4B;AAAA;AAC7F,YAAM,aAAa,KAAK,MAAM,iBAAiB,mCAAS,KAAK;AAC7D,aAAO,MAAM,KAAK,MAAM,eAAe,UAAU,YAAY,MAAM,EAAC,WAAU,CAAC;AAAA,IACnF;AAAA;AAAA,EAUM,eAAe,UAAoB,YAA4B,SAA4B;AAAA;AAC7F,YAAM,OAAO,MAAM,KAAK,eAAe,UAAU,YAAY,OAAO;AAEpE,UAAI,CAAC;AAAM,eAAO,QAAQ,MAAM,2CAA2C;AAE3E,aAAO,MAAM,KAAK,QAAQ;AAAA,IAC9B;AAAA;AAAA,EAQM,kBAAkB,YAA4B,SAA4B;AAAA;AAC5E,aAAO,MAAM,KAAK,eAAe,IAAI,UAAU,gBAA4B,YAAY,OAAO;AAAA,IAClG;AAAA;AAAA,EAQM,kBAAkB,YAA4B,SAA4B;AAAA;AAC5E,aAAO,MAAM,KAAK,eAAe,IAAI,UAAU,gBAA4B,YAAY,OAAO;AAAA,IAClG;AAAA;AAAA,EASM,UAAU,IAA+C;AAAA,+CAA/C,SAAiB,UAA0B,CAAC,GAAG;AAC3D,cAAQ,KAAK,wCAAwC,SAAS;AAE9D,YAAM,SAAS,KAAK,gBAAgB,SAAS,OAAO;AACpD,UAAI,CAAC;AAAQ;AAEb,YAAM,aAAa,KAAK,MAAM,iBAAiB,QAAQ,KAAK;AAC5D,YAAM,OAAO,MAAM,KAAK,MAAM,WAAW,QAAQ,MAAM,EAAC,WAAU,CAAC;AACnE,UAAI,CAAC;AAAM;AAEX,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAQM,cAAc,MAAM,SAA4B;AAAA;AAClD,cAAQ,KAAK,mCAAmC,kBAAkB,KAAK,YAAY,MAAM;AAGzF,YAAM,SAAS,cAAc,WAAW,EAAC,WAAW,MAAM,MAAM,kBAAkB,KAAI,CAAC;AACvF,YAAM,OAAO,MAAM,KAAK,MAAM,WAAW,QAAQ,IAAI;AACrD,UAAI,CAAC;AAAM;AAEX,YAAM,KAAK,QAAQ;AAAA,IACvB;AAAA;AAAA,EAMA,mBAAmB,WAA4B;AAC3C,WAAO,IAAI,iBAAiB,eAAe,SAAS;AAAA,EACxD;AAAA,EASA,gBAAgB,OAA0B,MAAM;AAC5C,QAAI,QAAQ,SAAS,IAAI,GAAG;AACxB,UAAI,EAAE,YAAY,KAAK;AAAS;AAGhC,YAAM,SAAS,KAAK,OAAO;AAC3B,UAAI,OAAO;AAAS,cAAM,cAAc,cAAc,CAAC;AACvD,UAAI,OAAO;AAAgB,cAAM,cAAc,qBAAqB,EAAE;AAAA,IAC1E;AAAA,EACJ;AAAA,EAGA,gBAAgB,OAA0B;AAEtC,QAAI,KAAK,OAAO,UAAU,QAAQ;AAE9B,YAAM,cAAc,cAAc,KAAK,OAAO,UAAU,MAAM;AAAA,IAClE;AAAA,EACJ;AAAA,EAGA,iBAAiB,OAA0B;AACvC,QAAI,KAAK,UAAU,GAAG;AAClB,YAAM,QAAQ,KAAK,gBAAgB,OAAO;AAC1C,UAAI,OAAO;AACP,cAAM,cAAc,MAAM,OAAO,QAAQ,UAAU,KAAK,CAAC;AAAA,MAC7D;AACA,YAAM,QAAQ,KAAK,oBAAoB;AACvC,UAAI,OAAO;AACP,cAAM,cAAc,2BAA2B,QAAQ,UAAU,KAAK,CAAC;AAAA,MAC3E;AAAA,IACJ,OAAO;AACH,YAAM,WAAW,KAAK,cAAc,UAAU;AAC9C,YAAM,YAAY,KAAK,cAAc,WAAW;AAEhD,UAAI,UAAU;AACV,cAAM,cAAc,SAAS,SAAS,gBAAgB,SAAS,KAAK;AAAA,MACxE;AACA,UAAI,WAAW;AACX,cAAM,cAAc,UAAU,SAAS,iBAAiB,UAAU,KAAK;AAAA,MAC3E;AAAA,IACJ;AAEA,UAAM,MAAM,KAAK,YAAY,SAAS;AACtC,QAAI,KAAK;AACL,YAAM,cAAc,aAAa,GAAG;AAAA,IACxC;AAAA,EACJ;AAAA,EAGA,eAAe,OAA0B;AACrC,UAAM,QAAQ,KAAK,SAAS;AAC5B,QAAI,OAAO;AACP,YAAM,cAAc,MAAM,SAAS,aAAa,MAAM,IAAI;AAC1D,eAAS,QAAQ,MAAM,KAAK;AACxB,cAAM,cAAc,KAAK,MAAM,KAAK,KAAK;AAAA,MAC7C;AAAA,IACJ;AAAA,EACJ;AAAA,EAQA,gBAAgB,SAAiB,UAA4B,CAAC,GAA6B;AAxnC/F;AAynCQ,UAAM,UAAU,QAAQ,WAAW;AACnC,UAAM,QAAQ,KAAK,SAAS,SAAS,EAAC,QAAO,CAAC;AAC9C,QAAI,CAAC,OAAO;AACR,cAAQ,MAAM,wBAAwB,sCAAsC,KAAK,IAAI;AACrF;AAAA,IACJ;AAEA,QAAI,CAAC,UAAU,UAAU,KAAK,GAAG;AAC7B,eAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAAA,IAC/E;AAGA,cAAU,MAAM,MAAM;AAGtB,UAAM,YAAY,KAAK,aAAa,MAAM,SAAS;AAEnD,UAAM,QAAQ,UAAU,SAA0B;AAElD,UAAM,OAAO,QAAQ,kBAAkB;AAEvC,WAAO,cAAc,WAAW;AAAA,MAC5B,OAAO;AAAA,MACP;AAAA,MACA,WAAW,MAAM;AAAA,MACjB,OAAO;AAAA,QACH,MAAM;AAAA,QAAG,OAAO;AAAA,QAAG,KAAK,CAAC;AAAA,QACzB,WAAW;AAAA,MACf;AAAA,MAEA,MAAM,YAAY;AAAA,IACtB,CAAC;AAAA,EACL;AAAA,EASA,QAAQ,OAAe,KAAa,OAA0B;AAE1D,UAAM,WAAW,QAAQ,UAAU,KAAK;AACxC,WAAO,MAAM,QAAQ,OAAO,KAAK,QAAQ;AAAA,EAC7C;AAAA,EAQA,QAAQ,OAAe,KAAkB;AAErC,UAAM,OAAO,MAAM,QAAQ,OAAO,GAAG;AACrC,WAAO,QAAQ,UAAU,IAAI;AAAA,EACjC;AAAA,EAMA,WAAiC;AAE7B,QAAI,KAAK,iBAAiB,KAAK,KAAK,SAAS,GAAG;AAC5C,YAAM,SAAS;AACf,YAAM,SAAS,KAAK,gBAAgB,MAAM;AAE1C,aAAO,OAAO,GAAG;AAAA,IACrB;AAGA,WAAO,KAAK;AAAA,EAChB;AAAA,EAKA,mBAA4B;AAGxB,WAAO,KAAK,eAAe,aAAa,CAAC,KAAK;AAAA,EAClD;AAAA,EAEA,WAAoB;AAChB,WAAO,KAAK,gBAAgB,EAAE,SAAS;AAAA,EAC3C;AAAA,EAEA,uBAAgC;AAC5B,UAAM,UAAU,KAAK,sBAAsB;AAC3C,WAAO,QAAQ,SAAS;AAAA,EAC5B;AAAA,EAEA,kBAA+B;AAvtCnC;AAwtCQ,QAAI,CAAC,KAAK;AAAO,aAAO;AACxB,QAAI,CAAC,KAAK;AAAgB,aAAO;AAEjC,eAAW,QAAQ,KAAK,MAAM,UAAU;AACpC,UAAI,CAAC,KAAK,UAAU,KAAK,MAAM;AAC3B;AAAA,MACJ;AACA,UAAI,KAAK,SAAO,UAAK,cAAL,mBAAgB,KAAI;AAChC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,wBAAgC;AAE5B,WAAO,QAAQ,yBAAyB,MAAM,SAAS,IAAI;AAAA,EAC/D;AAAA,EAEA,wBAAwB,QAAoB,OAAqG;AAC7I,QAAI,OAAO,UAAU;AAAG,aAAO;AAC/B,QAAI,MAAM,UAAU,MAAM;AAAK,aAAO;AAItC,YAAQ,UAAU,KAAK;AAEvB,UAAM,SAAS,OAAO;AACtB,QAAI,MAAM,QAAQ,MAAM,KAAK;AAEzB,cAAQ,MAAM,0HAA0H;AACxI,YAAM,QAAQ,MAAM;AAAA,IACxB;AAEA,WAAO;AAAA,EACX;AAAA,EAEM,wBAAwB,QAAoB,QAAiB;AAAA;AAC/D,UAAI,CAAC;AAAQ;AAEb,UAAI,YAAY,OAAO,aAAa;AACpC,UAAI,CAAC;AAAW,eAAO;AAEvB,UAAI,OAAO,UAAU;AAAG;AACxB,UAAI,UAAU,UAAU,UAAU;AAAK;AAEvC,kBAAY,KAAK,wBAAwB,QAAQ,SAAS;AAE1D,YAAM,aAAa,EAAC,CAAC,wCAAwC,UAAS;AACtE,YAAM,OAAO,OAAO,UAAU;AAAA,IAClC;AAAA;AAAA,EAEM,kBAAkB,QAAoB,OAAsD;AAAA;AAC9F,UAAI,OAAO,UAAU;AAAG;AACxB,UAAI,MAAM,UAAU,MAAM;AAAK;AAE/B,cAAQ,KAAK,wBAAwB,QAAQ,KAAK;AAClD,YAAM,aAAa,EAAC,CAAC,gBAAgB,OAAO,KAAK,UAAU,MAAK;AAChE,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EAEM,qBAAqB,QAAoB,OAA0B;AAAA;AACrE,UAAI,OAAO,UAAU;AAAG;AACxB,UAAI,MAAM,SAAS,UAAU,MAAM,SAAS;AAAK;AAGjD,YAAM,WAAW,UAAU,MAAM,QAAQ;AAGzC,eAAS,SAAS,OAAO;AACzB,eAAS,QAAQ,KAAK,IAAI,SAAS,OAAO,SAAS,GAAG;AAEtD,YAAM,aAAa,EAAC,CAAC,gBAAgB,OAAO,KAAK,mBAAmB,SAAQ;AAC5E,YAAM,KAAK,OAAO,UAAU;AAAA,IAChC;AAAA;AAAA,EASM,WAAW,OAAmB,SAAiB;AAAA;AA5yCzD;AA6yCQ,cAAQ,IAAI,yBAAyB,mBAAmB,qBAAqB,IAAI;AAGjF,UAAI,GAAC,UAAK,WAAL,mBAAa,MAAM,eAAe;AAAQ;AAG/C,YAAM,UAAU,KAAK,IAAI,KAAK,OAAO,MAAM,OAAO,QAAQ,SAAS,CAAC;AAEpE,YAAM,KAAK,OAAO,EAAC,CAAC,gBAAgB,gBAAgB,QAAO,CAAC;AAAA,IAChE;AAAA;AAAA,EAEM,eAAe,SAAiB;AAAA;AAClC,YAAM,KAAK,WAAW,QAAQ,OAAO;AAAA,IACzC;AAAA;AAAA,EAEM,mBAAmB,SAAiB;AAAA;AACtC,YAAM,KAAK,WAAW,YAAY,OAAO;AAAA,IAC7C;AAAA;AAAA,EAEA,IAAI,2BAAoC;AACpC,UAAM,OAAO,KAAK,aAAa;AAC/B,QAAI,CAAC;AAAM,aAAO;AAClB,WAAO,cAAc,sBAAsB,KAAK,KAAK;AAAA,EACzD;AAAA,EAIM,cAAc,QAAyC;AAAA;AACzD,UAAI,OAAO,KAAK,UAAU;AAAQ,eAAO;AAEzC,YAAM,QAAQ,KAAK,aAAa;AAChC,UAAI,CAAC;AACD,eAAO;AAEX,YAAM,EAAC,UAAU,KAAI,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AAG/D,UAAI,SAAS,QAAQ,GAAG;AAEpB,iBAAS,QAAQ,KAAK,MAAM,SAAS,QAAQ,CAAC;AAC9C,iBAAS,KAAK,QAAQ;AAAA,MAC1B;AAEA,YAAM,KAAK,kBAAkB,MAAM,KAAK;AACxC,aAAO;AAAA,IACX;AAAA;AAAA,EAEM,kBAAkB,QAAoB;AAAA;AACxC,UAAI,OAAO,KAAK,UAAU;AAAY,eAAO;AAE7C,YAAM,QAAQ,KAAK,iBAAiB;AACpC,UAAI,CAAC;AACD,eAAO;AAEX,YAAM,EAAC,UAAU,KAAI,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AAE/D,YAAM,KAAK,kBAAkB,MAAM,KAAK;AACxC,YAAM,KAAK,qBAAqB,UAAU,KAAK;AAAA,IACnD;AAAA;AAAA,EAOM,gBAAgB,QAAyC;AAAA;AAC3D,UAAI,OAAO,KAAK,UAAU;AAAU,eAAO;AAG3C,YAAM,SAAS,KAAK,gBAAgB;AACpC,YAAM,QAAQ,KAAK,eAAe;AAClC,UAAI,CAAC;AAAO,eAAO;AAEnB,YAAM,EAAC,UAAU,KAAI,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AAE/D,UAAI,QAAQ;AACR,cAAM,KAAK,wBAAwB,MAAM,MAAM;AAAA,MACnD;AACA,UAAI,KAAK,KAAK,KAAK,KAAK,SAAS,GAAG;AAChC,cAAM,KAAK,kBAAkB,MAAM,KAAK;AAAA,MAC5C;AAIA,aAAO;AAAA,IACX;AAAA;AAAA,EAWM,gBAAgB,OAAe;AAAA;AAEjC,cAAQ,KAAK,IAAI,OAAO,CAAC;AAGzB,YAAM,SAAS,cAAc,WAAW;AAAA,QACpC,MAAM,EAAC,MAAM,UAAU,OAAO,SAAQ;AAAA,QACtC,MAAM;AAAA,QACN;AAAA,MACJ,CAAC;AAED,UAAI,QAAQ,KAAK,eAAe;AAChC,UAAI,CAAC;AAAO;AAGZ,YAAM,QAAQ;AAEd,UAAI,QAAQ;AACR,gBAAQ,KAAK,wBAAwB,QAAQ,KAAK;AAGtD,YAAM,SAAS,KAAK,gBAAgB;AACpC,UAAI,QAAQ;AACR,eAAO,MAAM,OAAO,OAAO,EAAC,uCAAuC,MAAK,CAAC;AAAA,MAC7E;AAGA,UAAI,KAAK,KAAK,GAAG;AACb,eAAO,MAAM,KAAK,OAAO,EAAC,uBAAuB,MAAK,CAAC;AAAA,MAC3D;AAGA,UAAI,KAAK,eAAe;AACpB,eAAO,MAAM,KAAK,OAAO,EAAC,mCAAmC,MAAK,CAAC;AAAA,MACvE;AAAA,IACJ;AAAA;AAAA,EAIA,oBAAoB,QAAoB,OAA8E;AAClH,UAAM,kBAAkB,MAAM,MAAM,MAAM;AAC1C,UAAM,iBAAiB,OAAO,QAAQ,kBAClC,OAAO,QAAQ,kBACf;AACJ,UAAM,aAAa,OAAO,QAAQ;AAGlC,UAAM,WAAW,UAAU,MAAM;AACjC,UAAM,OAAO,UAAU,MAAM;AAE7B,aAAS,QAAQ;AACjB,SAAK,QAAQ;AAGb,WAAO,EAAC,UAAU,KAAI;AAAA,EAC1B;AAAA,EAEA,eAAsC;AAElC,QAAI,WAAW,KAAK,UAAU,UAAU,KAAK,OAAO;AAEhD,aAAO,KAAK,OAAO,MAAM;AAAA,EACjC;AAAA,EAEA,mBAAkD;AAE9C,QAAI,WAAW,KAAK,UAAU,cAAc,KAAK,OAAO;AAEpD,aAAO,KAAK,OAAO,MAAM;AAAA,EACjC;AAAA,EAOA,iBAA4C;AAGxC,QAAI,WAAW,KAAK,UAAU,YAAY,KAAK,OAAO,OAAO;AAEzD,aAAO,KAAK,OAAO,MAAM;AAAA,IAC7B;AAGA,QAAI,KAAK,eAAe;AAEpB,aAAO,KAAK,OAAO,OAAO;AAAA,IAC9B;AAGA,UAAM,SAAS,KAAK,gBAAgB;AACpC,QAAI,CAAC;AAAQ,aAAO;AAEpB,WAAO,OAAO,aAAa;AAAA,EAC/B;AAAA,EAEA,iBAAiB,QAAoC;AA9+CzD;AA++CQ,QAAI,GAAC,YAAO,OAAP,mBAAW,QAAO;AACnB,aAAO,KAAK,SAAS;AAAA,IACzB;AAEA,UAAM,WAAW,UAAU,KAAK,SAAS,CAAC;AAC1C,QAAI,UAAU;AAEV,eAAS,MAAM,UAAU,cAAc,SAAS,KAAK,UAAU,OAAO,GAAG,KAAK;AAE9E,eAAS,QAAQ,QAAQ,UAAU,UAAU,EAAC,KAAK,EAAC,CAAC;AAAA,IACzD;AAGA,WAAO;AAAA,EACX;AAAA,EAUM,uBAAuB,UAAkB;AAAA;AAvgDnD;AAygDQ,UAAI,aAAa;AAAG;AAEpB,YAAM,SAAoB,KAAK;AAC/B,YAAM,YAAY,OAAO,kBAAkB,IAAI;AAG/C,UAAI,CAAC;AAAW;AAGhB,UAAI,UAAU,aAAa,WAAW,GAAG;AACrC,iBAAG,kBAAH,mBAAkB,KAAK,mCAAmC,EAAC,UAAU,KAAI;AAAA,MAC7E;AAEA,YAAM,OAAO,iBAAiB,WAAW,QAAQ;AAAA,IACrD;AAAA;AAAA,EAEA,kBAA2B;AAEvB,WAAO,WAAW,KAAK;AAAA,EAC3B;AAAA,EAGA,YAA0C;AACtC,QAAI,KAAK,UAAU;AACf,aAAO,KAAK;AAAA,EACpB;AAAA,EAGA,cAA8C;AAC1C,QAAI,KAAK,YAAY;AACjB,aAAO,KAAK;AAAA,EACpB;AAAA,EAGA,WAAwC;AACpC,QAAI,KAAK,SAAS,GAAG;AACjB,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EAGA,WAAwC;AACpC,QAAI,KAAK,SAAS,GAAG;AACjB,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EAGA,YAA0C;AACtC,QAAI,KAAK,UAAU,GAAG;AAClB,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EAGA,OAAgC;AAC5B,QAAI,KAAK,KAAK,GAAG;AACb,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AAAA,EAEA,kBAA4C;AAExC,QAAI,KAAK,UAAU,KAAK,mBAAmB,KAAK,QAAQ;AAEpD,aAAO,KAAK,OAAO;AAAA,IACvB;AAAA,EACJ;AAAA,EAMM,iBAAiB,MAAc;AAAA;AACjC,UAAI,CAAC,KAAK,UAAU;AAAG;AAEvB,YAAM,SAAS,MAAM,SAAS,IAAI;AAClC,UAAI,CAAC;AAAQ;AAKb,YAAM,KAAK,OAAO,EAAC,iBAAiB,OAAO,GAAE,CAAC;AAAA,IAClD;AAAA;AAAA,EAEM,sBAAsB;AAAA;AACxB,UAAI,CAAC,KAAK,UAAU;AAAG;AAEvB,YAAM,KAAK,OAAO,EAAC,iBAAiB,GAAE,CAAC;AAAA,IAC3C;AAAA;AAAA,EAEA,YAAqB;AACjB,UAAM,OAAO,KAAK,UAAU;AAC5B,QAAI,CAAC;AAAM,aAAO;AAGlB,WAAO,KAAK,OAAO,OAAO,SAAS;AAAA,EACvC;AAAA,EAEA,mBAAyC;AA5mD7C;AA6mDQ,QAAI,CAAC,KAAK,UAAU;AAAG;AACvB,UAAM,OAAO,KAAK,UAAU;AAC5B,QAAI,CAAC;AAAM;AAGX,UAAM,UAAS,UAAK,WAAL,mBAAa,IAAI,KAAK,OAAO;AAE5C,QAAI,CAAC;AAAQ;AACb,WAAO;AAAA,EACX;AAAA,EAUM,UAAU,MAAc;AAAA;AAC1B,UAAI,CAAC,KAAK,KAAK;AAAG;AAGlB,YAAM,OAAO,MAAM,SAAS,IAAI;AAChC,UAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ;AAE3B,YAAM,OAAO,KAAK;AAClB,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,kBAAkB,IAAI;AAAA,IACrC;AAAA;AAAA,EAEM,kBAAkB,UAAwB;AAAA;AA5oDpD;AA6oDQ,YAAM,aAAa;AAAA,QAEf,IAAI,SAAS;AAAA,QACb,QAAQ,SAAS,OAAO;AAAA,QACxB,MAAM,UAAU,SAAS,OAAO,IAAI;AAAA,MACxC;AAGA,YAAM,KAAK,OAAO,EAAC,eAAe,WAAU,GAAG,EAAC,QAAQ,MAAK,CAAC;AAC9D,aAAM,UAAK,UAAL,mBAAY;AAAA,IACtB;AAAA;AAAA,EAKM,eAAe;AAAA;AACjB,UAAI,CAAC,KAAK,KAAK;AAAG;AAElB,YAAM,aAAa;AAAA,QACf,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,MAAM;AAAA,MACV;AAEA,YAAM,KAAK,OAAO,EAAC,eAAe,WAAU,CAAC;AAAA,IACjD;AAAA;AAAA,EAKA,UAAmB;AACf,UAAM,KAAK,KAAK,KAAK;AACrB,QAAI,CAAC;AAAI,aAAO;AAEhB,WAAO,MAAM,CAAC,CAAC,GAAG,OAAO,KAAK;AAAA,EAClC;AAAA,EAKA,YAAiC;AArrDrC;AAsrDQ,UAAM,KAAK,KAAK,KAAK;AACrB,QAAI,CAAC;AAAI;AAET,YAAO,UAAK,UAAL,mBAAY,KAAI,8BAAI,WAAJ,mBAAY,KAAK;AAAA,EAC5C;AAAA,EAMA,kBAAkB,OAA0B;AACxC,WAAO,MAAM,SAAS,KAAK,IAAI;AAAA,EACnC;AAAA,EAKA,wBAAoD;AAChD,UAAM,YAAY,2BAA2B,qBAAqB,IAAI;AACtE,cAAU,SAAS;AACnB,WAAO;AAAA,EACX;AAAA,EAQM,sBAAsB,WAAuC;AAAA;AAC/D,YAAM,2BAA2B,qBAAqB,MAAM,UAAU,MAAM;AAAA,IAChF;AAAA;AAAA,EAKA,IAAI,gBAAyB;AAEzB,WAAO,YAAY,KAAK;AAAA,EAC5B;AAAA,EAEA,IAAI,aAAqC;AACrC,QAAI,CAAC,KAAK;AAAe;AAEzB,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EAaM,SAAS,QAAe,OAAe,SAAkE;AAAA;AAhvDnH;AAivDQ,UAAI,CAAC,OAAO;AAAO;AAEnB,UAAI,KAAK,KAAK,KAAK,KAAK,QAAQ,GAAG;AAC/B,eAAO,OAAM,UAAK,UAAU,MAAf,mBAAkB,SAAS,QAAQ,OAAO;AAAA,MAC3D;AAEA,UAAI,CAAC,KAAK,eAAe;AACrB,iBAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,gCAAgC;AAC3E,eAAO,QAAQ,MAAM,kBAAkB,KAAK,kCAAkC;AAAA,MAClF;AACA,UAAI,OAAO,SAAS,CAAC,OAAO,MAAM,eAAe;AAC7C,iBAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,gCAAgC;AAE3E,eAAO,QAAQ,MAAM,kBAAkB,OAAO,MAAM,kCAAkC;AAAA,MAC1F;AACA,UAAI,CAAC,OAAO,OAAO;AACf,eAAO,QAAQ,MAAM,aAAa,OAAO,4BAA4B;AAAA,MACzE;AAGA,UAAI,KAAK,OAAO,OAAO,MAAM,IAAI;AAC7B;AAAA,MACJ;AAGA,YAAM,SAAQ,mCAAS,UAAS,OAAO;AACvC,YAAM,OAAO,mCAAS;AAEtB,YAAM,SAAS,QAAQ,YAAY,MAAM,IAAc,OAAO,IAAI,6BAAM,EAAY;AACpF,YAAM,aAAa,KAAK;AAExB,UAAI,CAAC;AAAY;AAEjB,YAAM,gBAAe,mCAAS,aAAY,IAAI,KAAK,aAAa,MAAM;AACtE,iBAAW,MAAM,UAAU,YAAY,mBAAmB,eAAe,KAAK;AAE9E,YAAM,KAAK,OAAO,EAAC,uBAAuB,WAAW,MAAK,CAAC;AAAA,IAC/D;AAAA;AAAA,EAKM,aAAa;AAAA;AACf,YAAM,aAAa,KAAK;AACxB,UAAI,CAAC;AAAY;AAGjB,YAAM,aAAa,CAAC;AACpB,iBAAW,UAAU,OAAO,KAAK,WAAW,KAAK,GAAG;AAChD,mBAAW,KAAK,YAAY;AAAA,MAChC;AAEA,YAAM,KAAK,OAAO,EAAC,uBAAuB,WAAU,CAAC;AAAA,IACzD;AAAA;AAAA,EAKM,UAAU,QAAgB;AAAA;AAC5B,UAAI,CAAC,KAAK;AAAe;AAEzB,YAAM,aAAa,CAAC;AACpB,iBAAW,KAAK,YAAY;AAE5B,YAAM,KAAK,OAAO,EAAC,uBAAuB,WAAU,CAAC;AAAA,IACzD;AAAA;AAAA,EAEA,cAAuC;AACnC,UAAM,aAAa,KAAK;AACxB,QAAI,CAAC;AAAY;AACjB,WAAO,WAAW;AAAA,EACtB;AAAA,EAcA,SAAS,QAAe,MAAgB,SAAqC;AACzE,QAAI,CAAC,OAAO;AAAO,aAAO;AAC1B,QAAI,kBAAkB,SAAS;AAC3B,cAAQ,MAAM,mBAAmB;AACjC,aAAO;AAAA,IACX;AACA,QAAI,CAAC,OAAO,SAAS,CAAC,OAAO,MAAM;AAAe,aAAO;AAGzD,UAAM,SAAQ,mCAAS,UAAS,OAAO;AAEvC,WAAO,QAAQ,kBAAkB,WAAW,OAAO,MAAM,gBAAgB,IAAI;AAE7E,UAAM,SAAS,QAAQ,YAAY,MAAM,IAAc,OAAO,IAAI,6BAAM,EAAY;AACpF,WAAO,KAAK,aAAa,MAAM;AAAA,EACnC;AAAA,EAEA,aAAa,QAAwB;AAv1DzC;AAw1DQ,aAAO,UAAK,eAAL,mBAAiB,MAAM,YAAW;AAAA,EAC7C;AAAA,EAUA,IAAI,mBAAuC;AAEvC,QAAI,KAAK,KAAK,KAAK,KAAK,QAAQ;AAAG,aAAO,KAAK,UAAU,KAAK;AAI9D,WAAO;AAAA,EACX;AAAA,EAEA,wBAA0C;AACtC,UAAM,QAAQ,KAAK,iBAAiB,YAAY;AAChD,QAAI,CAAC;AAAO,aAAO,CAAC;AAIpB,WAAO,OAAO,QAAQ,KAAK,EACtB,OAAO,CAAC,CAAC,QAAQC,MAAK,MAAM,QAAQ,cAAc,MAAM,CAAC,EACzD,IAAI,CAAC,CAAC,QAAQA,MAAK,MAAO,iCACpB,QAAQ,mBAAmB,MAAM,IADb;AAAA,MAEvB,OAAAA;AAAA,MACA;AAAA,IACJ,EAAE;AAAA,EACV;AACJ;;;ACx3DO,IAAM,2BAAN,cAAuC,WAAW;AAAA,EACrD,YAAY,SAAU;AAClB,UAAM,aAAa,yBAAyB,cAAc;AAE1D,UAAM,YAAY,OAAO;AAAA,EAC7B;AAAA,EAEA,OAAO,gBAAgB;AACnB,WAAO;AAAA,MACH,OAAO,KAAK,KAAK,SAAS,yCAAyC;AAAA,MACnE,SAAS;AAAA,QACL,QAAQ;AAAA,UACJ,OAAO,KAAK,KAAK,SAAS,0CAA0C;AAAA,QACxE;AAAA,QACA,QAAQ;AAAA,UACJ,OAAO,KAAK,KAAK,SAAS,0CAA0C;AAAA,QACxE;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,MACT,cAAc,CAAC;AAAA,MACf,cAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AAEb,YAAQ,UAAU,CAAC,OAAO,aAAa;AACvC,YAAQ,YAAY;AACpB,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AACJ;;;ACLO,IAAM,UAAN,MAAc;AAAA,EAOjB,OAAO,UAAU,OAAwB,SAAoC;AACzE,QAAI,MAAM,QAAQ;AAAW,YAAM,MAAM,CAAC;AAE1C,UAAM,QAAQ,IAAI,UAAU,MAAM,GAAG;AAErC,QAAI,CAAC,MAAM,MAAM,IAAc,KAAK,OAAO,MAAM,IAAI,MAAM,GAAG;AAC1D,YAAM,cAAc,iBAAiB,MAAM,OAAO;AAAA,IACtD;AAIA,UAAM,OAAO,MAAM,SAAS,SAAY,OAAO,MAAM,IAAI,IAAI;AAG7D,QAAI,MAAM,UAAU;AAEhB,YAAM,QAAQ,QAAQ,gBAAgB,MAAM,SAAS,OAAO,OAAO;AACnE,aAAO,MAAM;AAAA,IACjB;AAGA,YAAQ,QAAQ,MAAM,IAAI,GAAG;AAAA,MACzB,KAAK;AACD,cAAM,QAAQ,QAAQ,QAAQ,MAAM,QAAQ,MAAM,MAAM,CAAC;AACzD,cAAM,QAAQ,QAAQ,gBAAgB,MAAM,OAAO,OAAO;AAC1D;AAAA,MAEJ;AACI,cAAM,QAAQ,MAAM,SAAS,SAAY,MAAM,OAAO,MAAM;AAC5D;AAAA,IACR;AAEA,UAAM,MAAM,MAAM;AAElB,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,OAAO,UAAqB,OAA+B;AACvD,QAAI,MAAM,QAAQ;AAAW,YAAM,MAAM,CAAC;AAE1C,QAAI,MAAM,UAAU;AAChB,YAAM,QAAQ,MAAM,SAAS;AAE7B,aAAO,MAAM;AAAA,IACjB;AAEA,UAAM,QAAQ,MAAM;AAEpB,WAAO,MAAM;AAAA,EACjB;AAAA,EAOA,OAAO,QAAQ,OAAe,UAAkB;AAC5C,UAAM,aAAa,KAAK,IAAI,IAAI,QAAQ;AACxC,WAAO,KAAK,MAAM,QAAQ,UAAU,IAAI;AAAA,EAC5C;AAAA,EAOA,OAAO,gBAAgB,OAAe,SAAoC;AACtE,QAAI,QAAO,mCAAS,SAAQ,UAAU;AAClC,cAAQ,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,IACvC;AACA,QAAI,QAAO,mCAAS,SAAQ,UAAU;AAClC,cAAQ,KAAK,IAAI,QAAQ,KAAK,KAAK;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,WAAW,OAAe;AAC7B,WAAO,MAAM,cAAc,QAAQ,YAAY,EAAE,QAAQ;AAAA,EAC7D;AAAA,EAIA,OAAO,UAAU,MAAM;AACnB,QAAI,OAAO,SAAS;AAAU,aAAO;AACrC,QAAI,SAAS,UAAa,SAAS;AAAM,aAAO;AAChD,UAAM,UAAU,CAAC;AACjB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG;AAC7C,YAAM,SAAS,IAAI,QAAQ,QAAQ,UAAU;AAC7C,cAAQ,UAAU,KAAK,UAAU,KAAK;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EAIA,OAAO,UAAU,MAAM;AACnB,QAAI,OAAO,SAAS;AAAU,aAAO;AACrC,QAAI,SAAS,UAAa,SAAS;AAAM,aAAO;AAChD,UAAM,UAAU,CAAC;AACjB,eAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG;AAC7C,YAAM,SAAS,IAAI,QAAQ,YAAY,MAAM;AAC7C,cAAQ,UAAU,KAAK,UAAU,KAAK;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,SAAS,MAAkG;AAhJtH;AAiJQ,QAAI,CAAC;AAAM,aAAO;AAClB,QAAI,OAAO,SAAS;AAAW,aAAO;AAEtC,UAAM,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,QAAI,CAAC,MAAM,QAAQ,IAAI;AAAG,aAAO,CAAC,IAAI;AACtC,WAAO,KAAK,OAAO,CAAC,QAAQ,GAAG;AAE/B,eAAW,OAAO,MAAM;AACpB,UAAI,OAAO,QAAQ,UAAU;AACzB,YAAI,aAAa,QAAQ,GAAG,KAAK,GAAG;AAChC,iBAAO;AAAA,QACX;AAAA,MACJ,WAAW,OAAO,QAAQ,YAAa,IAAmB,UAAU,QAAW;AAC3E,YAAI,aAAa,SAAQ,SAAI,UAAJ,YAAa,EAAE,KAAK,GAAG;AAC5C,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,mBAAmB,KAAqD;AAC3E,QAAI,QAAQ;AAAW,aAAO;AAC9B,QAAI,OAAO,QAAQ;AAAU,aAAO,IAAI,SAAS;AACjD,QAAI,OAAO,QAAQ;AAAU,aAAO;AACpC,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,aAAO,IAAI,KAAK,GAAG;AAAA,IACvB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,mBAAmB,KAAqD;AAC3E,QAAI,OAAO,QAAQ;AAAU,aAAO;AACpC,QAAI,OAAO,QAAQ,UAAU;AACzB,YAAM,MAAM,CAAC;AACb,UAAI,CAAC,MAAM,GAAG;AAAG,eAAO;AACxB,aAAO;AAAA,IACX;AACA,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,YAAM,MAAM,IAAI,KAAK,EAAE;AACvB,YAAM,MAAM,CAAC;AACb,UAAI,CAAC,MAAM,GAAG;AAAG,eAAO;AACxB,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,oBAAoB,KAAK,MAAM;AAClC,UAAM,aAAa,CAAC,OAAO;AACvB,YAAM,WAAW,EAAE,EAAE,EAAE,SAAS,sBAAsB;AACtD,YAAM,YAAY,EAAE,EAAE,EAAE,SAAS,YAAY;AAC7C,UAAI,EAAE,QAAQ,EAAE,KAAK,SAAS,GAAG;AAC7B,UAAE,SAAS,EAAE,SAAS,iBAAiB;AACvC,UAAE,SAAS,EAAE,YAAY,WAAW;AAAA,MACxC,OAAO;AACH,UAAE,SAAS,EAAE,SAAS,WAAW;AACjC,UAAE,SAAS,EAAE,YAAY,iBAAiB;AAAA,MAC9C;AAAA,IACJ;AACA,SAAK,KAAK,gBAAgB,EAAE,KAAK,WAAY;AACzC,iBAAW,IAAI;AAAA,IACnB,CAAC;AACD,SAAK,KAAK,gBAAgB,EAAE,MAAM,CAAC,UAAU,WAAW,MAAM,aAAa,CAAC;AAC5E,SAAK,KAAK,kBAAkB,EAAE,OAAO,CAAC,UAAU,IAAI,UAAU,KAAK,CAAC;AAAA,EACxE;AAAA,EAEA,OAAO,uBAAuB,QAAQ;AAClC,QAAI,WAAW;AAAG,aAAO;AACzB,QAAI,WAAW;AAAG,aAAO;AACzB,QAAI,WAAW;AAAG,aAAO;AACzB,QAAI,WAAW;AAAI,aAAO;AAC1B,QAAI,WAAW;AAAI,aAAO;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,MAAM,KAAK;AACd,UAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,KAAK,MAAM,GAAG,OAAO,CAAC,EAAE,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC;AAAA,IAClE;AACA,UAAM,QAAQ,CAAC,MAAM,QAAQ;AACzB,UAAI,SAAS;AAAc,cAAM,OAAO;AACxC,UAAI,SAAS;AAAY,cAAM,OAAO;AAAA,IAC1C,CAAC;AACD,WAAO,MAAM,KAAK,GAAG;AAAA,EACzB;AAAA,EAEA,OAAO,UAAU,KAAK;AAClB,UAAM,OAAO,OAAO,KAAK,GAAG,EAAE,KAAK,SAAS,SAAS,IAAI,IAAI;AACzD,UAAI,KAAK;AAAI,eAAO;AACpB,UAAI,KAAK;AAAI,eAAO;AACpB,aAAO;AAAA,IACX,CAAC;AAED,QAAI;AACJ,UAAM,QAAQ,CAAC;AACf,SAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC9B,YAAM,KAAK,MAAM,IAAI,KAAK;AAC1B,aAAO,IAAI,KAAK;AAAA,IACpB;AAEA,SAAK,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC9B,UAAI,KAAK,MAAM,MAAM,KAAK;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,aAAa,OAAO;AACvB,WAAO,UAAU,MAAM,YAAY,MAAM,UAAU,MAAM,WAAW,MAAM;AAAA,EAC9E;AAAA,EAEA,OAAO,OAAO,KAAK,MAAM;AACrB,UAAM,SAAS,CAAC;AAChB,QAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AACzC,aAAO,QAAQ,GAAG,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC1C,YAAI,KAAK,CAAC,KAAK,KAAK,CAAC;AAAG,iBAAO,OAAO;AAAA,MAC1C,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,UAAU,KAAK,OAAO;AACzB,QAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AACzC,UAAI,CAAC,IAAI,eAAe,OAAO,KAAK,IAAI,eAAe,OAAO,KAAK,UAAU,IAAI;AAC7E,YAAI,QAAQ;AAAA,MAChB;AACA,aAAO,QAAQ,GAAG,EACb,OAAO,CAAC,CAAC,EAAE,KAAK,MAAM,OAAO,UAAU,QAAQ,EAC/C,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM,QAAQ,UAAU,OAAO,GAAG,CAAC;AAAA,IAChE;AAAA,EACJ;AAAA,EAGA,OAAO,6BAA6B,OAAe,SAAiB,GAAW;AAC3E,UAAM,OAAO,KAAK,KAAK,SAAS,KAAK;AAErC,QAAI,UAAU,GAAG;AACb,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,SAAS,QAAQ;AACtB,eAAS,KAAK;AAAA,IAClB;AAEA,WAAO,KAAK,MAAM,GAAG,MAAM,EAAE,YAAY;AAAA,EAC7C;AAAA,EAIA,OAAO,SAAS,IAAgC;AAC5C,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO;AAAQ;AAEhD,eAAW,SAAS,OAAO,OAAO,YAAY;AAC1C,UAAI,MAAM,OAAO,IAAI;AACjB,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAMA,OAAO,mBAAmB,cAAuC;AAC7D,UAAM,CAAC,SAAS,OAAO,IAAI,QAAQ,wBAAwB,YAAY;AACvE,UAAM,QAAQ,QAAQ,sBAAsB,SAAS,OAAO;AAC5D,QAAI,CAAC;AAAO,aAAO;AACnB,WAAO,MAAM,SAAS;AAAA,EAC1B;AAAA,EAEA,OAAO,wBAAwB,cAA0D;AACrF,WAAO,aAAa,MAAM,GAAG;AAAA,EACjC;AAAA,EAEA,OAAO,sBAAsB,SAAS,SAAoC;AA1U9E;AA2UQ,UAAM,SAAQ,UAAK,WAAL,mBAAa,IAAI;AAC/B,QAAI,CAAC;AAAO;AAEZ,UAAM,QAAQ,MAAM,OAAO,IAAI,OAAO;AACtC,QAAI,CAAC;AAAO;AAEZ,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,eAAe,MAA6B;AAC/C,WAAO,OAAO,OAAO,KAAK;AAE1B,QAAI,CAAC;AAAM,aAAO,CAAC;AAEnB,WAAO,MAAM,KAAK,KAAK,OAAO;AAAA,EAClC;AAAA,EAEA,OAAO,eAAe,MAA6B;AAC/C,WAAO,OAAO,OAAO,KAAK;AAE1B,QAAI,CAAC;AAAM,aAAO;AAElB,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC/B;AAAA,EAEA,OAAO,qBAAqB,aAA4B,WAAkC;AACtF,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO,SAAS,CAAC,OAAO;AAAM,aAAO;AAEtE,QAAI,CAAC,eAAe,CAAC;AAAW,aAAO;AAEvC,UAAM,SAAS,IAAI,KAAK,MAAM,GAAG,OAAO,KAAK,UAAU,YAAY,KAAK,GAAG,YAAY,KAAK,CAAC,CAAC;AAC9F,UAAM,OAAO,IAAI,KAAK,MAAM,GAAG,OAAO,KAAK,UAAU,UAAU,KAAK,GAAG,UAAU,KAAK,CAAC,CAAC;AAIxF,UAAM,sBAAsB,OAAO,KAAK,gBAAgB,QAAQ,IAAI;AACpE,UAAM,YAAY,OAAO,MAAM,KAAK;AACpC,WAAO,QAAQ,kBAAkB,qBAAqB,SAAS;AAAA,EACnE;AAAA,EAEA,OAAO,kBAAkB,QAAgB,UAA0B;AAE/D,eAAW,SAAS,YAAY;AAEhC,QAAI,CAAC,kCAAkC,eAAe,QAAQ,GAAG;AAC7D,cAAQ,MAAM,oCAAoC,eAAe,aAAa;AAC9E,aAAO;AAAA,IACX;AAIA,WAAO,KAAK,MAAM,SAAS,kCAAkC,SAAS;AAAA,EAC1E;AAAA,EAEA,OAAO,sBAA+B;AAClC,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO;AAAQ,aAAO,CAAC;AACxD,WAAO,OAAO,OAAO;AAAA,EACzB;AAAA,EAMA,OAAO,0BAAmC;AACtC,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO;AAAQ,aAAO;AACvD,WAAO,OAAO,OAAO,WAAW,SAAS;AAAA,EAC7C;AAAA,EAMA,OAAO,2BAAuC;AAC1C,QAAI,CAAC,UAAU,CAAC,OAAO;AAAO,aAAO,CAAC;AAEtC,UAAM,SAAS,QAAQ,oBAAoB;AAC3C,WAAO,OAAO,IAAI,WAAS,MAAM,KAAK;AAAA,EAC1C;AAAA,EAMA,OAAO,oBAA6B;AAChC,QAAI,CAAC,OAAO,SAAS,CAAC,KAAK;AAAM,aAAO,CAAC;AAEzC,WAAO,MAAM,KAAK,KAAK,KAAK,OAAO;AAAA,EACvC;AAAA,EAMA,OAAO,+BAA2C;AAC9C,QAAI,CAAC,KAAK;AAAM,aAAO,CAAC;AAExB,UAAM,SAAS,QAAQ,yBAAyB;AAGhD,QAAI,OAAO,WAAW,KAAK,KAAK,KAAK,WAAW;AAC5C,aAAO,KAAK,KAAK,KAAK,SAAS;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AAAA,EAUA,OAAa,oBAAoB,UAAgD;AAAA;AAC7E,YAAM,SAAqB,CAAC;AAC5B,iBAAW,QAAQ,SAAS,kBAAkB;AAC1C,cAAM,eAAe,MAAM,SAAS,IAAI;AAExC,YAAI,QAAQ;AAGZ,YAAI,wBAAwB,eAAe;AACvC,cAAI,CAAC,aAAa;AAAO;AACzB,kBAAQ,aAAa;AAAA,QACzB;AAGA,YAAI,EAAE,iBAAiB,WAAW;AAC9B,kBAAQ,MAAM,qDAAqD,yDAAyD,YAAY;AACxI;AAAA,QACJ;AAEA,eAAO,KAAK,KAAK;AAAA,MACrB;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,OAAO,uBAAuB,OAAe,UAAkB,UAAqC;AAChG,YAAQ,KAAK,KAAK,SAAS,KAAK;AAChC,WAAO,EAAC,OAAO,UAAU,SAAQ;AAAA,EACrC;AAAA,EAEA,OAAO,4BAA4B,eAAiC;AAChE,WAAO,OAAO,KAAK,aAAa,EAAE,IAAI,CAAC,UAAU;AAC7C,UAAI,OAAO,MAAM,KAAK,GAAG;AACrB,gBAAQ,KAAK,uEAAuE,aAAa;AAAA,MACrG;AACA,aAAO,cAAc;AAAA,IACzB,CAAC;AAAA,EACL;AAAA,EAWA,OAAO,mBAAmB,OAAyB;AAC/C,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,4BAA4B,KAAK,SAAS,IAAI,aAAa,MAAM,0BAA0B;AACjG,UAAM,QAAQ,MAAM,SAAS;AAE7B,QAAI,6BAA6B;AAAO,aAAO,MAAM;AAErD,WAAO,MAAM;AAAA,EACjB;AAAA,EAUA,OAAO,kBAAkB,OAAyB;AAC9C,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,wBAAwB,KAAK,SAAS,IAAI,aAAa,MAAM,0BAA0B;AAC7F,UAAM,QAAQ,MAAM,SAAS;AAG7B,QAAI,yBAAyB;AAAO,aAAO,MAAM,QAAQ,OAAO;AAChE,WAAO,MAAM,OAAO;AAAA,EACxB;AAAA,EAEA,OAAO,iBAAiB,OAAe,MAAkB,KAAa,GAAG,UAAyB,IAAI,YAAkC;AACpI,UAAM,SAAS,UAAU,aAAa,MAAM;AAC5C,WAAO,OAAO;AACd,WAAO,QAAQ;AACf,WAAO,KAAK,OAAO;AACnB,WAAO,KAAK,QAAQ;AACpB,WAAO,GAAG,OAAO;AACjB,WAAO,GAAG,QAAQ;AAClB,WAAO,QAAQ,OAAO;AACtB,WAAO,QAAQ,QAAQ;AAEvB,QAAI,cAAc,WAAW,OAAO;AAChC,aAAO,SAAS;AAAA,QACZ,SAAS,WAAW,MAAM;AAAA,QAC1B,UAAU,WAAW;AAAA,QACrB,QAAQ,WAAW;AAAA,QACnB,UAAU,WAAW;AAAA,MACzB;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAMA,OAAO,iBAAiB,YAA6C;AACjE,QAAI,CAAC,KAAK;AAAQ;AAElB,QAAI,CAAC,WAAW,QAAQ;AACpB;AAAA,IACJ;AAEA,UAAM,UAAU,WAAW,OAAO;AAClC,UAAM,cAAc,KAAK,OAAO,IAAI,OAAO;AAE3C,QAAI,CAAC,aAAa;AACd;AAAA,IACJ;AAGA,UAAM,SAAS,WAAW,OAAO;AACjC,UAAM,YAAY,YAAY,MAAM,IAAI,MAAM;AAC9C,QAAI,WAAW;AACX,aAAO;AAAA,IACX;AAKA,UAAM,SAAS,YAAY,gBAAgB;AAC3C,QAAI;AACJ,WAAO,QAAQ,WAAS;AACpB,UAAI,CAAC,MAAM;AAAO;AAElB,YAAM,YAAY,MAAM,MAAM,MAAM,IAAI,MAAM;AAC9C,UAAI,WAAW;AACX,oBAAY;AAAA,MAChB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAcA,OAAO,mBAAmB,UAAsB,MAAc,mBAA+C;AACzG,UAAM,WAAW,UAAU,QAAQ;AACnC,aAAS,MAAM,UAAU,cAAc,SAAS,KAAK,mBAAmB,IAAI;AAC5E,aAAS,QAAQ,QAAQ,UAAU,UAAU,EAAC,KAAK,EAAC,CAAC;AAErD,WAAO,EAAC,UAAU,SAAQ;AAAA,EAC9B;AAAA,EAUA,OAAO,mBAAmB,UAAsB,MAAc,mBAA+C;AACzG,QAAI,OAAO;AAAG,aAAO;AACrB,WAAO,QAAQ,mBAAmB,UAAU,CAAC,MAAM,iBAAiB;AAAA,EACxE;AAAA,EAEA,OAAa,kBAAoC;AAAA;AAC7C,YAAM,SAAS,IAAI,yBAAyB;AAC5C,YAAM,OAAO,OAAO;AACpB,aAAO,CAAC,OAAO,YAAY,OAAO,mBAAmB;AAAA,IACzD;AAAA;AAAA,EASA,OAAO,+BAA+B,eAAuB,YAAwB,WAAmB,mBAA2H;AAC/N,QAAI,CAAC,iBAAiB,cAAc,WAAW;AAAG;AAElD,UAAM,KAAK,SAAS,QAAQ;AAC5B,UAAM,kBAAkB;AAAA,MACpB,CAAC,gBAAgB,EAAC,CAAC,KAAK,WAAU;AAAA,IACtC;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EASA,OAAO,mBAAmB,MAAc,OAAqC;AACzE,WAAO,EAAC,CAAC,OAAO,MAAK;AAAA,EACzB;AAAA,EAWA,OAAO,uBAAuB,MAAc,KAA0D;AAGlG,WAAO,EAAC,CAAC,OAAO,EAAC,CAAC,KAAK,QAAQ,KAAI,EAAC;AAAA,EACxC;AAAA,EAEA,OAAO,cAAc,OAA2B;AAC5C,WAAO,MAAM,QAAQ,KAAK,KAAK,SAAS,MAAM,KAAK,IAAI,MAAM;AAAA,EACjE;AAAA,EAYA,OAAO,WAAW,QAAgB,MAAe,MAAc;AAE3D,UAAM,gBAAgB,OAAO,QAAQ,MAAM,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM;AACtE,YAAM,cAAc,QAAQ,cAAc,CAAC,KAAK;AAChD,YAAM,cAAc,QAAQ,cAAc,CAAC,KAAK;AAEhD,UAAI;AACA,eAAO,YAAY,cAAc,WAAW,MAAM,IAAI,IAAI;AAAA;AAE1D,eAAO,YAAY,cAAc,WAAW,MAAM,IAAI,KAAK;AAAA,IACnE,CAAC;AAGD,UAAM,iBAAiB,CAAC;AACxB,eAAW,CAAC,IAAI,KAAK,KAAK,eAAe;AACrC,qBAAe,MAAM;AAAA,IACzB;AAEA,WAAO;AAAA,EACX;AAAA,EAWA,OAAO,8BAA8B,cAAsC,MAAe,MAA8B;AAEpH,UAAM,gBAAgB,OAAO,QAAQ,YAAY,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM;AAC5E,YAAM,cAAc,KAAK,KAAK,SAAS,CAAC;AACxC,YAAM,cAAc,KAAK,KAAK,SAAS,CAAC;AAExC,UAAI;AACA,eAAO,YAAY,cAAc,WAAW,MAAM,IAAI,IAAI;AAAA;AAE1D,eAAO,YAAY,cAAc,WAAW,MAAM,IAAI,KAAK;AAAA,IACnE,CAAC;AAGD,UAAM,iBAAiB,CAAC;AACxB,eAAW,CAAC,KAAK,UAAU,KAAK,eAAe;AAC3C,qBAAe,OAAO;AAAA,IAC1B;AACA,WAAO;AAAA,EACX;AAAA,EASA,OAAO,yBAAyBC,WAA0C,YAAoB,SAAkB,MAAc;AAC1H,QAAI,CAAC,KAAK;AAAO,aAAO,CAAC;AAEzB,WAAO,KAAK,MAAM,OAAO,UAAQ;AAC7B,UAAI,KAAK;AAAM,eAAO;AAEtB,UAAI,CAACA,UAAS,mBAAmB,MAAM,UAAU;AAAG,eAAO;AAE3D,UAAI,UAAU,CAAC,KAAK;AAAQ,eAAO;AAEnC,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EAQA,OAAO,oBAAoB,OAA2B;AAElD,WAAO,MAAM,QAAQ,KAAK,KAAK,SAAS,MAAM,KAAK,IAAI,MAAM,QAAQ;AAAA,EACzE;AAAA,EAMA,OAAa,sBAAsB,MAAqG;AAAA;AACpI,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAO;AAEjC,UAAI,KAAK,QAAQ,KAAK,SAAS;AAC3B,eAAO,MAAM,QAAQ,wBAAwB,KAAK,MAAM,KAAK,EAAE;AAEnE,UAAI,KAAK,QAAQ,KAAK,SAAS;AAC3B,eAAO,MAAM,QAAQ,wBAAwB,KAAK,MAAM,KAAK,EAAE;AAEnE,UAAI,KAAK,SAAS;AACd,eAAO,KAAK,OAAO,IAAI,KAAK,EAAE;AAElC,UAAI,KAAK,SAAS;AACd,eAAO,KAAK,MAAM,IAAI,KAAK,EAAE;AAAA,IACrC;AAAA;AAAA,EAOA,OAAa,wBAAwB,YAAoB,IAA+B;AAAA;AACpF,YAAM,OAAO,KAAK,MAAM,KAAK,CAAC,MAAM,EAAE,eAAe,UAAU;AAE/D,aAAO,MAAM,KAAK,YAAY,EAAE;AAAA,IACpC;AAAA;AAAA,EAQA,OAAO,cAAc,QAAyB;AAC1C,QAAI,CAAC,KAAK;AAAQ,aAAO;AAEzB,UAAM,CAAC,SAAS,UAAU,MAAM,IAAI,QAAQ,kBAAkB,MAAM;AAEpE,UAAM,QAAQ,KAAK,OAAO,IAAI,OAAO;AACrC,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,gBAAgB,MAAM,OAAO,IAAI,QAAQ;AAC/C,QAAI,CAAC;AAAe,aAAO;AAE3B,UAAM,QAAQ,cAAc;AAE5B,QAAI,UAAU,EAAC,+BAAO,MAAM,IAAI;AAAS,aAAO;AAEhD,WAAO;AAAA,EACX;AAAA,EAUA,OAAO,YAAY,SAAiB,UAAkB,QAA4B,YAAY,KAAa;AACvG,WAAO,CAAC,SAAS,UAAU,UAAU,EAAE,EAAE,KAAK,SAAS;AAAA,EAC3D;AAAA,EAQA,OAAO,kBAAkB,QAAgB,YAAY,KAA0D;AAC3G,UAAM,MAAM,OAAO,MAAM,SAAS;AAElC,QAAI,IAAI,WAAW,GAAG;AAClB,cAAQ,MAAM,sCAAsC;AAAA,IACxD;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,mBAAmB,QAA8C;AAp1B5E;AAq1BQ,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAO;AAEjC,UAAM,CAAC,SAAS,UAAU,MAAM,IAAI,QAAQ,kBAAkB,MAAM;AAEpE,UAAM,QAAQ,KAAK,OAAO,IAAI,OAAO;AACrC,QAAI,CAAC;AAAO;AACZ,UAAM,SAAS,MAAM,OAAO,IAAI,QAAQ,KAAK,KAAK,MAAM,IAAI,QAAQ;AACpE,UAAM,QAAO,4CAAQ,UAAR,mBAAe,UAAf,mBAAsB,IAAI;AAEvC,WAAO;AAAA,MACH;AAAA,MAAO;AAAA,MAAQ;AAAA,IACnB;AAAA,EACJ;AAAA,EASA,OAAO,cAAc,KAAa,MAAyB;AACvD,eAAW,OAAO,MAAM;AACpB,UAAI,CAAC,IAAI,eAAe,GAAG;AAAG,eAAO;AAAA,IACzC;AAEA,WAAO;AAAA,EACX;AAAA,EAWA,OAAa,cAAc,UAAU,YAA0C;AAAA;AAC3E,cAAQ,MAAM,yCAAyC,wBAAwB,UAAU;AACzF,YAAM,OAAO,KAAK,MAAM,KAAK,CAAAC,UACzBA,MAAK,SAAS,WAAW,eACzBA,MAAK,SAAS,SAAS,QAAQ;AACnC,UAAI,CAAC;AAAM;AAGX,YAAM,YAAY,KAAK,MAAM,KAAK,UAAK;AAn4B/C;AAm4BkD,2BAAK,SAAL,mBAAW,cAAc,QAAQ,IAAI,OAAO,KAAK,GAAG,GAAG,UAAS,WAAW,YAAY;AAAA,OAAC;AAClI,UAAI,CAAC;AAAW;AAEhB,YAAM,OAAO,MAAM,KAAK,YAAY,UAAU,GAAG;AACjD,UAAI,CAAC,QAAQ,KAAK,SAAS;AAAU;AAErC,cAAQ,MAAM,gCAAgC,wBAAwB,YAAY,IAAI;AACtF,aAAO;AAAA,IACX;AAAA;AAAA,EAUA,OAAa,sBAAsB,OAAO;AAAA;AACtC,YAAM,UAAU,EAAE,MAAM,aAAa;AACrC,YAAM,OAAO,QAAQ,KAAK,MAAM;AAChC,YAAM,QAAQ,oBAAoB,IAAI;AAAA,IAC1C;AAAA;AAAA,EAQA,OAAa,oBAAoB,MAAc,sBAAsB,MAAM;AAAA;AACvE,UAAI,CAAC;AAAM;AACX,UAAID,YAAW,MAAM,SAAS,IAAI;AAClC,UAAI,CAACA;AAAU;AACf,UAAIA,qBAAoB,iBAAiB,uBAAuBA,UAAS;AACrE,QAAAA,YAAWA,UAAS;AAExB,YAAMA,UAAS,MAAM,OAAO,IAAI;AAAA,IACpC;AAAA;AAAA,EAKA,OAAO,+BAA+B,MAAc,YAAqC,WAAW;AA96BxG;AAi7BQ,UAAI,8CAAY,WAAZ,mBAAoB,cAAa;AAAW;AAIhD,QAAI,WAAW,OAAO,aAAa,IAAI;AACnC,cAAQ,MAAM,YAAY,WAAW,sBAAsB,EAAE;AAC7D;AAAA,IACJ;AAGA,UAAM,OAAO,IAAI,0BAA0B,WAAW,OAAO;AAC7D,QAAI,CAAC,MAAM;AACP,cAAQ,MAAM,4EAA4E,WAAW,OAAO,aAAa,UAAU;AAAA,IACvI;AAEA,YAAQ,MAAM,YAAY,WAAW,sBAAsB,IAAI;AAC/D,YAAQ,MAAM,YAAY,WAAW,8BAA8B,qBAAqB;AACxF,YAAQ,MAAM,YAAY,WAAW,qCAAqC,oBAAoB;AAAA,EAClG;AAAA,EAKA,OAAO,8BAA8B,MAAc,YAAoC,WAAW;AAx8BtG;AA28BQ,UAAI,8CAAY,WAAZ,mBAAoB,cAAa;AAAW;AAIhD,QAAI,WAAW,OAAO,aAAa,IAAI;AACnC,cAAQ,MAAM,YAAY,WAAW,sBAAsB,EAAE;AAC7D;AAAA,IACJ;AAGA,UAAM,OAAO,IAAI,YAAY;AAE7B,UAAM,cAAc,IAAI,aAAa,MAAM,WAAW,OAAO,aAAa;AAE1E,UAAM,aAAa,IAAI,mBAAmB,MAAM,WAAW,OAAO,aAAa;AAC/E,UAAM,aAAY,SAAI,cAAc,UAAlB,YAA2B;AAE7C,YAAQ,MAAM,YAAY,WAAW,sBAAsB,IAAI;AAC/D,YAAQ,MAAM,YAAY,WAAW,8BAA8B,WAAW;AAC9E,YAAQ,MAAM,YAAY,WAAW,qCAAqC,UAAU;AACpF,YAAQ,MAAM,YAAY,WAAW,+BAA+B,SAAS;AAAA,EACjF;AAAA,EAKA,OAAO,oCAAoC,MAAc,YAAoC,WAAW;AACpG,UAAM,OAAO,IAAI,YAAY;AAE7B,YAAQ,MAAM,YAAY,WAAW,sBAAsB,IAAI;AAAA,EACnE;AAAA,EAkBA,OAAO,gCAAgC,MAAc,YAAwC,WAAW;AACpG,QAAI,CAAC;AAAY;AAEjB,UAAM,cAAc;AAAA,MAChB,UAAU,QAAQ;AAAA,MAClB,SAAS,QAAQ;AAAA,MACjB,gBAAgB,QAAQ;AAAA,IAC5B;AAEA,UAAM,UAAU,YAAY;AAC5B,QAAI,CAAC;AAAS;AAEd,YAAQ,MAAM,YAAY,SAAS;AAAA,EACvC;AAAA,EASA,OAAO,gBAAgB,KAAa,UAAgB,IAAY;AAC5D,UAAM,kBAAkB,CAAC,KAAK,IAAI;AAClC,oBAAgB,QAAQ,eAAa,MAAM,IAAI,QAAQ,WAAW,OAAO,CAAC;AAC1E,WAAO;AAAA,EACX;AAAA,EAQA,OAAO,MAAM,WAA4B;AACrC,QAAI,WAAW;AACf,QAAI,MAAM,IAAI,OAAO,UAAU,GAAG;AAClC,WAAO,IAAI,KAAK,SAAS;AAAA,EAC9B;AACH;;;ACzhCO,IAAM,8BAA8B,MAAM;AAC7C,aAAW,eAAe,sBAAsB,SAAU,QAAQ;AAC9D,QAAI,WAAW;AAAY,aAAO;AAClC,QAAI,WAAW;AAAQ,aAAO;AAC9B,QAAI,WAAW;AAAU,aAAO;AAChC,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,cAAc,SAAS,QAAgC;AAC7E,UAAM,WAAW,WAAW,QAAQ,mBAAmB,OAAO,KAAK,KAAK;AACxE,QAAI,OAAO,GAAG,OAAO,QAAQ;AAC7B,WAAO,IAAI,WAAW,WAAW,IAAI;AAAA,EACzC,CAAC;AAED,aAAW,eAAe,YAAY,SAAU,MAAM;AAClD,QAAI,MAAM;AACN,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO;AAAA,QACX,KAAK;AACD,iBAAO;AAAA,MACf;AAAA,IACJ;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,eAAe,SAAU,SAAS;AACxD,QAAI,OAAO;AACX,QAAI,YAAY,eAAe;AAC3B,aAAO;AAAA,IACX,WAAW,YAAY,aAAa;AAChC,aAAO;AAAA,IACX,WAAW,YAAY,QAAQ;AAC3B,aAAO;AAAA,IACX,WAAW,YAAY,QAAQ;AAC3B,aAAO;AAAA,IACX,WAAW,YAAY,QAAQ;AAC3B,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,cAAc,SAAU,WAA4B;AAC1E,UAAM,QAAQ,IAAI,UAAU,SAAS;AACrC,WAAO,MAAM;AAAA,EACjB,CAAC;AAED,aAAW,eAAe,eAAe,SAAU,OAAe;AAC9D,WAAO,QAAQ,IAAK,IAAI,UAAS,GAAG;AAAA,EACxC,CAAC;AAED,aAAW,eAAe,eAAe,QAAQ,kBAAkB;AACnE,aAAW,eAAe,cAAc,QAAQ,iBAAiB;AACrE;;;AChEO,IAAM,0BAA0B,MAAM;AACzC,aAAW,eAAe,mBAAmB,SAAU,MAAM;AACzD,UAAM,WAAW;AACjB,UAAM,UAAU,KAAK,KAAK,SAAS,SAAS;AAC5C,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,MAC1C,UAAU;AAAA,MAEV,MAAM,CAAC;AAAA,IACX;AACA,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,yBAAyB;AAC5D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,uBAAuB;AAC1D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,mBAAmB;AACtD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,uBAAuB;AAC1D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,uBAAuB;AAC1D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,0BAA0B;AAC7D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,sBAAsB;AACzD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,qBAAqB;AACxD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,oBAAoB;AACvD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,2BAA2B;AAC9D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,uBAAuB;AAC1D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,sBAAsB;AACzD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,qBAAqB;AACxD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,oBAAoB;AACvD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,4BAA4B;AAC/D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,sBAAsB;AACzD,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,yBAAyB;AAC5D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,yBAAyB;AAC5D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,uBAAuB;AAC1D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,4BAA4B;AAC/D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,2BAA2B;AAC9D,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,QAAQ,KAAK,KAAK,SAAS,kBAAkB;AACrD,gBAAQ,WAAW;AACnB,gBAAQ,OAAO,EAAC,QAAQ,SAAQ;AAChC,eAAO,CAAC,OAAO;AAAA,MACnB;AACI,eAAO,CAAC;AAAA,IAChB;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,kBAAkB,SAAS,MAAM;AACvD,UAAM,cAAc;AAAA,MAChB,MAAM;AAAA,MACN,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,MAClC,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,MAC1C,UAAU;AAAA,MAEV,MAAM,EAAC,WAAW,KAAI;AAAA,IAC1B;AAEA,WAAO,CAAC,WAAW;AAAA,EACvB,CAAC;AAED,aAAW,eAAe,uBAAuB,SAAU,IAAI;AAC3D,YAAQ,IAAI;AAAA,MACR,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,WAAW;AAAA,cACpC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,eAAe;AAAA,cACxC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,eAAe;AAAA,cACxC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,WAAW;AAAA,cACpC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,cAAc;AAAA,cACvC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,YACtC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,YAAY;AAAA,YACzC;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,cAAc;AAAA,YAC3C;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,UAAU;AAAA,YACvC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,eAAe;AAAA,YAC5C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,eAAe;AAAA,YAC5C;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,gBAAgB;AAAA,YAC7C;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,cAAc;AAAA,YAC3C;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,WAAW;AAAA,YACxC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,uBAAuB;AAAA,YACpD;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,wBAAwB;AAAA,YACrD;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,2BAA2B;AAAA,YACxD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,iBAAiB;AAAA,YAC9C;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACI,eAAO,CAAC;AAAA,IAChB;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,iBAAiB,SAAU,MAAyB;AA1OlF;AA2OQ,UAAM,UAAU,IAAI,mBAAmB,IAAI;AAC3C,UAAM,WAAW;AAAA,MACb,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO,QAAQ,YAAY;AAAA,QAC3B,UAAU;AAAA,MACd;AAAA,IACJ;AACA,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AAGD,cAAM,iBAAiB,KAAK,OAAO,OAAO,MAAM;AAChD,cAAM,YAAY,OAAO,KAAK,OAAO,OAAO,MAAM,IAAI;AAEtD,cAAM,iBAA2B,CAAC;AAClC,YAAI,CAAC,MAAM,SAAS,KAAK,YAAY,GAAG;AACpC,yBAAe,KAAK,UAAU,SAAS,CAAC;AAAA,QAC5C;AACA,YAAI,gBAAgB;AAChB,yBAAe,KAAK,KAAK,KAAK,SAAS,IAAI,OAAO,0CAAkB,GAAG,CAAC;AAAA,QAC5E;AACA,cAAM,YAAY,eAAe,KAAK,KAAK;AAG3C,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cAEF,MAAM,KAAK,KAAK,UAAS,SAAI,cAAa,aAAQ,eAAe,MAAvB,YAA4B,QAA7C,YAAoD,QAAQ,eAAe,CAAC;AAAA,cACrG,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,YAAW,aAAQ,mBAAmB,MAA3B,YAAgC,GAAG;AAAA,cAC3E,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,YAAW,aAAQ,oBAAoB,MAA5B,YAAiC,GAAG;AAAA,cAC5E,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM;AAAA,cACN,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,QAAQ,qBAAqB;AAAA,cACnC,UAAU;AAAA,YACd;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,CAAC,QAAQ;AAAA,MACpB,KAAK;AACD,YAAI,QAAQ,eAAe,GAAG;AAC1B,gBAAM,SAAQ,mBAAQ,QAAQ,MAAhB,mBAAmB,QAAQ,UAA3B,YAAoC;AAClD,gBAAM,OAAM,mBAAQ,QAAQ,MAAhB,mBAAmB,QAAQ,QAA3B,YAAkC;AAE9C,gBAAM,OAAO,QAAQ,OAAO,QAAQ,IAChC,GAAG,KAAK,KAAK,SAAS,kBAAkB,MAAM,SAAS,SACvD,KAAK,KAAK,SAAS,cAAc;AAErC,gBAAM,WAAW,cAAc,QAAQ,MAAM,sBAAsB;AACnE,iBAAO;AAAA,YACH;AAAA,cACI,MAAM;AAAA,gBACF,OAAO,GAAG,KAAK,KAAK,SAAS,qBAAqB,MAAM;AAAA,gBACxD;AAAA,gBACA;AAAA,cACJ;AAAA,YACJ;AAAA,YACA;AAAA,cACI,MAAM;AAAA,gBACF,MAAM;AAAA,cACV;AAAA,YACJ;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,iBAAO,CAAC,QAAQ;AAAA,QACpB;AAAA,MAEJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,cAAa,UAAK,OAAO,SAAZ,YAAoB,GAAG;AAAA,YACrE;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,WAAW,OAAM,UAAK,OAAO,SAAZ,YAAoB,GAAG;AAAA,YACzE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,YAAW,UAAK,OAAO,SAAZ,YAAoB,GAAG;AAAA,YACnE;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,aAAY,UAAK,OAAO,UAAZ,YAAqB,GAAG;AAAA,YACrE;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,WAAU,UAAK,OAAO,aAAZ,YAAwB,GAAG;AAAA,YACtE;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,QAAQ,SAAS;AAAA,YAC3B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,aAAa,OAAM,UAAK,OAAO,cAAZ,YAAyB,GAAG;AAAA,YAChF;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,aAAa,QAAO,UAAK,OAAO,UAAZ,YAAqB,GAAG;AAAA,YAC7E;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,aAAa,WAAU,UAAK,OAAO,aAAZ,YAAwB,GAAG;AAAA,YACnF;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,eAAc,UAAK,OAAO,WAAZ,YAAsB,GAAG;AAAA,YACxE;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,KAAK,KAAK,SAAS,IAAI,WAAU,UAAK,OAAO,aAAZ,YAAwB,GAAG;AAAA,YACtE;AAAA,UACJ;AAAA,UACA;AAAA,YACI,MAAM;AAAA,cACF,MAAM,OAAO,KAAK,OAAO,IAAI;AAAA,YACjC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,KAAK;AACD,eAAO;AAAA,UACH;AAAA,YACI,QAAQ;AAAA,cACJ,UAAU,qBAAqB,QAAQ,WAAW,IAAI,UAAU;AAAA,cAChE,OAAO;AAAA,cACP,MAAM,QAAQ,WAAW,IAAI,KAAK,KAAK,SAAS,YAAY,IAAI,KAAK,KAAK,SAAS,UAAU,IAAI;AAAA,YACrG;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACI,eAAO,CAAC;AAAA,IAChB;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,aAAa,SAAU,MAAyB;AACtE,UAAM,UAAU,IAAI,mBAAmB,IAAI;AAE3C,UAAM,WAAW;AAAA,MACb,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,IAC5C;AACA,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,IAC9C;AACA,UAAM,YAAY;AAAA,MACd,MAAM,GAAG,QAAQ,WAAW,IAAI,wBAAwB;AAAA,MACxD,OAAO,KAAK,KAAK,SAAS,iBAAiB;AAAA,IAC/C;AACA,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,mBAAmB;AAAA,IACjD;AAEA,UAAM,QAAQ,CAAC,SAAS,UAAU,UAAU;AAE5C,YAAQ,QAAQ,QAAQ,GAAG;AAAA,MACvB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,cAAM,QAAQ,SAAS;AAAA,IAC/B;AAEA,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,sBAAsB,SAAU,MAAyB;AAC/E,UAAM,UAAU,IAAI,mBAAmB,IAAI;AAC3C,UAAM,WAAW;AAAA,MACb,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,uBAAuB;AAAA,IACrD;AACA,UAAM,WAAW;AAAA,MACb,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,IAC5C;AACA,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,IAC9C;AACA,UAAM,YAAY;AAAA,MACd,MAAM,GAAG,QAAQ,WAAW,IAAI,wBAAwB;AAAA,MACxD,OAAO,KAAK,KAAK,SAAS,iBAAiB;AAAA,IAC/C;AACA,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,IAC9C;AAEA,UAAM,QAAQ,CAAC,SAAS,UAAU,UAAU,UAAU;AAEtD,YAAQ,QAAQ,QAAQ,GAAG;AAAA,MACvB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,cAAM,QAAQ,SAAS;AAAA,IAC/B;AAEA,WAAO;AAAA,EACX,CAAC;AAOD,aAAW,eAAe,eAAe,SAAU,QAAQ;AACvD,UAAM,WAAW;AAAA,MACb,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,MACxC,MAAM,EAAC,QAAQ,OAAM;AAAA,IACzB;AACA,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,MAC1C,MAAM,EAAC,QAAQ,SAAQ;AAAA,IAC3B;AACA,UAAM,cAAc;AAAA,MAChB,MAAM,GAAG,OAAO,WAAW,kBAAkB;AAAA,MAC7C,OAAO,KAAK,KAAK,SAAS,kBAAkB;AAAA,MAC5C,MAAM,EAAC,QAAQ,SAAQ;AAAA,IAC3B;AACA,UAAM,iBAAiB;AAAA,MACnB,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,MAC1C,MAAM,EAAC,QAAQ,cAAa;AAAA,IAChC;AAEA,QAAI,QAAQ,CAAC,aAAa,UAAU,UAAU;AAC9C,QAAI,OAAO;AAAe,cAAQ,CAAC,gBAAgB,GAAG,KAAK;AAC3D,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,cAAc,SAAS,YAAoB;AACjE,WAAO,EAAC,eAAe,WAAU;AAAA,EACrC,CAAC;AAGD,aAAW,eAAe,kBAAkB,CAAC,WAA2B;AACpE,UAAM,gBAAgB;AAAA,MAClB,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO,OAAO;AAAA,QACd,UAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO,CAAC,aAAa;AAAA,EACzB,CAAC;AAGD,aAAW,eAAe,cAAc,CAAC,WAA2B;AAChE,UAAM,gBAAgB;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,yBAAyB;AAAA,MACnD,MAAM,EAAC,QAAQ,UAAS;AAAA,IAC5B;AACA,UAAM,gBAAgB;AAAA,MAClB,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,8BAA8B;AAAA,MACxD,MAAM,EAAC,QAAQ,aAAY;AAAA,IAC/B;AAEA,WAAO,CAAC,eAAe,aAAa;AAAA,EACxC,CAAC;AAED,aAAW,eAAe,2BAA2B,MAAM;AACvD,WAAO;AAAA,MACH;AAAA,QACI,MAAM;AAAA,UACF,MAAM,KAAK,KAAK,SAAS,mBAAmB;AAAA,QAChD;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,UACF,MAAM,KAAK,KAAK,SAAS,kBAAkB;AAAA,QAC/C;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,UACF,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,QACtC;AAAA,MACJ;AAAA,IAAC;AAAA,EACT,CAAC;AAED,aAAW,eAAe,uBAAuB,MAAM;AACnD,WAAO,CAAC;AAAA,MACJ,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,MAC1C,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,MAClC,UAAU;AAAA,IACd,CAAC;AAAA,EACL,CAAC;AAED,aAAW,eAAe,+BAA+B,MAAM;AAC3D,WAAO;AAAA,MACH;AAAA,QACI,MAAM;AAAA,UACF,MAAM,KAAK,KAAK,SAAS,mBAAmB;AAAA,QAChD;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,UACF,MAAM,KAAK,KAAK,SAAS,kBAAkB;AAAA,QAC/C;AAAA,MACJ;AAAA,IAAC;AAAA,EACT,CAAC;AAED,aAAW,eAAe,iCAAiC,MAAM;AAC7D,WAAO,CAAC;AAAA,MACJ,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,+BAA+B;AAAA,MACzD,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,MAClC,UAAU;AAAA,IACd,CAAC;AAAA,EACL,CAAC;AACL;;;AC5lBO,IAAM,2BAA2B,MAAM;AAC1C,aAAW,eAAe,oBAAoB,SAAU,UAA2B;AAC/E,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,MACxC,MAAM,KAAK,KAAK,SAAS,SAAS;AAAA,MAClC,UAAU;AAAA,IACd;AACA,YAAQ,UAAU;AAAA,MACd,KAAK;AACD,gBAAQ,WAAW;AACnB,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,WAAW;AACnB,eAAO,CAAC,OAAO;AAAA,MACnB,KAAK;AACD,gBAAQ,WAAW;AACnB,eAAO,CAAC,OAAO;AAAA,MACnB;AACI,eAAO,CAAC;AAAA,IAChB;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,wBAAwB,SAAU,IAAI,SAA0B;AACtF,UAAM,QAAQ;AAAA,MACV,MAAM;AAAA,QACF,MAAM,KAAK,KAAK,SAAS,oBAAoB;AAAA,QAC7C,UAAU;AAAA,MACd;AAAA,IACJ;AAEA,UAAM,MAAM;AAAA,MAER,MAAM;AAAA,QACF,MAAM,CAAC,WAAW,QAAQ,sBACtB,KAAK,KAAK,SAAS,SAAS,IAC5B,KAAK,KAAK,SAAS,kBAAkB;AAAA,QACzC,UAAU;AAAA,MACd;AAAA,IACJ;AAEA,YAAQ,IAAI;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,CAAC,OAAO,GAAG;AAAA,MACtB;AACI,eAAO,CAAC;AAAA,IAChB;AAAA,EACJ,CAAC;AACD,aAAW,eAAe,kBAAkB,SAAU,WAAmB,OAAmB;AACxF,UAAM,QAAQ,MAAM,QAAQ,MAAM,KAAK,IAAI,MAAM,QAAQ,CAAC,MAAM,KAAK;AACrE,WAAO;AAAA,MACH;AAAA,QACI,MAAM;AAAA,UACF,MAAM,MAAM,IAAI,UAAQ,sCAAsC,aAAa,EAAE,KAAK,IAAI;AAAA,UACtF,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,UACF,MAAM,QAAQ,UAAU,KAAK;AAAA,UAC7B,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ,CAAC;AAED,aAAW,eAAe,yBAAyB,SAAS,OAA6B;AACrF,UAAM,UAAoB,CAAC;AAG3B,QAAI,KAAK,SAAS,IAAI,aAAa,MAAM,qBAAqB,KAAK,CAAC,WAAW,oBAAoB,KAAK,GAAG;AACvG,cAAQ,KAAK,4BAA4B;AAAA,IAC7C;AAEA,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,cAAc,SAAU,WAAmB,OAAmB;AACpF,UAAM,WAAW;AAAA,MACb,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,eAAe;AAAA,MACzC,UAAU;AAAA,IACd;AACA,UAAM,aAAa;AAAA,MACf,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,iBAAiB;AAAA,MAC3C,UAAU;AAAA,IACd;AACA,YAAQ,WAAW;AAAA,MACf,KAAK;AACD,iBAAS,WAAW;AACpB,mBAAW,WAAW;AACtB,eAAO,CAAC,UAAU,UAAU;AAAA,MAChC,KAAK;AACD,iBAAS,WAAW;AACpB,mBAAW,WAAW;AACtB,eAAO,CAAC,UAAU,UAAU;AAAA,MAChC,KAAK;AACD,iBAAS,WAAW;AACpB,mBAAW,WAAW;AACtB,eAAO,CAAC,UAAU,UAAU;AAAA,MAChC;AACI,eAAO,CAAC,QAAQ;AAAA,IACxB;AAAA,EACJ,CAAC;AAEL;;;ACnHO,IAAM,qBAAqB,MAAM;AAUpC,aAAW,eAAe,uBAAuB,CAAC,QAAQ,UAAkB,aAAqB;AAC7F,WAAO,OAAO,cAAc;AAAA,EAChC,CAAC;AACL;;;ACNO,IAAM,uBAAuB,MAAM;AACtC,aAAW,eAAe,cAAc,SAAU,OAAO,KAAK;AAC1D,QAAI;AAAK,cAAQ,IAAI;AACrB,WAAO,KAAK,KAAK,SAAS,KAAK;AAAA,EACnC,CAAC;AAED,aAAW,eAAe,wBAAwB,SAAUE,WAAU;AAClE,QAAIA,UAAS,KAAK,SAAS;AAAG,aAAO;AACrC,UAAM,gBAAgBA,qBAAoB,WAAW,UAAU;AAC/D,UAAM,oBAAoBA,UAAS,KAAK,GAAG,YAAY,IAAIA,UAAS,KAAK,MAAM,CAAC;AAChF,UAAM,gBAAgB,GAAG,qBAAqB;AAC9C,WAAO,KAAK,KAAK,SAAS,aAAa;AAAA,EAC3C,CAAC;AAED,aAAW,eAAe,iBAAiB,SAAU,OAA2B;AAC5E,WAAO,MAAM,QAAQ,KAAK,KAAK,SAAS,MAAM,KAAK,IAAI,MAAM;AAAA,EAejE,CAAC;AAED,aAAW,eAAe,gBAAgB,SAAU,KAAK;AACrD,QAAI;AAAK,aAAO,QAAQ,MAAM,GAAG;AACjC,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,iBAAiB,YAAa,MAAM;AAC1D,WAAO,KAAK,OAAO,OAAK,OAAO,MAAM,QAAQ,EAAE,KAAK,EAAE;AAAA,EAC1D,CAAC;AAED,aAAW,eAAe,UAAU,SAAU,MAAM,IAAI,KAAK;AACzD,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,aAAO,KAAK,KAAK,CAAC;AAAA,IACtB;AACA,WAAO;AAAA,EACX,CAAC;AAED,aAAW,eAAe,OAAO,SAAU,MAAc,IAAY,SAAS;AAC1E,QAAI,QAAQ;AACZ,aAAS,IAAI,MAAM,IAAI,IAAI,KAAK,GAAG;AAC/B,eAAS,QAAQ,GAAG,CAAC;AAAA,IACzB;AAEA,WAAO;AAAA,EACX,CAAC;AACD,aAAW,eAAe,UAAU,SAAU,IAAY,IAAY;AAClE,WAAO,KAAK;AAAA,EAChB,CAAC;AACD,aAAW,eAAe,UAAU,SAAU,IAAY,IAAY;AAClE,QAAI,OAAO;AAAG,aAAO;AACrB,WAAO,KAAK;AAAA,EAChB,CAAC;AACD,aAAW,eAAe,WAAW,SAAU,KAAK,MAAM,SAAS;AAC/D,QAAI,IAAI,eAAe,IAAI,GAAG;AAC1B,aAAO,QAAQ,GAAG,IAAI;AAAA,IAC1B;AAAO,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACtC,CAAC;AACD,aAAW,eAAe,QAAQ,SAAU,KAAK,KAAK,SAAS;AAC3D,QAAI,IAAI,SAAS,GAAG;AAAG,aAAO,QAAQ,GAAG,IAAI;AAAA;AACxC,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,QAAQ,SAAU,IAAI,IAAI,SAAS;AACzD,QAAI,KAAK;AAAI,aAAO,QAAQ,GAAG,IAAI;AAAA;AAC9B,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,QAAQ,SAAU,IAAI,IAAI,SAAS;AACzD,QAAI,KAAK;AAAI,aAAO,QAAQ,GAAG,IAAI;AAAA;AAC9B,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,SAAS,SAAU,IAAI,IAAI,SAAS;AAC1D,QAAI,MAAM;AAAI,aAAO,QAAQ,GAAG,IAAI;AAAA;AAC/B,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,QAAQ,SAAU,IAAI,IAAI,SAAS;AACzD,QAAI,OAAO;AAAI,aAAO,QAAQ,GAAG,IAAI;AAAA;AAChC,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,OAAO,SAAU,IAAI,IAAI,SAAS;AACxD,QAAI,OAAO;AAAI,aAAO,QAAQ,GAAG,IAAI;AAAA;AAChC,aAAO,QAAQ,QAAQ,IAAI;AAAA,EACpC,CAAC;AAED,aAAW,eAAe,SAAS,SAAU,OAAO;AAChD,QAAI,QAAQ,MAAM,QAAQ,KAAK,MAAM;AAAS,aAAO,MAAM,WAAW;AACtE,QAAI,QAAQ,MAAM,QAAQ,KAAK,MAAM;AAAU,aAAO,OAAO,KAAK,KAAK,EAAE,WAAW;AACpF,QAAI,QAAQ,MAAM,QAAQ,KAAK,MAAM;AAAU,aAAO,MAAM,WAAW;AAAA,EAC3E,CAAC;AACD,aAAW,eAAe,OAAO,SAAU,IAAI;AAC3C,WAAO,CAAC;AAAA,EACZ,CAAC;AACD,aAAW,eAAe,OAAO,SAAU,IAAI,IAAI;AAC/C,WAAO,KAAK;AAAA,EAChB,CAAC;AAED,aAAW,eAAe,aAAa,SAAU,OAAO;AACpD,WAAO,UAAU,UAAa,UAAU;AAAA,EAC5C,CAAC;AAKD,aAAW,eAAe,iBAAiB,SAAU,OAAe,cAAsB;AACtF,WAAO,IAAI,WAAW,WAAW,wBAAS,YAAY;AAAA,EAC1D,CAAC;AAED,aAAW,eAAe,OAAO,SAAU,OAAe;AACtD,YAAQ,IAAI,KAAK;AAAA,EACrB,CAAC;AACD,aAAW,eAAe,aAAa,SAAU,SAAS;AACtD,UAAM,OAAiB,QAAQ,UAAU,QAAQ,IAAI;AACrD,UAAM,OAAO,OAAO,OAAO,IAAI,EAAE,OAAO,CAAC,QAAQ,SAAS,UAAU;AAChE,UAAI,QAAQ;AAAG,kBAAU;AACzB,aAAO,SAAS;AAAA,IACpB,GAAG,EAAE;AACL,WAAO,IAAI,WAAW,WAAW,IAAI;AAAA,EACzC,CAAC;AACD,aAAW,eAAe,kBAAkB,SAAU,OAAO;AACzD,UAAM,MAAM,QAAQ,KAAK;AACzB,WAAO,MAAM,MAAM;AAAA,EACvB,CAAC;AAED,aAAW,eAAe,qBAAqB,SAAU,OAAe,QAAgB,SAA0B;AAC9G,WAAO,IAAI,WAAW,WAAW,QAAQ,6BAA6B,OAAO,MAAM,CAAC;AAAA,EACxF,CAAC;AAKD,aAAW,eAAe,YAAY,SAAS,KAAa,KAAa;AACrE,WAAO,IAAI,QAAS;AAAA,EACxB,CAAC;AACL;;;ACzJO,IAAM,uBAAuB,MAAM;AAQtC,aAAW,eAAe,qBAAqB,CAAC,KAAa,eAAuB,wBAAyC;AACzH,QAAI,OAAO;AAAe,aAAO;AAEjC,YAAQ,MAAM,iBAAiB,wBAAwB;AAAA,EAC3D,CAAC;AAED,aAAW,eAAe,iBAAiB,CAAC,KAAa,eAAuB,wBAAwC;AACpH,UAAM,SAAS,aAAa,OAAO,KAAK,qBAAqB,aAAa;AAC1E,WAAO,aAAa,cAAc,MAAM;AAAA,EAC5C,CAAC;AACL;;;ACXO,IAAM,mBAAN,MAAuB;AAAA,EAC1B,OAAa,gBAAgB;AAAA;AACzB,YAAM,2BAA2B;AAAA,IACrC;AAAA;AAAA,EACA,OAAO,kBAAwB;AAC3B,yBAAqB;AACrB,gCAA4B;AAC5B,4BAAwB;AACxB,6BAAyB;AACzB,uBAAmB;AACnB,yBAAqB;AAAA,EACzB;AACJ;;;ACRO,IAAe,oBAAf,MAAgC;AAAA,EAAhC;AAKH,SAAQ,UAAmB;AAAA;AAAA,EAY3B,IAAW,4BAAoC;AAC3C,WAAO,IAAI,KAAK;AAAA,EACpB;AAAA,EACA,IAAW,4BAAoC;AAC3C,WAAO,IAAI,KAAK;AAAA,EACpB;AAAA,EAOU,MAAM,QAAsB;AAzC1C;AA0CQ,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,aAAG,kBAAH,mBAAkB,MAAM,oCAAoC,UAAU,EAAE,WAAW,KAAK;AAAA,EAC5F;AAAA,EAMa,QAAQC,OAAY;AAAA;AAnDrC;AAoDQ,eAAG,kBAAH,mBAAkB,KAAK,GAAGA,MAAK,KAAK,SAAS,iCAAiC,KAAK,KAAK,gCAAgC,KAAK;AAC7H,eAAG,kBAAH,mBAAkB,KAAKA,MAAK,KAAK,SAAS,sCAAsC,GAAG;AAAA,QAC/E,WAAW;AAAA,MACf;AAIA,YAAM,gBAA+D,oBAAI,IAAI;AAG7E,YAAM,KAAK,mBAAmBA,OAAM,aAAa;AACjD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AACA,YAAM,KAAK,aAAaA,OAAM,aAAa;AAC3C,YAAM,KAAK,oBAAoBA,OAAM,aAAa;AAClD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AAGA,YAAM,KAAK,oBAAoBA,OAAM,aAAa;AAClD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AACA,YAAM,KAAK,cAAcA,OAAM,aAAa;AAC5C,YAAM,KAAK,qBAAqBA,OAAM,aAAa;AACnD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AAGA,YAAM,KAAK,oBAAoBA,OAAM,aAAa;AAClD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AACA,YAAM,KAAK,cAAcA,OAAM,aAAa;AAC5C,YAAM,KAAK,qBAAqBA,OAAM,aAAa;AACnD,UAAI,KAAK,SAAS;AACd,eAAO,QAAQ,OAAO,KAAK,aAAa;AAAA,MAC5C;AAGA,YAAM,KAAK,MAAM,aAAa;AAE9B,YAAMA,MAAK,SAAS,IAAI,kBAAiB,aAAa,kBAAiB,kBAAkB,KAAK,aAAa;AAC3G,eAAG,kBAAH,mBAAkB,KAAK,GAAGA,MAAK,KAAK,SAAS,mCAAmC,KAAK,KAAK,kBAAkB,EAAE,WAAW,KAAK;AAAA,IAClI;AAAA;AAAA,EAMgB,MAAM,iBAAgE;AAAA;AAClF,iBAAW,CAAC,QAAQ,EAAE,YAAY,cAAc,CAAC,KAAK,iBAAiB;AAEnE,YAAI,kBAAkB,MAAM;AACxB,gBAAM,QAAQ;AAEd,gBAAM,MAAM,wBAAwB,QAAQ,aAAa;AAAA,QAC7D;AAEA,YAAI,eAAe,MAAO;AACtB,gBAAM,OAAO,OAAO,YAAY,EAAE,cAAc,MAAM,CAAC;AAAA,QAC3D;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAOgB,cAAcA,OAAY,eAA8D;AAAA;AAEpG,iBAAW,SAASA,MAAK,OAAO,UAAU;AACtC,YAAI;AACA,cAAI,EAAE,MAAM,KAAK,uBAAuB,KAAK,IAAI;AAC7C;AAAA,UACJ;AAGA,kBAAQ,IAAI,0BAA0B,MAAM,MAAM;AAClD,gBAAM,aAAa,MAAM,KAAK,iBAAiB,UAAU,MAAM,IAAI,CAAC;AAEpE,uBAAa,UAAU;AACvB,wBAAc,IAAI,OAAO;AAAA,YACrB;AAAA,YACA,eAAe;AAAA,UACnB,CAAC;AAGD,qBAAW,SAAS,MAAM,KAAK,QAAQ;AAEnC,gBAAI,CAAC,MAAM,SAAS,MAAM,KAAK;AAAW;AAG1C,gBAAI,QAAQ,MAAM,QAAQ,MAAM,MAAM,IAAI;AAAG;AAG7C,kBAAMC,cAAa,MAAM,KAAK,iBAAiB,QAAQ,MAAM,UAAU,MAAM,MAAM,IAAI,CAAC;AAExF,yBAAaA,WAAU;AACvB,0BAAc,IAAI,MAAM,OAAO;AAAA,cAC3B,YAAYA,YAAW,QAAQ;AAAA,cAC/B,eAAeA,YAAW,SAAS;AAAA,YACvC,CAAC;AAAA,UACL;AAGA,cAAI,QAAQ,MAAM,QAAQ,UAAU,GAAG;AACnC;AAAA,UACJ;AAEA,uBAAa,UAAU;AACvB,wBAAc,IAAI,OAAO;AAAA,YACrB;AAAA,YACA,eAAe;AAAA,UACnB,CAAC;AAAA,QACL,SAAS,OAAP;AACE,kBAAQ,MAAM,KAAK;AACnB,iBAAO,QAAQ,OAAO,KAAK;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAMgB,aAAaD,OAAY,eAA8D;AAAA;AAEnG,iBAAW,QAAQA,MAAK,MAAM,UAAU;AACpC,YAAI;AACA,cAAI,EAAE,MAAM,KAAK,sBAAsB,KAAK,IAAI,IAAI;AAChD;AAAA,UACJ;AAEA,kBAAQ,IAAI,mBAAmB,KAAK,MAAM;AAC1C,gBAAM,aAAa,MAAM,KAAK,gBAAgB,KAAK,IAAI;AAGvD,cAAI,QAAQ,MAAM,QAAQ,UAAU,GAAG;AACnC;AAAA,UACJ;AAEA,uBAAa,UAAU;AAEvB,wBAAc,IAAI,MAAM;AAAA,YACpB;AAAA,YACA,eAAe;AAAA,UACnB,CAAC;AAAA,QACL,SAAS,OAAP;AACE,kBAAQ,MAAM,KAAK;AACnB,iBAAO,QAAQ,OAAO,KAAK;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAMgB,cAAcA,OAAY,eAA8D;AAAA;AAEpG,iBAAW,SAASA,MAAK,OAAO,UAAU;AACtC,YAAI;AACA,cAAI,EAAE,MAAM,KAAK,uBAAuB,MAAM,IAAI,IAAI;AAClD;AAAA,UACJ;AAEA,kBAAQ,IAAI,mBAAmB,MAAM,MAAM;AAC3C,kBAAQ,IAAI,KAAK;AAEjB,gBAAM,aAAa,MAAM,KAAK,iBAAiB,UAAU,MAAM,IAAI,CAAC;AACpE,kBAAQ,IAAI,UAAU;AACtB,cAAI,QAAQ,CAAC;AACb,cAAI,WAAW,OAAO;AAClB,oBAAQ,WAAW;AACnB,mBAAO,WAAW;AAAA,UACtB;AAEA,uBAAa,UAAU;AAEvB,wBAAc,IAAI,OAAO;AAAA,YACrB;AAAA,YACA,eAAe;AAAA,UACnB,CAAC;AAAA,QACL,SAAS,OAAP;AACE,kBAAQ,MAAM,KAAK;AACnB,iBAAO,QAAQ,OAAO,KAAK;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAOgB,kBAAkB,WAA+B,YAAY;AAAA;AACzE,UAAI,iBAAiB;AAErB,UAAI,UAAU,UAAU,QAAW;AAC/B,cAAM,QAAQ,MAAM,QAAQ;AAAA,UAExB,UAAU,MAAM,IAAI,CAAO,aAAa;AACpC,gBAAI,oBAAoB;AAAS,sBAAQ,MAAM,gGAAgG;AAC/I,gBAAI,EAAC,MAAM,KAAK,sBAAsB,QAAQ;AAAG,qBAAO;AACxD,gBAAI,aAAa,MAAM,KAAK,gBAAgB,QAAQ;AAEpD,6BAAiB;AACjB,uBAAW,SAAS,SAAS;AAE7B,mBAAO,YAAY,UAAU,WAAW,MAAM;AAAA,cAC1C,cAAc;AAAA,cACd,SAAS;AAAA,YACb,CAAC;AAAA,UACL,EAAC;AAAA,QACL;AACA,YAAI,gBAAgB;AAChB,qBAAW,QAAQ;AAAA,QACvB;AAAA,MACJ;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAOgB,uBAAuB,OAAgC;AAAA;AACnE,aAAO;AAAA,IACX;AAAA;AAAA,EAMgB,iBAAiB,OAA0B;AAAA;AACvD,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA,EAMgB,oBAAoBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAM9G,qBAAqBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAO/G,sBAAsB,MAA2C;AAAA;AAC7E,aAAO;AAAA,IACX;AAAA;AAAA,EAMgB,gBAAgB,MAAuC;AAAA;AACnE,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA,EAMgB,mBAAmBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAM7G,oBAAoBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAO9G,uBAAuB,OAAoC;AAAA;AACvE,aAAO;AAAA,IACX;AAAA;AAAA,EAMgB,iBAAiB,OAAgC;AAAA;AAC7D,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA,EAMgB,oBAAoBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAM9G,qBAAqBA,OAAY,eAA6E;AAAA;AAAA,IAAC;AAAA;AAAA,EAMlH,sBAAsB,MAA2D;AAAA;AAC1F,UAAI,CAAC,CAAC,SAAS,QAAQ,OAAO,EAAE,SAAS,KAAK,SAAS,IAAI;AAAG;AAG9D,YAAM,KAAK,QAAQ,CAAC,CAAC;AACrB,YAAM,YAAY,MAAM,KAAK,aAAa;AAG1C,eAASE,aAAY,WAAW;AAC5B,YAAI;AACA,cAAI,aAAkB;AACtB,cAAI,KAAK,SAAS,SAAS,QAAQ;AAE/B,yBAAa,MAAM,KAAK,gBAAgB,QAAQ,MAAM,UAAUA,UAAS,IAAI,CAAC;AAG9E,gBAAI,QAAQ,MAAM,QAAQ,UAAU,GAAG;AACnC;AAAA,YACJ;AAEA,gBAAI,WAAW,MAAM;AACjB,2BAAa,WAAW,IAAI;AAC5B,cAAAA,UAAS,OAAO,WAAW,IAAI;AAAA,YACnC;AAAA,UAIJ,WAAW,KAAK,SAAS,SAAS,SAAS;AAEvC,yBAAa,MAAM,KAAK,iBAAiB,QAAQ,MAAM,UAAUA,UAAS,IAAI,CAAC;AAG/E,gBAAI,QAAQ,MAAM,QAAQ,UAAU,GAAG;AACnC;AAAA,YACJ;AAEA,gBAAI,WAAW,OAAO;AAClB,oBAAMA,UAAS,wBAAwB,QAAQ,WAAW,KAAK;AAAA,YACnE;AAEA,gBAAI,WAAW,SAAS;AACpB,oBAAMA,UAAS,wBAAwB,UAAU,WAAW,OAAO;AAAA,YACvE;AAEA,gBAAI,WAAW,MAAM;AACjB,2BAAa,WAAW,IAAI;AAC5B,oBAAMA,UAAS,OAAO,WAAW,IAAI;AAAA,YACzC;AAAA,UAEJ,WAAW,KAAK,SAAS,SAAS,SAAS;AACvC,yBAAa,MAAM,KAAK,iBAAiB,QAAQ,MAAM,UAAUA,UAAS,IAAI,CAAC;AAG/E,gBAAI,QAAQ,MAAM,QAAQ,UAAU,GAAG;AACnC;AAAA,YACJ;AAEA,gBAAI,WAAW,MAAM;AACjB,2BAAa,WAAW,IAAI;AAC5B,oBAAMA,UAAS,OAAO,WAAW,IAAI;AAAA,YACzC;AAAA,UACJ;AAAA,QACJ,SAAS,KAAP;AACE,kBAAQ,MAAM,GAAG;AAAA,QACrB;AAAA,MACJ;AACA,cAAQ,IAAI,gBAAgB,KAAK,SAAS,iCAAiC,KAAK,YAAY;AAAA,IAChG;AAAA;AACJ;AA3aO,IAAe,mBAAf;AAAe,iBACF,cAAc;AADZ,iBAEF,mBAAmB;AAFjB,iBAGF,aAAa;;;ACH1B,IAAM,eAAN,cAA2B,iBAAiB;AAAA,EAC/C,IAAI,gBAAwB;AACxB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,gBAAwB;AACxB,WAAO,aAAa;AAAA,EACxB;AAAA,EAEA,WAAW,gBAAwB;AAC/B,WAAO;AAAA,EACX;AAAA,EAEgB,sBAAsB,MAAyB;AAAA;AAC3D,aAAO,KAAK,uBAAuB,IAAI;AAAA,IAC3C;AAAA;AAAA,EAEU,uBAAuB,MAAkC;AAC/D,WAAO,CAAC,UAAU,OAAO,EAAE,SAAS,KAAK,IAAI;AAAA,EACjD;AAAA,EAEgB,uBAAuB,OAAc;AAAA;AACjD,aAAO,MAAM,OAAO,OAAO;AAAA,IAC/B;AAAA;AAAA,EAEgB,uBAAuB,MAA0B;AAAA;AAE7D,aAAO,KAAK,MAAM,SAAS,OAAO,OAAK,KAAK,uBAAuB,EAAE,IAAI,CAAC,EAAE,SAAS;AAAA,IACzF;AAAA;AAAA,EAEgB,gBAAgB,MAAyB;AAAA;AACrD,YAAM,aAEF,CAAC;AAEL,cAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,aAAO;AAAA,IACX;AAAA;AAAA,EAEgB,iBAAiB,MAA0B;AAAA;AApD/D;AAqDQ,UAAI,aAGA;AAAA,QACA,OAAO,CAAC;AAAA,MACZ;AAEA,mBAAa,MAAM,KAAK,kBAAkB,MAAM,UAAU;AAG1D,UAAI,WAAW,QAAQ,QAAQ,MAAM,QAAQ,WAAW,IAAI;AAAG,eAAO,WAAW;AAEjF,YAAI,gBAAW,UAAX,mBAAkB,YAAW;AAAG,eAAO,WAAW;AAEtD,aAAO;AAAA,IACX;AAAA;AACJ;;;AC9DO,IAAM,YAAN,MAAe;AAAA,EAUlB,WAAkB,eAAwB;AAjB9C;AAkBQ,aAAO,UAAK,WAAL,mBAAa,SAAS,YAAW,OACjC,UAAK,UAAL,mBAAY,SAAS,YAAW,OAChC,UAAK,WAAL,mBAAa,SAAS,YAAW,KACjC,UAAS;AAAA,EACpB;AAAA,EAEA,WAAkB,kBAA2B;AAEzC,WAAO,KAAK,MAAM,SAAS,OAAO,UAAQ,KAAK,SAAS,gBAAgB,YAAY,KAAK,SAAS,gBAAgB,aAAa,EAAE,WAAW;AAAA,EAChJ;AAAA,EAEA,OAAoB,wBAAwB;AAAA;AACxC,cAAQ,IAAI,kEAAkE;AAE9E,YAAM,KAAK,SAAS,IAAI,iBAAiB,aAAa,iBAAiB,kBAAkB,KAAK,OAAO,OAAO;AAAA,IAChH;AAAA;AAAA,EAEA,OAAoB,iBAAiB;AAAA;AACjC,UAAI,iBAAiB,KAAK,SAAS,IAAI,iBAAiB,aAAa,iBAAiB,gBAAgB;AACtG,UAAI,mBAAmB,UAAa,mBAAmB,MAAM;AACzD,yBAAiB,iBAAiB;AAAA,MACtC;AAEA,YAAM,aAAa,UAAS,WAAW,OAAO,CAAC,EAAE,cAAc,MAAM;AAEjE,eAAO,KAAK,eAAe,eAAe,cAAc,MAAM;AAAA,MAClE,CAAC;AAGD,UAAI,WAAW,WAAW,GAAG;AACzB;AAAA,MACJ;AAEA,YAAM,wBAAwB,KAAK,KAAK,SAAS,4BAA4B;AAC7E,YAAM,yBAAyB,KAAK,KAAK,SAAS,6BAA6B;AAC/E,YAAM,2BAA2B,KAAK,KAAK,SAAS,+BAA+B;AACnF,YAAM,8BAA8B,KAAK,KAAK,SAAS,kCAAkC;AACzF,YAAM,yBAAyB,KAAK,KAAK,SAAS,6BAA6B;AAC/E,YAAM,wBAAwB,KAAK,KAAK,SAAS,8BAA8B;AAE/E,YAAM,IAAI,IAAI,OAAO;AAAA,QACjB,OAAO;AAAA,QACP,SACI,8CAA8C,+DACV,sCAC9B,yDACoB;AAAA,QAC9B,SAAS;AAAA,UACL,IAAI;AAAA,YACA,OAAO;AAAA,YACP,UAAU,MAAM,KAAK,QAAQ,UAAU;AAAA,UAC3C;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACb,CAAC;AACD,QAAE,OAAO,IAAI;AAAA,IACjB;AAAA;AAAA,EAEA,OAAqB,QAAQ,YAAiC;AAAA;AAE1D,iBAAW,KAAK,CAAC,GAAG,MAAM;AACtB,eAAO,KAAK,eAAe,EAAE,eAAe,EAAE,aAAa;AAAA,MAC/D,CAAC;AAED,YAAM,KAAK,aAAa,MAAM,UAAU;AACxC,YAAM,KAAK,kBAAkB,MAAM,UAAU;AAE7C,YAAM,wBAAwB,KAAK,KAAK,SAAS,4BAA4B;AAC7E,YAAM,yBAAyB,KAAK,KAAK,SAAS,6BAA6B;AAC/E,YAAM,8BAA8B,KAAK,KAAK,SAAS,kCAAkC;AACzF,YAAM,4BAA4B,KAAK,KAAK,SAAS,gCAAgC;AACrF,YAAM,0BAA0B,KAAK,KAAK,SAAS,8BAA8B;AACjF,YAAM,cAAc,IAAI,OAAO;AAAA,QAC3B,OAAO;AAAA,QACP,SACI,gDAAgD,iCAC1C,mEAC8B;AAAA,QACxC,SAAS;AAAA,UACL,IAAI;AAAA,YACA,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,QACA,SAAS;AAAA,MACb,CAAC;AACD,kBAAY,OAAO,IAAI;AAAA,IAC3B;AAAA;AAAA,EAOA,OAAqB,aAAaC,OAAY,YAAiC;AAAA;AAE3E,iBAAW,EAAE,UAAU,KAAK,YAAY;AACpC,cAAM,UAAU,QAAQA,KAAI;AAAA,MAChC;AAAA,IACJ;AAAA;AAAA,EAOA,OAAqB,kBAAkBA,OAAY,YAAiC;AAAA;AA5HxF;AA8HQ,YAAM,SAAQ,KAAAA,MAAK,UAAL,mBAAY,OAAO,CAAC,SAAS,KAAK,SAAS,YAAY,WAAW,CAAC,SAAS,QAAQ,OAAO,EAAE,SAAS,KAAK,SAAS,IAAI;AAEtI,UAAI,CAAC;AAAO;AAGZ,iBAAW,QAAQ,OAAO;AACtB,mBAAW,EAAE,UAAU,KAAK,YAAY;AACpC,gBAAM,UAAU,sBAAsB,IAAI;AAAA,QAC9C;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EASA,OAAc,eAAe,IAAY,IAAY;AACjD,UAAM,KAAK,GAAG,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC;AACnD,UAAM,KAAK,GAAG,MAAM,GAAG,EAAE,IAAI,CAAC,MAAM,SAAS,GAAG,EAAE,CAAC;AACnD,UAAM,IAAI,KAAK,IAAI,GAAG,QAAQ,GAAG,MAAM;AACvC,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACxB,UAAI,GAAG,KAAK,GAAG;AAAI,eAAO;AAC1B,UAAI,GAAG,KAAK,GAAG;AAAI,eAAO;AAAA,IAC9B;AACA,WAAO,GAAG,WAAW,GAAG,SAAS,IAAI,GAAG,SAAS,GAAG,SAAS,KAAK;AAAA,EACtE;AACJ;AApJO,IAAM,WAAN;AAAM,SAEe,aAAkC;AAAA,EACtD,EAAE,eAAe,aAAa,eAAe,WAAW,IAAI,aAAa,EAAE;AAC/E;;;ACNG,IAAM,yBAAyB,MAAM;AAKxC,OAAK,SAAS,SAAS,aAAa,oBAAoB;AAAA,IACpD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IAET,SAAS;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,MACT,QAAQ;AAAA,IACZ;AAAA,IACA,UAAU,CAAC,SAAS;AAChB,UAAI,OAAO,OAAM;AAEb,eAAO,KAAK,eAAe;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ,CAAC;AAKD,OAAK,SAAS,SAAS,aAAa,eAAe;AAAA,IAC/C,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAcD,OAAK,SAAS,SAAS,aAAa,iBAAiB,kBAAkB;AAAA,IACnE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAED,OAAK,SAAS,SAAS,aAAa,MAAM,qBAAqB;AAAA,IAC3D,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAED,OAAK,SAAS,SAAS,aAAa,MAAM,4BAA4B;AAAA,IAClE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAWD,OAAK,SAAS,SAAS,aAAa,MAAM,kCAAkC;AAAA,IACvE,MAAM;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAED,OAAK,SAAS,SAAS,aAAa,MAAM,uBAAuB;AAAA,IAC7D,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAED,OAAK,SAAS,SAAS,aAAa,MAAM,yBAAyB;AAAA,IAC9D,MAAM;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAED,OAAK,SAAS,SAAS,aAAa,MAAM,iBAAiB;AAAA,IACvD,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAQD,OAAK,SAAS,SAAS,aAAa,MAAM,uBAAuB;AAAA,IAC7D,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AAUD,OAAK,SAAS,SAAS,aAAa,MAAM,0BAA0B;AAAA,IAChE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb,CAAC;AACL;;;AC5IA,SAAsB,qBAAqB,OAAO,OAAyB;AAAA;AAEvE,QAAK,MAAM;AACP,aAAO,GAAG,cAAc,KAAK,mHAAmH;AAEpJ,UAAM,eAAe;AAErB,UAAM,OAAO,MAAM;AACnB,UAAM,OAAO,MAAM,cAAc,QAAQ,YAAY;AACrD,UAAM,SAAS,KAAK,QAAQ,SAAS,MAAM,QAAQ,IAAI,KAAK,QAAQ,MAAM,IAAI;AAE9E,YAAQ,KAAK,QAAQ,QAAQ;AAAA,MACzB,KAAK;AACD,eAAO,MAAM,wBAAwB,gBAAgB,CAAC;AAAA,UAClD,OAAO,KAAK,KAAK,SAAS,sBAAsB;AAAA,UAEhD,QAAQ,MAAM;AAAA,UACd,mBAAmB,KAAK,QAAQ,eAAe,cAAc,IAAI;AAAA,UACjE,UAAU,KAAK,QAAQ,eAAe;AAAA,QAC1C,CAAC,CAAC;AAAA,MAEN,KAAK;AACD,eAAO,OAAO,MAAM,OAAO,IAAI;AAAA,MAEnC,KAAK;AACD,cAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,YAAI,CAAC;AAAe;AAEpB,eAAO,OAAO,OAAO;AAAA,MAEzB,KAAK;AACD,eAAO,OAAO,eAAe;AAAA,MACjC,KAAK;AACD,eAAO,OAAO,kBAAkB;AAAA,MAEpC;AACI,gBAAQ,MAAM,iCAAiC,gFAAgF;AAC/H;AAAA,IACR;AAAA,EACJ;AAAA;AAOO,SAAS,8BAA8B,SAA2B;AAGrE,QAAM,aAAa;AAAA,IACf,WAAW;AAAA,MACP,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,kCAAkC;AAAA,MAC5D,SAAS,CAAC;AAAA,IACd;AAAA,IACA,SAAS;AAAA,MACL,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,gCAAgC;AAAA,MAC1D,SAAS,CAAC;AAAA,IACd;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,OAAO,KAAK,KAAK,SAAS,iCAAiC;AAAA,MAC3D,SAAS,CAAC;AAAA,IACd;AAAA,EACJ;AAGA,WAAS,UAAU,SAAS;AACxB,WAAO,eAAe;AACtB,QAAI,OAAO;AAAU,iBAAW,SAAS,QAAQ,KAAK,MAAM;AAAA,aACnD,OAAO;AAAa,iBAAW,UAAU,QAAQ,KAAK,MAAM;AAAA;AAChE,iBAAW,QAAQ,QAAQ,KAAK,MAAM;AAAA,EAC/C;AACA,SAAO;AACX;;;ACxFA,oBAAmB;AA2BZ,SAAS,aAAa,OAAkD,UAAyB,CAAC,GAAG;AA/B5G;AAgCI,QAAM,SAAS,IAAI,cAAAC,QAAO,OAAO;AAAA,IAC7B,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,aAAa;AAAA,IACb,UAAU;AAAA,MACN,UAAU,QAAQ;AAAA,MAClB,aAAa;AAAA,MACb,SAAS;AAAA,MACT,YAAY,CAAC,MAAM,OAAO;AAAA,IAC9B;AAAA,EACJ,CAAC;AAGD,SAAO,aAAY,aAAQ,cAAR,YAAqB,CAAC;AACzC,SAAO,SAAQ,aAAQ,SAAR,YAAgB,CAAC,CAAC;AAEjC,SAAO;AACX;;;ACvCO,IAAM,eAAN,cAA2B,UAAU;AAAA,EAArC;AAAA;AACH,SAAQ,aAAoB,CAAC;AAAA;AAAA,EAO7B,WAAW,iBAAiB;AAExB,WAAO,YAAY,MAAM,gBAAgB;AAAA,MACrC,SAAS,CAAC,OAAO,SAAS,MAAM;AAAA,MAChC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,MAAM,CAAC,EAAE,aAAa,SAAS,iBAAiB,aAAa,CAAC;AAAA,IAClE,CAAC;AAAA,EACL;AAAA,EAEA,IAAI,WAAW;AACX,UAAM,OAAO;AACb,WAAO,GAAG,OAAO,KAAK,KAAK;AAAA,EAC/B;AAAA,EAQM,QAAQ,SAAS;AAAA;AACnB,UAAI,OAAO,yCAAM,gBAAN,MAAc,OAAO;AAIhC,WAAK,OAAO,KAAK,KAAK;AAGtB,WAAK,SAAS,KAAK,KAAK;AAExB,WAAK,OAAO,KAAK,KAAK;AACtB,YAAM,WAAW,KAAK,SAAS;AAE/B,UAAI,SAAS,QAAQ;AACjB,YAAI;AACA,gBAAM,SAAS,SAAS;AACxB,cAAI,SAAS,OAAO,QAAQ;AAAG,mBAAO,OAAO;AAC7C,cAAI,OAAO,UAAU;AAAG,mBAAO,OAAO;AACtC,cAAI,OAAO,QAAQ;AACf,gBAAI,OAAO,OAAO,QAAQ;AAAG,qBAAO,OAAO,OAAO;AAClD,gBAAI,OAAO,OAAO,GAAG,QAAQ;AAAG,qBAAO,OAAO,OAAO,GAAG;AAAA,UAC5D;AACA,cAAI,OAAO,OAAO;AACd,gBAAI,OAAO,MAAM,QAAQ;AAAG,qBAAO,OAAO,MAAM;AAAA,UACpD;AAAA,QACJ,SAAS,GAAP;AACE,kBAAQ,MAAM,CAAC;AAAA,QACnB;AAAA,MACJ;AAEA,UAAI,SAAS,YAAY;AACrB,YAAI;AACA,gBAAM,aAAa,SAAS;AAC5B,cAAI,WAAW,WAAW;AAAG,mBAAO,WAAW;AAC/C,cAAI,WAAW,aAAa;AAAG,mBAAO,WAAW;AACjD,cAAI,WAAW,SAAS;AAAG,mBAAO,WAAW;AAAA,QACjD,SAAS,GAAP;AACE,kBAAQ,IAAI,CAAC;AAAA,QACjB;AAAA,MACJ;AAEA,WAAK,YAAY;AACjB,YAAM,QAAQ,KAAK,KAAK;AACxB,YAAM,CAAC,YAAY,YAAY,SAAS,IAAI,MAAM;AAAA,QAC9C,CAAC,OAA6C,SAAkB;AAC5D,gBAAMC,YAAW,KAAK,SAAS;AAE/B,UAAAA,UAAS,kBAAkB,KAAK,wBAAwBA,UAAS,OAAO,YAAY,KAAK;AAGzF,cAAI,KAAK,SAAS;AAAQ,kBAAM,GAAG,KAAKA,SAAQ;AAEhD,cAAI,KAAK,SAAS,kBAAkB,UAAU,KAAK,UAAU,KAAK,OAAO,SAAS;AAAU,kBAAM,GAAG,KAAKA,SAAQ;AAElH,cAAI,KAAK,SAAS,kBAAkB,UAAU,KAAK,UAAU,KAAK,OAAO,SAAS;AAAS,kBAAM,GAAG,KAAKA,SAAQ;AAEjH,iBAAO;AAAA,QACX;AAAA,QACA,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAAA,MACf;AACA,WAAK,gBAAgB;AACrB,WAAK,gBAAgB;AACrB,WAAK,eAAe;AACpB,WAAK,kBAAkB,KAAK,gCAAgC;AAC5D,WAAK,gBAAgB,KAAK,8BAA8B;AACxD,WAAK,YAAY,KAAK,0BAA0B;AAGhD,WAAK,aAAa,8BAA8B,KAAK,SAAS,OAAO;AAErE,UAAI,KAAK,KAAK,QAAQ;AAClB,aAAK,qBAAqB,KAAK,KAAK,sBAAsB;AAAA,MAC9D;AAEA,UAAI,KAAK,KAAK,wBAAwB;AAClC,aAAK,oBAAoB,KAAK,KAAK;AAAA,MACvC;AAEA,UAAI,KAAK,KAAK,oBAAoB;AAC9B,aAAK,uBAAuB,KAAK,KAAK;AAAA,MAC1C;AAIA,WAAK,QAAQ,KAAK,YAAY;AAE9B,WAAK,eAAe,KAAK,YAAY;AAErC,WAAK,cAAc,KAAK,YAAY;AAEpC,WAAK,cAAc,KAAK,YAAY;AAGpC,WAAK,kBAAkB,KAAK,wBAAwB,KAAK,KAAK,OAAO,YAAY,KAAK;AAEtF,aAAO;AAAA,IACX;AAAA;AAAA,EASA,wBAAwB,aAAqB,UAAY,EAAC,OAAO,MAAK,GAAW;AAC7E,WAAO,WAAW,WAAW,aAAa,OAAO;AAAA,EACrD;AAAA,EAKA,4BAAoD;AAChD,WAAO,QAAQ,8BAA8B,IAAI,MAAM;AAAA,EAC3D;AAAA,EAKA,gCAAwD;AACpD,WAAO,QAAQ,8BAA8B,IAAI,UAAU;AAAA,EAC/D;AAAA,EAKA,kCAAkC;AAE9B,UAAM,QAAQ,KAAK,KAAK;AAExB,QAAI,CAAC,SAAS,MAAM,KAAK;AAAG,aAAO,QAAQ,8BAA8B,IAAI,YAAY;AAEzF,UAAM,eAAe,QAAQ,WAAW,MAAM,gBAAgB,CAAC;AAE/D,UAAM,wBAAwB,CAAC;AAC/B,eAAW,CAAC,IAAI,KAAK,KAAK,OAAO,QAAQ,YAAY,GAAG;AAGpD,YAAM,MAAM,MAAM,QAAQ;AAC1B,YAAM,QAAQ,MAAM,SAAS,MAAM;AACnC,4BAAsB,OAAO;AAAA,IACjC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,qBAAgC;AAE5B,WAAO,CAAC;AAAA,EACZ;AAAA,EAQA,kBAAkB,MAAM;AACpB,UAAM,kBAAkB,IAAI;AAE5B,YAAQ,oBAAoB,MAAM,IAAI;AAMtC,SAAK,KAAK,aAAa,CAAC,UAAU,KAAK,YAAY,KAAK;AAExD,SAAK,KAAK,SAAS,CAAC,UAAU,KAAK,QAAQ,KAAK;AAGhD,SAAK,KAAK,iBAAiB,EAAE,MAAM,WAAS,qBAAqB,OAAO,KAAK,QAAQ,CAAC;AAKtF,SAAK,KAAK,YAAY,EAAE,MAAM,KAAK,YAAY,KAAK,IAAI,CAAC;AACzD,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,SAAK,KAAK,WAAW,EAAE,MAAM,CAAC,UAAU;AACpC,YAAM,eAAe;AACrB,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY;AACxD,YAAM,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC3B,YAAM,QAAQ,KAAK,KAAK;AACxB,YAAM,OAAO;AACb,UAAI,KAAK;AACL,YAAI,MAAM,GAAG,UAAU;AAAG,eAAK,WAAW,KAAK,GAAG;AAAA;AAC7C,eAAK,aAAa,KAAK,WAAW,OAAO,CAAC,QAAQ,QAAQ,GAAG;AAAA,MACtE;AAAA,IACJ,CAAC;AACD,SAAK,KAAK,SAAS,EAAE,KAAK;AAC1B,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAKvE,SAAK,KAAK,eAAe,EAAE,MAAM,KAAK,cAAc,KAAK,IAAI,CAAC;AAC9D,SAAK,KAAK,aAAa,EAAE,MAAM,KAAK,aAAa,KAAK,IAAI,CAAC;AAC3D,SAAK,KAAK,cAAc,EAAE,MAAM,KAAK,cAAc,KAAK,IAAI,CAAC;AAC7D,SAAK,KAAK,cAAc,EAAE,MAAM,KAAK,cAAc,KAAK,IAAI,CAAC;AAE7D,SAAK,KAAK,cAAc,EAAE,MAAM,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAC/D,SAAK,KAAK,YAAY,EAAE,MAAM,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAC/D,SAAK,KAAK,aAAa,EAAE,MAAM,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAIjE,SAAK,KAAK,kBAAkB,EAAE,MAAM,KAAK,cAAc,KAAK,IAAI,CAAC;AACjE,SAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAEzE,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,2BAA2B,KAAK,IAAI,CAAC;AAClF,SAAK,KAAK,wBAAwB,EAAE,GAAG,SAAS,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAGtF,SAAK,KAAK,YAAY,EAAE,GAAG,UAAU,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAC3E,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,CAAO,UAAO;AAAG,kBAAK,yBAAyB,OAAO,CAAC;AAAA,MAAC;AAChG,SAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,CAAO,UAAO;AACxD,kBAAK,yBAAyB,OAAO,EAAE;AAAA,MAAC;AACzC,SAAK,KAAK,eAAe,EAAE,GAAG,SAAS,KAAK,eAAe,KAAK,IAAI,CAAC;AACrE,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1E,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACvE,SAAK,KAAK,oBAAoB,EAAE,GAAG,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAG/E,QAAI,KAAK,SAAS,SAAS,GAAG;AAC1B,WAAK,4BAA4B,IAAI;AAAA,IAEzC;AAAA,EACJ;AAAA,EAEM,QAAQ,OAAO;AAAA;AA9QzB;AA+QQ,UAAI,CAAC,KAAK,SAAS,CAAC,KAAK,UAAU,CAAC,KAAK;AAAQ;AAEjD,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAGtB,UAAI;AACJ,UAAI;AACA,eAAO,KAAK,MAAM,MAAM,aAAa,QAAQ,YAAY,CAAC;AAAA,MAC9D,SAAS,KAAP;AACE,eAAO,QAAQ,IAAI,2BAA2B;AAAA,MAClD;AAEA,UAAI,CAAC;AAAM;AAGX,UAAI,KAAK,KAAK,YAAY,KAAK,SAAS,QAAQ;AAC5C,YAAI;AAEJ,YAAI,KAAK,MAAM;AACX,cAAI,KAAK,KAAK,WAAW,KAAK,cAAY,UAAK,KAAK,UAAV,mBAAiB,OAAM,KAAK,KAAK,QAAQ,KAAK,KAAK,IAAI;AAC7F,mBAAO,QAAQ,KAAK,8CAA8C;AAAA,UACtE;AACA,iBAAO;AAAA,QAEX,WAAW,KAAK,MAAM;AAClB,iBAAO,MAAM,QAAQ,wBAAwB,KAAK,MAAM,KAAK,EAAE;AAAA,QAEnE,OAAO;AACH,iBAAO,MAAM,SAAS,KAAK,IAAI;AAAA,QACnC;AAGA,YAAI,CAAC;AAAM,iBAAO,QAAQ,MAAM,0DAA0D,IAAI;AAE9F,eAAO,MAAM,KAAK,KAAK,iBAAiB,KAAK,OAAO;AAAA,MACxD;AAGA,UAAI,KAAK,KAAK,UAAU,KAAK,SAAS,SAAS;AAC3C,cAAM,QAAQ,MAAM,SAAS,KAAK,IAAI;AACtC,YAAI,CAAC,SAAS,CAAC,MAAM;AAAI,iBAAO,QAAQ,MAAM,6DAA6D,IAAI;AAC/G,eAAO,MAAM,KAAK,KAAK,MAAM,MAAM,IAAK,KAAK,IAAI;AAAA,MACrD;AAGA,UAAI,KAAK,KAAK,0BAA0B,KAAK,SAAS,QAAQ;AAC1D,cAAM,OAAO,MAAM,SAAS,KAAK,IAAI;AAErC,YAAI,CAAC,QAAQ,CAAC,KAAK;AAAI,iBAAO,QAAQ,MAAM,4DAA4D,IAAI;AAE5G,eAAO,MAAM,KAAK,KAAK,iBAAiB,IAAI;AAAA,MAChD;AAAA,IACJ;AAAA;AAAA,EAEA,SAAS,OAAO;AACZ,UAAM,eAAe;AACrB,WAAO,MAAM,cAAc,QAAQ,YAAY,EAAE,QAAQ;AAAA,EAC7D;AAAA,EAEA,cAAc,OAAO;AACjB,UAAM,eAAe;AACrB,SAAK,KAAK,WAAW;AAAA,EACzB;AAAA,EAEM,YAAY,OAAO;AAAA;AAhV7B;AAiVQ,YAAM,OAAO,KAAK,KAAK,aAAa,KAAK,SAAS,KAAK,CAAC;AACxD,UAAI,MAAM;AACN,mBAAK,UAAL,mBAAY,OAAO;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA,EAEM,gBAAgB,OAAO;AAAA;AACzB,YAAM,eAAe;AAGrB,YAAM,eAAe,EAAE,MAAM,aAAa,EAAE,QAAQ,gBAAgB;AACpE,YAAM,OAAO,aAAa,KAAK,MAAM;AACrC,YAAM,WAAW,aAAa,KAAK,UAAU;AAE7C,UAAI,CAAC;AAAM;AAEX,cAAQ,MAAM;AAAA,QAEV,KAAK;AACD,gBAAM,KAAK,KAAK,SAAS,QAAQ;AACjC;AAAA,MACR;AAAA,IACJ;AAAA;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,eAAe;AACrB,YAAM,KAAK,KAAK,cAAc;AAAA,IAClC;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,eAAe;AACrB,YAAM,QAAQ,MAAM,cAAc,QAAQ;AAC1C,UAAI,SAAS;AAAG,cAAM,KAAK,KAAK,cAAc,KAAK;AAAA,IACvD;AAAA;AAAA,EAEM,mBAAmB,OAAO;AAAA;AAC5B,YAAM,KAAK,mBAAmB,KAAK;AAAA,IACvC;AAAA;AAAA,EAEM,kBAAkB,OAAO;AAAA;AAC3B,YAAM,KAAK,KAAK,eAAe,KAAK,SAAS,KAAK,CAAC;AAAA,IACvD;AAAA;AAAA,EAEM,gBAAgB,OAAO;AAAA;AACzB,YAAM,eAAe;AACrB,YAAM,OAAO;AAEb,YAAM,WAAW;AAAA,QACb,MAAM,OAAO,QAAQ,MAAM,IAAI;AAAA,QAC/B;AAAA,QACA,QAAQ,EAAC,MAAM,SAAQ;AAAA,MAC3B;AAIA,YAAM,OAAO,IAAI,QAAQ,UAAU,EAAC,QAAQ,KAAK,KAAI,CAAC;AAEtD,YAAM,KAAK,KAAK,iBAAiB,KAAK,OAAO;AAAA,IACjD;AAAA;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,eAAe;AACrB,YAAM,KAAK,KAAK,WAAW;AAAA,IAC/B;AAAA;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,KAAK,mBAAmB,KAAK;AAAA,IACvC;AAAA;AAAA,EAEM,aAAa,OAAO;AAAA;AACtB,YAAM,KAAK,KAAK,UAAU,KAAK,SAAS,KAAK,CAAC;AAAA,IAClD;AAAA;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,eAAe;AACrB,YAAM,OAAO;AACb,YAAM,WAAW;AAAA,QACb,MAAM,OAAO,QAAQ,MAAM,IAAI;AAAA,QAC/B;AAAA,MACJ;AAEA,YAAM,OAAO,IAAI,QAAQ,UAAU,EAAC,QAAQ,KAAK,KAAI,CAAC;AAEtD,YAAM,KAAK,KAAK,iBAAiB,KAAK,OAAO;AAAA,IACjD;AAAA;AAAA,EAEM,mBAAmB,OAAO;AAAA;AAC3B,YAAM,eAAe;AAAE;AAExB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,KAAK,gBAAgB,KAAK,SAAS,KAAK,CAAC;AAAA,IACxD;AAAA;AAAA,EAEM,2BAA2B,OAAO;AAAA;AACpC,YAAM,eAAe;AAErB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,KAAK,wBAAwB;AAAA,IAC5C;AAAA;AAAA,EAEM,uBAAuB,OAAO;AAAA;AAChC,YAAM,eAAe;AAErB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,qBAAqB,QAAQ,mBAAmB,MAAM,cAAc,QAAQ,YAAY,EAAE,QAAQ,aAAa;AAErH,YAAM,KAAK,KAAK,oBAAoB,kBAAkB;AAAA,IAC1D;AAAA;AAAA,EAKA,kBAAkB;AACd,WAAO,EAAE,KAAK,OAAO,EAAE,KAAK,0BAA0B;AAAA,EAC1D;AAAA,EASA,4BAA4B,MAAM;AAldtC;AAmdQ,QAAI,eAAe,KAAK,KAAK,uBAAuB,EAAE,IAAI,CAAC;AAG3D,UAAM,YAAY,OAAO,KAAK,IAAI,aAAa,EAAE,IAAI,eAAa;AAAA,MAC9D,OAAO,KAAK,KAAK,SAAS,IAAI,cAAc,SAAS;AAAA,MACrD,IAAI;AAAA,IACR,EAAE;AAGF,UAAM,WAAW,OAAO,KAAK,IAAI,aAAa,EAAE;AAGhD,UAAM,aAAY,gBAAK,SAAS,OAAO,WAArB,mBAA6B,cAA7B,YAA0C,CAAC;AAC7D,UAAM,OAAO,UAAU,IAAI,eAAa;AAAA,MACpC,OAAO,KAAK,KAAK,SAAS,IAAI,cAAc,SAAS;AAAA,MACrD,IAAI;AAAA,IACR,EAAE;AAEF,UAAM,SAAS,aAAa,cAAc,EAAC,WAAW,UAAU,KAAI,CAAC;AAErE,SAAK,KAAK,uBAAuB,EAAE,GAAG,UAAU,CAAO,UAAU;AAC7D,YAAMC,aAAY,OAAO,MAAM,IAAI,SAAO,IAAI,EAAE;AAEhD,YAAM,KAAK,SAAS,OAAO,EAAC,2BAA2BA,WAAS,GAAG,EAAC,QAAO,MAAK,CAAC;AAAA,IACrF,EAAC;AAAA,EACL;AAAA,EASQ,wBAAwB;AAC5B,QAAI,KAAK,WAAW,YAAY,cAAc,YAAY,GAAG,QAAQ,KAAK,WAAW,QAAW;AAC5F,cAAQ,KAAK,wBAAwB,KAAK,SAAS,8GAA8G;AAEjK,WAAK,SAAS,YAAY,cAAc;AAAA,IAC5C;AAAA,EACJ;AAAA,EAKM,UAAqC;AAAA,+CAA7B,QAAQ,OAAO,UAAU,CAAC,GAAG;AAIvC,WAAK,qBAAqB;AAC1B,YAAM,yCAAM,gBAAN,MAAc,OAAO,OAAO;AAClC,WAAK,wBAAwB;AAAA,IACjC;AAAA;AAAA,EAKA,0BAA0B;AACtB,UAAM,aAAa,KAAK,gBAAgB;AACxC,QAAI,WAAW,UAAU,KAAK,WAAW,MAAM;AAC3C,iBAAW,KAAK,aAAa,KAAK,OAAO;AAAA,IAC7C;AAAA,EACJ;AAAA,EAKA,uBAAuB;AACnB,UAAM,aAAa,KAAK,gBAAgB;AACxC,QAAI,WAAW,QAAQ;AACnB,WAAK,UAAU,WAAW,KAAK,WAAW;AAAA,IAC9C;AAAA,EACJ;AAAA,EAEM,uBAAuB,OAAO;AAAA;AAChC,YAAM,gBAAgB;AAEtB,UAAI,CAAC,KAAK,OAAO;AAAQ;AAEzB,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,oBAAoB,QAAQ,mBAAmB,MAAM;AAC3D,UAAI,CAAC;AAAmB;AACxB,YAAM,EAAC,OAAO,QAAQ,KAAI,IAAI;AAC9B,UAAI,CAAC,SAAS,CAAC;AAAQ;AAEvB,YAAM,QAAQ,SAAS,MAAM,cAAc,KAAK;AAChD,YAAM,KAAK,OAAO,SAAS,QAAQ,OAAO,EAAC,OAAO,MAAM,WAAW,KAAI,CAAC;AAAA,IAC5E;AAAA;AAAA,EAEM,yBAAyB,OAAO,IAAY;AAAA;AAC9C,YAAM,gBAAgB;AAEtB,UAAI,CAAC,KAAK,OAAO;AAAQ;AAEzB,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,oBAAoB,QAAQ,mBAAmB,MAAM;AAC3D,UAAI,CAAC;AAAmB;AACxB,YAAM,EAAC,OAAO,QAAQ,KAAI,IAAI;AAC9B,UAAI,CAAC,SAAS,CAAC;AAAQ;AAEvB,YAAM,KAAK,OAAO,SAAS,QAAQ,IAAI,EAAC,OAAO,KAAI,CAAC;AAAA,IACxD;AAAA;AAAA,EAEM,eAAe,OAAO;AAAA;AACxB,YAAM,gBAAgB;AAEtB,UAAI,CAAC,KAAK,OAAO;AAAQ;AAEzB,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,OAAO,UAAU,MAAM;AAAA,IACtC;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,gBAAgB;AAEtB,UAAI,CAAC,KAAK,OAAO;AAAQ;AAEzB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,OAAO,WAAW;AAAA,IACjC;AAAA;AAAA,EAEM,kBAAkB,OAAO;AAAA;AAC3B,YAAM,eAAe;AAErB,cAAQ,IAAI,mDAAmD;AAE/D,YAAM,aAAa,MAAM,cAAc,QAAQ;AAC/C,YAAM,SAAS,MAAM,SAAS,UAAU;AACxC,UAAI,CAAC;AAAQ;AAGb,aAAO,MAAM,OAAO,IAAI;AAAA,IAC5B;AAAA;AAAA,EAEM,oBAAoB,OAAO;AAAA;AAC7B,YAAM,eAAe;AAErB,YAAM,KAAK,KAAK,sBAAsB;AAAA,IAC1C;AAAA;AACJ;;;ACtmBO,IAAM,WAAN,cAAuB,MAAM;AAAA,EAEvB,SAAS,QAAgB,KAAoB,MAA2C;AAC7F,UAAM,kBAAkB,KAAK,SAAS,IAAI,aAAa,MAAM,eAAe;AAM5E,QAAI,mBAAmB,QAAQ,KAAK,UAAU,WAAW,OAAO,GAAG;AAC/D,YAAM,QAAQ;AACd,YAAM,QAAQ,MAAM,MAAM,MAAM;AAAA,IACpC;AACA,UAAM,SAAS,QAAQ,KAAK,IAAI;AAAA,EACpC;AACJ;;;ACXO,IAAM,kBAAN,cAA8B,aAAa;AAAA,EAS9C,IAAW,gBAAyB;AAEhC,QAAI,CAAC,KAAK;AAAQ,aAAO;AAEzB,UAAM,OAAO,KAAK,OAAO,MAAM,GAAG;AAElC,QAAI,KAAK,OAAO,WAAW,KAAK,WAAW;AAAG,aAAO;AACrD,QAAI,KAAK,OAAO,WAAW,KAAK,WAAW;AAAG,aAAO;AAErD,WAAO;AAAA,EACX;AAAA,EAEA,IAAW,SAAS;AAEhB,WAAO,KAAK,SAAS,SAAS,KAAK,MAAM,IAAI;AAAA,EACjD;AAAA,EAKa,oBAAoB;AAAA;AApCrC;AAqCQ,YAAMC,YAAW,MAAM,KAAK;AAE5B,cAAO,KAAAA,aAAA,gBAAAA,UAAU,UAAV,mBAAiB,OAAO;AAAA,IACnC;AAAA;AAAA,EAEM,iBAAiB;AAAA;AAEnB,aAAO,KAAK,OAAO,EAAC,UAAU,CAAC,KAAK,SAAQ,CAAC;AAAA,IACjD;AAAA;AAAA,EAEM,QAAQ,UAAU;AAAA;AAEpB,aAAO,KAAK,OAAO,EAAC,SAAQ,CAAC;AAAA,IACjC;AAAA;AAAA,EAGU,aAAa,OAAiB,QAA0B,SAAS,OAAO,SAAS;AACvF,WAAO,KAAK,aAAa,OAAO,QAAQ,SAAS,OAAO,OAAO;AAAA,EACnE;AAAA,EASU,aAAa,OAAiB,QAA0B,SAAS,OAAO,SAAS;AAEvF,QAAI,KAAK,sBAAsB,OAAO,OAAO,GAAG,GAAG;AAC/C,YAAM,QAAQ,QAAQ,MAAM,YAAY,OAAO,OAAO,GAAG;AAEzD,YAAM,IAAI,KAAK,EAAC,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,KAAK,EAAC,CAAC;AAE9D,aAAO;AAAA,IACX;AAGA,UAAM,QAAQ,OAAO,IAAI,MAAM,GAAG;AAClC,UAAM,IAAI;AACV,UAAM,cAAc,MAAM,KAAK,GAAG;AAGlC,QAAI,KAAK,sBAAsB,OAAO,WAAW,GAAG;AAChD,YAAM,QAAQ,QAAQ,MAAM,YAAY,OAAO,WAAW;AAE1D,YAAM,IAAI,KAAK,EAAC,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,KAAK,EAAC,CAAC;AAE9D,aAAO;AAAA,IACX;AAIA,WAAO,MAAM,UAAU,OAAO,QAAQ,SAAS,OAAO,OAAO;AAAA,EACjE;AAAA,EAWU,eAAe,OAAiB,QAA0B,SAAS,OAAO,SAAS;AAEzF,QAAI,KAAK,sBAAsB,OAAO,OAAO,GAAG,GAAG;AAC/C,YAAM,QAAQ,QAAQ,MAAM,YAAY,OAAO,OAAO,GAAG;AAEzD,YAAM,WAAW,EAAC,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,KAAK,EAAC;AAC/D,YAAM,QAAQ,OAAO;AAErB,aAAO;AAAA,IACX;AAGA,UAAM,QAAQ,OAAO,IAAI,MAAM,GAAG;AAClC,UAAM,IAAI;AACV,UAAM,cAAc,MAAM,KAAK,GAAG;AAElC,QAAI,KAAK,sBAAsB,OAAO,WAAW,GAAG;AAChD,YAAM,QAAQ,QAAQ,MAAM,YAAY,OAAO,WAAW;AAE1D,YAAM,WAAW,EAAC,MAAM,KAAK,OAAO,OAAO,OAAO,OAAO,KAAK,EAAC;AAE/D,aAAO;AAAA,IACX;AAIA,WAAO,MAAM,eAAe,OAAO,QAAQ,SAAS,OAAO,OAAO;AAAA,EACtE;AAAA,EAEA,sBAAsB,OAAiB,KAAsB;AACzD,UAAM,gBAAgB,QAAQ,MAAM,YAAY,OAAO,GAAG;AAC1D,UAAM,oBAAoB,QAAQ,MAAM,QAAQ,aAAa;AAE7D,WAAO,iBAAiB,sBAAsB,YAAY,QAAQ,cAAc,eAAe,KAAK,YAAY;AAAA,EACpH;AAAA,EAEA,IAAI,eAAyB;AAEzB,WAAO,CAAC,SAAS,KAAK;AAAA,EAC1B;AACJ;;;AC/HO,IAAM,YAAN,cAAwB,OAAO;AAAA,EAElC,IAAI,WAAW;AACX,WAAO,MAAM;AAAA,EACjB;AAAA,EAEA,IAAI,iBAAyB;AACzB,WAAO,KAAK,QAAQ,aAAa,MAAM,oBAAoB,KAAe,GAAG,OAAO;AAAA,EACxF;AAAA,EAEA,OAAa,kBAAkB,QAAmB,MAAc;AAAA;AAC5D,YAAM,OAAO,UAAU,aAAa,MAAM,oBAAoB;AAC9D,YAAM,OAAO,QAAQ,aAAa,MAAM,sBAAsB,IAAI;AAAA,IACtE;AAAA;AAAA,EAMA,kBAAkB,OAAkC;AAChD,UAAM,QAAQ,MAAM,SAAS;AAC7B,QAAI,CAAC;AAAO;AACZ,WAAO,KAAK,oBAAoB,MAAM,EAAY;AAAA,EACtD;AAAA,EAOA,OAAO,+BAA+B,MAAM,SAAgB;AACxD,YAAQ;AAAA,MACJ;AAAA,QACI,MAAM,KAAK,KAAK,SAAS,4BAA4B;AAAA,QACrD,MAAM;AAAA,QACN,UAAU,CAAO,OAAO;AAlDxC;AAmDoB,gBAAM,YAAY,OAAM,UAAK,WAAL,mBAAa,WAAW,IAAI,GAAG,KAAK,cAAc;AAC1E,cAAI,WAAW;AACX,kBAAM,SAAoB,KAAK;AAC/B,kBAAM,OAAO,iBAAiB,WAAW,EAAE;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM,KAAK,KAAK,SAAS,6BAA6B;AAAA,QACtD,MAAM;AAAA,QACN,UAAU,CAAO,OAAO;AA7DxC;AA8DoB,gBAAM,YAAY,OAAM,UAAK,WAAL,mBAAa,WAAW,IAAI,GAAG,KAAK,cAAc;AAC1E,cAAI,WAAW;AACX,kBAAM,SAAoB,KAAK;AAC/B,kBAAM,OAAO,iBAAiB,WAAW,EAAE;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM,KAAK,KAAK,SAAS,4BAA4B;AAAA,QACrD,MAAM;AAAA,QACN,UAAU,CAAO,OAAO;AAxExC;AAyEoB,gBAAM,YAAY,OAAM,UAAK,WAAL,mBAAa,WAAW,IAAI,GAAG,KAAK,cAAc;AAC1E,cAAI,WAAW;AACX,kBAAM,SAAoB,KAAK;AAC/B,kBAAM,OAAO,iBAAiB,WAAW,GAAG;AAAA,UAChD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAOM,iBAAiB,WAAyB,YAAmC;AAAA;AAC/E,kBAAY,OAAO,cAAc,WAAW,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,OAAO,SAAS,IAAI;AAC9F,UAAI,CAAC,aAAa,OAAO,cAAc,UAAU;AAC7C,gBAAQ,MAAM,qCAAqC,SAAS;AAC5D;AAAA,MACJ;AAEA,YAAM,UAAU,OAAO;AAAA,QACnB,YAAY,OAAO,UAAU,UAAU,IAAI;AAAA,MAC/C,CAAC;AAAA,IACL;AAAA;AAAA,EAMA,OAAa,cAAc,UAAkB;AAAA;AAzGjD;AA0GQ,YAAM,UAAS,UAAK,YAAL,mBAAc,IAAI;AACjC,UAAI,CAAC;AAAQ;AAEb,YAAM,iBAAiB,OAAO,iBAAiB;AAE/C,YAAM,OAAO;AAGb,YAAM,iBAA2D,CAAC;AAClE,iBAAW,aAAa,OAAO,YAAY;AACvC,cAAM,aAAa,YAAY,yBAAyB,OAAO,UAAU,UAAU,CAAC;AAEpF,uBAAe,KAAK;AAAA,UAChB,KAAK,UAAU;AAAA,UACf;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,YAAM,UAAU,kBAAkB,QAAQ,cAAc;AACxD,YAAM,OAAO,OAAO,EAAC,MAAM,YAAY,eAAc,CAAC;AACtD;AAAA,IACJ;AAAA;AAAA,EAMA,OAAa,gBAAgB,UAAkB;AAAA;AArInD;AAsIQ,YAAM,UAAS,UAAK,YAAL,mBAAc,IAAI;AACjC,UAAI,CAAC;AAAQ;AACb,YAAM,OAAO,SAAS;AACtB,YAAM,UAAU,kBAAkB,QAAQ,GAAG,OAAO,gBAAgB;AAEpE,UAAI,KAAK,SAAS,IAAI,aAAa,MAAM,uBAAuB,GAAG;AAC/D,cAAM,OAAO,QAAQ;AAAA,MACzB,OAAO;AACH,cAAM,OAAO,QAAQ;AAAA,MACzB;AAEA,YAAM,OAAO;AACb,YAAM,OAAO,OAAO,EAAC,KAAI,CAAC;AAAA,IAC9B;AAAA;AAAA,EAKA,aAAoB;AAChB,UAAM,QAAQ,MAAM,WAAW;AAC/B,WAAO,MAAM,KAAK,UAAU,WAAW;AAAA,EAC3C;AAAA,EAEA,OAAO,YAAY,MAAM,OAAe;AAEpC,UAAM,WAAW,OAAO,KAAK,UAAU;AACvC,UAAM,YAAY,OAAO,MAAM,UAAU;AACzC,QAAI,MAAM,QAAQ;AAAG,aAAO;AAC5B,QAAI,MAAM,SAAS;AAAG,aAAO;AAC7B,QAAI,WAAW;AAAW,aAAO;AACjC,QAAI,WAAW;AAAW,aAAO;AAGjC,UAAM,UAAU,CAAC,UAAoB;AAvK7C;AAyKY,UAAI,CAAC;AAAO,eAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAE9B,aAAO;AAAA,QACH,OAAO,MAAM,QAAQ,EAAE,KAAK;AAAA,QAC5B,QAAO,WAAM,cAAc,UAAU,MAA9B,mBAAiC,KAAK;AAAA,QAC7C,QAAO,WAAM,cAAc,WAAW,MAA/B,mBAAkC,KAAK;AAAA,QAE9C,IAAI,KAAK,KAAK,EAAE,SAAS,EAAC,OAAO,MAAK,CAAC,EAAE;AAAA,MAC7C;AAAA,IACJ;AAEA,UAAM,WAAW,QAAQ,KAAK,KAAK;AACnC,UAAM,YAAY,QAAQ,MAAM,KAAK;AAErC,aAAS,QAAQ,GAAG,QAAQ,SAAS,QAAQ,SAAS;AAClD,YAAM,OAAO,UAAU,SAAS,SAAS;AACzC,UAAI,SAAS;AAAG,eAAO;AAAA,IAC3B;AAEA,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,6BAAqC;AACrC,aAAS,CAAC,YAAY,SAAS,KAAK,KAAK,MAAM,QAAQ,GAAG;AAEtD,UAAI,KAAK,SAAS,QAAQ,cAAc,KAAK;AAAM;AAEnD,UAAI,CAAC,UAAU,YAAY,UAAU,aAAa,GAAG;AACjD,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAKA,IAAI,yBAAiC;AAEjC,aAAS,CAAC,YAAY,SAAS,KAAK,KAAK,MAAM,QAAQ,GAAG;AAEtD,UAAI,KAAK,SAAS,QAAQ,cAAc,KAAK;AAAM;AAEnD,UAAI,UAAU,aAAa,GAAG;AAC1B,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA,EAMA,UAAU,UAA2B;AAEjC,QAAI,WAAW,KAAK,MAAM;AAAQ,aAAO;AAEzC,UAAM,gBAAgB,KAAK,WAAW,IAAI,eAAa,OAAO,UAAU,UAAU,CAAC;AAEnF,WAAO,YAAY,yBAAyB,aAAa;AAAA,EAC7D;AAAA,EAgBM,WAAsC;AAAA;AA3PhD;AA6PQ,UAAI,YAAY,KAAK;AACrB,UAAI,iBAAiB,KAAK;AAE1B,UAAI,aAAW,UAAK,aAAL,mBAAe,gBAC1B,KAAK,6BACL,KAAK;AAGT,UAAI,cAAc,KAAK,mBAAmB,GAAG;AACzC,cAAM,KAAK,YAAY;AACvB;AAAA,MACJ;AAGA,UAAI,WAAW,KAAK,MAAM,QAAQ;AAC9B,cAAM,KAAK,OAAO,EAAC,MAAM,SAAQ,CAAC;AAClC;AAAA,MACJ;AAGA,UAAI,GAAC,UAAK,SAAL,mBAAW,SAAQ,KAAK,UAAU,QAAQ,GAAG;AAC9C,cAAM,KAAK,8BAA8B;AACzC;AAAA,MACJ;AAEA,YAAI,UAAK,SAAL,mBAAW,SAAQ,KAAK,UAAU,QAAQ,GAAG;AAC7C,cAAM,UAAU,cAAc,KAAK,EAAY;AAC/C;AAAA,MACJ;AAKA,aAAO,KAAK,UAAU;AAAA,IAC1B;AAAA;AAAA,EAEM,cAAc;AAAA;AAChB,YAAM,YAAY,GAAG,OAAO;AAC5B,YAAM,iBAAiB,GAAG,OAAO;AAEjC,YAAM,WAAW;AAEjB,YAAM,UAAU,kBAAkB,MAAM,cAAc;AACtD,YAAM,KAAK,OAAO,EAAC,OAAO,WAAW,MAAM,SAAQ,CAAC;AAEpD,UAAI,KAAK,SAAS,IAAI,aAAa,MAAM,uBAAuB,GAAG;AAC/D,cAAM,KAAK,QAAQ;AAAA,MACvB,OAAO;AACH,cAAM,KAAK,QAAQ;AAAA,MACvB;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAEM,YAA0B;AAAA;AAnTpC;AAqTQ,YAAM,sCAAM,kBAAN,IAAgB;AAGtB,UAAI,GAAC,UAAK,SAAL,mBAAW,OAAM;AAClB,cAAM,KAAK,gCAAgC;AAAA,MAC/C,OAAO;AACH,cAAM,UAAU,gBAAgB,KAAK,EAAY;AAAA,MACrD;AAAA,IACJ;AAAA;AAAA,EAMM,QAAQ,SAA8B;AAAA;AACxC,YAAM,SAAS,MAAM,sCAAM,gBAAN,IAAc;AACnC,UAAI,OAAO,SAAS;AAChB,cAAM,OAAO,OAAO,EAAC,MAAM,EAAC,CAAC;AACjC,aAAO;AAAA,IACX;AAAA;AAAA,EAMM,eAAe,KAAK,SAA8B;AAAA;AACpD,YAAM,SAAS,MAAM,sCAAM,uBAAN,MAAqB,KAAK,OAAO;AAEtD,UAAI,KAAK,mBAAmB,GAAG,OAAO;AAClC,cAAM,OAAO,OAAO,EAAC,MAAM,EAAC,CAAC;AAEjC,aAAO;AAAA,IACX;AAAA;AAAA,EAUA,OAAO,qBAAqB,WAAsB,SAAS,SAAS,IAAI;AACpE,YAAQ,IAAI,iEAAiE,WAAW,OAAO;AAG/F,QAAI,QAAQ;AAAY,cAAQ,aAAa,YAAY,wBAAwB,QAAQ,UAAU;AAAA,EACvG;AAAA,EASA,sBAAsB,WAAsB;AACxC,QAAI,KAAK,mBAAmB,GAAG,OAAO,kBAAkB;AACpD,aAAO,MAAM,sBAAsB,SAAS;AAAA,IAChD;AAGA,WAAO,UAAU,4BAA4B,KAAK,cAAc;AAAA,EACpE;AAAA,EAEA,OAAO,kCAAkC;AAErC,WAAO,OAAO,OAAO,OAAO,WAAW,WAAW,KAAK,OAAO,KAAK,UAAU;AAAA,EACjF;AAAA,EAEA,OAAO,4BAA4B,gBAAgC;AAC/D,qBAAiB,iBAAiB,IAAI,iBAAiB;AACvD,UAAM,cAAc,UAAU,gCAAgC;AAC9D,UAAM,0BAA0B,iBAAiB,KAAK,CAAC,GAAG,OAAO;AACjE,WAAO,OAAO,iBAAiB;AAAA,EACnC;AAAA,EAEA,OAAa,gCAAgC,SAA4B;AAAA;AACrE,UAAI,CAAC,QAAQ,KAAK,eAAe,IAAI,KAAK,OAAO,QAAQ,KAAK,OAAO,UAAU;AAC3E,gBAAQ,MAAM,4BAA4B,MAAM,2DAA2D,OAAO,QAAQ,SAAS,QAAQ,QAAQ;AACnJ;AAAA,MACJ;AAEA,aAAO,MAAM,UAAU,gBAAgB,QAAQ,KAAK,EAAE;AAAA,IAC1D;AAAA;AAAA,EAEA,OAAa,+BAA+B,SAA4B;AAAA;AACpE,UAAI,CAAC,QAAQ,KAAK,eAAe,IAAI,KAAK,OAAO,QAAQ,KAAK,OAAO,UAAU;AAC3E,gBAAQ,MAAM,4BAA4B,MAAM,0DAA0D,OAAO,QAAQ,SAAS,QAAQ,QAAQ;AAClJ;AAAA,MACJ;AAEA,aAAO,MAAM,UAAU,cAAc,QAAQ,KAAK,EAAE;AAAA,IACxD;AAAA;AAAA,EAEM,kCAAkC;AAAA;AACpC,YAAM,cAAc,UAAU,MAAM,aAAa,EAAC,IAAI,KAAK,GAAE,CAAC;AAAA,IAClE;AAAA;AAAA,EAEM,gCAAgC;AAAA;AAClC,YAAM,cAAc,UAAU,MAAM,YAAY,EAAC,IAAI,KAAK,GAAE,CAAC;AAAA,IACjE;AAAA;AACJ;AASO,SAAS,iCAAiC;AAC7C,QAAM,SAAS,KAAK;AACpB,SAAO,UAAU,4BAA4B,OAAO,cAAc;AACtE;;;AClaO,IAAM,yBAAN,cAAoC,YAAY;AAAA,EAEnD,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AACb,YAAQ,UAAU,CAAC,KAAK;AACxB,YAAQ,QAAQ,KAAK,KAAK,SAAS,gCAAgC;AACnE,YAAQ,WAAW;AACnB,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,YAAQ,YAAY;AACpB,WAAO;AAAA,EACX;AAAA,EAIA,QAAQ,SAAS;AAEb,UAAM,SAAS,KAAK,4BAA4B;AAGhD,2BAAsB,YAAY,QAAQ,QAAM;AAC5C,YAAM,QAAQ,KAAK,OAAO,IAAI,EAAE;AAChC,UAAI,OAAO;AACP,eAAO,KAAK,MAAM,SAAS,CAAC;AAAA,MAChC;AAAA,IACJ,CAAC;AAGD,SAAK,SAAS;AAEd,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,8BAA8B;AAC1B,WAAO,KAAK,MAAM,OAAO,CAAC,KAAK,SAAS;AACpC,UAAI,CAAC,KAAK,QAAQ,KAAK,WAAW;AAC9B,YAAI,KAAK,KAAK,UAAU,SAAS,CAAC;AAAA,MACtC;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA,EAEA,kBAAkB,MAAM;AACpB,SAAK,KAAK,wBAAwB,EAAE,GAAG,SAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC;AACpF,SAAK,KAAK,sBAAsB,EAAE,GAAG,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAChF,SAAK,KAAK,wBAAwB,EAAE,GAAG,UAAU,KAAK,mBAAmB,KAAK,IAAI,CAAC;AACnF,SAAK,KAAK,kCAAkC,EAAE,GAAG,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC;AAC3F,SAAK,KAAK,4BAA4B,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AAAA,EACnF;AAAA,EAGA,mBAAmB,OAAO;AACtB,UAAM,KAAK,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY,EAAE,KAAK,SAAS;AACtE,QAAI;AAAI,aAAO,KAAK,OAAO,IAAI,EAAE;AAAA,EACrC;AAAA,EAEA,YAAY,OAAO;AAhEvB;AAiEQ,UAAM,eAAe;AAErB,UAAM,SAAS,QAAQ,oBAAoB;AAC3C,QAAI,OAAO,WAAW,GAAG;AACrB,cAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,kDAAkD;AAAA,IACvG;AAGA,UAAM,gBAAgB,OAAO,KAAK,WAAS,CAAC,MAAM,KAAK,SAAS;AAChE,QAAI,kBAAkB,QAAW;AAC7B,SAAG,cAAc,KAAK,KAAK,KAAK,SAAS,qDAAqD,CAAC;AAAA,IACnG;AAGA,WAAO,OAAO,WAAS,MAAM,KAAK,SAAS,EAAE,QAAQ,WAAS;AAE1D,YAAM,QAAQ,KAAK,OAAO,IAAI,MAAM,KAAK,OAAO;AAChD,UAAI,CAAC;AAAO;AACZ,UAAI,KAAK,kBAAkB,KAAK;AAAG;AAEnC,6BAAsB,YAAY,KAAK,MAAM,EAAE;AAAA,IACnD,CAAC;AAED,SAAK,OAAO;AAAA,EAChB;AAAA,EAQA,kBAAkB,OAAO;AACrB,WAAO,KAAK,OAAO,KAAK,eAAa,UAAU,QAAQ,MAAM,EAAE,MAAM;AAAA,EACzE;AAAA,EAEA,mBAAmB,OAAO;AACtB,UAAM,QAAQ,KAAK,mBAAmB,KAAK;AAC3C,UAAM,SAAS,MAAM,cAAc;AACnC,QAAI,UAAU,OAAO;AACjB,YAAM,kBAAkB,MAAM,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,IAC5D;AAAA,EACJ;AAAA,EAEA,mBAAmB,OAAO;AACtB,UAAM,QAAQ,KAAK,mBAAmB,KAAK;AAC3C,UAAM,SAAS,SAAS,MAAM,cAAc,QAAQ,MAAM;AAC1D,QAAI,UAAU,OAAO;AACjB,YAAM,KAAK,MAAM,kBAAkB;AACnC,YAAM,kBAAkB,KAAK,MAAM,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,IACjE;AAAA,EACJ;AAAA,EAEA,qBAAqB,OAAO;AACxB,UAAM,eAAe;AACrB,UAAM,QAAQ,KAAK,mBAAmB,KAAK;AAC3C,QAAI,OAAO;AACP,YAAM,kBAAkB,CAAC,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,kBAAkB,OAAO;AACrB,UAAM,eAAe;AACrB,UAAM,QAAQ,KAAK,mBAAmB,KAAK;AAC3C,QAAI,OAAO;AAEP,YAAM,OAAO,IAAI,KAAK,uBAAsB,wBAAwB;AACpE,WAAK,SAAS,EAAC,OAAO,MAAK,CAAC;AAM5B,UAAI,KAAK,OAAO;AACZ,cAAM,KAAK,MAAM,kBAAkB;AACnC,cAAM,kBAAkB,KAAK,KAAK,KAAK,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,MACrE;AAAA,IACJ;AAAA,EACJ;AACJ;AA3IO,IAAM,wBAAN;AACH,cADS,uBACF,4BAA2B;AAalC,cAdS,uBAcF,eAAc,CAAC;;;ACnBnB,IAAM,YAAN,MAAgB;AAwNvB;AAxNa,UACc,wBAAwB;AAAA,EAC3C,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,aAAa;AAAA,EACb,wBAAwB;AAAA,EACxB,yBAAyB;AAAA,EACzB,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,YAAY;AAAA,EACZ,iBAAiB;AAAA,EACjB,mBAAmB;AAAA,EACnB,mBAAmB;AAAA,EACnB,UAAU;AAAA,EACV,WAAW;AACf;AA5BS,UA6Bc,gBAAgB;AAAA,EACnC,UAAU;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,YAAY;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,kBAAkB;AAAA,IACd,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,YAAY;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,wBAAwB;AAAA,IACpB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,sBAAsB;AAAA,IAClB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,2BAA2B;AAAA,IACvB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,qBAAqB;AAAA,IACjB,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,qBAAqB;AAAA,IACjB,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,QAAQ;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,oBAAoB;AAAA,IAChB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,mBAAmB;AAAA,IACf,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,gBAAgB;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,OAAO;AAAA,IACH,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,YAAY;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,oBAAoB;AAAA,IAChB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,uBAAuB;AAAA,IACnB,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,IACT,WAAW;AAAA,EACf;AAAA,EACA,eAAe;AAAA,IACX,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,4BAA4B;AAAA,IACxB,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AAAA,EACA,iBAAiB;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,SAAS;AAAA,EACb;AACJ;AArNS,UAuNc,0BAA0B;;;ACvN9C,IAAe,iBAAf,MAA8B;AAIrC;;;ACDO,IAAM,cAAN,cAA0B,eAAe;AAAA,EACrC,SAAS,UAAkB,KAAa,WAA+B,QAAmB;AAC7F,QAAI;AACA,aAAO,SAAS,SAAS,KAAK,aAAa,SAAS;AAAA,IACxD,SAAS,GAAP;AACE,UAAI,aAAa,QAAW;AACxB,eAAO;AAAA,MACX,OAAO;AACH,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,YAAY,UAAkB,KAAsB,WAA+B,QAAmB;AACzG,QAAI;AACA,aAAO,SAAS,KAAK,aAAa;AAAA,IACtC,SAAS,GAAP;AACE,UAAI,aAAa,QAAW;AACxB,eAAO;AAAA,MACX,OAAO;AACH,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEO,YAAY,UAAkB,KAAsB,WAAsC,QAA0B;AACvH,QAAI;AACA,aAAO,SAAS;AAAA,IACpB,SAAS,GAAP;AACE,UAAI,aAAa,QAAW;AACxB,eAAO;AAAA,MACX,OAAO;AACH,cAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACrCO,IAAM,eAAN,cAA2B,eAAe;AAAA,EACtC,SAAS,UAAkB,KAAa,WAA+B,QAAmB;AAC7F,UAAM,IAAI,MAAM,eAAe;AAAA,EACnC;AAAA,EAEO,YAAY,UAAkB,KAAsB,WAA+B,QAAmB;AACzG,UAAM,IAAI,MAAM,eAAe;AAAA,EACnC;AAAA,EAEO,YAAY,UAAkB,KAAsB,WAAsC,QAA0B;AACvH,UAAM,IAAI,MAAM,eAAe;AAAA,EACnC;AACJ;;;ACMO,IAAM,gBAAN,MAAmB;AAAA,EAKtB,OAAc,QAAQ,MAAkB;AACpC,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,sBAAa,aAAa,IAAI,YAAY;AAC1C;AAAA,MACJ,KAAK;AACD,sBAAa,aAAa,IAAI,aAAa;AAC3C;AAAA,IACR;AAAA,EACJ;AAAA,EAEQ,cAAc;AAAA,EAAC;AAAA,EAQvB,OAAoB,UAAU,MAAc,SAAwB,MAAM;AAAA;AACtE,aAAO,MAAM,OAAO,OAAO;AAAA,QACvB,MAAM;AAAA,QACN,QAAQ,WAAW,OAAO,OAAO,OAAO;AAAA,QACxC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA,EAWA,OAAoB,gBAAgB,MAAc,SAAkB,OAAwB;AAAA;AA7DhG;AA8DQ,UAAI,eACA,aAAa;AACjB,YAAM,eAAe,KAAK,MAAM,GAAG;AACnC,iBAAW,eAAe,cAAc;AAEpC,yBAAgB,UAAK,YAAL,mBAAc,KAAK,CAAC,WAAW;AAC3C,iBAAO,OAAO,WAAW,cAAc,OAAO,SAAS;AAAA,QAC3D;AAGA,YAAI,CAAC,iBAAiB,CAAC;AAAQ,iBAAO,QAAQ,OAAO,0BAA0B,MAAM;AAErF,YAAI,CAAC;AAAe,0BAAgB,MAAM,cAAa,UAAU,aAAa,UAAU;AAExF,qBAAa;AAAA,MACjB;AAEA,aAAO,QAAQ,QAAQ,aAAa;AAAA,IACxC;AAAA;AAAA,EASA,OAAc,SAAS,UAAkB,KAAa,WAA+B,QAAmB;AACpG,WAAO,cAAa,WAAW,SAAS,UAAU,KAAK,QAAQ;AAAA,EACnE;AAAA,EAQA,OAAc,YAAY,UAAkB,KAAsB,WAA+B,QAAmB;AAChH,WAAO,cAAa,WAAW,YAAY,UAAU,KAAK,QAAQ;AAAA,EACtE;AAAA,EAQA,OAAc,YAAY,UAAkB,KAAsB,WAAsC,QAA0B;AAC9H,WAAO,cAAa,WAAW,YAAY,UAAU,KAAK,QAAQ;AAAA,EACtE;AAAA,EAEA,OAAc,SAAS,WAA2C;AAjHtE;AAkHQ,QAAI;AACJ,QAAI,OAAO,cAAc,UAAU;AAC/B,gBAAS,UAAK,UAAL,mBAAY,KAAK,CAAC,SAAS,KAAK,QAAQ;AAAA,IACrD,OAAO;AACH,gBAAS,UAAK,UAAL,mBAAY,KAAK;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,kBAAkB,MAAM,0BAA2B;AAC7D,QAAI,4BAA4B,yBAAyB,eAAe,IAAI,GAAG;AAC3E,aAAO,yBAAyB;AAAA,IACpC;AAEA,WAAO;AAAA,EACX;AAAA,EACA,OAAoB,oBAChB,UACA,MACA,0BACmC;AAAA;AACnC,UAAI,UAAU,CAAC;AACf,UAAI,iBAAiB,SAAS,cAAc;AAE5C,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,YAAI,eAAe,eAAe,GAAG,cAAa;AAElD,YAAI,mBAAmB;AACvB,uBAAe,cAAa,kBAAkB,cAAc,wBAAwB;AACpF,gBAAQ,iBAAiB,YAAY,KAAK,MAAM,cAAa,gBAAgB,GAAG,UAAU,2BAA2B,QAAQ,gBAAgB,IAAI;AAAA,MACrJ;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAOA,OAAc,2BAA2B,UAAU,cAAsB;AACrE,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAM,cAAc,SAAS;AAC7B,UAAI,YAAY,EAAE,SAAS,cAAc;AACrC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,CAAC;AAAA,EACZ;AAAA,EAQA,OAAc,6BAA6B,iBAAiB;AACxD,UAAM,uBAAuB,CAAC;AAC9B,QAAI,mBAAmB,gBAAgB,eAAe,YAAY,GAAG;AACjE,sBAAgB,WAAW,SAAS,QAAQ,CAAC,aAAa;AACtD,cAAM,OAAO,SAAS,cAAa;AACnC,cAAM,YAAY,SAAS,EAAE;AAC7B,6BAAqB,QAAQ;AAAA,MACjC,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EAQA,OAAc,uBAAuB,eAAe,SAAS,SAAS;AAClE,UAAM,kBAAkB,CAAC;AACzB,QAAI,iBAAiB,cAAc,YAAY,cAAc,SAAS,YAAY,cAAc,SAAS,SAAS,SAAS,GAAG;AAC1H,oBAAc,SAAS,SAAS,QAAQ,CAAC,SAAS;AAC9C,cAAM,OAAO,KAAK,KAAK,cAAa;AACpC,cAAM,YAAY,KAAK,UAAU,cAAa;AAC9C,cAAM,UAAU,KAAK,QAAQ,cAAa;AAC1C,wBAAgB,QAAQ,EAAE,WAAW,QAAQ;AAAA,MACjD,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAwB,gBAAgB,MAAM,KAAK,gBAAgB,IAAY;AAClF,QAAI,kBAAkB,eAAe,eAAe,IAAI,KAAK,eAAe,MAAM,eAAe,GAAG,GAAG;AACnG,aAAO,eAAe,MAAM;AAAA,IAChC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAc,qBAAqB,gBAAgB,MAAc;AAC7D,WAAO,cAAa,wBAAwB,gBAAgB,MAAM,aAAa,IAAI;AAAA,EACvF;AAAA,EAEA,OAAc,oBAAoB,gBAAgB,MAAM,WAAS,KAAa;AAC1E,WAAO,cAAa,wBAAwB,gBAAgB,MAAM,WAAW,QAAQ;AAAA,EACzF;AACJ;AArMO,IAAM,eAAN;AAAM,aACc,WAAW;AADzB,aAGM,aAA6B,IAAI,YAAY;;;ACrBhE,IAAM,SAAS;AAER,IAAe,gBAAf,MAA4B;AAAA,EAgB/B,OAAc,aAAa,YAA0B;AACjD,WAAO,WAAW,eAAe,SAAS,KAAK,WAAW,QAAQ,SAAS,KAAK,WAAW,QAAQ,GAAG,EAAE,eAAe,MAAM;AAAA,EACjI;AAAA,EAMA,OAAc,iBAAiB,YAAoB;AAC/C,QAAI,cAAc,WAAW,eAAe,SAAS,GAAG;AACpD,oBAAa,WAAW,WAAW;AAAA,IACvC;AAAA,EACJ;AAAA,EAyBA,OAAoB,SAAS,WAAoC;AAAA;AAC7D,YAAM,SAAS,OAAO,OAAO;AAAA,QACzB,eAAe;AAAA,QACf,iBAAiB;AAAA,QACjB,SAAS,aAAa;AAAA,MAC1B,CAAC;AAED,cAAQ,MAAM,OAAO,mBAAmB,SAAS,GAAG;AAAA,IACxD;AAAA;AAAA,EAEA,OAAc,sBAAsB,YAAY;AAC5C,QAAI,CAAC,WAAW,eAAe,QAAQ;AAAG,aAAO;AACjD,UAAM,SAAS,aAAa,YAAY,YAAY,UAAU,EAAE;AAChE,WAAO,cAAa,iBAAiB,SAAS,MAAM;AAAA,EACxD;AAAA,EAEA,OAAc,iBAAiB,YAAY;AACvC,QAAI,cAAa,sBAAsB,UAAU,GAAG;AAChD,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;AA5EO,IAAe,eAAf;AAAe,aAKJ,mBAA6B,CAAC,MAAM;;;ACT/C,IAAe,SAAf,MAA+B;AAEtC;;;ACEO,IAAe,iBAAf,cAAyE,OAAgB;AAAA,EAC5F,MAAM,UAAkB,MAAe,iBAAmC;AAEtE,SAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AAErD,SAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAE7H,QAAI,iBAAiB;AACjB,YAAM,WAAW,aAAa,YAAY,UAAU,MAAM;AAE1D,WAAK,OAAO,aAAa,qBAAqB,iBAAiB,QAAQ;AACvE,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,iBAAiB,QAAQ;AAAA,IAClJ;AAEA,WAAO;AAAA,EACX;AACJ;;;AChBO,IAAe,2BAAf,cAA6F,eAAwB;AAAA,EACxH,MAAM,UAAkB,MAAe,iBAAmC;AACtE,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,SAAK,OAAO,WAAW,eAAe,aAAa,YAAY,UAAU,SAAS,GAAG;AACrF,SAAK,OAAO,WAAW,OAAO,aAAa,SAAS,UAAU,QAAQ,CAAC;AACvE,SAAK,OAAO,WAAW,SAAS,aAAa,SAAS,UAAU,UAAU,CAAC;AAE3E,WAAO;AAAA,EACX;AACJ;;;ACNO,IAAe,mBAAf,cAAwC,yBAAyC;AAAA,EAG1E,SAAS,YAA+B;AAC9C,QAAI,WAAW,eAAe,UAAU,GAAG;AACvC,UAAI,YAAY,aAAa,YAAY,YAAY,UAAU;AAC/D,UAAI,UAAU,sBAAsB,eAAe,SAAS,GAAG;AAC3D,eAAO,UAAU,sBAAsB;AAAA,MAC3C;AACA,aAAO,UAAU,QAAQ,WAAW,GAAG,EAAE,YAAY;AAAA,IACzD,OAAO;AACH,UAAI,WAAW,aAAa,YAAY,YAAY,UAAU;AAC9D,UAAI,UAAU,sBAAsB,eAAe,QAAQ,GAAG;AAC1D,eAAO,UAAU,sBAAsB;AAAA,MAC3C;AAEA,UAAI,OAAO,aAAa,YAAY,YAAY,MAAM,EAAE,YAAY;AACpE,aAAO,SAAS,WAAW,iBAAiB;AAAA,IAChD;AAAA,EACJ;AAAA,EAEA,OAAc,cAAc,YAAoC;AAC5D,QAAI,OAAO,aAAa,YAAY,YAAY,MAAM;AAEtD,QAAI,SAAS,SAAS;AAClB,aAAO;AAAA,IACX,OAAO;AAEH,UAAI,WAAW,eAAe,UAAU,GAAG;AACvC,YAAI,QAAQ,aAAa,YAAY,YAAY,UAAU;AAC3D,YAAI,UAAU;AAAoB,iBAAO;AAAA,MAC7C;AAGA,UAAI,WAAW,aAAa,YAAY,YAAY,UAAU;AAC9D,UAAI,aAAa;AAAoB,eAAO;AAE5C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEO,MAAM,UAAkB,MAAsB,iBAA0C;AAC3F,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,QAAI,WAAW,aAAa,YAAY,UAAU,UAAU;AAG5D,QAAI,aAAa,aAAa;AAC1B,iBAAW;AAAA,IACf;AAEA,SAAK,OAAO,WAAW,iBAAiB,cAAc,QAAQ;AAC9D,SAAK,OAAO,cAAc,SAAS,YAAY;AAE/C,SAAK,OAAO,OAAO,QAAQ,KAAK,SAAS,QAAQ;AACjD,SAAK,OAAO,OAAO,SAAS,KAAK,UAAU,QAAQ;AAEnD,SAAK,OAAO,OAAO,MAAM,QAAQ,aAAa,SAAS,UAAU,UAAU;AAC3E,SAAK,OAAO,OAAO,MAAM,OAAO,aAAa,SAAS,UAAU,UAAU;AAE1E,SAAK,OAAO,WAAW,QAAQ,OAAO,aAAa,SAAS,UAAU,SAAS;AAE/E,WAAO;AAAA,EACX;AACJ;;;AChEO,IAAM,eAAN,cAA2B,iBAAiB;AAAA,EACxC,UAAU,UAA8B;AATnD;AAUQ,QAAI,aAAa,aAAa,YAAY,UAAU,QAAQ;AAC5D,QAAI,cAAa,gBAAW,MAAM,aAAa,MAA9B,mBAAkC;AAEnD,QAAI,cAAc,MAAM;AACpB,aAAO,cAAc,WAAW;AAAA,IACpC;AAEA,QAAI,aAAa,WAAW,SAAS,GAAG,IAAI,aAAa;AACzD,QAAI,eAAe,SAAS,WAAW,QAAQ,WAAW,GAAG,YAAY,GAAG,EAAE,CAAC;AAC/E,QAAI,WAAW,aAAa,SAAS,UAAU,MAAM,CAAC;AAEtD,UAAM,oBAAoB;AAAA,MACtB,MAAM;AAAA,QACF,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,MAAM;AAAA,MACN,OAAO;AAAA,MACP,IAAI;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,CAAC;AAAA,MACV;AAAA,IACJ;AACA,WAAO,cAAc,WAAW,iBAAiB;AAAA,EACrD;AAAA,EAEU,QAAQ,YAAoB;AArC1C;AAsCQ,QAAI,WAAW,aAAa,YAAY,YAAY,MAAM;AAC1D,QAAI,SAAQ,cAAS,MAAM,WAAW,MAA1B,mBAA8B;AAC1C,WAAO,UAAU,SAAY,SAAS,KAAK,IAAI;AAAA,EACnD;AAAA,EAEA,MAAM,UAAkB,MAAsB,iBAA0C;AACpF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAGlD,QAAI,SAAS,eAAe,IAAI,GAAG;AAC/B,WAAK,OAAO,MAAM,GAAG,OAAO,aAAa,SAAS,UAAU,IAAI;AAChE,WAAK,OAAO,MAAM,GAAG,QAAQ,aAAa,SAAS,UAAU,IAAI;AAAA,IACrE,OAAO;AACH,WAAK,OAAO,MAAM,GAAG,OAAO;AAC5B,WAAK,OAAO,MAAM,GAAG,QAAQ;AAAA,IACjC;AAGA,QAAI,SAAS,eAAe,OAAO,GAAG;AAClC,WAAK,OAAO,MAAM,SAAS,UAAU,cAAc,aAAa,YAAY,UAAU,OAAO;AAAA,IACjG,OAAO;AACH,WAAK,OAAO,MAAM,SAAS,UAAU,cAAc,aAAa,YAAY,UAAU,UAAU;AAAA,IACpG;AAEA,SAAK,OAAO,KAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;AACtD,SAAK,OAAO,KAAK,QAAQ,MAAM,KAAK,QAAQ,QAAQ;AAEpD,SAAK,OAAO,MAAM,MAAM,cAAc,aAAa,YAAY,UAAU,MAAM,EAAE,SAAS,IAAI;AAC9F,SAAK,OAAO,MAAM,MAAM,YAAY,aAAa,YAAY,UAAU,MAAM,EAAE,SAAS,IAAI;AAC5F,SAAK,OAAO,MAAM,MAAM,aAAa,aAAa,YAAY,UAAU,MAAM,EAAE,SAAS,IAAI;AAC7F,SAAK,OAAO,MAAM,MAAM,YAAY,aAAa,YAAY,UAAU,MAAM,EAAE,SAAS,IAAI;AAE5F,WAAO;AAAA,EACX;AACJ;;;AChEO,IAAM,cAAN,cAA0B,iBAAiB;AAAA,EAC9C,UAAU,UAA8B;AAT5C;AAUQ,QAAI,aAAa,aAAa,YAAY,UAAU,QAAQ;AAC5D,QAAI,cAAkB,gBAAW,MAAM,+BAA+B,MAAhD,mBAAoD;AAE1E,QAAI,cAAc,MAAM;AACpB,aAAO,cAAc,WAAW;AAAA,IACpC;AAEA,QAAI,aAAa;AACjB,QAAI,WAAW,aAAa,SAAS,UAAU,MAAM,CAAC;AAEtD,QAAI,kBAAkB,WAAW,MAAM,GAAG;AAC1C,QAAI,aAAa,gBAAgB,GAAG,SAAS,GAAG,IAAI,aAAa;AAEjE,QAAI,gBAAgB,WAAW,SAAS,GAAG,IAAI,gBAAgB,GAAG,MAAM,GAAG,IAAI,gBAAgB,GAAG,MAAM,GAAG;AAC3G,QAAI,gBAAgB,GAAG,SAAS,GAAG,KAAK,gBAAgB,GAAG,SAAS,GAAG,GAAG;AACtE,mBAAa,SAAS,cAAc,IAAI,CAAC;AAAA,IAC7C;AACA,QAAI,kBAAkB,WAAW,SAAS,KAAK,IAAI,aAAa;AAEhE,UAAM,oBAAoB;AAAA,MACtB,MAAM;AAAA,QACF,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,MAAM;AAAA,MACN,OAAO;AAAA,MACP,IAAI;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,CAAC;AAAA,MACV;AAAA,MACA,WAAW;AAAA,IACf;AACA,WAAO,cAAc,WAAW,iBAAiB;AAAA,EACrD;AAAA,EAEA,MAAM,UAAkB,MAAsB,iBAA0C;AACpF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,SAAK,OAAO,MAAM,QAAQ,aAAa,SAAS,UAAU,OAAO;AAEjE,WAAO;AAAA,EACX;AACJ;;;AC3CO,IAAM,eAAN,cAA2B,iBAAiB;AAAA,EACxC,UAAU,UAA8B;AAXnD;AAYQ,QAAI,aAAa,aAAa,YAAY,UAAU,QAAQ;AAE5D,QAAI,eAAe;AACnB,QAAI,aAAa;AACjB,QAAI,kBAAkB;AAGtB,QAAI,WAAW,SAAS,KAAK,GAAG;AAC5B,wBAAkB;AAElB,UAAI,eAAc,gBAAW,MAAM,2BAA2B,MAA5C,mBAAgD;AAClE,UAAI,gBAAgB,QAAW;AAC3B,YAAI,eAAc,iBAAY,MAAM,WAAW,MAA7B,mBAAiC;AACnD,uBAAe,gBAAgB,SAAY,SAAS,WAAW,IAAI;AAAA,MACvE;AAAA,IACJ,OAAO;AACH,UAAI,eAAc,gBAAW,MAAM,eAAe,MAAhC,mBAAoC;AAEtD,UAAI,gBAAgB,QAAW;AAC3B,YAAI,eAAc,iBAAY,MAAM,SAAS,MAA3B,mBAA+B;AACjD,YAAI,gBAAgB,QAAW;AAC3B,yBAAe,SAAS,WAAW;AAAA,QACvC;AAAA,MACJ,OAAO;AACH,cAAMC,qBAAoB;AAAA,UACtB,MAAM;AAAA,YACF,MAAM;AAAA,YACN,OAAO;AAAA,UACX;AAAA,QACJ;AACA,eAAO,cAAc,WAAWA,kBAAiB;AAAA,MACrD;AAAA,IACJ;AACA,iBAAa,WAAW,SAAS,GAAG,IAAI,aAAa;AAErD,QAAI,WAAW,aAAa,SAAS,UAAU,MAAM,CAAC;AAEtD,UAAM,oBAAoB;AAAA,MACtB,MAAM;AAAA,QACF,MAAM;AAAA,QACN,OAAO;AAAA,MACX;AAAA,MACA,MAAM;AAAA,MACN,OAAO;AAAA,MACP,IAAI;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK,CAAC;AAAA,MACV;AAAA,MACA,WAAW;AAAA,IACf;AACA,WAAO,cAAc,WAAW,iBAAiB;AAAA,EACrD;AAAA,EAEO,SAAS,UAAkB,MAAiC;AAlEvE;AAmEQ,QAAI,YAAuB;AAAA,MACvB,QAAQ;AAAA,MACR,SAAS;AAAA,IACb;AAEA,QAAI,YAAY,aAAa,YAAY,UAAU,QAAQ;AAE3D,QAAI,eAAc,eAAU,MAAM,WAAW,MAA3B,mBAA+B;AACjD,QAAI,gBAAgB,QAAW;AAC3B,qBAAc,iBAAY,MAAM,QAAQ,MAA1B,mBAA8B;AAC5C,UAAI,gBAAgB,QAAW;AAC3B,kBAAU,SAAS,SAAS,WAAW;AAAA,MAC3C;AAAA,IACJ;AAEA,QAAI,gBAAe,eAAU,MAAM,cAAc,MAA9B,mBAAkC;AACrD,QAAI,iBAAiB,QAAW;AAC5B,sBAAe,kBAAa,MAAM,SAAS,MAA5B,mBAAgC;AAC/C,UAAI,iBAAiB,QAAW;AAC5B,kBAAU,UAAU,SAAS,YAAY;AAAA,MAC7C;AAAA,IACJ;AAEA,QAAI,UAAU,WAAW,CAAC,UAAU,QAAQ;AACxC,gBAAU,SAAS,EAAE,KAAK,OAAO,OAAO,OAAO,OAAO,UAAU;AAAA,IACpE;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,UAAkB,MAAsB,iBAA0C;AACpF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,QAAI,SAAS,eAAe,OAAO,GAAG;AAClC,WAAK,OAAO,OAAO,SAAS,UAAU,cAAc,aAAa,YAAY,UAAU,OAAO;AAAA,IAClG,OAAO;AACH,WAAK,OAAO,OAAO,SAAS,UAAU,cAAc,aAAa,YAAY,UAAU,UAAU;AAAA,IACrG;AAEA,SAAK,OAAO,OAAO,QAAQ,KAAK,SAAS,UAAU,IAAI;AAEvD,WAAO;AAAA,EACX;AACJ;;;AC3GO,IAAM,YAAN,cAAiC,OAAgB;AAAA,EAI7C,YAAY,WAAyC,UAA2B;AACnF,UAAM;AAEN,SAAK,cAAc;AAEnB,SAAK,QAAQ,oBAAI,IAAI;AACrB,eAAW,EAAE,KAAK,MAAM,KAAK,UAAU;AACnC,WAAK,MAAM,IAAI,KAAK,KAAK;AAAA,IAC7B;AAAA,EACJ;AAAA,EAEO,MAAM,UAAkB,MAAe,iBAAmC;AAC7E,QAAI;AACJ,QAAI,OAAO,KAAK,gBAAgB,YAAY;AACxC,YAAM,KAAK,YAAY,QAAQ;AAAA,IACnC,OAAO;AACH,YAAM,KAAK;AACX,YAAM,aAAa,YAAY,UAAU,GAAG;AAAA,IAChD;AAEA,UAAM,SAAS,KAAK,MAAM,IAAI,GAAG;AACjC,QAAI,WAAW,QAAW;AACtB,cAAQ,KAAK,6CAA6C,MAAM;AAChE,aAAO;AAAA,IACX;AACA,WAAO,OAAO,MAAM,UAAU,MAAM,eAAe;AAAA,EACvD;AACJ;;;ACtBO,IAAM,iBAAN,cAA6B,aAAa;AAAA,EAA1C;AAAA;AAGH,SAAO,QAAQ,CAAC,aAAa;AAAA;AAAA,EAE7B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,SAAS,KAAK,WAAW,WAAW,eAAe,QAAQ;AAAA,EAChG;AAAA,EAEA,iBAAiC;AAC7B,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,QAAQ,cAAc,WAAW,EAAC,MAAM,UAAU,WAAW,UAAS,CAAC;AAAA,QACvE,YAAY,cAAc,eAAe,EAAC,QAAQ,EAAC,CAAC;AAAA,QACpD,MAAM;AAAA,UACF,aAAa;AAAA,YACT,OAAO;AAAA,YACP,KAAK;AAAA,UACT;AAAA,UACA,SAAS;AAAA,YACL,OAAO;AAAA,YACP,KAAK;AAAA,UACT;AAAA,QACJ;AAAA,QACA,OAAO;AAAA,UACH,UAAU;AAAA,UACV,QAAQ;AAAA,YACJ,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,SAAS;AAAA,UACb;AAAA,UACA,IAAI;AAAA,YACA,OAAO;AAAA,YACP,MAAM;AAAA,YACN,KAAK,CAAC;AAAA,UACV;AAAA,UACA,OAAO;AAAA,YACH,aAAa;AAAA,YACb,WAAW;AAAA,YACX,YAAY;AAAA,YACZ,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,QACA,OAAO;AAAA,UACH,OAAO;AAAA,QACX;AAAA,QACA,QAAQ;AAAA,UACJ,QAAQ;AAAA,YACJ,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,SAAS;AAAA,YACT,WAAW;AAAA,UACf;AAAA,UACA,OAAO;AAAA,YACH,QAAQ;AAAA,YACR,SAAS;AAAA,UACb;AAAA,QACJ;AAAA,QACA,UAAU;AAAA,QACV,aAAa;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,iBAAiB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AACjG,SAAK,uBAAuB,aAAa,6BAA6B,cAAc;AACpF,SAAK,mBAAmB,aAAa,uBAAuB,gBAAgB,WAAW,QAAQ;AAAA,EACnG;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,UAAU,MAAM,aAAa,oBAAoB,YAAY,WAAW,KAAK,oBAAoB;AAEvG,cAAQ,UAAU,MAAM,aAAa,gBAAgB,GAAG,UAAU,wCAAwC,IAAI;AAC9G,cAAQ,aAAa,MAAM,aAAa,gBAAgB,GAAG,UAAU,2CAA2C,IAAI;AAEpH,YAAM,SAAS,IAAI,UAA0B,iBAAiB,eAAe;AAAA,QACzE,EAAE,KAAK,SAAS,OAAO,IAAI,aAAa,EAAE;AAAA,QAC1C,EAAE,KAAK,SAAS,OAAO,IAAI,YAAY,EAAE;AAAA,QACzC,EAAE,KAAK,UAAU,OAAO,IAAI,aAAa,EAAE;AAAA,MAC/C,CAAC;AAED,UAAI,QAA0B,CAAC;AAC/B,UAAI,YAAY,WAAW,WAAW;AACtC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AAEzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,GAAG,KAAK,gBAAgB;AAE9E,aAAK,SAAS,QAAQ,KAAK,OAAO,aAAa;AAE/C,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;AC5HO,IAAM,kBAAN,cAA8B,yBAAwC;AAAA,EACzE,MAAM,UAAkB,MAAoC;AACxD,WAAO,MAAM,MAAM,UAAU,IAAI;AAEjC,SAAK,OAAO,MAAM,QAAQ,aAAa,SAAS,UAAU,SAAS,CAAC;AACpE,SAAK,OAAO,MAAM,MAAM,aAAa,YAAY,UAAU,OAAO,EAAE,SAAS,GAAG;AAEhF,WAAO;AAAA,EACX;AACJ;;;ACNO,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAAzC;AAAA;AAGH,SAAO,QAAQ,CAAC,WAAW;AAAA;AAAA,EAE3B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,QAAQ,KAAK,WAAW,UAAU,eAAe,OAAO;AAAA,EAC7F;AAAA,EAEA,iBAAgC;AAC5B,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,YAAY,cAAc,eAAe,EAAC,QAAQ,GAAG,UAAU,MAAM,UAAU,MAAK,CAAC;AAAA,QACrF,OAAO;AAAA,UACH,OAAO;AAAA,UACP,KAAK;AAAA,UACL,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,gBAAgB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAChG,SAAK,uBAAuB,aAAa,6BAA6B,aAAa;AACnF,SAAK,oBAAoB,aAAa,uBAAuB,eAAe,UAAU,OAAO;AAAA,EACjG;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,UAAU,MAAM,aAAa,oBAAoB,YAAY,SAAS,KAAK,oBAAoB;AAErG,YAAM,SAAS,IAAI,gBAAgB;AAEnC,UAAI,QAAyB,CAAC;AAC9B,UAAI,YAAY,WAAW,UAAU;AACrC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AACzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,CAAC;AACvD,cAAM,WAAW,aAAa,YAAY,UAAU,UAAU,EAAE,YAAY;AAC5E,aAAK,OAAO,aAAa,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAE/E,aAAK,SAAS,QAAQ,UAAU;AAEhC,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACrEO,IAAM,eAAN,cAA2B,aAAa;AAAA,EAAxC;AAAA;AACH,SAAO,QAAQ,CAAC,UAAU;AAAA;AAAA,EAE1B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,OAAO,KAAK,WAAW,SAAS,eAAe,MAAM;AAAA,EAC1F;AAAA,EAEA,iBAA+B;AAC3B,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,YAAY,cAAc,eAAe,EAAC,QAAQ,GAAG,UAAU,MAAM,UAAU,MAAK,CAAC;AAAA,QACrF,SAAS;AAAA,QACT,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,OAAO;AAAA,UACH,QAAQ;AAAA,UACR,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,eAAe,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAC/F,SAAK,uBAAuB,aAAa,6BAA6B,YAAY;AAClF,SAAK,oBAAoB,aAAa,uBAAuB,cAAc,SAAS,MAAM;AAAA,EAC9F;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,UAAI,YAA4B,CAAC;AACjC,UAAI,YAAY,WAAW,SAAS;AACpC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AACzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,aAAa,YAAY,UAAU,YAAY,EAAE,MAAM,cAAc;AACrE;AAAA,QACJ;AAEA,YAAI,OAAO,KAAK,eAAe;AAC/B,aAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AACrD,aAAK,OAAO,aAAa,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAE/E,aAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAC7H,aAAK,OAAO,WAAW,SAAS;AAChC,aAAK,OAAO,WAAW,eAAe,aAAa,YAAY,UAAU,OAAO;AAChF,aAAK,OAAO,WAAW,OAAO,aAAa,SAAS,UAAU,QAAQ,CAAC;AAEvE,YAAI,YAAY,aAAa,YAAY,UAAU,eAAe,IAAI;AACtE,YAAI,cAAc,UAAa,cAAc,MAAM;AAC/C,eAAK,OAAO,KAAK,aAAa,SAAS,WAAW,MAAM,CAAC;AACzD,eAAK,OAAO,SAAS,aAAa,SAAS,WAAW,UAAU,CAAC;AAEjE,cAAI,aAAa,aAAa,YAAY,WAAW,cAAc,EAAE;AACrE,cAAI,WAAW,SAAS,GAAG;AACvB,gBAAI,WAAW,SAAS,GAAG,GAAG;AAC1B,mBAAK,OAAO,aAAa;AAAA,YAC7B,WAAW,WAAW,SAAS,GAAG,GAAG;AACjC,mBAAK,OAAO,aAAa;AAAA,YAC7B,WAAW,WAAW,SAAS,GAAG,GAAG;AACjC,mBAAK,OAAO,aAAa;AAAA,YAC7B;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,uBAAuB;AAC3B,YAAI,YAAY,KAAK,KAAK,YAAY;AACtC,SAAC,WAAW,UAAU,SAAS,EAAE,QAAQ,CAAC,YAAY;AAClD,iCAAuB,wBAAwB,UAAU,SAAS,OAAO;AAAA,QAC7E,CAAC;AAED,YAAI,sBAAsB;AACtB,cAAI,cAAc,aAAa,SAAS,CAACC,UAAS;AAC9C,gBAAI,CAACA,SAAQ,CAACA,MAAK;AAAM,qBAAO;AAEhC,mBAAOA,MAAK,SAAS,YAAYA,MAAK,KAAK,YAAY,MAAM;AAAA,UACjE,CAAC;AAED,cAAI,eAAe,QAAQ,YAAY,YAAY,KAAK,MAAM;AAC1D,kBAAM,aAAa,YAAY,KAAK;AACpC,iBAAK,OAAO,SAAS,WAAW,OAAO,OAAO;AAC9C,iBAAK,OAAO,KAAI,WAAW,OAAO,OAAO,GAAG;AAAA,UAChD;AAAA,QACJ;AAIA,aAAK,OAAO,WAAW,QAAQ,OAAO;AAEtC,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,kBAAU,KAAK,IAAI;AAAA,MACvB;AAEA,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,aAAa;AACjB,YAAI,OAAO,UAAU;AAErB,YAAI,YAAY,KAAK,KAAK,MAAM,GAAG;AACnC,YAAI,UAAU,SAAS,GAAG;AACtB,uBAAa,UAAU,GAAG,KAAK;AAAA,QACnC;AAEA,YAAI,SAAS,MAAM,aAAa,gBAAgB,GAAG,UAAU,gCAAgC,cAAc,IAAI;AAE/G,aAAK,SAAS,OAAO;AAAA,MACzB;AAGA,aAAO,MAAM,KAAK,OAAO,SAAS;AAAA,IACtC;AAAA;AACJ;;;AChIO,IAAM,gBAAN,cAA4B,yBAA+C;AAAA,EAC9E,MAAM,UAAkB,MAAkD;AACtE,WAAO,MAAM,MAAM,UAAU,IAAI;AAEjC,SAAK,OAAO,OAAO;AAEnB,SAAK,OAAO,cAAc,aAAa,YAAY,UAAU,OAAO;AAEpE,SAAK,OAAO,KAAK,aAAa,SAAS,UAAU,MAAM,CAAC;AACxD,SAAK,OAAO,WAAW,aAAa,SAAS,UAAU,YAAY,CAAC;AAEpE,SAAK,OAAO,WAAW,QAAQ,OAAO,aAAa,SAAS,UAAU,WAAW,CAAC;AAElF,WAAO;AAAA,EACX;AACJ;;;ACZO,IAAM,cAAN,cAA0B,aAAa;AAAA,EAAvC;AAAA;AAGH,SAAO,QAAQ,CAAC,aAAa;AAAA;AAAA,EAE7B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,aAAa,KAAK,WAAW,eAAe,eAAe,WAAW;AAAA,EAC3G;AAAA,EAEA,iBAAuC;AACnC,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,YAAY,cAAc,eAAe,EAAC,QAAQ,GAAG,UAAU,KAAI,CAAC;AAAA,QACpE,MAAM;AAAA,QACN,aAAa;AAAA,QACb,WAAW;AAAA,QACX,UAAU;AAAA,QACV,IAAI;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,kBAAkB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAElG,SAAK,wBAAwB,aAAa,uBAAuB,iBAAiB,eAAe,WAAW;AAAA,EAChH;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,SAAS,IAAI,cAAc;AAEjC,UAAI,QAAgC,CAAC;AACrC,UAAI,YAAY,WAAW,eAAe;AAC1C,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AAEzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,CAAC;AACvD,aAAK,OAAO,aAAa,qBAAqB,KAAK,uBAAuB,KAAK,IAAI;AAEnF,YAAI,aAAa,KAAK,OAAO,gBAAgB,SAAY,KAAK,OAAO,cAAc;AACnF,YAAI,WAAW,SAAS,GAAG,GAAG;AAC1B,cAAI,YAAY,WAAW,MAAM,GAAG;AACpC,uBAAa,UAAU;AAAA,QAC3B;AAEA,YAAI,SAAS,MAAM,aAAa,gBAAgB,GAAG,UAAU,gCAAgC,cAAc,IAAI;AAE/G,aAAK,SAAS,OAAO;AAErB,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;AC3EO,IAAM,kBAAN,cAA8B,eAA8B;AAAA,EACxD,MAAM,UAAkB,MAAqB,iBAAyC;AACzF,SAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AAErD,SAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAC7H,SAAK,OAAO,WAAW,aAAa,YAAY,UAAU,UAAU,EAAE,YAAY;AAElF,QAAI,SAAS,aAAa,YAAY,UAAU,QAAQ;AACxD,QAAI,WAAW,KAAK;AAChB,WAAK,OAAO,OAAO,OAAO,KAAK,OAAO;AACtC,WAAK,OAAO,OAAO,OAAO,KAAK,QAAQ;AAAA,IAC3C,WAAW,WAAW,KAAK;AACvB,WAAK,OAAO,OAAO,OAAO,KAAK,OAAO;AACtC,WAAK,OAAO,OAAO,OAAO,KAAK,QAAQ;AAAA,IAC3C;AAEA,QAAI,WAAW,aAAa,YAAY,UAAU,UAAU;AAC5D,QAAI,aAAa,KAAK;AAClB,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,KAAK;AACzB,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,KAAK;AACzB,WAAK,OAAO,WAAW;AAAA,IAC3B;AAEA,QAAI,QAAQ,aAAa,YAAY,UAAU,IAAI;AACnD,QAAI,MAAM,SAAS,GAAG,KAAK,MAAM,SAAS,GAAG,GAAG;AAC5C,WAAK,OAAO,QAAQ,SAAS,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC;AAAA,IACjE;AAEA,QAAI,QAAQ,aAAa,YAAY,UAAU,OAAO;AACtD,QAAI,UAAU,KAAK;AACf,WAAK,OAAO,QAAQ;AAAA,IACxB,WAAW,UAAU,OAAO;AACxB,WAAK,OAAO,QAAQ;AAAA,IACxB,WAAW,UAAU,WAAW;AAC5B,WAAK,OAAO,QAAQ;AAAA,IACxB;AAEA,QAAI,OAAO,aAAa,YAAY,UAAU,MAAM;AACpD,QAAI,SAAS,KAAK;AACd,WAAK,OAAO,OAAO;AAAA,IACvB,WAAW,SAAS,KAAK;AACrB,WAAK,OAAO,OAAO;AAAA,IACvB;AAEA,QAAI,iBAAiB;AACjB,YAAM,WAAW,aAAa,YAAY,UAAU,MAAM;AAC1D,WAAK,OAAO,aAAa,qBAAqB,iBAAiB,QAAQ;AACvE,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,iBAAiB,QAAQ;AAAA,IAClJ;AAEA,WAAO;AAAA,EACX;AACJ;;;ACvDO,IAAM,oBAAN,cAAgC,gBAAgB;AAAA,EACnD,MAAM,UAAkB,MAAqB,iBAAyC;AAClF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,QAAI,aAAa,aAAa,YAAY,UAAU,YAAY;AAKhE,QAAI,eAAe,QAAW;AAC1B,mBAAa;AAAA,IACjB;AAGA,SAAK,OAAO,OAAO,OAAO,WAAW,SAAS,UAAU,IAAI,aAAa;AAEzE,WAAO;AAAA,EACX;AACJ;;;AClBO,IAAM,0BAAN,cAAsC,gBAAgB;AAAA,EACzD,MAAM,UAAkB,MAAqB,iBAAyC;AAClF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAOlD,QAAI,aAAa,aAAa,YAAY,UAAU,cAAc,EAAE;AACpE,QAAI,eAAe,QAAW;AAC1B,mBAAa;AAAA,IACjB;AAEA,SAAK,OAAO,aAAa,gBAAgB,WAAW,SAAS,eAAe;AAG5E,SAAK,OAAO,aAAa,SAAS,WAAW,SAAS,QAAQ;AAC9D,QAAI,KAAK,OAAO,aAAa,QAAQ;AACjC,WAAK,OAAO,OAAO,QAAQ,OAAO;AAClC,WAAK,OAAO,OAAO,QAAQ,YAAY;AACvC,WAAK,OAAO,OAAO,QAAQ,aAAa;AAAA,IAC5C;AAEA,SAAK,OAAO,aAAa,WAAW,WAAW,SAAS,UAAU;AAClE,QAAI,KAAK,OAAO,aAAa,UAAU;AACnC,WAAK,OAAO,OAAO,QAAQ,OAAO;AAClC,WAAK,OAAO,OAAO,QAAQ,YAAY;AACvC,WAAK,OAAO,OAAO,QAAQ,aAAa;AAAA,IAC5C;AACA,SAAK,OAAO,aAAa,WAAW,WAAW,SAAS,UAAU;AAClE,QAAI,KAAK,OAAO,aAAa,UAAU;AACnC,WAAK,OAAO,OAAO,QAAQ,OAAO;AAAA,IACtC;AAEA,WAAO;AAAA,EACX;AACJ;;;ACrCO,IAAM,sBAAN,cAAkC,gBAAgB;AAAA,EACrD,MAAM,UAAkB,MAAqB,iBAAyC;AAClF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,QAAI,aAAa,aAAa,YAAY,UAAU,YAAY;AAKhE,QAAI,eAAe,QAAW;AAC1B,mBAAa;AAAA,IACjB;AAEA,QAAI,KAAK,OAAO,SAAS,QAAQ;AAC7B,WAAK,OAAO,OAAO,QAAQ,OAAO;AAClC,WAAK,OAAO,OAAO,QAAQ,YAAY;AACvC,WAAK,OAAO,OAAO,QAAQ,aAAa;AAAA,IAC5C,WAAW,KAAK,OAAO,SAAS,YAAY;AACxC,WAAK,OAAO,OAAO,QAAQ,OAAO;AAClC,WAAK,OAAO,OAAO,QAAQ,YAAY;AACvC,WAAK,OAAO,OAAO,QAAQ,aAAa;AAAA,IAC5C;AAEA,WAAO;AAAA,EACX;AACJ;;;ACzBO,IAAM,yBAAN,cAAqC,gBAAgB;AAAA,EACxD,MAAM,UAAkB,MAAqB,iBAAyC;AAClF,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,QAAI,aAAa,aAAa,YAAY,UAAU,YAAY;AAKhE,QAAI,eAAe,QAAW;AAC1B,mBAAa;AAAA,IACjB;AAEA,SAAK,OAAO,UAAU,UAAU,WAAW,SAAS,SAAS;AAC7D,QAAI,CAAC,KAAK,OAAO,UAAU,SAAS;AAChC,WAAK,OAAO,OAAO,QAAQ,OAAO;AAClC,WAAK,OAAO,OAAO,QAAQ,YAAY;AACvC,WAAK,OAAO,OAAO,QAAQ,aAAa;AAAA,IAC5C;AAEA,SAAK,OAAO,UAAU,WAAW,WAAW,SAAS,UAAU;AAE/D,QAAI,WAAW,SAAS,SAAS,GAAG;AAChC,WAAK,OAAO,UAAU,OAAO;AAAA,IACjC,WAAW,WAAW,SAAS,aAAa,GAAG;AAC3C,WAAK,OAAO,UAAU,OAAO;AAAA,IACjC,WAAW,WAAW,SAAS,MAAM,GAAG;AACpC,WAAK,OAAO,UAAU,OAAO;AAAA,IACjC;AAEA,WAAO;AAAA,EACX;AACJ;;;ACxBO,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAAzC;AAAA;AAGH,SAAO,QAAQ,CAAC,YAAY;AAAA;AAAA,EAE5B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,QAAQ,KAAK,WAAW,UAAU,eAAe,OAAO;AAAA,EAC7F;AAAA,EAEA,iBAAgC;AAC5B,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,QAAQ,cAAc,WAAW;AAAA,UAC7B,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,UACP,QAAQ,cAAc,WAAW,EAAC,MAAM,EAAC,MAAM,IAAI,OAAO,GAAE,EAAC,CAAC;AAAA,QAAC,CAAC;AAAA,QACpE,OAAO;AAAA,QACP,UAAU;AAAA,QACV,MAAM;AAAA,QACN,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,UACJ,MAAM;AAAA,QACV;AAAA,QACA,WAAW;AAAA,UACP,SAAS;AAAA,UACT,MAAM;AAAA,UACN,UAAU;AAAA,QACd;AAAA,QACA,UAAU;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,QACA,cAAc;AAAA,UACV,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,eAAe;AAAA,UACf,UAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,gBAAgB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAChG,SAAK,uBAAuB,aAAa,6BAA6B,aAAa;AACnF,SAAK,mBAAmB,aAAa,uBAAuB,eAAe,UAAU,OAAO;AAAA,EAChG;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,UAAU,MAAM,aAAa,oBAAoB,YAAY,UAAU,KAAK,oBAAoB;AAEtG,YAAM,SAAS,IAAI,UAAyB,YAAY;AAAA,QACpD,EAAE,KAAK,UAAU,OAAO,IAAI,kBAAkB,EAAE;AAAA,QAChD,EAAE,KAAK,gBAAgB,OAAO,IAAI,wBAAwB,EAAE;AAAA,QAC5D,EAAE,KAAK,YAAY,OAAO,IAAI,oBAAoB,EAAE;AAAA,QACpD,EAAE,KAAK,aAAa,OAAO,IAAI,uBAAuB,EAAE;AAAA,QACxD,EAAE,KAAK,UAAU,OAAO,IAAI,gBAAgB,EAAE;AAAA,QAC9C,EAAE,KAAK,gBAAgB,OAAO,IAAI,gBAAgB,EAAE;AAAA,QACpD,EAAE,KAAK,WAAW,OAAO,IAAI,gBAAgB,EAAE;AAAA,MACnD,CAAC;AAED,UAAI,QAAyB,CAAC;AAC9B,UAAI,YAAY,WAAW,UAAU;AACrC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AACzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,GAAG,KAAK,gBAAgB;AAE9E,aAAK,SAAS,QAAQ,KAAK,OAAO,UAAU;AAE5C,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACvGO,IAAM,oBAAN,cAAgC,eAAgC;AAAA,EAC5D,MAAM,UAAkB,MAAuB,iBAAmC;AAErF,SAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AAErD,SAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAE7H,SAAK,OAAO,OAAO,aAAa,YAAY,UAAU,UAAU,MAAM,aAAa,aAAa;AAEhG,QAAI,iBAAiB;AACjB,YAAM,WAAW,aAAa,YAAY,UAAU,MAAM;AAE1D,WAAK,OAAO,aAAa,qBAAqB,iBAAiB,QAAQ;AACvE,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,iBAAiB,QAAQ;AAAA,IAClJ;AAEA,WAAO;AAAA,EACX;AACJ;;;ACfO,IAAM,kBAAN,cAA8B,aAAa;AAAA,EAA3C;AAAA;AAGH,SAAO,QAAQ,CAAC,eAAe;AAAA;AAAA,EAE/B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,WAAW,KAAK,WAAW,aAAa,eAAe,SAAS;AAAA,EACrG;AAAA,EAEA,iBAAkC;AAC9B,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,QAAQ,cAAc,WAAW;AAAA,UAC7B,QAAQ,cAAc,WAAW,EAAC,MAAM,EAAC,MAAM,IAAI,OAAO,GAAE,EAAC,CAAC;AAAA,QAClE,CAAC;AAAA,QACD,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,kBAAkB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAClG,SAAK,uBAAuB,aAAa,6BAA6B,eAAe;AACrF,SAAK,mBAAmB,aAAa,uBAAuB,iBAAiB,aAAa,SAAS;AAAA,EACvG;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,uBAAuB,CAAC;AAC9B,YAAM,UAAU,MAAM,aAAa,oBAAoB,YAAY,aAAa,KAAK,oBAAoB;AAEzG,YAAM,SAAS,IAAI,kBAAkB;AAErC,UAAI,QAA2B,CAAC;AAChC,UAAI,YAAY,WAAW,aAAa;AACxC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AAEzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,GAAG,KAAK,gBAAgB;AAE9E,YAAI,WAAW,aAAa,YAAY,UAAU,UAAU;AAE5D,aAAK,SAAS,QAAQ,SAAS,YAAY,GAAG;AAC9C,aAAK,OAAO,aAAa,qBAAqB,KAAK,kBAAkB,KAAK,IAAI;AAE9E,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACrEO,IAAM,wBAAN,cAAoC,eAAoC;AAAA,EAC3E,MAAM,UAAkB,MAA2B,iBAA+C;AAE9F,SAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AAErD,SAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAE7H,QAAI,OAAO,aAAa,YAAY,UAAU,IAAI;AAClD,QAAI,KAAK,SAAS,GAAG,KAAK,KAAK,SAAS,GAAG,GAAG;AAC1C,WAAK,OAAO,OAAO,SAAS,KAAK,UAAU,GAAG,KAAK,MAAM,CAAC;AAAA,IAC9D;AAEA,QAAI,WAAW,aAAa,YAAY,UAAU,UAAU;AAC5D,QAAI,aAAa,KAAK;AAClB,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,KAAK;AACzB,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,KAAK;AACzB,WAAK,OAAO,WAAW;AAAA,IAC3B;AAEA,QAAI,SAAS,aAAa,YAAY,UAAU,QAAQ;AACxD,YAAQ,QAAQ;AAAA,MACZ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,aAAK,OAAO,SAAS,OAAO,YAAY;AACxC;AAAA,MACJ;AACI,aAAK,OAAO,SAAS;AACrB;AAAA,IACR;AAEA,QAAI,iBAAiB;AACjB,YAAM,WAAW,aAAa,YAAY,UAAU,MAAM;AAE1D,WAAK,OAAO,aAAa,qBAAqB,iBAAiB,QAAQ;AACvE,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,iBAAiB,QAAQ;AAAA,IAClJ;AAEA,WAAO;AAAA,EACX;AACJ;;;AC1CO,IAAM,sBAAN,cAAkC,aAAa;AAAA,EAA/C;AAAA;AAGH,SAAO,QAAQ,CAAC,kBAAkB;AAAA;AAAA,EAElC,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,cAAc,KAAK,WAAW,gBAAgB,eAAe,aAAa;AAAA,EAC/G;AAAA,EAEA,iBAAsC;AAClC,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,QAAQ,cAAc,WAAW;AAAA,UAC7B,MAAM;AAAA,UACN,WAAW;AAAA,UACX,OAAO;AAAA,QACX,CAAC;AAAA,QACD,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAGA,QAAI,eAAe,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAC/F,SAAK,mBAAmB,aAAa,uBAAuB,cAAc,gBAAgB,aAAa;AAAA,EAC3G;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,SAAS,IAAI,sBAAsB;AACzC,YAAM,SAAS,MAAM,aAAa,gBAAgB,GAAG,UAAU,yCAAyC,IAAI;AAE5G,UAAI,QAA+B,CAAC;AACpC,UAAI,YAAY,WAAW,gBAAgB;AAC3C,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AACzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,GAAG,KAAK,gBAAgB;AAG9E,aAAK,SAAS,OAAO;AAGrB,aAAK,OAAO,aAAa,qBAAqB,KAAK,kBAAkB,KAAK,IAAI;AAE9E,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACzEO,IAAM,kBAAN,cAA8B,yBAA+B;AAAA,EAChE,MAAM,UAAkB,MAAY,iBAAgC;AAChE,WAAO,MAAM,MAAM,UAAU,MAAM,eAAe;AAElD,UAAM,UAAU,aAAa,YAAY,UAAU,OAAO,GAAG,EAAE,MAAM,iBAAiB;AACtF,QAAI,YAAY,MAAM;AAClB,WAAK,OAAO,UAAU,WAAW,QAAQ,EAAE;AAAA,IAC/C;AAEA,UAAM,WAAW,aAAa,YAAY,UAAU,YAAY,GAAG,EAAE,MAAM,SAAS;AACpF,QAAI,aAAa,MAAM;AACnB,WAAK,OAAO,WAAW,SAAS,SAAS,EAAE;AAAA,IAC/C;AAEA,WAAO;AAAA,EACX;AACJ;;;ACZO,IAAM,eAAN,cAA2B,aAAa;AAAA,EAAxC;AAAA;AAGH,SAAO,QAAQ,CAAC,iBAAiB,aAAa;AAAA;AAAA,EAE9C,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,YAAY,KAAK,WAAW,cAAc,eAAe,WAAW,KAC9F,WAAW,eAAe,UAAU,KAAK,WAAW,YAAY,eAAe,SAAS;AAAA,EACnG;AAAA,EAEA,0BAA6C;AAEzC,WAAO,iCAAI,KAAK,eAAe,IAAxB,EAA2B,MAAM,YAAW;AAAA,EACvD;AAAA,EAEA,wBAA2C;AAEvC,WAAO,iCAAI,KAAK,eAAe,IAAxB,EAA2B,MAAM,UAAS;AAAA,EACrD;AAAA,EAEA,iBAAuB;AACnB,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,YAAY,cAAc,eAAe,EAAC,QAAQ,EAAC,CAAC;AAAA,QACpD,OAAO;AAAA,UACH,OAAO;AAAA,UACP,KAAK;AAAA,UACL,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,WAAW;AAAA,QACf;AAAA,QACA,QAAQ,cAAc,WAAW;AAAA,QACjC,OAAO;AAAA,QACP,SAAS;AAAA,QACT,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB,UAAU;AACzB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,eAAe,aAAa,2BAA2B,aAAa,UAAU,QAAQ;AAEtF,QAAI,KAAK,MAAM,WAAW;AAAG,cAAQ,MAAM,+DAA+D;AAE9G,SAAK,uBAAuB,aAAa,6BAA6B,YAAY;AAElF,UAAM,EAAC,SAAS,QAAO,IAAI,aAAa,kBAChC,EAAC,SAAS,cAAc,SAAS,YAAW,IAC5C,EAAC,SAAS,YAAY,SAAS,UAAS;AAEhD,SAAK,mBAAmB,aAAa,uBAAuB,cAAc,SAAS,OAAO;AAAA,EAC9F;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,cAAc,IAAI,gBAAgB;AAExC,UAAI,MAAM,WAAW,eAAe,YAAY,IAAI,cAAc;AAClE,YAAM,UAAU,MAAM,aAAa,oBAAoB,YAAY,GAAG;AAEtE,YAAM,IAAI,YAAY;AACtB,UAAI,QAAgB,CAAC;AACrB,UAAI,YAAY,WAAW,MAAM,KAAK;AACtC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AAEzB,YAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,QACJ;AAEA,cAAM,cAAc,QAAQ,cAAc,KAAK,wBAAwB,IAAI,KAAK,sBAAsB;AACtG,YAAI,OAAO,YAAY,MAAM,UAAU,aAAa,KAAK,gBAAgB;AACzE,cAAM,WAAW,aAAa,YAAY,UAAU,UAAU;AAI9D,aAAK,SAAS,QAAQ,SAAS,YAAY,GAAG;AAI9C,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACtGO,IAAM,yBAAN,cAAqC,eAAqC;AAAA,EACtE,MAAM,UAAkB,MAA4B,iBAAgD;AAEvG,SAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AAErD,SAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,YAAY,UAAU,MAAM;AAC7H,SAAK,OAAO,WAAW,aAAa,YAAY,UAAU,UAAU,EAAE,YAAY;AAElF,QAAI,WAAW,aAAa,YAAY,UAAU,UAAU;AAC5D,QAAI,aAAa,UAAU;AACvB,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,WAAW;AAC/B,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,aAAa;AACjC,WAAK,OAAO,WAAW;AAAA,IAC3B,WAAW,aAAa,aAAa;AACjC,WAAK,OAAO,WAAW;AAAA,IAC3B,OAAO;AACD,WAAK,OAAO,WAAW;AAAA,IAC7B;AAEA,QAAI,QAAQ,aAAa,YAAY,UAAU,OAAO;AACtD,QAAI,UAAU,KAAK;AACf,WAAK,OAAO,QAAQ;AAAA,IACxB,WAAW,UAAU,OAAO;AACxB,WAAK,OAAO,QAAQ;AAAA,IACxB,WAAW,UAAU,WAAW;AAC5B,WAAK,OAAO,QAAQ;AAAA,IACxB,WAAW,UAAU,QAAQ;AAC1B,WAAK,OAAO,QAAQ;AAAA,IACvB,OAAO;AACL,WAAK,OAAO,QAAQ;AAAA,IACtB;AAEA,QAAI,OAAO,aAAa,YAAY,UAAU,MAAM;AACpD,QAAI,SAAS,KAAK;AACd,WAAK,OAAO,YAAY;AAAA,IAC5B,WAAW,SAAS,KAAK;AACrB,WAAK,OAAO,YAAY;AAAA,IAC5B;AAEA,QAAI,iBAAiB;AACjB,YAAM,WAAW,aAAa,YAAY,UAAU,MAAM;AAE1D,WAAK,OAAO,aAAa,qBAAqB,iBAAiB,QAAQ;AACvE,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,iBAAiB,QAAQ;AAAA,IAClJ;AAEA,WAAO;AAAA,EACX;AACJ;;;AC/CO,IAAM,uBAAN,cAAmC,aAAa;AAAA,EAAhD;AAAA;AAGH,SAAO,QAAQ,CAAC,mBAAmB;AAAA;AAAA,EAEnC,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,QAAQ,KAAK,WAAW,UAAU,eAAe,OAAO;AAAA,EAC7F;AAAA,EAEA,iBAAuC;AACnC,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,aAAa;AAAA,UACT,OAAO;AAAA,UACP,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,QACA,QAAQ,cAAc,WAAW;AAAA,UAC7B,QAAQ,cAAc,WAAW,EAAC,MAAM,EAAC,MAAM,IAAI,OAAO,GAAE,EAAC,CAAC;AAAA,QAClE,CAAC;AAAA,QACD,OAAO;AAAA,UACH,OAAO;AAAA,UACP,KAAK;AAAA,UACL,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,WAAW;AAAA,QACf;AAAA,QACA,UAAU;AAAA,QACV,WAAW;AAAA,QACX,OAAO;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,qBAAqB;AACjB,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,uBAAuB,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AACvG,SAAK,uBAAuB,aAAa,6BAA6B,oBAAoB;AAC1F,SAAK,mBAAmB,aAAa,uBAAuB,sBAAsB,UAAU,OAAO;AAAA,EACvG;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,SAAS,IAAI,uBAAuB;AAC1C,YAAM,SAAS,MAAM,aAAa,gBAAgB,GAAG,UAAU,0CAA0C,IAAI;AAE7G,UAAI,QAAgC,CAAC;AACrC,UAAI,YAAY,WAAW,UAAU;AACrC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAI,WAAW,UAAU;AAEzB,YAAI,OAAO,OAAO,MAAM,UAAU,KAAK,eAAe,GAAG,KAAK,gBAAgB;AAG9E,aAAK,SAAS,OAAO;AACrB,aAAK,OAAO,aAAa,qBAAqB,KAAK,kBAAkB,KAAK,IAAI;AAE9E,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAE7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAGA,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;AC1EO,IAAM,iBAAN,cAA6B,aAAa;AAAA,EAA1C;AAAA;AACH,SAAO,QAAQ,CAAC,UAAU;AAAA;AAAA,EAE1B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,OAAO,KAAK,WAAW,SAAS,eAAe,MAAM;AAAA,EAC1F;AAAA,EAEA,iBAAiC;AAC7B,WAAO,cAAc,eAAe;AAAA,EACxC;AAAA,EAEA,mBAAmB,UAAmB;AAClC,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,eAAe,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAC/F,SAAK,uBAAuB,aAAa,6BAA6B,YAAY;AAClF,SAAK,oBAAoB,aAAa,uBAAuB,cAAc,SAAS,MAAM;AAAA,EAC9F;AAAA,EAEA,qBAAqB,WAAW,QAAQ;AACpC,UAAM,UAAU,CAAC;AAEjB,eAAW,YAAY,WAAW;AAC9B,UAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC;AAAA,MACJ;AACA,YAAM,OAAO,KAAK,eAAe;AAEjC,WAAK,OAAO,aAAa,YAAY,UAAU,MAAM;AACrD,WAAK,OAAO,aAAa,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAE/E,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,UAAU,QAAQ,KAAK,aAAa,oBAAoB,KAAK,mBAAmB,aAAa,YAAY,UAAU,MAAM,GAAG,aAAa,YAAY,UAAU,MAAM,CAAC;AACnO,WAAK,OAAO,WAAW,SAAS,aAAa,SAAS,UAAU,gBAAgB,CAAC;AACjF,WAAK,OAAO,WAAW,eAAe,aAAa,YAAY,UAAU,OAAO;AAChF,WAAK,OAAO,WAAW,OAAO,aAAa,SAAS,UAAU,QAAQ,CAAC;AACvE,WAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,UAAU,kBAAkB,CAAC;AACjF,WAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,UAAU,YAAY,CAAC;AAG3E,WAAK,SAAS,OAAO;AAErB,cAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAG7D,cAAQ,KAAK,IAAI;AAAA,IACrB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,sBAAsB,YAAY,QAAQ;AACtC,UAAM,QAAQ,CAAC;AAEf,eAAW,aAAa,YAAY;AAChC,UAAI,aAAa,iBAAiB,SAAS,GAAG;AAC1C;AAAA,MACJ;AAEA,YAAM,OAAO,KAAK,eAAe;AAEjC,WAAK,OAAO,WAAW;AACvB,WAAK,OAAO,aAAa,YAAY,WAAW,MAAM;AACtD,WAAK,OAAO,aAAa,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAE/E,WAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,WAAW,QAAQ,KAAK,aAAa,oBAAoB,KAAK,mBAAmB,aAAa,YAAY,WAAW,MAAM,GAAG,aAAa,YAAY,WAAW,MAAM,CAAC;AACtO,WAAK,OAAO,WAAW,SAAS,aAAa,SAAS,WAAW,gBAAgB,CAAC;AAClF,WAAK,OAAO,WAAW,eAAe,aAAa,YAAY,WAAW,OAAO;AACjF,WAAK,OAAO,WAAW,OAAO,aAAa,SAAS,WAAW,QAAQ,CAAC;AAIxE,UAAI,UAAU,eAAe,gBAAgB,GAAG;AAC5C,cAAM,iBAAiB,aAAa,YAAY,WAAW,gBAAgB,EAAE,MAAM,GAAG;AACtF,cAAM,OAAO,OAAO,eAAe,EAAE;AACrC,cAAM,OAAO,OAAO,eAAe,EAAE;AACrC,cAAM,OAAO,OAAO,eAAe,EAAE;AACrC,cAAM,OAAO,OAAO,eAAe,EAAE;AACrC,aAAK,OAAO,KAAK,KAAK,QAAQ;AAC9B,aAAK,OAAO,KAAK,KAAK,QAAQ;AAC9B,aAAK,OAAO,KAAK,KAAK,QAAQ;AAC9B,aAAK,OAAO,KAAK,KAAK,QAAQ;AAAA,MAGlC,WAAW,UAAU,eAAe,QAAQ,GAAG;AAC3C,aAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,WAAW,UAAU,CAAC;AAC1E,aAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,WAAW,UAAU,CAAC;AAC1E,aAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,WAAW,kBAAkB,CAAC;AAClF,aAAK,OAAO,KAAK,KAAK,QAAQ,aAAa,SAAS,WAAW,YAAY,CAAC;AAAA,MAChF;AAGA,WAAK,SAAS,OAAO;AAErB,cAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAG7D,YAAM,KAAK,IAAI;AAAA,IACnB;AAEA,WAAO;AAAA,EACX;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,UAAI,UAAU,CAAC;AACf,YAAM,YAAY,WAAW,SAAS,QAAQ,OAAO,UAAQ,aAAa,YAAY,MAAM,YAAY,EAAE,MAAM,WAAW;AAC3H,YAAM,aAAa,WAAW,SAAS,QAAQ,OAAO,UAAQ,aAAa,YAAY,MAAM,YAAY,EAAE,MAAM,YAAY;AAE7H,UAAI,kBAAkB,MAAM,aAAa,gBAAgB,GAAG,UAAU,2BAA2B,KAAK,KAAK,SAAS,uBAAuB,KAAK,IAAI;AACpJ,UAAI,mBAAmB,MAAM,aAAa,gBAAgB,GAAG,UAAU,2BAA2B,KAAK,KAAK,SAAS,wBAAwB,KAAK,IAAI;AAEtJ,gBAAU,QAAQ,OAAO,KAAK,qBAAqB,WAAW,eAAe,CAAC;AAC9E,gBAAU,QAAQ,OAAO,KAAK,sBAAsB,YAAY,gBAAgB,CAAC;AAGjF,aAAO,MAAM,KAAK,OAAO,OAAO;AAAA,IACpC;AAAA;AAAA,EAIA,OAAO,iBAAiB,UAAmB;AACvC,QAAI,aAAa,iBAAiB,QAAQ,GAAG;AACzC,aAAO;AAAA,IACX;AAEA,UAAM,iBAAiB;AAAA,MACnB;AAAA,IACJ;AACA,WAAO,eAAe,SAAS,aAAa,YAAY,UAAU,IAAI,CAAC;AAAA,EAC3E;AACJ;;;ACnIO,IAAM,oBAAN,cAAgC,aAAa;AAAA,EAA7C;AAAA;AACH,SAAO,QAAQ,CAAC,UAAU;AAAA;AAAA,EAE1B,SAAS,YAA6B;AAClC,WAAO,WAAW,eAAe,OAAO,KAAK,WAAW,SAAS,eAAe,MAAM;AAAA,EAC1F;AAAA,EAEA,iBAAoC;AAChC,WAAO,cAAc,kBAAkB;AAAA,EAC3C;AAAA,EAEA,mBAAmB,UAAmB;AAClC,QAAI,CAAC,aAAa,UAAU;AACxB;AAAA,IACJ;AAEA,QAAI,eAAe,aAAa,2BAA2B,aAAa,UAAU,KAAK,MAAM,EAAE;AAC/F,SAAK,uBAAuB,aAAa,6BAA6B,YAAY;AAClF,SAAK,oBAAoB,aAAa,uBAAuB,cAAc,SAAS,MAAM;AAAA,EAC9F;AAAA,EAEM,gBAAgB,YAAY;AAAA;AAC9B,YAAM,QAAQ,CAAC;AAEf,iBAAW,aAAa,YAAY;AAChC,YAAI,aAAa,iBAAiB,SAAS,GAAG;AAC1C;AAAA,QACJ;AAGA,cAAM,WAAW,aAAa,kBAAkB,aAAa,YAAY,WAAW,UAAU,GAAG,KAAK,oBAAoB,EAAE,QAAQ,KAAK,GAAG;AAC5I,YAAI,iBAAiB,MAAM,aAAa,gBAAgB,GAAG,UAAU,2BAA2B,KAAK,KAAK,SAAS,UAAU,KAAK,YAAY,IAAI;AAElJ,cAAM,OAAO,KAAK,eAAe;AACjC,aAAK,OAAO,aAAa,YAAY,WAAW,MAAM;AACtD,aAAK,OAAO,aAAa,qBAAqB,KAAK,mBAAmB,KAAK,IAAI;AAE/E,aAAK,OAAO,YAAY,SAAS,GAAG,aAAa,YAAY,WAAW,QAAQ,KAAK,aAAa,oBAAoB,KAAK,mBAAmB,aAAa,YAAY,WAAW,MAAM,GAAG,aAAa,YAAY,WAAW,MAAM,CAAC;AACtO,aAAK,OAAO,WAAW,SAAS,aAAa,SAAS,WAAW,UAAU,CAAC;AAC5E,aAAK,OAAO,WAAW,eAAe,aAAa,YAAY,WAAW,OAAO;AACjF,aAAK,OAAO,WAAW,OAAO,aAAa,SAAS,WAAW,QAAQ,CAAC;AAGxE,aAAK,SAAS,eAAe;AAE7B,gBAAQ,gCAAgC,KAAK,MAAM,MAAM,IAAI;AAG7D,cAAM,KAAK,IAAI;AAAA,MACnB;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,kBAAkB,YAAY;AAC1B,UAAM,wBAAwB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,WAAO,WAAW,SAAS,QAAQ,OAAO,UAAQ,CAAC,sBAAsB,SAAS,aAAa,YAAY,MAAM,YAAY,EAAE,CAAC,CAAC;AAAA,EACrI;AAAA,EAEM,MAAM,YAAmC;AAAA;AAC3C,YAAM,aAAa,KAAK,kBAAkB,UAAU;AAEpD,YAAM,QAAQ,MAAM,KAAK,gBAAgB,UAAU;AAGnD,aAAO,MAAM,KAAK,OAAO,KAAK;AAAA,IAClC;AAAA;AACJ;;;ACnEO,IAAM,UAAN,cAAqB,YAAY;AAAA,EAQpC,cAAc;AACV,UAAM;AARV,SAAQ,qBAA+B,CAAC;AACxC,SAAQ,YAAoB,CAAC;AAE7B,SAAQ,cAAwB,CAAC;AACjC,SAAQ,sBAA+B;AA+FvC,sBAAa,CAAC,SAAwB;AAClC,aAAO,KAAK,mBAAmB,KAAK,CAAC,cAAc,cAAc,KAAK,IAAI;AAAA,IAC9E;AAEA,0BAAiB,CAAC,SAAwB;AACtC,YAAM,UAAU;AAChB,aAAO,KAAK,KAAK,MAAM,OAAO,MAAM;AAAA,IACxC;AAhGI,SAAK,+BAA+B;AAAA,EACxC;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AACb,YAAQ,UAAU,CAAC,OAAO,cAAc,YAAY;AACpD,YAAQ,QAAQ;AAChB,YAAQ,WAAW;AACnB,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,SAAe;AACnB,UAAM,OAAO,MAAM,QAAQ,OAAO;AAElC,SAAK,YAAY,CAAC;AAClB,SAAK,mBAAmB,QAAQ,CAAC,sBAA8B;AAC3D,YAAM,UAAU,CAAC,KAAK,UAAU,KAAK,CAAC,aAAa,sBAAsB,SAAS,IAAI;AACtF,YAAM,SAAS,KAAK,YAAY,KAAK,CAAC,mBAAmB,sBAAsB,cAAc;AAC7F,YAAM,UAAU,sBAAsB,KAAK;AAE3C,WAAK,UAAU,qBAAqB;AAAA,QAChC,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,SAAK,eAAe,KAAK,eAAe,KAAK,aAAa,OAAO;AACjE,SAAK,yBAAyB,KAAK,mBAAmB,WAAW,KAAK,YAAY;AAClF,SAAK,sBAAsB,KAAK;AAEhC,WAAO,mBAAK;AAAA,EAChB;AAAA,EAEQ,iCAAiC;AACrC,SAAK,qBAAqB,CAAC;AAC3B,YAAO,UAAU,QAAQ,cAAY;AACjC,UAAI,KAAK,mBAAmB,KAAK,eAAa,SAAS,MAAM,SAAS,SAAS,CAAC,GAAG;AAC/E;AAAA,MACJ;AACA,WAAK,qBAAqB,KAAK,mBAAmB,OAAO,SAAS,KAAK;AAAA,IAC3E,CAAC;AAAA,EACL;AAAA,EAEQ,qBAAqB;AACzB,SAAK,cAAc,CAAC;AAAA,EACxB;AAAA,EAiBM,SAAS,WAAW,UAAU;AAAA;AAChC,UAAI,aAAa,MAAM,aAAa,SAAS,SAAS;AACtD,mBAAa,mBAAsB;AAEnC,iBAAW,MAAM,QAAO,WAAW;AAC/B,YAAI,GAAG,SAAS,UAAU,GAAG;AACzB,aAAG,mBAAmB,QAAQ;AAC9B,gBAAM,GAAG,MAAM,UAAU;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAEM,aAAa,WAAW;AAAA;AAC1B,UAAI,CAAC,WAAW;AACZ;AAAA,MACJ;AACA,UAAI,aAAa,MAAM,aAAa,SAAS,SAAS;AAEtD,UAAI,aAAa,aAAa,UAAU,GAAG;AACvC,qBAAa,iBAAiB,UAAU;AAAA,MAC5C;AAAA,IACJ;AAAA;AAAA,EAWA,kBAAkB,MAAM;AACpB,SAAK,KAAK,uBAAuB,EAAE,GAAG,SAAS,CAAO,UAAU;AAC5D,YAAM,eAAe;AAErB,WAAK,mBAAmB;AACxB,WAAK,sBAAsB;AAE3B,YAAM,KAAK,OAAO;AAElB,UAAI,KAAK,cAAc;AACnB,cAAM,OAAO,MAAM,KAAK,aAAa,KAAK;AAC1C,cAAM,KAAK,aAAa,IAAI;AAAA,MAChC;AAKA,iBAAW,iBAAiB,KAAK,oBAAoB;AAEjD,cAAM,WAAW,KAAK,UAAU,KAAK,CAACC,cAAaA,UAAS,SAAS,aAAa;AAClF,YAAI,UAAU;AACV,gBAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,eAAK,oBAAoB,SAAS;AAClC,gBAAM,KAAK,OAAO;AAGlB,gBAAM,KAAK,SAAS,MAAM,SAAS,IAAI;AAGvC,cAAI,CAAC,KAAK,YAAY,KAAK,CAAC,mBAAmB,mBAAmB,SAAS,IAAI,GAAG;AAC9E,iBAAK,YAAY,KAAK,SAAS,IAAI;AAAA,UACvC;AAEA,gBAAM,KAAK,OAAO;AAAA,QACtB;AAAA,MACJ;AAEA,WAAK,sBAAsB;AAE3B,YAAM,KAAK,OAAO;AAAA,IACtB,EAAC;AAED,SAAK,KAAK,qCAAqC,EAAE,GAAG,UAAU,CAAO,UAAU;AAC3E,YAAM,KAAK,MAAM,OAAO,KAAK,EAAE,QAAQ,CAAC,SAAe;AACnD,YAAI,KAAK,eAAe,IAAI,GAAG;AAC3B,eAAK,eAAe;AACpB,eAAK,OAAO;AAAA,QAChB;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX,EAAC;AAED,SAAK,KAAK,iCAAiC,EAAE,GAAG,UAAU,CAAO,UAAU;AACvE,YAAM,KAAK,MAAM,OAAO,KAAK,EAAE,QAAQ,CAAC,SAAe;AACnD,YAAI,KAAK,WAAW,IAAI,GAAG;AAEvB,gBAAM,cAAc,KAAK,UAAU,UAAU,CAAC,aAAa,SAAS,SAAS,KAAK,IAAI;AACtF,cAAI,gBAAgB,IAAI;AACpB,iBAAK,UAAU,KAAK,IAAI;AAAA,UAC5B,OAAO;AACH,iBAAK,UAAU,eAAe;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,UAAI,KAAK,UAAU,SAAS,GAAG;AAC3B,aAAK,sBAAsB;AAAA,MAC/B;AAEA,WAAK,OAAO;AAAA,IAChB,EAAC;AAAA,EACL;AACJ;AAvLO,IAAM,SAAN;AAAM,OA+DF,YAA4B;AAAA,EAC/B,IAAI,YAAY;AAAA,EAChB,IAAI,eAAe;AAAA,EACnB,IAAI,cAAc;AAAA,EAClB,IAAI,aAAa;AAAA,EACjB,IAAI,cAAc;AAAA,EAClB,IAAI,oBAAoB;AAAA,EACxB,IAAI,gBAAgB;AAAA,EACpB,IAAI,aAAa;AAAA,EACjB,IAAI,qBAAqB;AAAA,EACzB,IAAI,eAAe;AAAA,EACnB,IAAI,kBAAkB;AAC1B;;;ACxFG,IAAM,uBAAN,cAAmC,YAAY;AAAA,EAClD,IAAI,WAAmB;AACnB,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,UAAU,CAAC,aAAa;AAChC,YAAQ,QAAQ,KAAK,KAAK,SAAS,gCAAgC;AACnE,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,OAAiB,SAAqC;AACzD,yBAAqB,2BAA2B;AAChD,WAAO,MAAM,OAAO,OAAO,OAAO;AAAA,EACtC;AAAA,EAGA,OAAe,6BAA6B;AAtBhD;AAwBQ,eAAK,SAAL,mBAAW,QAAQ,aAAa,MAAM,0BAA0B,KAAK,OAAO;AAAA,EAChF;AAAA,EAEA,WAAW,kBAA2B;AA3B1C;AA4BQ,QAAI,GAAC,UAAK,SAAL,mBAAW,SAAQ,GAAC,UAAK,SAAL,mBAAW;AAAW,aAAO;AAEtD,UAAM,mBAAkB,UAAK,SAAL,mBAAW,QAAQ,aAAa,MAAM;AAE9D,WAAO,oBAAoB,KAAK,OAAO;AAAA,EAC3C;AACJ;;;ACdC,IAAe,mBAAf,MAAgC;AAAA,EAG7B,YAAY,uBAAsD;AAC9D,SAAK,MAAM;AAAA,EACf;AAAA,EAgBA,OAAO,oBAAoB,gBAAqC,SAAiB,OAAiB,WAA6C;AAC3I,YAAQ,MAAM,uBAAuB,KAAK,YAAY,oDAAoD;AAAA,EAC9G;AACJ;AAKA,IAAM,gCAAN,cAA4C,iBAAiB;AAAA,EACzD,QAAQ,SAA8B;AAClC,WAAO,CAAC;AAAA,EACZ;AAAA,EAEA,kBAAkB,MAA2B;AACzC,YAAQ,IAAI,8CAA8C,KAAK,YAAY,gBAAgB;AAC3F,MAAE,IAAI,EAAE,KAAK,qBAAqB,EAAE,GAAG,SAAS,KAAK,sBAAsB,KAAK,IAAI,CAAC;AAAA,EACzF;AAAA,EAEA,OAAO,oBAAoB,gBAAqC,SAAiB,OAAiB,WAA6C;AAC3I,YAAQ,IAAI,GAAG,4DAA4D;AAG3E,UAAM,WAAW,EAAE,kCAAkC;AACrD,UAAM,gBAAgB,EAAE,qDAAqD,UAAU,cAAc,QAAQ,aAAa;AAC1H,UAAM,sBAAsB,EAAE,0DAA0D,KAAK,KAAK,SAAS,iCAAiC,SAAS;AACrJ,wBAAoB,GAAG,SAAS,8BAA8B,gBAAgB,SAAS,eAAe,CAAC;AAEvG,mBAAe,OAAO,QAAQ;AAC9B,aAAS,OAAO,aAAa;AAC7B,aAAS,OAAO,mBAAmB;AAAA,EACvC;AAAA,EAEM,sBAAsB,OAAc;AAAA;AACtC,YAAM,eAAe;AAGrB,YAAM,UAAU,MAAM;AACtB,UAAI,CAAC,QAAQ,QAAQ,YAAY,CAAC,QAAQ,QAAQ;AAAO;AAEzD,YAAM,WAAW,QAAQ,QAAQ;AACjC,YAAM,QAAQ,OAAO,QAAQ,QAAQ,KAAK;AAE1C,WAAK,IAAI,UAAU,cAAc,gBAAgB,UAAU,KAAK;AAChE,YAAM,KAAK,IAAI,UAAU,eAAe;AAIxC,YAAM,KAAK,IAAI,OAAO;AAAA,IAC1B;AAAA;AAAA,EAEM,iCAAiC,OAAc;AAAA;AACjD,YAAM,eAAe;AAErB,WAAK,IAAI,UAAU,cAAc,MAAM;AACvC,YAAM,KAAK,uBAAuB;AAIlC,YAAM,KAAK,IAAI,OAAO;AAAA,IAC1B;AAAA;AAAA,EAEM,yBAAyB;AAAA;AAC3B,YAAM,2BAA2B,qBAAqB,KAAK,IAAI,MAAM;AAErE,WAAK,IAAI,YAAY,KAAK,IAAI,cAAc;AAAA,IAChD;AAAA;AAAA,EAMC,8BAA8B;AAC3B,YAAQ,MAAM,oCAAoC;AAAA,EAOtD;AACJ;AAGA,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EAClD,QAAQ,SAA8B;AAClC,WAAO,CAAC;AAAA,EACZ;AAAA,EAEA,kBAAkB,MAA2B;AAAA,EAC7C;AAAA,EAEA,OAAO,oBAAoB,gBAAqC,SAAiB,OAAiB,WAA6C;AAC3I,YAAQ,IAAI,GAAG,qDAAqD;AAGpE,UAAM,WAAW,EAAE,kCAAkC;AACrD,UAAM,gBAAgB,EAAE,qDAAqD,UAAU,MAAM,QAAQ,aAAa;AAClH,UAAM,sBAAsB,EAAE,0DAA0D,KAAK,KAAK,SAAS,0BAA0B,SAAS;AAC9I,wBAAoB,GAAG,SAAS,8BAA8B,gBAAgB,SAAS,QAAQ,CAAC;AAEhG,mBAAe,OAAO,QAAQ;AAC9B,aAAS,OAAO,aAAa;AAC7B,aAAS,OAAO,mBAAmB;AAAA,EACvC;AACJ;AAEA,IAAM,wBAAN,cAAoC,iBAAiB;AAAA,EACjD,QAAQ,SAA8B;AAClC,WAAO,CAAC;AAAA,EACZ;AAAA,EAEA,kBAAkB,MAA2B;AACzC,SAAK,KAAK,6BAA6B,EAAE,GAAG,SAAS,KAAK,0BAA0B,KAAK,IAAI,CAAC;AAAA,EAClG;AAAA,EAEA,OAAO,oBAAoB,gBAAqC,SAAiB,OAAiB,WAA6C;AAC3I,YAAQ,IAAI,GAAG,oDAAoD;AAGnE,QAAI,CAAC,MAAM;AAAY;AAGvB,UAAM,WAAW,EAAE,kCAAkC;AACrD,UAAM,gBAAgB,EAAE,oDAAoD,UAAU,iBAAiB,QAAQ,aAAa;AAC5H,UAAM,sBAAsB,EAAE,yDAAyD,KAAK,KAAK,SAAS,yBAAyB,SAAS;AAC5I,wBAAoB,GAAG,SAAS,8BAA8B,gBAAgB,SAAS,OAAO,CAAC;AAE/F,mBAAe,OAAO,QAAQ;AAC9B,aAAS,OAAO,aAAa;AAC7B,aAAS,OAAO,mBAAmB;AAAA,EACvC;AAAA,EAEM,0BAA0B,OAAO;AAAA;AACnC,YAAM,eAAe;AAErB,WAAK,IAAI,YAAY,MAAM,2BAA2B,wBAAwB,KAAK,IAAI,QAAQ,kBAAkB;AACjH,WAAK,IAAI,OAAO;AAAA,IACpB;AAAA;AACJ;AAWO,IAAM,iCAAN,cAA4C,gBAAgB;AAAA,EAkB/D,YAAY,QAAiC;AACzC,UAAM,MAAM;AAEZ,SAAK,SAAS;AACd,SAAK,YAAY,KAAK,cAAc;AACpC,SAAK,WAAW,KAAK,iBAAiB;AAAA,EAC1C;AAAA,EAKA,mBAAuC;AAEnC,WAAO,+BAA8B,gBAAgB,IAAI,mBAAiB,IAAI,cAAc,IAAI,CAAC;AAAA,EACrG;AAAA,EAEA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AAEtB,YAAQ,UAAU,CAAC,KAAK;AACxB,YAAQ,KAAK;AACb,YAAQ,QAAQ,KAAK,KAAK,SAAS,2CAA2C;AAG9E,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,YAAQ,YAAY;AAEpB,YAAQ,OAAO;AAAA,MACX;AAAA,QACI,aAAa;AAAA,QACb,iBAAiB;AAAA,QACjB,SAAS,+BAA8B;AAAA,MAC3C;AAAA,IACJ;AAEA,YAAQ,iBAAiB;AACzB,YAAQ,gBAAgB;AAExB,WAAO;AAAA,EACX;AAAA,EAEM,QAAQ,SAA0D;AAAA;AAEpE,WAAK,UAAU,SAAS;AAExB,aAAO,iCACA,MAAM,2DAAM,gBAAN,MAAc,OAAO,IAD3B;AAAA,QAGH,YAAY,KAAK;AAAA,QACjB,YAAY,KAAK,OAAO,QAAQ;AAAA,QAEhC,WAAW,KAAK;AAAA,QAChB,qBAAqB,KAAK,UAAU,cAAc;AAAA,MACtD;AAAA,IACJ;AAAA;AAAA,EAEA,kBAAkB,MAAiC;AAC/C,UAAM,kBAAkB,IAAI;AAE5B,SAAK,SAAS,QAAQ,aAAW,QAAQ,kBAAkB,IAAI,CAAC;AAEhE,SAAK,KAAK,sCAAsC,EAAE,GAAG,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAChG,SAAK,KAAK,+BAA+B,EAAE,GAAG,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACxF,SAAK,KAAK,oCAAoC,EAAE,GAAG,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAAA,EACvG;AAAA,EAKM,mBAAmB,OAAO;AAAA;AA1RpC;AA2RQ,YAAM,eAAe;AAIrB,YAAM,iBAAiB,MAAM;AAC7B,UAAI,CAAC,kBAAkB,CAAC,eAAe,QAAQ,eAAe,OAAO;AACjE,eAAO,QAAQ,MAAM,gEAAgE;AAEzF,YAAM,QAAQ,OAAO,eAAe,QAAQ,QAAQ;AACpD,UAAI,UAAU;AAAG;AAGjB,YAAM,eAAe,EAAE,cAAc,EAAE,SAAS,EAAE,QAAQ,OAAO;AACjE,UAAI,CAAC,gBAAgB,CAAC,aAAa,KAAK,MAAM;AAC1C,eAAO,QAAQ,MAAM,2DAA2D;AAGpF,YAAM,YAAY,aAAa,KAAK,MAAM;AAC1C,YAAM,aAAa,UAAU,SAAS,QAAQ,IAAI,UAAU,QAAQ,UAAU,SAAS,IAAI;AAE3F,YAAM,gBAAe,aAAQ,MAAM,YAAY,MAAM,UAAU,MAA1C,YAA+C;AACpE,UAAI,MAAM,YAAY;AAClB,eAAO,QAAQ,MAAM,wDAAwD,WAAW,YAAY;AAExG,YAAM,QAAQ,eAAe;AAE7B,YAAM,WAAW;AAAA,QACb,CAAC,YAAY;AAAA,MACjB;AAGA,YAAM,KAAK,cAAc,OAAO,QAAQ;AAExC,WAAK,UAAU,SAAS;AAExB,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA,EAKM,oBAAoB;AAAA;AACtB,YAAM,KAAK,UAAU,SAAS;AAC9B,WAAK,OAAO,IAAI;AAAA,IACpB;AAAA;AAAA,EAKM,0BAA0B;AAAA;AAC5B,YAAM,KAAK,UAAU,sBAAsB;AAC3C,WAAK,OAAO,IAAI;AAAA,IACpB;AAAA;AAAA,EAEM,cAAc,OAAc,UAA8C;AAAA;AACxE,UAAI,CAAC;AAAU;AAEf,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACjD,gBAAQ,MAAM,YAAY,MAAM,KAAK,KAAK;AAAA,MAC9C;AAGA,YAAM,2BAA2B,qBAAqB,KAAK,QAAQ,KAAK,UAAU,MAAM;AAAA,IAChG;AAAA;AAAA,EAKM,eAAe,OAAO;AAAA;AACxB,YAAM,2DAAM,uBAAN,MAAqB,KAAK;AAChC,WAAK,OAAO,IAAI;AAAA,IACpB;AAAA;AAAA,EAEA,gBAA4C;AACxC,WAAO,2BAA2B,aAAa,KAAK,MAAM;AAAA,EAC9D;AAAA,EAEA,IAAI,mBAA2B;AAC3B,QAAI,KAAK,kBAAkB,OAAO;AAC9B,aAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,IAC9C;AACA,QAAI,KAAK,kBAAkB,UAAU;AACjC,aAAO,KAAK,KAAK,SAAS,gBAAgB;AAAA,IAC9C;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,aAAa;AAChB,WAAO;AAAA,MACH,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,SAAS,+BAA8B;AAAA,MACvC,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EAOA,OAAO,iBAAiB,KAAe,MAAc,MAAW;AAC5D,QAAI,CAAC,KAAK;AAAK;AAGf,UAAM,QAAQ,QAAQ,SAAS,KAAK,GAAG;AACvC,QAAI,CAAC;AAAO;AAEZ,UAAM,QAAQ,MAAM;AACpB,UAAM,YAAY,MAAM,sBAAsB;AAC9C,cAAU,SAAS;AAGnB,UAAM,YAAY,EAAE,yDAAyD;AAC7E,UAAM,SAAS,EAAE,yCAAyC;AAE1D,cAAU,OAAO,MAAM;AAGvB,SAAK,KAAK,YAAY,EAAE,MAAM,SAAS;AAGvC,mCAA8B,gBAAgB,QAAQ,aAAW,QAAQ,oBAAoB,QAAQ,KAAK,KAAK,OAAO,SAAS,CAAC;AAAA,EACpI;AAAA,EAEA,OAAO,sBAAsB;AACzB,QAAI,CAAC,UAAU,CAAC,OAAO,SAAS,CAAC,OAAO;AAAO;AAC/C,QAAI,+BAA8B,OAAO,KAAK,EAAE,OAAO,IAAI;AAAA,EAC/D;AAAA,EAMA,OAAO,gBAAgB,SAAiB,KAAc;AAClD,UAAM,QAAQ,QAAQ,SAAS,OAAO;AAGtC,WAAO,CAAO,UAAU;AACpB,YAAM,eAAe;AAErB,UAAI,CAAC,SAAS,CAAC,MAAM;AAAO;AAC5B,YAAM,MAAM,IAAI,+BAA8B,MAAM,KAAK;AAEzD,YAAM,IAAI,QAAQ,IAAI;AAAA,IAG1B;AAAA,EACJ;AAAA,EAQA,OAAO,oBAAoB;AAzb/B;AA0bQ,YAAQ,MAAM,iCAAiC,KAAK,MAAM;AAE1D,QAAIC,YAAyC;AAE7C,UAAM,mBAAmB,QAAQ,yBAAyB;AAE1D,QAAI,iBAAiB,WAAW;AAAG,MAAAA,YAAW,iBAAiB;AAG/D,QAAI,CAACA,eAAY,UAAK,SAAL,mBAAW,OAAM;AAC9B,MAAAA,YAAW,OAAO;AAAA,IACtB;AAGA,QAAI,CAACA,WAAU;AACX,MAAAA,aAAW,UAAK,SAAL,mBAAW;AAAA,IAC1B;AAEA,QAAI,CAACA;AAAU,aAAO,QAAQ,MAAM,oEAAoE;AACxG,YAAQ,MAAM,2CAA2CA,UAAS,QAAQA,SAAQ;AAElF,UAAM,MAAM,IAAI,+BAA8BA,SAAQ;AAEtD,QAAI,OAAO,IAAI;AAAA,EACnB;AACJ;AArRO,IAAM,gCAAN;AAAM,8BAEF,kBAA6C;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AACJ;AANS,8BAQF,gBAAwB;;;AClM5B,IAAM,iBAAN,cAA6B,cAAc;AAAA,EAO9C,YAAY,OAAO,SAAS,SAAS;AACjC,UAAM,OAAO,OAAO;AACpB,SAAK,UAAU;AAAA,EACnB;AAAA,EAPA,IAAI,WAAqB;AACrB,WAAO,MAAM;AAAA,EACjB;AAAA,EAOA,gBAAgB;AACZ,WAAO,wBAAwB,KAAK;AAAA,EACxC;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AAEtB,WAAO,YAAY,SAAS;AAAA,MACxB,IAAI;AAAA,MACJ,SAAS,CAAC,OAAO,SAAS,mBAAmB;AAAA,MAC7C,UAAU;AAAA,MACV,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,WAAW;AAAA,IACf,CAAC;AAAA,EACL;AAAA,EAEA,IAAI,QAAgB;AAChB,UAAM,QAAQ,KAAK,SAAS,cAAc,KAAK,OAAO;AACtD,WAAO,GAAG,KAAK,KAAK,SAAS,eAAe,OAAO,KAAK,KAAK,SAAS,KAAK;AAAA,EAC/E;AAAA,EAEA,gBAAgB,OAAO,UAAU,YAAY;AAGzC,UAAM,OAAO,SAAS;AAGtB,UAAM,YAAY,SAAS;AAG3B,UAAM,OAAO,SAAS;AAGtB,UAAM,aAAa,SAAS;AAG5B,UAAM,aAAa;AACnB,UAAM,QAAQ,OAAO,QAAQ,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,MAAqB;AAClF,YAAM,QAAQ,IAAI,MAAM,UAAU;AAClC,UAAI,SAAS,MAAM,IAAI;AACnB,gBAAQ,KAAK,GAAG;AAAA,MACpB;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAU;AAGd,UAAM,gBAAgB;AACtB,UAAM,kBAAkB;AACxB,UAAM,QAAQ,OAAO,QAAQ,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,KAAK,MAAqB;AACpF,YAAM,WAAW,IAAI,MAAM,aAAa;AACxC,YAAM,WAAW,IAAI,MAAM,eAAe;AAC1C,UAAI,YAAY,SAAS,MAAM,SAAS,IAAI;AACxC,cAAM,QAAQ,SAAS;AACvB,YAAI,QAAQ,WAAW;AAAW,kBAAQ,SAAS,CAAC;AACpD,gBAAQ,OAAO,MAAM;AAAA,MACzB,WAAW,YAAY,SAAS,MAAM,SAAS,IAAI;AAC/C,cAAM,QAAQ,SAAS;AACvB,YAAI,QAAQ,WAAW;AAAW,kBAAQ,SAAS,CAAC;AACpD,gBAAQ,OAAO,QAAQ;AAAA,MAC3B;AAEA,aAAO;AAAA,IACX,GAAG,CAAC,CAAU;AAEd,eAAW,KAAK,cAAc,KAAK;AAAA,MAC/B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAIA,QAAI,MAAM,cAAc,SAAS;AAAc,iBAAW,KAAK,cAAc,GAAG,OAAO;AAAA,EAC3F;AAAA,EAKM,cAAc,OAAO,UAAU;AAAA;AAGjC,UAAI,MAAM,eAAe;AACrB,cAAM,aAAa,CAAC;AACpB,aAAK,gBAAgB,OAAO,UAAU,UAAU;AAChD,cAAM,KAAK,SAAS,OAAO,UAAU;AAAA,MACzC;AAAA,IACJ;AAAA;AAAA,EAEA,kBAAkB,MAAM;AACpB,UAAM,kBAAkB,IAAI;AAC5B,MAAE,IAAI,EAAE,KAAK,WAAW,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AACjE,MAAE,IAAI,EAAE,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AACpE,MAAE,IAAI,EAAE,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AACnE,MAAE,IAAI,EAAE,KAAK,eAAe,EAAE,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AAAA,EAC1E;AAAA,EAEM,aAAa,OAAO;AAAA;AACtB,YAAM,eAAe;AACrB,YAAM,aAAa,CAAC;AACpB,YAAM,QAAQ,KAAK,QAAQ,EAAE;AAC7B,UAAI,CAAC;AAAO;AACZ,YAAM,EAAE,QAAQ,CAAC,EAAE,IAAI;AAEvB,iBAAW,GAAG,KAAK,cAAc,aAAa,CAAC,GAAG,OAAO,EAAE,KAAK,IAAI,OAAO,EAAE,CAAC;AAC9E,YAAM,KAAK,SAAS,OAAO,UAAU;AAAA,IACzC;AAAA;AAAA,EAEM,aAAa,OAAO;AAAA;AACtB,YAAM,eAAe;AACrB,YAAM,aAAa,CAAC;AACpB,YAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,UAAI,6BAAM,OAAO;AACb,cAAM,EAAE,MAAM,IAAI;AAClB,cAAM,QAAQ,MAAM,cAAc,QAAQ;AAC1C,YAAI,SAAS,GAAG;AACZ,gBAAM,OAAO,OAAO,CAAC;AACrB,qBAAW,GAAG,KAAK,cAAc,aAAa;AAC9C,gBAAM,KAAK,SAAS,OAAO,UAAU;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAEM,YAAY,OAAO;AAAA;AACrB,YAAM,eAAe;AACrB,YAAM,aAAa,CAAC;AACpB,YAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,UAAI,6BAAM,OAAO;AAEb,cAAM,EAAE,MAAM,IAAI;AAClB,mBAAW,GAAG,KAAK,cAAc,aAAa,CAAC,GAAG,OAAO,EAAE;AAAA,MAC/D;AACA,YAAM,KAAK,SAAS,OAAO,UAAU;AAAA,IACzC;AAAA;AAAA,EAEM,YAAY,OAAO;AAAA;AACrB,YAAM,eAAe;AACrB,YAAM,aAAa,CAAC;AACpB,YAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,UAAI,6BAAM,OAAO;AACb,cAAM,EAAE,MAAM,IAAI;AAClB,cAAM,QAAQ,MAAM,cAAc,QAAQ;AAC1C,YAAI,SAAS,GAAG;AACZ,gBAAM,OAAO,OAAO,CAAC;AACrB,qBAAW,GAAG,KAAK,cAAc,aAAa;AAC9C,gBAAM,KAAK,SAAS,OAAO,UAAU;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAIA,+BAA+B;AAC3B,WAAO,iCAAI,IAAI,aAAR,EAAoB,IAAI,GAAE;AAAA,EACrC;AAAA,EAEA,yBAAkC;AAC9B,UAAM,QAAQ,KAAK,SAAS,SAAS,KAAK,OAAO;AAEjD,WAAO,CAAC,EAAG,EAAC,+BAAO,SAAQ,EAAC,+BAAO,WAAW,+BAAO,SAAQ,EAAC,+BAAO;AAAA,EACzE;AAAA,EAGA,UAA6B;AACzB,UAAM,OAAO,MAAM,QAAQ;AAI3B,SAAK,WAAW,QAAQ,MAAM,YAAY,KAAK,MAAM,KAAK,cAAc,CAAC;AACzE,SAAK,mBAAmB,KAAK,uBAAuB;AACpD,SAAK,yBAAyB;AAC9B,SAAK,wBAAwB;AAC7B,SAAK,gBAAgB,KAAK,6BAA6B;AACvD,WAAO;AAAA,EACX;AACJ;;;ACjMO,IAAM,yBAAN,cAAqC,eAAe;AAAA,EACvD,gBAAgB;AACZ,WAAO,gCAAgC,KAAK;AAAA,EAChD;AAAA,EAEA,UAAU;AACN,WAAO,YAAY,MAAM,QAAQ,GAAG;AAAA,MAChC,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,oBAAoB;AAAA,IACxB,CAAsB;AAAA,EAC1B;AAAA,EAGA,gBAAgB,OAAO,UAAU,YAAY;AACzC,UAAM,gBAAgB,OAAO,UAAU,UAAU;AACjD,UAAM,OAAO,SAAS;AACtB,UAAM,cAAc,WAAW,KAAK,cAAc,MAAM,CAAC;AACzD,eAAW,KAAK,cAAc,KAAK,iCAC5B,cAD4B;AAAA,MAE/B;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACvBO,IAAM,0BAAN,cAAsC,uBAAuB;AAAA,EAEhE,YAAY,OAAO,SAAS,SAAS,UAAU;AAC3C,UAAM,OAAO,SAAS,OAAO;AAC7B,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,gBAAgB;AACZ,WAAO,2BAA2B,KAAK,kBAAkB,KAAK;AAAA,EAClE;AACJ;;;ACJO,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAMhD,YAAY,OAAiB,iBAAyB,SAAU;AAC5D,UAAM,aAAa,oBAAoB,cAAc,OAAO,eAAe;AAE3E,UAAM,YAAY,OAAO;AAAA,EAC7B;AAAA,EAEA,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AACb,YAAQ,UAAU,CAAC,OAAO,aAAa;AACvC,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,cAAc,OAAiB,iBAAyB;AAE3D,UAAM,cAAc,OAAO,OAAO,MAAM,KAAK,KAAK,WAAW,EAClC,OAAO,eAAa,UAAU,SAAS,eAAe;AAEjF,QAAI,oBAAoB,MAAM,iBAAiB;AAAM,kBAAY,QAAQ,MAAM,gBAAgB;AAE/F,WAAO;AAAA,MACH,OAAO,KAAK,KAAK,SAAS,+BAA+B;AAAA,MACzD,SAAS;AAAA,QACL,MAAM;AAAA,UACF,OAAO,KAAK,KAAK,SAAS,8BAA8B;AAAA,QAC5D;AAAA,QACA,QAAQ;AAAA,UACJ,OAAO,KAAK,KAAK,SAAS,gCAAgC;AAAA,QAC9D;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,MACT,cAAc,EAAC,YAAW;AAAA,MAC1B,cAAc;AAAA,MACd,cAAc,CAAM,SAAQ;AACxB,eAAO,KAAK,KAAK,mCAAmC,EAAE,IAAI;AAAA,MAC9D;AAAA,IACJ;AAAA,EACJ;AACJ;;;AChDO,IAAM,uBAAN,MAA2B;AAAA,EAA3B;AAMH,wCAAe,CAAC,YAAa;AACzB,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AACA,UAAI,QAAQ,YAAY,MAAM,OAAO;AACjC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,oCAAW,CAAC,UAAU;AAClB,aAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAAA,IAChD;AAOA,6CAAoB,CAAC,QAAQ;AACzB,UAAI,IAAI,KAAK,YAAY,MAAM,OAAO;AAGlC,eAAO,SAAS,IAAI,IAAI;AAAA,MAC5B,OACK;AACD,eAAO,SAAS,IAAI,KAAK;AAAA,MAC7B;AAAA,IACJ;AAAA;AAAA,EAOM,OAAO,aAAa,aAAa;AAAA;AAEnC,YAAM,oBAAoB,UAAU,WAAW;AAG/C,UAAI,YAAY,OAAO;AACnB,0BAAkB,OAAO,YAAY;AAAA,MACzC,OACK;AACD,0BAAkB,OAAO,YAAY,OAAO,YAAY,OAAO;AAAA,MACnE;AAEA,WAAK,gBAAgB,kBAAkB,QAAQ,WAAW;AAC1D,YAAM,KAAK,UAAU,kBAAkB,QAAQ,WAAW;AAC1D,WAAK,iBAAiB,kBAAkB,QAAQ,WAAW;AAC3D,WAAK,iBAAiB,kBAAkB,QAAQ,WAAW;AAC3D,WAAK,aAAa,kBAAkB,QAAQ,WAAW;AAEvD,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,gBAAgB,QAAQ,aAAa;AAEjC,QAAI;AACA,UAAI,YAAY,UAAU;AACtB,eAAO,WAAW,YAAY;AAAA,MAClC;AACA,UAAI,YAAY,KAAK;AACjB,eAAO,MAAM,YAAY;AAAA,MAC7B;AACA,UAAI,YAAY,KAAK;AACjB,eAAO,MAAM,YAAY;AAAA,MAC7B;AACA,UAAI,YAAY,QAAQ;AACpB,eAAO,SAAS,YAAY;AAAA,MAChC;AACA,UAAI,YAAY,QAAQ;AACpB,eAAO,SAAS,YAAY;AAAA,MAChC;AACA,UAAI,YAAY,sBAAsB;AAClC,eAAO,cAAc,YAAY;AAAA,MACrC;AACA,UAAI,YAAY,qBAAqB;AACjC,eAAO,YAAY,YAAY;AAAA,MACnC;AACA,UAAI,YAAY,2BAA2B;AACvC,eAAO,mBAAmB,YAAY;AAAA,MAC1C;AACA,UAAI,YAAY,OAAO;AACnB,eAAO,MAAM,QAAQ,YAAY;AAAA,MACrC;AACA,UAAI,YAAY,YAAY;AACxB,eAAO,MAAM,MAAM,YAAY;AAAA,MACnC;AACA,UAAI,YAAY,gBAAgB,YAAY,aAAa,YAAY,MAAM,QAAQ;AAC/E,eAAO,UAAU;AAAA,MACrB;AACA,UACK,YAAY,YAAY,YAAY,SAAS,YAAY,MAAM,UAC/D,YAAY,SAAS,YAAY,MAAM,YAAY,MAAM,QAC5D;AACE,eAAO,UAAU;AACjB,YAAI,OAAO,CAAC;AACZ,YACI,YAAY,aACZ,YAAY,UAAU,kBACtB,YAAY,UAAU,eAAe,MACvC;AACE,iBAAO,YAAY,UAAU,eAAe;AAAA,QAChD,WAAW,YAAY,aAAa,YAAY,UAAU,iBAAiB;AACvE,iBAAO,YAAY,UAAU,gBACxB,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;AAAA,QAClC;AACA,aAAK,QAAQ,CAAC,QAAQ;AAClB,gBAAM,UAAU,KAAK,aAAa,GAAG;AACrC,cAAI,YAAY;AAAa,mBAAO,MAAM,YAAY;AAAA,QAC1D,CAAC;AAAA,MACL;AACA,UAAI,YAAY,UAAU;AACtB,eAAO,WAAW,QAAQ,QAAQ,YAAY;AAAA,MAClD;AACA,UAAI,YAAY,OAAO;AACnB,eAAO,QAAQ,SAAS,YAAY,MAAM,QAAQ,KAAK,EAAE,CAAC;AAAA,MAC9D;AAAA,IACJ,SAAS,GAAP;AACE,cAAQ,MAAM,6CAA6C,GAAG;AAAA,IAClE;AAAA,EACJ;AAAA,EAEM,UAAU,QAAQ,aAAa;AAAA;AACjC,aAAO,YAAY,QAAQ;AAM3B,UAAI,YAAY,aAAa;AACzB,eAAO,YAAY,SAAS,MAAM,WAAW,WAAW,YAAY,cAAc,SAAS,EAAC,OAAO,KAAI,CAAC;AAAA,MAC5G;AAEA,UAAI,YAAY,YAAY;AACxB,eAAO,YAAY,SAAS,MAAM,WAAW,WAAW,YAAY,aAAa,SAAS,EAAC,OAAO,KAAI,CAAC;AAAA,MAC3G;AAEA,UAAI,YAAY,SAAS;AACrB,eAAO,YAAY,SAAS,MAAM,WAAW,WAAW,YAAY,UAAU,SAAS,EAAC,OAAO,KAAI,CAAC;AAAA,MACxG;AAEA,UAAI,YAAY,OAAO;AACnB,eAAO,YAAY,SAAS,MAAM,WAAW,WAAW,YAAY,QAAQ,SAAS,EAAC,OAAO,KAAI,CAAC;AAAA,MACtG;AAAA,IACJ;AAAA;AAAA,EAEA,iBAAiB,QAAQ,aAAa;AAClC,UAAM,OAAO,YAAY,WAAW,GAAG;AACvC,SAAK,QAAQ,CAAC,QAAQ;AAClB,UAAI;AACA,cAAM,UAAU,KAAK,aAAa,IAAI,IAAI;AAC1C,YAAI,SAAS;AACT,iBAAO,WAAW,SAAS,OAAO,KAAK,kBAAkB,GAAG;AAAA,QAChE;AAAA,MAEJ,SAAS,GAAP;AACE,gBAAQ,MAAM,kCAAkC,GAAG;AAAA,MACvD;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAGA,iBAAiB,QAAQ,aAAa;AAClC,QAAI;AACA,aAAO,UAAU,kBAAkB,YAAY;AAG/C,aAAO,UAAU,uBAAuB,YAAY,WAAW;AAAA,IACnE,SAAS,GAAP;AACE,cAAQ,MAAM,kCAAkC,GAAG;AAAA,IACvD;AAAA,EACJ;AAAA,EAEA,aAAa,QAAQ,aAAa;AAC9B,UAAM,gBAAgB,YAAY,OAAO;AACzC,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,UAAI;AACA,cAAM,eAAe,cAAc;AAInC,aAAK,aAAa,SAAS,KAAI,aAAa,qBAAqB,WAAW,aAAa,YAAY;AACjG,cAAI,kBAAkB;AACtB,cAAI,cAAc;AAGlB,cAAI,aAAa,cAAc,aAAa,WAAW,YAAY,MAAM,QAAQ;AAC7E,kBAAM,KAAK,SAAS,EAAE;AACtB,0BAAc,CAAC;AACf,mBAAO,OAAO,SAAS,MAAM,MAAM;AACnC,8BAAkB;AAGlB,gBAAI,aAAa,qBAAqB,QAAQ;AAC1C,2BAAa,SAAS;AAAA,YAC1B;AAAA,UACJ,WACS,aAAa,aAAa,aAAa,UAAU,YAAY,MAAM,QAAQ;AAChF,kBAAM,KAAK,SAAS,EAAE;AACtB,kBAAM,WAAW,aAAa;AAC9B,0BAAc,CAAC;AAGf,gBAAI;AACJ,gBAAI,UAAU;AACV,oBAAM,MAAM,SAAS,YAAY;AACjC,kBAAI,QAAQ;AACR,gCAAgB,OAAO,OAAO,UAAU,OAAO;AACnD,kBAAI,QAAQ;AACR,gCAAgB,OAAO,OAAO,UAAU,SAAS;AACrD,kBAAI,QAAQ;AACR,gCAAgB,OAAO,OAAO,UAAU,aAAa;AACzD,kBAAI,QAAQ;AACR,gCAAgB,OAAO,OAAO,UAAU,UAAU;AACtD,kBAAI;AACA,8BAAc,MAAM;AAAA,YAC5B,OACK;AACD,kBAAI,aAAa,UAAU,YAAY,MAAM,OAAO;AAChD,uBAAO,OAAO,UAAU,OAAO,MAAM,MAAM;AAAA,cAC/C;AACA,kBAAI,aAAa,UAAU,YAAY,MAAM,OAAO;AAChD,uBAAO,OAAO,UAAU,aAAa,MAAM,MAAM;AAAA,cACrD;AAAA,YACJ;AACA,8BAAkB;AAAA,UACtB,OACK;AACD,gBAAI,OAAO,aAAa,KACnB,YAAY,EACZ,KAAK,EACL,QAAQ,OAAO,GAAG,EAClB,QAAQ,MAAM,GAAG;AACtB,gBAAI,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,SAAS;AAClD,qBAAO,KAAK,QAAQ,WAAW,EAAE;AACrC,gBAAI,SAAS;AACT,qBAAO;AACX,0BAAc,OAAO,OAAO,OAAO;AAAA,UACvC;AAGA,cAAI,CAAC,aAAa;AACd,oBAAQ,MAAM,wBAAwB,aAAa,MAAM;AAAA,UAE7D,OAAO;AACH,gBAAI,oBAAoB;AACpB,0BAAY,OAAO,aAAa;AACpC,wBAAY,OAAO,SAAS,aAAa,MAAM;AAE/C,gBAAI,aAAa,sBAAsB;AACnC,0BAAY,QAAQ,KAAK;AAAA,gBACrB,aAAa,qBAAqB,oBAAoB;AAAA,cAC1D;AAAA,YACJ;AAGA,yCAA6B,WAAW;AAAA,UAC5C;AAAA,QACJ;AAAA,MACJ,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAGJ;;;AChTO,IAAM,YAAY,CAAC,QAAQ;AAC9B,QAAM,QAAQ;AACd,QAAM,IAAI,IAAI,MAAM,KAAK;AACzB,SAAO,KAAK,CAAC,GAAG;AACpB;AAEO,IAAM,WAAW,CAAC,UAAU;AAC/B,SAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAChD;AAMO,IAAM,mBAAmB,CAAC,iBAAiB;AAC9C,QAAM,oBAAoB,cAAc,gBAAgB;AAExD,MAAI,aAAa,UAAU,aAAa,MAAM;AAC1C,sBAAkB,SAAS,GAAG,aAAa,UAAU,aAAa;AAAA,EACtE;AAEA,MAAI,aAAa,aAAa;AAC1B,sBAAkB,QAAQ,WAAW,WAAW,aAAa,WAAW;AAAA,EAC5E;AAEA,SAAO;AACX;AAMO,IAAM,kBAAkB,CAAC,iBAAiB;AAC7C,QAAM,mBAAmB,cAAc,eAAe;AAEtD,MAAI,aAAa,QAAQ;AACrB,qBAAiB,SAAS,aAAa;AAAA,EAC3C;AAEA,MAAI,aAAa,OAAO;AACpB,qBAAiB,eAAe,aAAa;AAAA,EACjD;AAEA,MAAI,aAAa,KAAK;AAClB,qBAAiB,WAAW,aAAa;AAAA,EAC7C;AAEA,MAAI,aAAa,MAAM;AACnB,qBAAiB,OAAO,WAAW,aAAa,KAAK,QAAQ,cAAc,EAAE,CAAC;AAAA,EAClF;AAEA,MAAI,aAAa,YAAY,aAAa,SAAS,YAAY,MAAM,QAAQ;AACzE,qBAAiB,WAAW;AAAA,EAChC;AAEA,MAAI,aAAa,kBAAkB;AAC/B,qBAAiB,kBAAkB,MAAM,OAAO,aAAa,gBAAgB;AAAA,EACjF;AAEA,MAAI,aAAa,SAAS;AACtB,qBAAiB,QAAQ,OAAO,OAAO,aAAa,OAAO;AAAA,EAC/D;AAEA,SAAO;AACX;AAEO,IAAM,iBAAiB,CAAC,MAAM,MAAM,WAAW;AAClD,SAAO;AAAA,IACH;AAAA,IACA,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,OAAO,CAAC;AAAA,IACR,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAY;AAAA,MACR,SAAS;AAAA,IACb;AAAA,EACJ;AACJ;;;AC9DO,IAAM,iBAAN,MAA2C;AAAA,EAC9C,MAAM,aAAyB;AAC3B,UAAM,aAAa,KAAK,eAAe;AACvC,eAAW,OAAO,YAAY;AAC9B,QAAI,YAAY,OAChB;AACI,iBAAW,QAAQ,KAAK,YAAY;AAAA,IACxC;AAEA,eAAW,OAAO,aAAa,gBAAgB,WAAW;AAC1D,eAAW,OAAO,cAAc,iBAAiB,WAAW;AAE5D,WAAO;AAAA,EACX;AAAA,EAEQ,iBAAqC;AACzC,WAAO;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ,cAAc,cAAc;AAAA,IACxC;AAAA,EACJ;AACJ;;;ACnCO,IAAM,YAAN,cAAwB,eAAe;AAAA,EAC1C,MAAM,aAAyB;AAC3B,UAAM,aAAc,MAAM,MAAM,WAAW;AAC3C,eAAW,OAAO;AAGlB,QAAI,YAAY,UAAU;AAGtB,YAAM,kBAA0B,CAAC;AACjC,UAAI,CAAC,MAAM,QAAQ,YAAY,SAAS,IAAI,GAAG;AAC3C,wBAAgB,KAAK,YAAY,SAAS,IAAI;AAAA,MAClD,OACK;AACD,wBAAgB,KAAK,GAAG,YAAY,SAAS,IAAI;AAAA,MACrD;AAEA,iBAAW,OAAO,WAAW,KAAK,cAAc,eAAe;AAAA,IACnE;AACA,WAAO;AAAA,EACX;AAAA,EAEQ,cAAc,iBAA+B;AACjD,UAAM,iBAAyB,CAAC;AAEhC,oBAAgB,QAAQ,oBAAkB;AACtC,UAAI,eAAe,aAAa,iBAChC;AACI,uBAAe;AAAA,UACX;AAAA,YACI,MAAM,eAAe;AAAA,YACrB,KAAK,eAAe;AAAA,YACpB,aAAa;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AACJ;;;ACzCO,IAAM,eAAN,cAA2B,eAAe;AAAA,EAE7C,MAAM,aAAyB;AAC3B,UAAM,aAAc,MAAM,MAAM,WAAW;AAC3C,eAAW,OAAO;AAClB,eAAW,OAAO,WAAW,SAAS,YAAY;AAElD,eAAW,OAAO,OAAO;AAAA,MACrB,MACA;AAAA,QACI,OAAO,YAAY;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,MAEA,MACA;AAAA,QACI,OAAO,YAAY;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,MAEA,MACA;AAAA,QACI,OAAO,YAAY;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,MAEA,MACA;AAAA,QACI,OAAO,YAAY;AAAA,QACnB,KAAK;AAAA,MACT;AAAA,IACJ;AAEA,QAAI,YAAY,aAAa,cAC7B;AACI,iBAAW,OAAO,WAAW;AAAA,IACjC;AAEA,QAAI,YAAY,aAAa,aAC7B;AACI,iBAAW,OAAO,WAAW;AAAA,IACjC;AAEA,QAAI,YAAY,aAAa,2BAC7B;AAEI,iBAAW,OAAO,WAAW;AAAA,IACjC;AAEA,WAAO;AAAA,EACX;AACJ;;;ACnDO,IAAM,gBAAN,cAA4B,eAAe;AAAA,EAC9C,MAAM,aAAyB;AAC3B,UAAM,aAAc,MAAM,MAAM,WAAW;AAC3C,eAAW,OAAO;AAElB,QAAI,YAAY,aAAa,mBAC7B;AACI,iBAAW,OAAO,OAAO;AAAA,IAC7B,WACS,YAAY,aAAa,oBAClC;AACI,iBAAW,OAAO,OAAO;AAAA,IAC7B,WACS,YAAY,aAAa,YAClC;AACI,iBAAW,OAAO,OAAO;AAAA,IAC7B;AAEA,WAAO;AAAA,EACX;AACJ;;;ACpBO,IAAM,aAAN,cAAyB,eAAe;AAAA,EAE3C,MAAM,aAAyB;AAC3B,UAAM,aAAc,MAAM,MAAM,WAAW;AAC3C,eAAW,OAAO;AAElB,QAAI,YAAY,eAAe;AAC3B,iBAAW,OAAO,KAAK,SAAS,YAAY,aAAa;AAAA,IAC7D;AAEA,QAAI,YAAY,mBAAmB;AAC/B,iBAAW,OAAO,SAAS,SAAS,YAAY,iBAAiB;AAEjE,UAAI,YAAY,kBAAkB,SAAS,GAAG,GAAG;AAC7C,mBAAW,OAAO,aAAa;AAAA,MACnC,WAAW,YAAY,kBAAkB,SAAS,GAAG,GAAG;AACpD,mBAAW,OAAO,aAAa;AAAA,MACnC,WAAW,YAAY,kBAAkB,SAAS,GAAG,GAAG;AACpD,mBAAW,OAAO,aAAa;AAAA,MACnC,OACK;AACD,mBAAW,OAAO,aAAa;AAAA,MACnC;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AACJ;;;ACvBO,IAAM,iBAAN,MAAqB;AAAA,EAOxB,OAAO,aAAgC;AACnC,QAAI,YAAY,UAAU,QAC1B;AACI,aAAO,IAAI,UAAU;AAAA,IACzB;AAEA,QAAI,YAAY,eAAe,QAC/B;AACI,aAAO,IAAI,aAAa;AAAA,IAC5B;AAEA,QAAI,YAAY,WAAW,QAC3B;AACI,aAAO,IAAI,WAAW;AAAA,IAC1B;AAEA,QAAI,YAAY,aAAa,qBACzB,YAAY,aAAa,sBACzB,YAAY,aAAa,YAC7B;AACI,aAAO,IAAI,cAAc;AAAA,IAC7B;AAEA,WAAO,IAAI,eAAe;AAAA,EAC9B;AACJ;;;ACpCO,IAAM,cAAN,MAAkB;AAAA,EAMrB,WAAW,cAA0B;AACjC,QAAI,QAAgB,CAAC;AAErB,iBAAa,QAAQ,CAAC,gBAAgB;AAClC,UAAI;AAEA,YAAI,CAAC,KAAK,mBAAmB,WAAW,GAAG;AACvC;AAAA,QACJ;AAEA,cAAM,YAAY,KAAK,eAAe,WAAW;AACjD,cAAM,KAAK,SAAS;AAAA,MACxB,SAEO,GAAP;AACI,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEQ,eAAe,aAAyB;AAC5C,UAAM,iBAAiB,IAAI,eAAe;AAC1C,UAAM,SAAS,eAAe,OAAO,WAAW;AAChD,WAAO,OAAO,MAAM,WAAW;AAAA,EACnC;AAAA,EAEQ,mBAAmB,aAA6B;AAEpD,UAAM,kBAAmB,YAAY,aAAwB,YAAY;AACzE,QAAI,gBAAgB,WAAW,SAAS,KACpC,gBAAgB,WAAW,aAAa,KACxC,gBAAgB,WAAW,QAAQ,GACvC;AACI,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACX;AACJ;;;ACjDO,IAAM,cAAN,MAAkB;AAAA,EAErB,YAAY,aAAa;AACrB,UAAM,SAAS,SAAS,YAAY,OAAO,KAAK;AAChD,UAAM,eAAe,CAAC;AACtB,WAAO,QAAQ,CAAC,iBAAiB;AAC7B,UAAI;AACA,cAAM,WAAW,KAAK,WAAW,YAAY;AAC7C,qBAAa,KAAK,QAAQ;AAAA,MAC9B,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,cAAc;AACrB,UAAM,SAAS,CAAC;AAChB,UAAM,QAAQ,CAAC;AACf,WAAO,QAAQ;AAEf,QAAI,OAAO;AACX,UAAM,MAAM,aAAa,MAAM,SAAS,GAAG;AAC3C,UAAM,QAAQ,SAAS,aAAa,MAAM,QAAQ,KAAK,EAAE,CAAC;AAC1D,QAAI,aAAa;AACb,aAAO,aAAa;AAExB,YAAQ,IAAI,YAAY;AACxB,QAAI,aAAa,aAAa,aAAa,UAAU,UAAU;AAC3D,YAAM,OAAO;AACb,YAAM,cAAc;AACpB,YAAM,OAAO;AACb,YAAM,OAAO;AACb,YAAM,YAAY;AAElB,YAAM,UAAU,CAAC;AACjB,YAAM,OAAO,SAAS,aAAa,UAAU,QAAQ;AACrD,WAAK,QAAQ,CAAC,QAAQ;AAClB,YAAI,IAAI,KAAK,YAAY,EAAE,SAAS,iBAAiB,GAAG;AACpD,gBAAM,QAAQ,SAAS,IAAI,MAAM;AAAA,QACrC,WAAW,IAAI,KAAK,YAAY,EAAE,SAAS,iBAAiB,GAAG;AAC3D,gBAAM,eAAe,SAAS,IAAI,MAAM;AAAA,QAC5C,WAAW,IAAI,KAAK,YAAY,EAAE,SAAS,YAAY,GAAG;AACtD,gBAAM,QAAQ,SAAS,IAAI,MAAM;AAAA,QACrC,WAAW,IAAI,KAAK,YAAY,EAAE,SAAS,qBAAqB,GAAG;AAC/D,gBAAM,aAAa,SAAS,IAAI,MAAM;AAAA,QAC1C;AACA,YAAI,IAAI,WAAW,IAAI;AACnB,kBAAQ,KAAK,GAAG,IAAI,SAAS,IAAI,QAAQ;AAAA,QAC7C,OAAO;AACH,kBAAQ,KAAK,IAAI,IAAI;AAAA,QACzB;AAAA,MACJ,CAAC;AACD,UAAI,QAAQ,SAAS,GAAG;AAEpB,eAAO,GAAG,QAAQ,KAAK,GAAG;AAAA;AAAA,EAAQ;AAAA,MACtC;AAAA,IACJ;AAEA,WAAO,aAAa,gBAAgB,YAAY;AAChD,WAAO,cAAc,iBAAiB,YAAY;AAElD,WAAO,eAAe,aAAa,MAAM,SAAS,MAAM;AAAA,EAC5D;AACJ;;;ACjEO,IAAMC,mBAAN,MAAsB;AAAA,EAEzB,gBAAgB,aAAa;AACzB,UAAM,oBAAoB,SAAS,YAAY,WAAW,SAAS;AACnE,UAAM,kBAAkB,CAAC;AACzB,sBAAkB,QAAQ,CAAC,iBAAiB;AACxC,UAAI;AACA,cAAM,WAAW,KAAK,eAAe,YAAY;AACjD,wBAAgB,KAAK,QAAQ;AAAA,MACjC,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,cAAc;AACzB,UAAM,SAAS,CAAC;AAChB,WAAO,cAAc,iBAAiB,YAAY;AAClD,WAAO,aAAa,gBAAgB,YAAY;AAGhD,WAAO,WAAW,WAAW;AAC7B,WAAO,UAAU,aAAa;AAC9B,WAAO,QAAQ,aAAa;AAE5B,WAAO,eAAe,aAAa,MAAM,aAAa,MAAM;AAAA,EAChE;AACJ;;;AC5BO,IAAM,gBAAN,MAAoB;AAAA,EAEvB,eAAe,aAAa;AACxB,UAAM,YAAY,SAAS,YAAY,UAAU,OAAO;AACxD,UAAM,kBAAkB,CAAC;AAEzB,cAAU,QAAQ,CAAC,mBAAmB;AAClC,UAAI;AACA,cAAM,WAAW,KAAK,aAAa,cAAc;AACjD,wBAAgB,KAAK,QAAQ;AAAA,MACjC,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,gBAAgB;AACzB,UAAM,SAAS,cAAc,YAAY;AACzC,WAAO,OAAO,eAAe,YAAY,YAAY;AACrD,WAAO,cAAc,iBAAiB,cAAc;AAEpD,WAAO,eAAe,eAAe,MAAM,WAAW,MAAM;AAAA,EAChE;AACJ;;;AC1BO,IAAM,cAAN,MAAkB;AAAA,EAErB,YAAY,aAAa;AACrB,UAAM,SAAS,SAAS,YAAY,OAAO,KAAK;AAChD,UAAM,eAAe,CAAC;AAEtB,WAAO,QAAQ,CAAC,iBAAiB;AAC7B,YAAM,WAAW,KAAK,WAAW,YAAY;AAC7C,mBAAa,KAAK,QAAQ;AAAA,IAC9B,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,cAAc;AACrB,UAAM,SAAS,CAAC;AAChB,WAAO,cAAc,iBAAiB,YAAY;AAElD,WAAO,QAAQ,SAAS,aAAa,MAAM;AAC3C,WAAO,KAAK,WAAW,aAAa,WAAW;AAC/C,WAAO,eAAe,aAAa,UAAU,eAAe,MAAM;AAAA,EACtE;AACJ;;;ACrBO,IAAM,cAAN,MAAkB;AAAA,EACrB,YAAY,aAAa;AACrB,UAAM,SAAS,SAAS,YAAY,OAAO,KAAK;AAChD,UAAM,eAAe,CAAC;AACtB,WAAO,QAAQ,CAAC,iBAAiB;AAC7B,UAAI;AACA,YAAI,aAAa,QAAQ,YAAY,MAAM,QAAQ;AAC/C,gBAAM,WAAW,KAAK,WAAW,YAAY;AAC7C,uBAAa,KAAK,QAAQ;AAAA,QAC9B;AAAA,MACJ,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,cAAc;AACrB,UAAM,SAAS,CAAC;AAChB,UAAM,SAAS,CAAC;AAChB,WAAO,SAAS;AAChB,WAAO,WAAW,aAAa,SAAS,YAAY,EAAE,QAAQ,OAAO,GAAG;AACxE,WAAO,OAAO,aAAa;AAC3B,WAAO,OAAO,aAAa,SAAS,MAAM,SAAS;AACnD,WAAO,QACH,aAAa,UAAU,MACjB,UACA,aAAa,MACN,YAAY,EACZ,QAAQ,OAAO,GAAG,EAClB,QAAQ,KAAK,EAAE,EACf,QAAQ,KAAK,EAAE;AAChC,WAAO,QAAQ,SAAS,aAAa,GAAG,QAAQ,KAAK,EAAE,CAAC;AACxD,WAAO,cAAc,iBAAiB,YAAY;AAElD,QAAI,cAAc;AAClB,QAAI,aAAa;AAAa,oBAAc,aAAa;AACzD,QAAI,aAAa;AAAa,qBAAe;AAAA,EAAK,aAAa;AAC/D,WAAO,YAAY,QAAQ,WAAW,WAAW,WAAW;AAE5D,QAAI,aAAa,SAAS,YAAY,MAAM;AAAK,aAAO,WAAW;AAAA,aAC1D,aAAa,SAAS,YAAY,MAAM;AAC7C,aAAO,WAAW;AAAA,aACb,aAAa,SAAS,YAAY,MAAM;AAC7C,aAAO,WAAW;AAEtB,WAAO,OAAO;AACd,WAAO,QAAQ;AACf,WAAO,YAAY;AACnB,WAAO,SAAS,cAAc,WAAW;AACzC,WAAO,OAAO,KAAK,OAAO;AAC1B,WAAO,OAAO,KAAK,QAAQ;AAE3B,QAAI,aAAa,aAAa;AAC1B,YAAM,OAAO,aAAa,YAAY,YAAY;AAClD,UAAI,aAAa,SAAS,YAAY,MAAM,UAAU;AAClD,eAAO,SAAS,CAAC;AACjB,YAAI,KAAK,SAAS,UAAU,GAAG;AAC3B,iBAAO,OAAO,OAAO;AACrB,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,UACV;AAAA,QACJ,OAAO;AACH,iBAAO,OAAO,OAAO;AACrB,cAAI,OAAO,SAAS,QAAQ;AACxB,mBAAO,OAAO,KAAK,OAAO;AAC1B,mBAAO,OAAO,KAAK,QAAQ;AAC3B,mBAAO,UAAU;AAAA,cACb,MAAM;AAAA,cACN,WAAW;AAAA,YACf;AAAA,UACJ,WAAW,OAAO,SAAS,YAAY;AACnC,mBAAO,OAAO,KAAK,OAAO;AAC1B,mBAAO,OAAO,KAAK,QAAQ;AAC3B,mBAAO,UAAU;AAAA,cACb,MAAM;AAAA,cACN,WAAW;AAAA,YACf;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa,SAAS,YAAY,MAAM,aAAa;AACrD,eAAO,YAAY,CAAC;AACpB,cAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,cAAM,QAAQ,CAAC,UAAU;AACrB,kBAAQ,SAAS;AACjB,kBAAQ,MAAM,QAAQ,oBAAoB,EAAE;AAC5C,cAAI,CAAC;AAAO;AACZ,cAAI,MAAM,SAAS,MAAM;AAAG;AAE5B,cAAI,MAAM,SAAS,SAAS;AACxB,mBAAO,UAAU,UAAU;AAAA,mBACtB,MAAM,SAAS,QAAQ;AAC5B,mBAAO,UAAU,UAAU;AAAA,mBACtB;AACL,mBAAO,UAAU,OAAO,MAAM,YAAY;AAAA,QAClD,CAAC;AACD,YAAI,CAAC,OAAO,UAAU,SAAS;AAC3B,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa,SAAS,YAAY,MAAM,YAAY;AACpD,eAAO,WAAW,CAAC;AACnB,cAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,cAAM,QAAQ,CAAC,UAAU;AACrB,kBAAQ,SAAS;AACjB,kBAAQ,MAAM,QAAQ,mBAAmB,EAAE;AAC3C,cAAI,CAAC;AAAO;AACZ,cAAI,MAAM,SAAS,MAAM;AAAG;AAE5B,cAAI,MAAM,SAAS,OAAO;AACtB,mBAAO,SAAS,QAAQ,MAAM,YAAY;AAAA,mBACrC;AACL,mBAAO,SAAS,OAAO,MAAM,YAAY;AAAA,QACjD,CAAC;AACD,YAAI,OAAO,SAAS,QAAQ;AACxB,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,UAChB;AAAA,QACJ,OAAO;AACH,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,aAAa,SAAS,YAAY,MAAM,gBAAgB;AACxD,eAAO,eAAe,CAAC;AACvB,YAAI,KAAK,SAAS,eAAe;AAC7B,iBAAO,aAAa,gBAAgB;AACxC,YAAI,KAAK,SAAS,UAAU;AACxB,iBAAO,aAAa,WAAW;AACnC,YAAI,KAAK,SAAS,QAAQ;AACtB,iBAAO,aAAa,SAAS;AAGjC,YAAI,OAAO,aAAa,QAAQ;AAC5B,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,UAChB;AAAA,QACJ;AACA,YAAI,OAAO,aAAa,UAAU;AAC9B,iBAAO,UAAU;AAAA,YACb,MAAM;AAAA,YACN,WAAW;AAAA,YACX,YAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,eAAe,aAAa,MAAM,SAAS,MAAM;AAAA,EAC5D;AACJ;;;ACpKO,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACH,uCAAc,CAAC,QAAQ;AACnB,YAAM,SAAS;AAAA,QACX,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,SAAS;AAAA,MACb;AACA,YAAM,QAAQ,IAAI,MAAM,GAAG;AAC3B,UAAI,MAAM,SAAS,GAAG;AAClB,cAAM,IAAI,MAAM,GAAG,MAAM,YAAY;AACrC,YAAI,KAAK,EAAE;AAAI,iBAAO,SAAS,SAAS,EAAE,EAAE;AAC5C,YAAI,KAAK,EAAE;AAAI,iBAAO,OAAO,EAAE,OAAO,MAAM,aAAa;AAAA,MAC7D;AACA,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,cAAM,IAAI,MAAM,GAAG,MAAM,aAAa;AACtC,YAAI,KAAK,EAAE,IAAI;AACX,cAAI,EAAE,GAAG,YAAY,EAAE,SAAS,IAAI;AAAG,mBAAO,UAAU,SAAS,EAAE,EAAE;AAAA;AAChE,mBAAO,SAAS,SAAS,EAAE,EAAE;AAAA,QACtC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,aAAa,aAAa;AACtB,UAAM,UAAU,SAAS,YAAY,QAAQ,MAAM;AACnD,UAAM,gBAAgB,CAAC;AAEvB,YAAQ,QAAQ,CAAC,kBAAkB;AAC/B,UAAI;AACA,cAAM,WAAW,KAAK,YAAY,aAAa;AAC/C,sBAAc,KAAK,QAAQ;AAAA,MAC/B,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,eAAe;AACvB,UAAM,SAAS,CAAC;AAChB,UAAM,SAAS,CAAC;AAChB,UAAM,SAAS,CAAC;AAChB,WAAO,SAAS;AAChB,WAAO,SAAS;AAEhB,WAAO,cAAc,iBAAiB,aAAa;AACnD,WAAO,aAAa,gBAAgB,aAAa;AAEjD,WAAO,KAAK;AAAA,MACR,MAAM,SAAS,UAAU,cAAc,EAAE,EAAE,EAAE;AAAA,IACjD;AACA,WAAO,OAAO;AAId,QAAI,cAAc,OAAO;AACrB,aAAO,QAAQ,cAAc,MAAM,YAAY,EAAE,QAAQ,OAAO,GAAG;AAAA,IAEvE,WAAW,cAAc,YAAY,cAAc,SAAS,YAAY,EAAE,SAAS,QAAQ,GAAG;AAC1F,aAAO,QAAQ,cAAc,SACxB,YAAY,EACZ,QAAQ,YAAY,EAAE,EACtB,QAAQ,OAAO,GAAG;AAAA,IAC3B,WAAW,cAAc,YAAY,cAAc,SAAS,YAAY,EAAE,SAAS,eAAe,GAAG;AACjG,aAAO,QAAQ;AAAA,IACnB;AAEA,QAAI,OAAO,MAAM,SAAS,QAAQ,GAAG;AACjC,aAAO,QAAQ,OAAO,MAAM,QAAQ,WAAW,EAAE;AAAA,IACrD;AAEA,WAAO,YAAY;AACnB,WAAO,QAAQ;AAAA,MACX,MAAM,SAAS,UAAU,cAAc,QAAQ,EAAE,EAAE;AAAA,IACvD;AAEA,QAAI,cAAc,KAAK,YAAY,MAAM,SAAS;AAC9C,aAAO,OAAO;AACd,aAAO,WAAW;AAClB,YAAM,QAAQ,CAAC;AACf,aAAO,QAAQ;AACf,YAAM,QAAQ,SAAS,cAAc,KAAK;AAAA,IAC9C,WAAW,cAAc,KAAK,YAAY,MAAM,UAAU;AACtD,aAAO,WAAW;AAClB,UAAI,OAAO,MAAM,YAAY,EAAE,SAAS,OAAO,GAAG;AAC9C,eAAO,WAAW;AAAA,MACtB;AACA,YAAM,QAAQ,CAAC;AACf,aAAO,QAAQ;AACf,YAAM,KAAK;AAAA,QACP,MAAM,SAAS,UAAU,cAAc,EAAE,EAAE,EAAE;AAAA,MACjD;AACA,UAAI,cAAc,MAAM;AAEpB,cAAM,QAAQ,cAAc,KAAK,YAAY;AAC7C,cAAM,QAAQ;AAAA,UACV,aAAa,MAAM,SAAS,IAAI;AAAA,UAChC,WAAW,MAAM,SAAS,IAAI;AAAA,UAC9B,YAAY,MAAM,SAAS,IAAI;AAAA,UAC/B,WAAW,MAAM,SAAS,IAAI;AAAA,QAClC;AAAA,MACJ;AACA,UAAI,cAAc,SAAS,QAAQ,cAAc,MAAM,QAAQ,MAAM;AAEjE,cAAM,QAAQ,MAAM,QAAQ,cAAc,MAAM,IAAI,IAC9C,cAAc,MAAM,OACpB,CAAC,cAAc,MAAM,IAAI;AAC/B,cAAM,QAAQ,CAAC,SAAS;AACpB,kBAAQ,IAAI,IAAI;AAAA,QACpB,CAAC;AAAA,MACL;AACA,UAAI,cAAc,UACd,cAAc,OAAO,SACrB,cAAc,OAAO,UACrB,cAAc,OAAO,QACrB,cAAc,OAAO,SAAS;AAC9B,gBAAQ,IAAI,cAAc,MAAM;AAChC,cAAM,SAAS;AAAA,UACX,OAAO,SAAS,cAAc,OAAO,MAAM,MAAM,GAAG,EAAE,EAAE;AAAA,UACxD,QAAQ,SAAS,cAAc,OAAO,OAAO,MAAM,GAAG,EAAE,EAAE;AAAA,UAC1D,MAAM,SAAS,cAAc,OAAO,KAAK,MAAM,GAAG,EAAE,EAAE;AAAA,UACtD,SAAS,SAAS,cAAc,OAAO,QAAQ,MAAM,GAAG,EAAE,EAAE;AAAA,QAChE;AAAA,MACJ;AAAA,IAEJ,WAAW,cAAc,KAAK,YAAY,MAAM,UAAU;AACtD,aAAO,WAAW;AAAA,IACtB;AACA;AAEI,YAAM,IAAI,KAAK,YAAY,cAAc,cAAc;AACvD,aAAO,OAAO,EAAE;AAChB,aAAO,OAAO,CAAC;AACf,aAAO,KAAK,OAAO,EAAE;AACrB,UAAI,EAAE,WAAW,EAAE,QAAQ;AACvB,cAAM,SAAS,CAAC;AAChB,eAAO,SAAS;AAChB,eAAO,QAAQ;AAAA,UACX,QAAQ,EAAE;AAAA,UACV,SAAS,EAAE;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,WAAW,eAAe,cAAc,MAAM,UAAU,MAAM;AACpE,WAAO;AAAA,EACX;AACJ;;;ACpJO,IAAM,kBAAN,MAAsB;AAAA,EACzB,gBAAgB,aAAa;AAEzB,UAAM,mBAAmB,SAAS,YAAY,WAAW,SAAS;AAClE,UAAM,kBAAkB,CAAC;AAEzB,qBAAiB,QAAQ,CAACC,sBAAqB;AAC3C,UAAI;AACA,cAAM,WAAW,KAAK,eAAeA,iBAAgB;AACrD,wBAAgB,KAAK,QAAQ;AAAA,MACjC,SACQ,GAAP;AACG,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,eAAe,kBAAkB;AAC7B,UAAM,SAAS,CAAC;AAIhB,UAAM,uBAAuB,iBAAiB,cAAc,YAAY;AACxE,QAAK,wBAAwB,IAAI,gBAAiB;AAC9C,aAAO,OAAO;AAAA,IAClB,OACK;AAED,UAAI,yBAAyB,UAAU;AACnC,eAAO,OAAO;AAAA,MAClB,OACK;AACD,eAAO,OAAO;AAAA,MAClB;AAAA,IACJ;AAEA,WAAO,OAAO,iBAAiB;AAC/B,WAAO,YAAY,iBAAiB;AACpC,WAAO,cAAc,iBAAiB,gBAAgB;AAGtD,UAAM,WAAW,iBAAiB,OAAO,iBAAiB,OAAO,iBAAiB;AAClF,UAAM,WAAW,eAAe,UAAU,aAAa,MAAM;AAC7D,WAAO;AAAA,EACX;AACJ;;;AChDO,IAAM,gBAAN,MAAoB;AAAA,EACvB,cAAc,aAAa;AAEvB,UAAM,kBAAkB,SAAS,YAAY,SAAS,OAAO;AAC7D,UAAM,iBAAiB,CAAC;AAExB,oBAAgB,QAAQ,CAAC,mBAAmB;AACxC,UAAI;AACA,cAAM,WAAW,KAAK,aAAa,cAAc;AACjD,uBAAe,KAAK,QAAQ;AAAA,MAChC,SAAS,GAAP;AACE,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,aAAa,gBAAgB;AACzB,UAAM,SAAS,CAAC;AAChB,WAAO,OAAO,eAAe;AAI7B,QAAI,eAAe,WAAW,YAAY,EAAE,SAAS,OAAO,GAAG;AAC3D,aAAO,aAAa,eAAe,WAC9B,YAAY,EACZ,QAAQ,UAAU,EAAE,EACpB,QAAQ,KAAK,EAAE;AAAA,IACxB,OACK;AACD,aAAO,aAAa,eAAe;AAAA,IACvC;AAEA,WAAO,UAAU,eAAe;AAChC,WAAO,SAAU,eAAe,OAAO,YAAY,MAAM;AACzD,WAAO,YAAa,eAAe,UAAU,YAAY,MAAM;AAC/D,WAAO,cAAc,iBAAiB,cAAc;AAEpD,UAAM,WAAW,eAAe,OAAO,eAAe,OAAO;AAC7D,UAAM,WAAW,eAAe,UAAU,WAAW,MAAM;AAC3D,WAAO;AAAA,EACX;AACJ;;;AC/BO,IAAM,cAAN,MAAkB;AAAA,EAOrB,MAAM,aAAa,eAAe;AAC9B,UAAM,cAAc,CAAC;AAErB,QAAI,cAAc,aAAa,YAAY,aAAa,YAAY,UAAU,SAAS;AACnF,YAAM,kBAAkB,IAAI,cAAc,EAAE,eAAe,WAAW;AACtE,YAAM,UAAU,KAAK,MAAM,aAAa,eAAe;AAAA,IAC3D;AAEA,QAAI,cAAc,WAAW,YAAY,WAAW,QAAQ,YAAY,QAAQ,UAAU,MAAM;AAC5F,YAAM,gBAAgB,IAAI,aAAa,EAAE,aAAa,WAAW;AACjE,YAAM,UAAU,KAAK,MAAM,aAAa,aAAa;AAAA,IACzD;AAEA,QAAI,cAAc,SAAS,YAAY,UAAU,YAAY,OAAO,OAAO;AACvE,YAAM,eAAe,IAAI,YAAY,EAAE,YAAY,WAAW;AAC9D,YAAM,UAAU,KAAK,MAAM,aAAa,YAAY;AAAA,IACxD;AAEA,QAAI,cAAc,aAAa,YAAY,cAAc,YAAY,WAAW,WAAW;AACvF,YAAM,kBAAkB,IAAIC,iBAAgB,EAAE,gBAAgB,WAAW;AACzE,YAAM,UAAU,KAAK,MAAM,aAAa,eAAe;AAAA,IAC3D;AAEA,QAAI,cAAc,UAAU,YAAY,UAAU,YAAY,OAAO,OAAO;AACxE,YAAM,eAAe,IAAI,YAAY,EAAE,YAAY,WAAW;AAC9D,YAAM,UAAU,KAAK,MAAM,aAAa,YAAY;AAAA,IACxD;AAEA,QAAI,cAAc,aAAa,YAAY,SAAS,YAAY,MAAM,MAAM;AACxE,YAAM,QAAQ,SAAS,YAAY,MAAM,IAAI;AAC7C,YAAM,cAAc,IAAI,YAAY,EAAE,WAAW,KAAK;AACtD,YAAM,UAAU,KAAK,MAAM,aAAa,WAAW;AAAA,IACvD;AAEA,QAAI,cAAc,UAAU,YAAY,UAAU,YAAY,OAAO,OAAO;AACxE,YAAM,eAAe,IAAI,YAAY,EAAE,YAAY,WAAW;AAC9D,YAAM,UAAU,KAAK,MAAM,aAAa,YAAY;AAAA,IACxD;AAEA,QAAI,cAAc,YAAY,YAAY,YAAY,YAAY,SAAS,SAAS;AAChF,YAAM,iBAAiB,IAAI,cAAc,EAAE,cAAc,WAAW;AACpE,YAAM,UAAU,KAAK,MAAM,aAAa,cAAc;AAAA,IAC1D;AAEA,QAAI,cAAc,cAAc,YAAY,cAAc,YAAY,WAAW,WAAW;AACxF,YAAM,mBAAmB,IAAI,gBAAgB,EAAE,gBAAgB,WAAW;AAC1E,YAAM,UAAU,KAAK,MAAM,aAAa,gBAAgB;AAAA,IAC5D;AAEA,WAAO;AAAA,EACX;AACJ;;;AClEO,IAAM,oBAAN,MAAwB;AAAA,EAQrB,uBAAuB,OAAO,aAAa,eAAe;AAAA;AAC5D,cAAQ,IAAI,iDAAiD;AAC7D,cAAQ,IAAI,WAAW;AAEvB,cAAQ,IAAI,qCAAqC;AACjD,cAAQ,IAAI,aAAa;AAEzB,UAAI,CAAC,YAAY,cAAc,CAAC,YAAY,WAAW,WAAW;AAC9D,gBAAQ,IAAI,6DAA6D;AACzE;AAAA,MACJ;AAEA,YAAM,mBAAmB,YAAY,WAAW;AAChD,YAAM,uBAAuB,IAAI,qBAAqB;AACtD,YAAM,mBAAmB,MAAM,qBAAqB,OAAO,MAAM,SAAS,gBAAgB;AAC1F,YAAM,QAAQ,IAAI,YAAY,EAAE,MAAM,kBAAkB,aAAa;AAGrE,YAAM,MAAM,OAAO,gBAAgB;AACnC,YAAM,MAAM,wBAAwB,QAAQ,KAAK;AAAA,IACrD;AAAA;AACJ;;;AChCO,IAAM,oBAAN,cAAgC,gBAAgB;AAAA,EACnD,WAAW,iBAAiB;AACxB,UAAM,UAAU,MAAM;AACtB,YAAQ,KAAK;AACb,YAAQ,UAAU,CAAC,aAAa;AAChC,YAAQ,QAAQ;AAChB,YAAQ,WAAW;AACnB,YAAQ,QAAQ;AAChB,YAAQ,SAAS;AACjB,WAAO;AAAA,EACX;AAAA,EAEA,UAAU;AACN,WAAO,CAAC;AAAA,EACZ;AAAA,EAEA,kBAAkB,MAAM;AACpB,SAAK,KAAK,wBAAwB,EAAE,MAAM,CAAO,UAAU;AApBnE;AAqBY,YAAM,eAAe;AAErB,YAAM,cAAc,KAAK,MAAM,EAAE,eAAe,EAAE,IAAI,CAAC;AACvD,YAAM,gBAAgB;AAAA,QAClB,SAAS,EAAE,UAAU,EAAE,GAAG,UAAU;AAAA,QACpC,OAAO,EAAE,QAAQ,EAAE,GAAG,UAAU;AAAA,QAChC,WAAW,EAAE,YAAY,EAAE,GAAG,UAAU;AAAA,QACxC,WAAW,EAAE,OAAO,EAAE,GAAG,UAAU;AAAA,QACnC,WAAW,EAAE,YAAY,EAAE,GAAG,UAAU;AAAA,QACxC,QAAQ,EAAE,SAAS,EAAE,GAAG,UAAU;AAAA,QAClC,QAAQ,EAAE,SAAS,EAAE,GAAG,UAAU;AAAA,QAClC,UAAU,EAAE,WAAW,EAAE,GAAG,UAAU;AAAA,QACtC,YAAY,EAAE,aAAa,EAAE,GAAG,UAAU;AAAA,MAC9C;AAEA,YAAM,WAAW,IAAI,kBAAkB;AACvC,YAAM,SAAS,uBAAuB,KAAK,QAAQ,aAAa,aAAa;AAE7E,eAAG,kBAAH,mBAAkB;AAAA,QACd;AAAA;AAEJ,WAAK,MAAM;AAAA,IACf,EAAC;AAAA,EACL;AACJ;;;ACIA,IAAI,mBAA2B;AAG/B,IAAM,aAAa,CAAC,IAAI,OAAO;AACnB,MAAI,GAAG,OAAO,GAAG;AAAM,WAAO;AAC9B,MAAI,GAAG,OAAO,GAAG;AAAM,WAAO;AAC9B,SAAO;AACX;AACR,IAAM,iBAAiB,CAAC,MAAM,UAAU;AAzDxC;AA0DI,QAAM,gBAAe,gBAAK,SAAL,mBAAW,eAAX,mBAAuB;AAC5C,QAAM,iBAAgB,iBAAM,SAAN,mBAAY,eAAZ,mBAAwB;AAC9C,MAAI,gBAAgB,CAAC;AAAe,WAAO;AAC3C,MAAI,iBAAiB,CAAC;AAAc,WAAO;AAC3C,MAAI,KAAK,OAAO,MAAM;AAAM,WAAO;AACnC,MAAI,KAAK,OAAO,MAAM;AAAM,WAAO;AACnC,SAAO;AACX;AACA,IAAM,iBAAiB,CAAC,GAAQ,MAAW;AACvC,MAAI,EAAE,KAAK,SAAS,cAAc,EAAE,KAAK,SAAS;AAAY,WAAO;AACrE,MAAI,EAAE,KAAK,SAAS,cAAc,EAAE,KAAK,SAAS;AAAY,WAAO;AACrE,SAAO,EAAE,OAAO,EAAE,OAAO,KAAK;AAClC;AAYO,IAAM,oBAAN,cAAgC,WAAW;AAAA,EAkB9C,eAAe,MAAM;AAEjB,UAAM,GAAG,IAAI;AAlBjB,sBAAuB,CAAC;AAExB,oBAA4B;AAAA,MACpB,QAAQ;AAAA,MACR,qBAAqB;AAAA,IACzB;AAEJ,mBAA8B;AAAA,MAC1B,QAAQ;AAAA,IACZ;AAYI,SAAK,oBAAoB,KAAK,SAAS,iBAAiB;AAAA,EAC5D;AAAA,EASA,sBAAgC;AAC5B,WAAO,CAAC,QAAQ;AAAA,EACpB;AAAA,EAYA,wBAAkC;AAC9B,WAAO,CAAC;AAAA,EACZ;AAAA,EAOA,wBAAkC;AAC9B,WAAO,CAAC;AAAA,EACZ;AAAA,EAMA,WAAW,iBAAiB;AACxB,WAAO,YAAY,MAAM,gBAAgB;AAAA,MACrC,SAAS,CAAC,OAAO,SAAS,OAAO;AAAA,MACjC,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,MAAM;AAAA,QACF;AAAA,UACI,aAAa;AAAA,UACb,iBAAiB;AAAA,UACjB,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAWA,IAAI,WAAW;AACX,UAAM,OAAO;AAEb,QAAI,KAAK,MAAM,SAAS;AACpB,aAAO,GAAG,sBAAsB,KAAK,MAAM;AAAA,IAC/C;AAEA,WAAO,GAAG,cAAc,KAAK,MAAM;AAAA,EACvC;AAAA,EAGM,QAAQ,SAAS;AAAA;AAGnB,UAAI,OAAO,8CAAM,gBAAN,IAAc;AACzB,YAAM,YAAY,KAAK,MAAM,SAAS,KAAK;AAE3C,aAAO,iCACA,OADA;AAAA,QAGH,MAAM,UAAU;AAAA,QAEhB,QAAQ,UAAU;AAAA,MACtB;AAGA,WAAK,SAAS;AACd,WAAK,UAAU,KAAK;AAEpB,WAAK,wBAAwB,IAAI;AACjC,WAAK,uBAAuB,IAAI;AAGhC,WAAK,wBAAwB,IAAI;AACjC,WAAK,sBAAsB,IAAI;AAC/B,WAAK,0BAA0B,IAAI;AAEnC,WAAK,WAAW,KAAK,kBAAkB,IAAI;AAC3C,WAAK,UAAU,8BAA8B,KAAK,SAAS,OAAO;AAClE,WAAK,cAAc,KAAK,uBAAuB;AAC/C,WAAK,YAAY,KAAK,0BAA0B,KAAK,WAAW;AAChE,WAAK,eAAe,KAAK,qBAAqB,KAAK,WAAW;AAC9D,WAAK,oBAAoB,KAAK;AAE9B,WAAK,qBAAqB,KAAK,2BAA2B;AAG1D,WAAK,gBAAgB,MAAM,WAAW,WAAW,UAAU,OAAO,YAAY,OAAO;AAAA,QAIjF,OAAO;AAAA,QACP,YAAY,KAAK;AAAA,MACnB,CAAC;AAEH,aAAO;AAAA,IACX;AAAA;AAAA,EAGA,kBAAkB,MAAM;AACpB,UAAM,kBAAkB,IAAI;AAE5B,YAAQ,oBAAoB,MAAM,IAAI;AAGtC,SAAK,KAAK,iBAAiB,EAAE,GAAG,SAAQ,WAAS,qBAAqB,OAAO,KAAK,QAAQ,CAAC;AAG3F,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,SAAK,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AAC/D,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AAGnE,SAAK,KAAK,WAAW,EAAE,GAAG,UAAU,KAAK,0BAA0B,KAAK,IAAI,CAAC;AAC7E,SAAK,KAAK,WAAW,EAAE,GAAG,UAAU,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAC3E,SAAK,KAAK,oBAAoB,EAAE,GAAG,SAAS,KAAK,0BAA0B,KAAK,IAAI,CAAC;AAGrF,SAAK,KAAK,SAAS,EAAE,KAAK;AAC1B,SAAK,KAAK,WAAW,EAAE,GAAG,SAAS,KAAK,uCAAuC,KAAK,IAAI,CAAC;AAGzF,SAAK,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AAC/D,SAAK,KAAK,OAAO,EAAE,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAGtD,SAAK,KAAK,0BAA0B,EAAE,GAAG,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AACpF,SAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAC7E,SAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAChF,SAAK,KAAK,yBAAyB,EAAE,GAAG,SAAS,KAAK,8BAA8B,KAAK,IAAI,CAAC;AAC9F,SAAK,KAAK,uBAAuB,EAAE,GAAG,SAAS,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAC1F,SAAK,KAAK,uBAAuB,EAAE,GAAG,WAAW,KAAK,8BAA8B,KAAK,IAAI,CAAC;AAC9F,SAAK,KAAK,uBAAuB,EAAE,GAAG,WAAW,KAAK,4BAA4B,KAAK,IAAI,CAAC;AAC5F,SAAK,KAAK,uBAAuB,EAAE,GAAG,UAAU,KAAK,qCAAqC,KAAK,IAAI,CAAC;AACpG,SAAK,KAAK,mBAAmB,EAAE,GAAG,UAAU,KAAK,mBAAmB,KAAK,IAAI,CAAC;AAC9E,SAAK,KAAK,sBAAsB,EAAE,GAAG,SAAS,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAGpF,SAAK,KAAK,8BAA8B,EAAE,GAAG,SAAS,KAAK,yBAAyB,KAAK,IAAI,CAAC;AAC9F,SAAK,KAAK,8BAA8B,EAAE,GAAG,eAAe,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAGlG,SAAK,KAAK,YAAY,EAAE,GAAG,UAAU,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAC3E,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,CAAO,UAAO;AAAG,kBAAK,yBAAyB,OAAO,CAAC;AAAA,MAAC;AAChG,SAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,CAAO,UAAO;AAAG,kBAAK,yBAAyB,OAAO,EAAE;AAAA,MAAC;AACpG,SAAK,KAAK,eAAe,EAAE,GAAG,SAAS,KAAK,eAAe,KAAK,IAAI,CAAC;AACrE,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1E,SAAK,KAAK,eAAe,EAAE,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,yBAAyB,KAAK,IAAI,CAAC;AAClG,SAAK,KAAK,eAAe,EAAE,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,yBAAyB,KAAK,IAAI,CAAC;AACxG,SAAK,KAAK,eAAe,EAAE,KAAK,MAAM,EAAE,GAAG,SAAS,KAAK,yBAAyB,KAAK,IAAI,CAAC;AAC5F,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAGvE,SAAK,KAAK,aAAa,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AACrE,SAAK,KAAK,uBAAuB,EAAE,GAAG,SAAS,KAAK,0BAA0B,KAAK,IAAI,CAAC;AACxF,SAAK,KAAK,sBAAsB,EAAE,GAAG,SAAS,KAAK,yBAAyB,KAAK,IAAI,CAAC;AACtF,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAC5E,SAAK,KAAK,eAAe,EAAE,GAAG,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAC1E,SAAK,KAAK,aAAa,EAAE,GAAG,SAAS,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACtE,SAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,KAAK,wBAAwB,KAAK,IAAI,CAAC;AAClF,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAChF,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAG5E,SAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAGzE,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1E,SAAK,KAAK,aAAa,EAAE,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AACjE,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AACtE,SAAK,KAAK,iBAAiB,EAAE,GAAG,SAAS,KAAK,aAAa,KAAK,IAAI,CAAC;AACrE,SAAK,KAAK,kBAAkB,EAAE,GAAG,SAAS,KAAK,iBAAiB,KAAK,IAAI,CAAC;AAG1E,SAAK,KAAK,qBAAqB,EAAE,GAAG,SAAS,KAAK,oBAAoB,KAAK,IAAI,CAAC;AAChF,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,SAAK,KAAK,YAAY,EAAE,KAAK,KAAK,yCAAyC,KAAK,IAAI,CAAC;AACrF,SAAK,KAAK,mBAAmB,EAAE,GAAG,SAAS,KAAK,uBAAuB,KAAK,IAAI,CAAC;AAGjF,SAAK,KAAK,cAAc,EAAE,GAAG,SAAS,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,SAAK,KAAK,sBAAsB,EAAE,GAAG,UAAU,KAAK,2BAA2B,KAAK,IAAI,CAAC;AAGzF,SAAK,KAAK,uCAAuC,EAAE,GAAG,SAAS,KAAK,qCAAqC,KAAK,IAAI,CAAC;AAAA,EACvH;AAAA,EASA,uBAAuB,WAAW;AAE9B,UAAM,iBAAiB,KAAK,sBAAsB;AAClD,eAAW,QAAQ,OAAO,KAAK,UAAU,KAAK,GAAG;AAC7C,UAAI,eAAe,SAAS,IAAI;AAAG;AACnC,UAAI,UAAU,MAAM,MAAM,MAAM,WAAW;AAAG,eAAO,UAAU,MAAM;AAAA,IACzE;AAEA,WAAO;AAAA,EACX;AAAA,EAOA,mBAAmB,WAAW;AAC1B,eAAW,QAAQ,KAAK,sBAAsB,GAAG;AAC7C,UAAI,UAAU,MAAM,eAAe,IAAI;AAAG;AAE1C,gBAAU,MAAM,QAAQ;AAAA,QACpB;AAAA,QACA,OAAO,IAAI,UAAU;AAAA,QACrB,OAAO,CAAC;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AAAA,EAMM,aAAa,OAAO;AAAA;AAxW9B;AA0WQ,YAAM,WAAW;AAAA,QACb,SAAS,KAAK,MAAM;AAAA,QACpB,SAAS,KAAK,MAAM,WAAU,YAAO,UAAP,mBAAc,KAAK;AAAA,QACjD,SAAS,KAAK,MAAM,WAAU,UAAK,MAAM,UAAX,mBAAkB,KAAK;AAAA,QACrD,MAAM;AAAA,QACN,MAAM,CAAC;AAAA,MACX;AAIA,YAAM,UAAU,MAAM;AACtB,cAAQ,QAAQ,QAAQ,UAAU;AAAA,QAE9B,KAAK;AAED,mBAAS,OAAO;AAChB,mBAAS,OAAO;AAAA,YACZ,SAAS,QAAQ,QAAQ;AAAA,YACzB,OAAO,KAAK,MAAM,SAAS,QAAQ,QAAQ,MAAM;AAAA,UACrD;AAGA,gBAAM,aAAa,QAAQ,cAAc,KAAK,UAAU,QAAQ,CAAC;AAEjE;AAAA,QAGJ,KAAK;AAED,gBAAM,UAAU,QAAQ,QAAQ,OAAO,SAAS,GAAG,IAAI,QAAQ,QAAQ,OAAO,MAAM,GAAG,EAAE,KAAK,QAAQ,QAAQ;AAE9G,mBAAS,OAAO;AAChB,mBAAS,OAAO;AAAA,YACZ;AAAA,YACA,OAAO,KAAK,MAAM,SAAS,OAAO;AAAA,UACtC;AAGA,gBAAM,aAAa,QAAQ,cAAc,KAAK,UAAU,QAAQ,CAAC;AAEjE;AAAA,QAGJ;AAEI,iBAAO,8CAAM,qBAAN,MAAmB,KAAK;AAAA,MACvC;AAAA,IACJ;AAAA;AAAA,EAOM,QAAQ,OAAkB;AAAA;AAC5B,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,UAAI,CAAC,MAAM;AAAc;AAEzB,YAAM,YAAY,MAAM,8CAAM,gBAAN,MAAc,KAAK;AAM3C,UAAI,MAAM,QAAQ,SAAS,GAAG;AAC1B,cAAM,QAAQ,UAAU,OAAO,CAAAC,cAAYA,qBAAoB,OAAO;AACtE,cAAM,KAAK,SAAS,UAAU,SAAS,KAAK,mBAAmB,KAAK;AAAA,MACxE;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,EAMM,WAAW,MAAM;AAAA;AACnB,YAAM,QAAQ,KAAK,yBAAyB;AAC5C,WAAK,qBAAqB;AAE1B,YAAM,8CAAM,gBAAN,MAAc,GAAG,IAAI;AAE3B,WAAK,wBAAwB;AAC7B,WAAK,4BAA4B,KAAK;AAAA,IAC1C;AAAA;AAAA,EAMA,2BAAqC;AACjC,UAAM,YAAY,EAAE,KAAK,OAAO,EAAE,KAAK,aAAa;AACpD,WAAO,UAAU,SAAS,UAAU,KAAK;AAAA,EAC7C;AAAA,EAKA,4BAA4B,OAAO;AAC/B,QAAI,SAAS,MAAM,MAAM;AACrB,UAAI,CAAC,KAAK;AAAM;AAEhB,YAAM,UAAU,KAAK,KAAK,MAAM;AAChC,UAAI,SAAS;AAET,gBAAQ,MAAM;AAGd,YAAI,CAAC,YAAY,OAAO,EAAE,SAAS,QAAQ,IAAI;AAAG;AAElD,gBAAQ,qBAAqB,QAAQ,kBAAkB,MAAM,gBAAgB,MAAM,YAAY;AAAA,MACnG;AAAA,IACJ;AAAA,EAEJ;AAAA,EAMA,uBAAuB;AACnB,UAAM,aAAa,KAAK,gBAAgB;AACxC,QAAI,WAAW,QAAQ;AACnB,WAAK,UAAU,WAAW,KAAK,WAAW;AAAA,IAC9C;AAAA,EACJ;AAAA,EAMA,0BAA0B;AACtB,UAAM,aAAa,KAAK,gBAAgB;AACxC,QAAI,WAAW,UAAU,KAAK,WAAW,MAAM;AAC3C,iBAAW,KAAK,aAAa,KAAK,OAAO;AAAA,IAC7C;AAAA,EACJ;AAAA,EAMA,kBAAkB;AACd,WAAO,EAAE,KAAK,OAAO,EAAE,KAAK,0BAA0B;AAAA,EAC1D;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,eAAe;AACrB,YAAM,OAAO,QAAQ,WAAW,KAAK;AAGrC,YAAM,WAAW;AAAA,QACb,MAAM,OAAO;AAAA,QACb;AAAA,MACJ;AACA,YAAM,QAAQ,MAAM,KAAK,MAAM,wBAAwB,QAAS,CAAC,QAAQ,GAAG,EAAC,aAAa,KAAI,CAAC;AAC/F,UAAI,CAAC;AAAO;AAGZ,UAAI,KAAK,sBAAsB,KAAK,SAAS,iBAAiB;AAC1D,cAAM,KAAK,SAAS,UAAU,SAAS,KAAK,mBAAmB,KAAK;AAAA,IAC5E;AAAA;AAAA,EAEM,YAAY,OAAO;AAAA;AA/gB7B;AAghBQ,YAAM,eAAe;AACrB,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,UAAI;AAAM,eAAM,UAAK,UAAL,mBAAY,OAAO;AAAA,IACvC;AAAA;AAAA,EAEM,cAAc,OAAO;AAAA;AACvB,YAAM,eAAe;AAErB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,UAAI,CAAC;AAAM;AACX,YAAM,KAAK,MAAM,UAAU,WAAW,IAAI;AAE1C,aAAO,MAAM,KAAK,MAAM,wBAAwB,QAAQ,CAAC,GAAG,CAAC;AAAA,IACjE;AAAA;AAAA,EAEM,YAAY,OAAO;AAAA;AACrB,YAAM,eAAe;AACrB,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,UAAI,MAAM;AACN,cAAM,KAAK,WAAW,KAAK;AAAA,MAC/B;AAAA,IACJ;AAAA;AAAA,EAOM,QAAQ,OAAO;AAAA;AAljBzB;AAmjBQ,YAAM,eAAe;AAGrB,UAAI,UAAS,OAAE,MAAM,aAAa,EAAE,KAAK,MAA5B,mBAA+B;AAE5C,eAAS,0BAAU,EAAE,MAAM,aAAa,EAAE,OAAO,SAAS,EAAE,KAAK,EAAE;AAEnE,YAAM,QAAQ,OAAO,MAAM,GAAG;AAC9B,YAAM,UAAU,EAAE,MAAM;AACxB,cAAQ,MAAM,IAAI;AAAA,QACd,KAAK;AACD,gBAAM,KAAK,MAAM,WAAW;AAC5B;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,SAAS,OAAO;AACnD;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,QAAQ,OAAO;AAClD;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,SAAS,OAAO;AACnD;AAAA,QACJ,KAAK;AAED,gBAAM,KAAK,MAAM,kBAAkB,oBAAoB,OAAO;AAC9D;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,0BAA0B,OAAO;AACpE;AAAA,QAGJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,aAAa,OAAO;AACvD;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,oBAAoB,OAAO;AAC9D;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,cAAc,OAAO;AACxD;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,UAAU,OAAO;AACpD;AAAA,QAEJ,KAAK;AACD,kBAAQ,IAAI,qBAAqB,MAAM;AACvC;AAAA,QAEJ,KAAK;AACD,gBAAM,YAAY,MAAM;AACxB,kBAAQ,WAAW;AAAA,YACf,KAAK;AACD,oBAAM,KAAK,MAAM,kBAAkB,oBAAoB,OAAO;AAC9D;AAAA,YACJ,KAAK;AACD,oBAAM,KAAK,MAAM,kBAAkB,sBAAsB,OAAO;AAChE;AAAA,YACJ,KAAK;AACD,oBAAM,KAAK,MAAM,kBAAkB,uBAAuB,OAAO;AACjE;AAAA,UACR;AACA;AAAA,QAGJ,KAAK,aAAa;AACd,gBAAM,YAAY,MAAM;AACxB,cAAI,WAAW;AACX,kBAAM,KAAK,MAAM,cAAc,WAAW,OAAO;AAAA,UACrD;AACA;AAAA,QACJ;AAAA,QAEA,KAAK,SAAS;AACV,gBAAM,UAAU,MAAM;AACtB,gBAAM,KAAK,MAAM,UAAU,SAAS,OAAO;AAC3C;AAAA,QACJ;AAAA,QAEA,KAAK;AACD,gBAAM,aAAa,MAAM;AACzB,kBAAQ,YAAY;AAAA,YAChB,KAAK;AACD,oBAAM,OAAO,MAAM;AACnB,oBAAM,KAAK,MAAM,cAAc,MAAM,OAAO;AAC5C;AAAA,YACJ,KAAK;AACD,oBAAM,KAAK,MAAM,iBAAiB,OAAO;AACzC;AAAA,UACR;AAEA;AAAA,MAER;AAAA,IACJ;AAAA;AAAA,EAOM,yBAAyB,OAAO;AAAA;AAClC,YAAM,eAAe;AAErB,YAAM,QAAQ,OAAO,MAAM,cAAc,QAAQ,KAAK;AACtD,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,wBAAwB,EAAE,KAAK,EAAE;AAC7E,YAAM,OAAO,CAAC;AACd,UAAI,SAAS,UAAU,SAAS,YAAY;AACxC,cAAM,WAAW,cAAc;AAC/B,aAAK,YAAY;AAAA,MACrB,WAAW,SAAS,QAAQ;AACxB,cAAM,WAAW;AACjB,aAAK,YAAY;AAAA,MACrB,WAAW,SAAS,YAAY;AAC5B,cAAM,WAAW;AACjB,aAAK,YAAY;AAAA,MACrB,WAAW,SAAS,UAAU;AAE1B,eAAO,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAAA,MACjD;AACA,YAAM,KAAK,MAAM,OAAO,IAAI;AAAA,IAChC;AAAA;AAAA,EAMM,uBAAuB,OAAO;AAAA;AAChC,YAAM,eAAe;AAErB,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,wBAAwB,EAAE,KAAK,EAAE;AAC7E,YAAM,OAAO,CAAC;AACd,UAAI,SAAS,QAAQ;AACjB,aAAK,2BAA2B;AAAA,MACpC,WAES,SAAS,YAAY;AAC1B,aAAK,+BAA+B;AACpC,aAAK,wCAAwC;AAAA,MAEjD,WAAW,SAAS,QAAQ;AACxB,aAAK,+BAA+B;AAAA,MAExC,WAAW,SAAS,YAAY;AAC5B,aAAK,wCAAwC;AAAA,MAEjD,WAAW,SAAS,UAAU;AAC1B,cAAM,KAAK,MAAM,gBAAgB,CAAC;AAAA,MACtC;AAEA,YAAM,KAAK,MAAM,OAAO,IAAI;AAAA,IAChC;AAAA;AAAA,EASA,sBAAsB,MAAyB;AAC3C,SAAK,WAAW,KAAK,OAAO,YAAY;AACxC,SAAK,UAAU,KAAK,OAAO,YAAY;AAAA,EAC3C;AAAA,EAOA,uBAAuB,MAAyB;AAE5C,UAAM,EAAE,UAAU,IAAI,KAAK;AAC3B,aAAS,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,SAAS,GAAG;AAChD,UAAI,UAAU;AAAG,kBAAU,OAAO;AAAA,IACtC;AAEA,SAAK,iBAAiB,KAAK,OAAO,UAAU,kBAAkB,KAAK;AAAA,EACvE;AAAA,EAEA,wBAAwB,MAAyB;AAE7C,UAAM,aAAa,KAAK,OAAO;AAC/B,aAAS,CAAC,EAAE,SAAS,KAAK,OAAO,QAAQ,UAAU,GAAG;AAClD,UAAI,CAAC,UAAU,QAAQ;AACnB,YAAI,UAAU,SAAS;AAAG,iBAAO,UAAU;AAAA,MAC/C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,yBAAyB,MAAyB;AAE9C,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,QAAI,QAAQ;AACR,YAAM,mBAAmB,CAAC,cAA+B;AACrD,cAAM,MAAM,OAAO;AACnB,YAAI,KAAK;AACL,cAAI,CAAC,IAAI;AAAK,gBAAI,MAAM,CAAC;AACzB,cAAI,IAAI,SAAS;AAAG,mBAAO,IAAI;AAAA,QACnC;AAAA,MACJ;AAEA,OAAC,YAAY,mBAAmB,UAAU,QAAQ,EAAE,QAAQ,CAAC,QAAyB,iBAAiB,GAAG,CAAC;AAAA,IAC/G;AAAA,EACJ;AAAA,EAOA,yBAAyB;AAErB,UAAM,cAAoC,CAAC;AAE3C,UAAM,kBAAkB,CAAC;AAIzB,gBAAY,KAAK,SAAS,iBAAiB,QAAQ;AAAA,MAC/C,MAAM,KAAK,SAAS,iBAAiB;AAAA,MACrC,OAAO,KAAK,SAAS,iBAAiB;AAAA,MACtC,OAAO,CAAC;AAAA,IACZ;AACA,SAAK,mBAAmB,YAAY,KAAK,SAAS,iBAAiB,KAAK;AAGxE,WAAO,OAAO,KAAK,SAAS,OAAO,WAAW,EAAE,QAAQ,CAAC,EAAC,MAAM,OAAO,QAAO,MAAM;AAChF,kBAAY,QAAQ;AAAA,QAChB;AAAA,QACA;AAAA,QACA,OAAO,CAAC;AAAA,MACZ;AAEA,WAAK,mBAAmB,YAAY,KAAK;AAEzC,cAAQ,QAAQ,QAAM;AAClB,YAAI,gBAAgB;AAAK,kBAAQ,KAAK,yBAAyB,6BAA6B,YAAY,gBAAgB,0BAA0B,MAAM;AACxJ,wBAAgB,MAAM;AAAA,MAC1B,CAAC;AAAA,IACL,CAAC;AAED,UAAM,eAAe,KAAK,oBAAoB;AAG9C,SAAK,SAAS,MAAM,QAAQ,UAAQ;AAEhC,UAAI,aAAa,SAAS,KAAK,IAAI;AAAG;AAEtC,YAAM,YAAY,KAAK,kBAAkB,IAAI;AAO7C,YAAM,gBAAgB,gBAAgB,KAAK,OAAO,KAAK,SAAS,iBAAiB;AACjF,YAAM,YAAY,YAAY;AAG9B,UAAI,CAAC,UAAU,MAAM,KAAK,OAAO;AAC7B,kBAAU,MAAM,KAAK,QAAQ;AAAA,UACzB,MAAM,KAAK;AAAA,UACX,OAAO,IAAI,UAAU,KAAK;AAAA,UAC1B,OAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AAIA,gBAAU,MAAM,KAAK,MAAM,MAAM,KAAK,SAA0B;AAAA,IACpE,CAAC;AAED,WAAO,OAAO,WAAW,EAAE,QAAQ,eAAa;AAC5C,WAAK,uBAAuB,SAAS;AAGrC,aAAO,OAAO,UAAU,KAAK,EAAE,QAAQ,CAAC,SAAS;AAE7C,aAAK,MAAM,KAAK,UAAU;AAAA,MAC9B,CAAC;AAAA,IACL,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAOA,0BAA0B,aAAmC;AACzD,WAAO,YAAY,KAAK;AAAA,EAC5B;AAAA,EAUA,qBAAqB,aAAmC;AACpD,QAAG,KAAK,sBAAsB,EAAE,SAAS;AAAG,aAAO;AAEnD,eAAW,aAAa,OAAO,OAAO,WAAW,GAAG;AAChD,UAAI,OAAO,KAAK,UAAU,KAAK,EAAE,SAAS;AAAG,eAAO;AAAA,IACxD;AAEA,WAAO;AAAA,EACX;AAAA,EAMA,kBAAkB,MAA8B;AAC5C,UAAM,YAAY,KAAK,SAAS;AAEhC,UAAM,WAAW,KAAK,YAAY;AAClC,cAAU,cAAc,SAAS;AAEjC,cAAU,aAAa,SAAS;AAEhC,WAAO;AAAA,EACX;AAAA,EAMA,kBAAkB,MAAM;AACpB,UAAM,WAA4C,CAAC;AAGnD,WAAO,KAAK,OAAO,KAAK,UAAU,EAAE,QAAQ,UAAQ;AAChD,eAAS,QAAQ,CAAC;AAAA,IACtB,CAAC;AAGD,SAAK,SAAS,MAAM,QAAQ,CAAC,SAAkB;AAC3C,YAAM,YAAY,KAAK,kBAAkB,IAAI;AAC7C,eAAS,UAAU,MAAM,KAAK,SAAS;AAAA,IAC3C,CAAC;AAGD,WAAO,QAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC,MAAM,KAAK,MAAM;AAChD,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,gBAAM,KAAK,cAAc;AACzB;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,cAAc;AACzB;AAAA,QACJ;AACI,gBAAM,KAAK,UAAU;AACrB;AAAA,MACR;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAKA,wBAAwB,MAAM;AAC1B,SAAK,cAAc,KAAK,MAAM,YAAY;AAC1C,SAAK,WAAW,KAAK,MAAM,SAAS;AACpC,SAAK,YAAY,KAAK,MAAM,UAAU;AACtC,SAAK,YAAY,KAAK,MAAM;AAC5B,SAAK,aAAa,KAAK,MAAM;AAC7B,SAAK,iBAAiB,KAAK,MAAM;AAAA,EACrC;AAAA,EAEM,uBAAuB,OAAO;AAAA;AA16BxC;AA26BQ,YAAM,gBAAgB;AAEtB,UAAI,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC7C,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAAA,MACtF;AAEA,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,kBAAkB,QAAQ,mBAAmB,MAAM;AACzD,UAAI,CAAC;AAAiB;AACtB,YAAM,EAAC,OAAO,QAAQ,KAAI,IAAI;AAC9B,UAAI,CAAC,SAAS,CAAC;AAAQ;AAEvB,YAAM,QAAQ,SAAS,MAAM,cAAc,KAAK;AAChD,YAAM,KAAK,OAAO,SAAS,QAAQ,OAAO,EAAC,OAAO,MAAM,WAAW,KAAI,CAAC;AAAA,IAC5E;AAAA;AAAA,EAEM,yBAAyB,OAAO,IAAY;AAAA;AA77BtD;AA87BQ,YAAM,gBAAgB;AAEtB,UAAI,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC7C,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAAA,MACtF;AAEA,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,kBAAkB,QAAQ,mBAAmB,MAAM;AACzD,UAAI,CAAC;AAAiB;AACtB,YAAM,EAAC,OAAO,QAAQ,KAAI,IAAI;AAC9B,UAAI,CAAC,SAAS,CAAC;AAAQ;AAEvB,YAAM,KAAK,OAAO,SAAS,QAAQ,IAAI,EAAC,OAAO,KAAI,CAAC;AAAA,IACxD;AAAA;AAAA,EAEM,eAAe,OAAO;AAAA;AA/8BhC;AAg9BQ,YAAM,gBAAgB;AAEtB,UAAI,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC7C,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAAA,MACtF;AAEA,YAAM,SAAS,MAAM,cAAc,QAAQ;AAC3C,UAAI,CAAC;AAAQ;AAEb,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,OAAO,UAAU,MAAM;AAAA,IACtC;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AA/9BlC;AAg+BQ,YAAM,gBAAgB;AAEtB,UAAI,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG;AAC7C,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,iCAAiC;AAAA,MACtF;AAEA,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,OAAO,WAAW;AAAA,IACjC;AAAA;AAAA,EAEA,0BAA0B,MAAyB;AAC/C,SAAK,oBAAoB,IAAI;AAC7B,SAAK,uBAAuB,IAAI;AAChC,SAAK,sBAAsB,IAAI;AAAA,EACnC;AAAA,EAEA,cAAc,MAAyB,QAAgB;AACnD,UAAM,iBAAiB,CAAC;AACxB,aAAS,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAE7C,UAAI,MAAM,QAAQ;AACd;AAAA,MACJ;AAEA,UAAI,KAAK,WAAW,KAAK,OAAO,IAAI,GAAG;AACnC,uBAAe,OAAO;AAAA,MAC1B;AAAA,IACJ;AAEA,WAAO,QAAQ,WAAW,cAAc;AAAA,EAC5C;AAAA,EAEC,WAAW,KAAK,OAAO,MAAM;AAC1B,QAAI,KAAK,iBAAiB,KAAK,OAAO,IAAI,GAAG;AACzC,aAAO;AAAA,IACX;AACA,QAAI,KAAK,qBAAqB,KAAK,OAAO,IAAI,GAAG;AAC7C,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,kBAAkB,KAAK,KAAK;AAAA,EAC5C;AAAA,EAEA,kBAAkB,SAAS,OAAmB;AAC1C,WAAO,CAAC,KAAK,cAAc,SAAS,KAAK,KAAK,CAAC,KAAK,kBAAkB,KAAK,KAAK,KAAK,iBAAiB,SAAS,KAAK;AAAA,EACxH;AAAA,EAEA,iBAAiB,SAAS,OAAmB,MAAyB;AAClE,WAAO,KAAK,cAAc,SAAS,KAAK,KAAK,KAAK,OAAO,YAAY,WAAW,KAAK,iBAAiB,SAAS,KAAK;AAAA,EACxH;AAAA,EAEA,qBAAqB,SAAS,OAAmB,MAAyB;AACtE,WAAO,KAAK,kBAAkB,KAAK,KAAK,KAAK,OAAO,YAAY,eAAe,KAAK,iBAAiB,SAAS,KAAK;AAAA,EACvH;AAAA,EAEA,iBAAiB,SAAS,OAAO;AAG7B,UAAM,eAAe,KAAK,qBAAqB,KAAK,EAAE,SAAS;AAC/D,UAAM,kBAAkB,CAAC,KAAK,sBAAsB,SAAS,OAAO,KAAK,SAAS,MAAM;AACxF,UAAM,uBAAuB,CAAC,KAAK,SAAS,uBAAuB,MAAM,UAAU;AAEnF,WAAO,EAAE,iBAAiB,wBAAwB;AAAA,EACtD;AAAA,EAEA,qBAAqB,OAAO;AACxB,WAAO,QAAQ,oBAAoB,KAAK;AAAA,EAC5C;AAAA,EAEA,sBAAsB,KAAK,OAAO,MAAM;AACpC,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AAGA,UAAM,OAAO,KAAK,qBAAqB,KAAK;AAC5C,UAAM,YAAY,MAAM,SAAS,SAAY,MAAM;AAEnD,UAAM,QAAQ,MAAM,UAAU,UAAa,MAAM,QAAQ,MAAM,KAAK,IAAI,MAAM,MAAM,KAAK,GAAG,IAAI;AAChG,QAAI,eAAe,GAAG,aAAa,QAAQ;AAE3C,WAAO,aAAa,YAAY,EAAE,OAAO,KAAK,YAAY,CAAC,IAAI;AAAA,EACnE;AAAA,EAEA,uBAAuB,MAAyB;AAE5C,WAAO,KAAK,IAAI,wBAAwB,EAAE,QAAQ,CAAC,aAAa;AAC5D,UAAI,CAAC,KAAK,OAAO,OAAO,UAAU,eAAe,QAAQ,GAAG;AACxD,gBAAQ,KAAK,uDAAuD,UAAU;AAC9E;AAAA,MACJ;AACA,WAAK,OAAO,OAAO,UAAU,UAAU,QAAQ,KAAK,cAAc,MAAM,KAAK,OAAO,OAAO,UAAU,UAAU,KAAK;AAAA,IACxH,CAAC;AAAA,EACL;AAAA,EAEA,sBAAsB,MAAyB;AAE3C,SAAK,OAAO,OAAO,SAAS,QAAQ,KAAK,cAAc,MAAM,KAAK,OAAO,OAAO,SAAS,KAAK;AAAA,EAClG;AAAA,EAEA,oBAAoB,MAAyB;AAEzC,SAAK,OAAO,OAAO,SAAS,KAAK,cAAc,MAAM,KAAK,OAAO,OAAO,MAAM;AAAA,EAClF;AAAA,EAEA,cAAc,IAAI,OAAO;AACrB,WAAO,MAAM,cAAc,WAAW,OAAO,mBAAmB,OAAO;AAAA,EAC3E;AAAA,EAEA,kBAAkB,OAAO;AACrB,WAAO,MAAM,cAAc;AAAA,EAC/B;AAAA,EAGM,yBAAyB,OAAO;AAAA;AAClC,YAAM,eAAe;AACrB,WAAK,SAAS,sBAAsB,CAAC,KAAK,SAAS;AACnD,YAAM,KAAK,OAAO;AAAA,IACtB;AAAA;AAAA,EASM,gBAAgB,OAAO;AAAA;AACzB,UAAI,KAAK,QAAQ;AACb,qBAAa,KAAK,QAAQ,MAAM;AAEpC,WAAK,QAAQ,SAAS,WAAW,MAAM;AACnC,aAAK,SAAS,SAAS,MAAM,cAAc;AAC3C,aAAK,OAAO;AAAA,MAEhB,GAAG,KAAK,YAAY,UAAU;AAAA,IAClC;AAAA;AAAA,EAEM,aAAa,OAAO;AAAA;AACtB,YAAM,eAAe;AACrB,YAAM,SAAS,QAAQ,WAAW,KAAK;AAEvC,YAAM,UAAU,OAAO,SAAS,GAAG,IAAI,OAAO,MAAM,GAAG,EAAE,KAAK;AAC9D,UAAI,CAAC;AAAS,eAAO,QAAQ,MAAM,8CAA8C,iBAAiB,mCAAmC;AACrI,aAAO,KAAK,MAAM,UAAU,SAAS,EAAC,MAAK,CAAC;AAAA,IAChD;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,eAAe;AACrB,YAAM,SAAS,QAAQ,WAAW,KAAK;AAEvC,YAAM,UAAU,OAAO,SAAS,GAAG,IAAI,OAAO,MAAM,GAAG,EAAE,KAAK;AAC9D,aAAO,KAAK,MAAM,UAAU,SAAS,EAAC,OAAO,gBAAgB,KAAI,CAAC;AAAA,IACtE;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,eAAe;AACrB,YAAM,QAAQ,QAAQ,WAAW,KAAK;AAEtC,UAAI,CAAC,OAAO;AACR,eAAO,QAAQ,MAAM,sEAAsE,UAAU;AAAA,MACzG;AAGA,YAAM,KAAK,mBAAmB,gBAAgB,KAAK,OAAO,EAAE,MAAa,GAAG,KAAK;AAAA,IACrF;AAAA;AAAA,EASM,mBAAmB,6BAA6B,OAAiB,YAAoB,MAAM;AAAA;AAC7F,YAAM,KAAK,mBAAmB;AAE9B,YAAM,gBAAgB,IAAI,4BAA4B,OAAO,SAAS,GAAG,IAAI;AAC7E,yBAAmB,cAAc;AACjC,YAAM,cAAc,OAAO,IAAI;AAAA,IACnC;AAAA;AAAA,EAEA,0BAA0B,OAAO;AAC7B,UAAM,eAAe;AACrB,UAAM,CAAC,OAAO,QAAQ,IAAI,QAAQ,WAAW,KAAK,EAAE,MAAM,GAAG;AAE7D,QAAI,CAAC,SAAS,CAAC,UAAU;AACrB,aAAO,QAAQ,MAAM,sEAAsE,wBAAwB,UAAU;AAAA,IACjI;AAEA,SAAK;AAAA,MACD;AAAA,MACA,KAAK;AAAA,MACL;AAAA,QACI;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEM,yBAAyB,OAAO;AAAA;AAClC,YAAM,eAAe;AACrB,YAAM,QAAQ,QAAQ,WAAW,KAAK;AAEtC,UAAI,CAAC,OAAO;AACR,eAAO,QAAQ,MAAM,sEAAsE,UAAU;AAAA,MACzG;AAGA,YAAM,KAAK,mBAAmB,wBAAwB,KAAK,OAAO,EAAE,MAAa,GAAG,KAAK;AAAA,IAC7F;AAAA;AAAA,EAEM,qBAAqB;AAAA;AACvB,UAAI,qBAAqB,IAAI;AACzB,YAAI,GAAG,QAAQ,mBAAmB;AAC9B,gBAAM,GAAG,QAAQ,kBAAkB,MAAM;AAAA,QAC7C;AACA,2BAAmB;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA,EAEM,oBAAoB,OAAO;AAAA;AAC7B,YAAM,eAAe;AACrB,YAAM,UAAU,MAAM,KAAK,MAAM,iBAAiB,EAAE,MAAM,GAAG,CAAC;AAC9D,UAAI,CAAC;AAAS;AAAA,IAIlB;AAAA;AAAA,EAEM,uBAAuB,OAAO;AAAA;AAChC,YAAM,eAAe;AAErB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,UAAU,QAAQ,WAAW,KAAK;AACxC,YAAM,KAAK,MAAM,oBAAoB,OAAO;AAAA,IAChD;AAAA;AAAA,EAEM,qBAAqB,OAAO;AAAA;AAC9B,YAAM,eAAe;AACrB,YAAM,WAAW,QAAQ,WAAW,KAAK;AACzC,YAAM,UAAU,MAAM,KAAK,MAAM,kBAAkB,QAAQ;AAC3D,UAAI,CAAC;AAAS;AAAA,IAIlB;AAAA;AAAA,EAEM,wBAAwB,OAAO;AAAA;AACjC,YAAM,eAAe;AAErB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,CAAC,SAAS,QAAQ,IAAI,QAAQ,WAAW,KAAK,EAAE,MAAM,GAAG;AAC/D,YAAM,KAAK,MAAM,qBAAqB,SAAS,QAAQ;AAAA,IAC3D;AAAA;AAAA,EAMO,kBAAkB,OAAc;AAAA;AACnC,YAAM,eAAe;AACrB,YAAM,UAAU,MAAM,KAAK,MAAM,eAAe;AAChD,UAAI,CAAC;AAAS;AAEd,YAAM,KAAK,mBAAmB,gBAAgB,KAAK,OAAO,EAAE,MAAa,GAAG,OAAO;AAAA,IACvF;AAAA;AAAA,EAEM,qBAAqB,OAAc;AAAA;AACpC,YAAM,eAAe;AAEtB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,UAAU,QAAQ,WAAW,KAAK;AACxC,YAAM,KAAK,MAAM,kBAAkB,OAAO;AAAA,IAC9C;AAAA;AAAA,EAEM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,eAAe;AACrB,YAAM,YAAY,MAAM,cAAc,QAAQ,YAAY,EAAE,QAAQ;AACpE,aAAO,KAAK,MAAM,cAAc,WAAW,EAAC,MAAY,CAAC;AAAA,IAC7D;AAAA;AAAA,EAMM,iBAAiB,OAAO;AAAA;AAC1B,YAAM,eAAe;AACrB,UAAI,QAAQ,EAAE,MAAM,aAAa,EAAE,QAAQ,wBAAwB,EAAE,KAAK,EAAE;AAE5E,cAAQ,OAAO;AAAA,QACX,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,yBAAyB,EAAC,MAAK,CAAC;AACnE;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,kBAAkB,6BAA6B,EAAC,MAAK,CAAC;AACvE;AAAA,QACJ,KAAK;AACD,gBAAM,KAAK,MAAM,cAAc,QAAQ,EAAC,MAAK,CAAC;AAC9C;AAAA,MACR;AAAA,IACJ;AAAA;AAAA,EAEM,oBAAoB,OAAO;AAAA;AAC7B,YAAM,eAAe;AAErB,YAAM,KAAK,MAAM,iBAAiB;AAAA,IACtC;AAAA;AAAA,EAEA,cAAc,OAAO;AACjB,UAAM,eAAe;AACrB,UAAM,QAAQ,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY;AACzD,UAAM,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;AAC5B,UAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,QAAI,MAAM;AACN,WAAK,WAAW;AAAA,IACpB;AAAA,EACJ;AAAA,EAMA,yCAAyC,GAAG,MAAM;AAC9C,QAAI,KAAK,WAAW,KAAK,QAAQ,QAAQ;AACrC,WAAK,aAAa,aAAa,IAAI;AACnC,WAAK,iBAAiB,aAAa,KAAK,aAAa,KAAK,IAAI,GAAG,KAAK;AAAA,IAC1E;AAAA,EACJ;AAAA,EAOM,0BAA0B,OAAO;AAAA;AACnC,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,YAAM,WAAW,SAAS,MAAM,cAAc,KAAK;AAGnD,WAAI,6BAAM,OAAO,gBAAe,UAAa,EAAE,QAAQ,YAAY,KAAK,OAAO,aAAa;AACxF,eAAO,QAAQ,MAAM,0FAA0F,6BAAM,MAAM,IAAI;AAAA,MACnI;AAEA,YAAM,KAAK,OAAO,EAAE,8BAA8B,SAAS,CAAC;AAAA,IAChE;AAAA;AAAA,EAKM,wBAAwB,OAAO;AAAA;AACjC,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,YAAM,MAAM,SAAS,MAAM,cAAc,KAAK;AAC9C,UAAI,QAAQ,KAAK;AACb,cAAM,KAAK,OAAO,EAAE,0BAA0B,IAAI,CAAC;AAAA,MACvD;AAAA,IACJ;AAAA;AAAA,EAKM,0BAA0B,OAAO;AAAA;AACnC,YAAM,eAAe;AACrB,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,UAAI,MAAM;AACN,cAAM,WAAW,CAAC;AAGlB,YAAI,KAAK,UAAU;AAEf,qBAAWC,SAAQ,KAAK,MAAM,MAAM,OAAO,eAAa,UAAU,QAAQ,GAAG;AACzE,qBAAS,KAAK;AAAA,cACV,OAAOA,MAAK;AAAA,cACZ,8BAA8BA,MAAK,OAAO;AAAA,YAC9C,CAAC;AAAA,UACL;AAAA,QAEJ,OAAO;AAEH,mBAAS,KAAK;AAAA,YACV,OAAO;AAAA,YACP,8BAA8B,CAAC,KAAK,WAAW;AAAA,UACnD,CAAC;AAAA,QACL;AAYA,cAAM,KAAK,MAAM,wBAAwB,QAAQ,QAAQ;AAEzD,aAAK,MAAM,OAAO,KAAK;AAAA,MAC3B;AAAA,IACJ;AAAA;AAAA,EAKM,uCAAuC,OAAO;AAAA;AAChD,YAAM,eAAe;AACrB,YAAM,OAAO,EAAE,MAAM,aAAa,EAAE,QAAQ,YAAY;AACxD,YAAM,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC3B,YAAM,QAAQ,KAAK,KAAK;AACxB,YAAM,OAAO;AACb,UAAI,KAAK;AACL,YAAI,MAAM,GAAG,UAAU;AAAG,eAAK,WAAW,KAAK,GAAG;AAAA;AAC7C,eAAK,aAAa,KAAK,WAAW,OAAO,CAAC,QAAQ,QAAQ,GAAG;AAAA,MACtE;AAAA,IACJ;AAAA;AAAA,EAKM,mBAAmB,OAAO;AAAA;AAC5B,YAAM,eAAe;AAGrB,QAAE,kBAAkB,EAAE,IAAI,EAAE;AAC5B,YAAM,KAAK,wBAAwB,OAAO,QAAQ;AAAA,IACtD;AAAA;AAAA,EAMM,mBAAmB,OAAO;AAAA;AAC5B,YAAM,eAAe;AAGrB,YAAM,gBAAgB,MAAM,QAAQ,gBAAgB;AACpD,UAAI,CAAC;AAAe;AAEpB,YAAM,KAAK,SAAS,UAAU,OAAO,KAAK,iBAAiB;AAG3D,WAAK,oBAAoB,KAAK,SAAS,iBAAiB;AACxD,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA,EAQM,wBAAwB,OAAO,SAAuB,QAAQ;AAAA;AA/6CxE;AAg7CQ,YAAM,eAAe;AAGrB,UAAI,WAAW,UAAU,KAAK,sBAAsB,KAAK,SAAS,iBAAiB;AAC/E,gBAAO,QAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,uCAAuC;AAG5F,QAAE,sBAAsB,EAAE,KAAK;AAC/B,QAAE,yBAAyB,EAAE,KAAK;AAGlC,QAAE,kBAAkB,EACf,KAAK,UAAU,MAAM,EACrB,OAAO;AAAA,IAChB;AAAA;AAAA,EASM,8BAA8B,OAAO;AAAA;AACvC,UAAI,MAAM,SAAS,aAAa,MAAM,SAAS;AAAU;AAEzD,YAAM,eAAe;AAErB,QAAE,sBAAsB,EAAE,KAAK;AAC/B,QAAE,yBAAyB,EAAE,KAAK;AAGlC,QAAE,kBAAkB,EACf,KAAK,UAAU,MAAS,EACxB,IAAI,KAAK,iBAAiB;AAAA,IACnC;AAAA;AAAA,EAOM,4BAA4B,OAAO;AAAA;AACrC,UAAI,MAAM,SAAS,aAAa,MAAM,SAAS;AAAS;AAExD,YAAM,eAAe;AAErB,YAAM,eAAe,EAAE,kBAAkB;AACzC,YAAM,SAAS,aAAa,KAAK,QAAQ;AACzC,UAAI,YAAyB,OAAO,aAAa,IAAI,CAAC;AACtD,UAAI,CAAC;AAAW;AAEhB,cAAQ,QAAQ;AAAA,QACZ,KAAK;AACD,sBAAY,MAAM,KAAK,SAAS,UAAU,OAAO,KAAK,mBAAmB,SAAS;AAClF;AAAA,QACJ,KAAK;AACD,sBAAY,MAAM,KAAK,SAAS,UAAU,OAAO,SAAS;AAC1D;AAAA,MACR;AAEA,YAAM,KAAK,8BAA8B,KAAK;AAE9C,UAAI,CAAC;AAAW;AAGhB,WAAK,oBAAoB;AACzB,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA,EAOM,mBAAmB,OAAO;AAAA;AAC5B,YAAM,eAAe;AAErB,YAAM,YAAY,OAAO,EAAE,MAAM,aAAa,EAAE,IAAI,CAAC;AAErD,UAAI;AACA,aAAK,oBAAoB;AAE7B,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA,EAMM,uBAAuB,OAAO;AAAA;AAChC,YAAM,eAAe;AAErB,YAAM,SAAS,QAAQ,WAAW,KAAK;AACvC,YAAM,OAAO,KAAK,SAAS,MAAM,IAAI,MAAM;AAC3C,UAAI,CAAC;AAAM;AAGX,YAAM,SAAS,IAAI,oBAAoB,KAAK,UAAU,KAAK,iBAAiB;AAC5E,YAAM,YAAY,MAAM,OAAO,OAAO;AACtC,UAAI,OAAO;AAAU;AAErB,YAAM,KAAK,SAAS,UAAU,SAAS,WAAW,IAAI;AAAA,IAC1D;AAAA;AAAA,EAgBA,qCAAqC,OAAc;AAC/C,UAAM,gBAAgB;AAAA,EAC1B;AAAA,EAOO,cAAc,OAAO;AAAA;AACxB,YAAM,eAAe;AACrB,YAAM,MAAM,QAAQ,WAAW,KAAK;AACpC,YAAM,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACrC,UAAI;AAAM,eAAO,KAAK,WAAW;AAAA,IACrC;AAAA;AAAA,EAUM,2BAA2B,OAAO;AAAA;AACpC,UAAI,EAAE,YAAY,KAAK,MAAM;AAAS;AAEtC,UAAI,MAAM,KAAK,MAAM,OAAO,OAAO;AACnC,UAAI,OAAO,KAAK,MAAM,MAAM,IAAI,GAAG;AACnC,UAAI,CAAC,MAAM;AACP,gBAAQ,MAAM,qBAAqB;AACnC;AAAA,MACJ;AAEA,UAAI,MAAM,MAAM,cAAc,QAAQ;AAEtC,UAAI,YAAY,MAAM,cAAc;AAGpC,YAAM,aAAa,KAAK;AACxB,UAAI,SAAS,WAAW,KAAK,WAAW;AACxC,UAAI,OAAO;AAAA,QACP,KAAK;AAAA,MACT;AAGA,eAAS,IAAI,GAAG,KAAK,GAAG,KAAK;AACzB,YAAI,MAAM,MAAM;AAChB,YAAI,MAAM,gBAAgB;AAC1B,YAAI,QAAQ,WAAW;AACnB,eAAK,OAAO;AAAA,QAChB,WAAW,WAAW,KAAK,MAAM,KAAK,QAAQ,KAAK;AAC/C,eAAK,OAAO;AAAA,QAChB;AAAA,MACJ;AACA,YAAM,KAAK,MAAM,wBAAwB,QAAQ,CAAC,IAAI,CAAC;AAAA,IAC3D;AAAA;AAAA,EAMA,uBAAuB,OAAO;AAC1B,UAAM,eAAe;AACrB,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,IACX;AACA,QAAI,kBAAkB,KAAK,OAAO,OAAO,EAAE,OAAO,IAAI;AAAA,EAC1D;AAAA,EAEA,qBAAqB,MAAM;AACvB,UAAM,aAAa,CAAC,OAAO;AACvB,YAAM,WAAW,EAAE,EAAE,EAAE,SAAS,sBAAsB;AACtD,YAAM,YAAY,EAAE,EAAE,EAAE,SAAS,YAAY;AAC7C,UAAI,EAAE,QAAQ,EAAE,KAAK,SAAS,GAAG;AAC7B,UAAE,SAAS,EAAE,SAAS,iBAAiB;AACvC,UAAE,SAAS,EAAE,YAAY,WAAW;AAAA,MACxC,OAAO;AACH,UAAE,SAAS,EAAE,SAAS,WAAW;AACjC,UAAE,SAAS,EAAE,YAAY,iBAAiB;AAAA,MAC9C;AAAA,IACJ;AACA,SAAK,KAAK,gBAAgB,EAAE,KAAK,WAAY;AACzC,iBAAW,IAAI;AAAA,IACnB,CAAC;AACD,SAAK,KAAK,gBAAgB,EAAE,MAAM,CAAC,UAAU,WAAW,MAAM,aAAa,CAAC;AAC5E,SAAK,KAAK,kBAAkB,EAAE,OAAO,CAAC,UAAU,KAAK,UAAU,KAAK,CAAC;AAAA,EACzE;AAAA,EASA,6BAAkG;AAC9F,UAAM,YAAY,KAAK,SAAS,sBAAsB;AACtD,QAAI,CAAC;AAAW,aAAO,CAAC;AAExB,WAAO,OAAO,QAAQ,UAAU,QAAQ,EAAE,IAAI,CAAC,CAAC,UAAU,QAAQ,MAAsD;AACpH,YAAM,SAAS,KAAK,uBAAuB,QAAQ;AAEnD,YAAM,QAAQ,IAAI,cAAc;AAChC,aAAO,EAAC,UAAU,OAAO,SAAS,OAAO,QAAQ,MAAK;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA,EAQA,uBAAuB,UAA8C;AACjE,YAAQ,UAAU;AAAA,MACd,KAAK;AACD,eAAO,CAAC,KAAK,SAAS;AAAA,MAC1B,KAAK;AACD,eAAO,KAAK,SAAS,SAAS;AAAA,MAClC;AACI,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAOA,qCAAqC,OAAO;AACxC,QAAI,8BAA8B,KAAK,QAAQ,EAAE,OAAO,IAAI;AAAA,EAChE;AACJ;;;AClqDO,IAAM,kBAAN,cAA8B,kBAAkB;AAAA,EAQnD,sBAAgC;AAC5B,WAAO,MAAM,oBAAoB;AAAA,EACrC;AAAA,EAGM,QAAQ,SAAS;AAAA;AACnB,YAAM,OAAO,MAAM,4CAAM,gBAAN,MAAc,OAAO;AAGxC,WAAK,OAAO,KAAK,OAAO,UAAU;AAGlC,WAAK,kBAAkB,KAAK,OAAO,sBAAsB;AACzD,WAAK,mBAAmB,KAAK,OAAO,QAAQ;AAE5C,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,kBAAkB,MAAM;AACpB,UAAM,kBAAkB,IAAI;AAE5B,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,YAAY,KAAK,IAAI,CAAC;AAAA,EACvE;AAAA,EAMM,YAAY,OAAO;AAAA;AACrB,YAAM,gBAAgB;AACtB,YAAM,KAAK,OAAO,aAAa;AAAA,IACnC;AAAA;AAAA,EAEM,QAAQ,OAAkB;AAAA;AAC5B,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAGtB,UAAI,CAAC,MAAM;AAAc;AAEzB,YAAM,WAAW,KAAK,MAAM,MAAM,aAAa,QAAQ,YAAY,CAAC;AAGpE,cAAO,SAAS,MAAM;AAAA,QAClB,KAAK;AAED,iBAAO,MAAM,KAAK,OAAO,UAAU,SAAS,IAAI;AAAA,MACxD;AAGA,aAAO,4CAAM,gBAAN,MAAc,KAAK;AAAA,IAC9B;AAAA;AACJ;;;ACvEO,IAAM,wBAAN,cAAoC,mBAAmB;AAAA,EAC1D,IAAI,WAAmB;AACnB,WAAO;AAAA,EACX;AAAA,EAEA,QAAQ,SAAiG;AACrG,UAAM,OAAO,MAAM,QAAQ,OAAO;AAClC,SAAK,QAAQ,iCAAI,KAAK,QAAT,EAAgB,GAAG,KAAK,KAAK,SAAS,+BAA+B,EAAC;AACnF,WAAO;AAAA,EACX;AACJ;;;ACGO,IAAM,uBAAN,cAAmC,kBAAkB;AAAA,EAQxD,sBAAgC;AAC5B,QAAI,YAAY,MAAM,oBAAoB;AAE1C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EASA,wBAAkC;AAC9B,UAAM,YAAY,MAAM,sBAAsB;AAE9C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEM,QAAQ,SAAS;AAAA;AACnB,YAAM,OAAO,MAAM,iDAAM,gBAAN,MAAc,OAAO;AAGxC,WAAK,UAAU,KAAK,sBAAsB;AAE1C,aAAO;AAAA,IACX;AAAA;AAAA,EAEA,kBAAkB,MAAc;AAC5B,UAAM,kBAAkB,IAAI;AAG5B,SAAK,KAAK,gBAAgB,EAAE,GAAG,SAAS,KAAK,2BAA2B,KAAK,IAAI,CAAC;AAAA,EACtF;AAAA,EAMM,QAAQ,OAAO;AAAA;AACjB,YAAM,eAAe;AACrB,YAAM,gBAAgB;AAEtB,UAAI,CAAC,MAAM;AAAc;AAEzB,YAAM,WAAW,KAAK,MAAM,MAAM,aAAa,QAAQ,YAAY,CAAC;AAGpE,cAAQ,SAAS,MAAM;AAAA,QACnB,KAAK;AACD,iBAAO,MAAM,KAAK,MAAM,iBAAiB,SAAS,IAAI;AAAA,MAC9D;AAGA,aAAO,iDAAM,gBAAN,MAAc,KAAK;AAAA,IAC9B;AAAA;AAAA,EAEA,wBAAgD;AAC5C,UAAM,SAAS,KAAK,MAAM,iBAAiB;AAE3C,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EAEM,2BAA2B,OAAO;AAAA;AACpC,YAAM,eAAe;AACrB,YAAM,KAAK,MAAM,oBAAoB;AAAA,IACzC;AAAA;AACJ;;;ACxFO,IAAM,oBAAN,cAAgC,kBAAkB;AAAA,EAQrD,sBAAgC;AAC5B,QAAI,YAAY,MAAM,oBAAoB;AAE1C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EASA,wBAAkC;AAC9B,UAAM,YAAY,MAAM,sBAAsB;AAE9C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEM,QAAQ,SAAS;AAAA;AACnB,YAAM,OAAO,MAAM,8CAAM,gBAAN,MAAc,OAAO;AAGxC,oDAAM,iCAAN,MAA+B,IAAI;AACnC,WAAK,qBAAqB,KAAK,OAAO,sBAAsB;AAE5D,aAAO;AAAA,IACX;AAAA;AACJ;;;ACrEO,IAAM,sBAAN,cAAkC,kBAAkB;AAAA,EAQvD,sBAAgC;AAC5B,QAAI,YAAY,MAAM,oBAAoB;AAE1C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;;;AClBO,IAAM,sBAAN,cAAkC,kBAAkB;AAAA,EAQvD,sBAAgC;AAC5B,QAAI,YAAY,MAAM,oBAAoB;AAE1C,WAAO;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACXO,IAAM,oBAAoB;AAAA,EAa7B,0BAA0B,UAAkB,QAA+C;AAGvF,UAAM,WAAW,OAAO,KAAK,MAAM,EAAE,KAAK,WAAS,YAAY,OAAO,OAAO,QAAQ;AACrF,QAAI,UAAU;AACV,aAAO,OAAO;AAAA,IAClB,OAAO;AACH,YAAM,EAAC,QAAO,IAAI;AAClB,aAAO,QAAQ,uBAAuB,kBAAkB,QAAQ,UAAU,GAAG,OAAO,cAAc,gBAAgB,YAAY;AAAA,IAClI;AAAA,EACJ;AACJ;;;AC5BO,IAAM,gBAAgB;AAAA,EAYzB,yBAAyB,SAAS,UAAwB,OAAa,GAAW;AAE9E,UAAM,SAAS,SAAS,QAAQ,IAAI,SAAS,QAAQ,KAAK,SAAS;AAEnE,UAAM,WAAW,OAAO,SAAS,OAAO;AAExC,QAAI,aAAa;AAAG,aAAO;AAG3B,QAAI,QAAQ;AAAG,aAAO;AACtB,QAAI,QAAQ;AAAQ,aAAO;AAG3B,WAAO,KAAK,IAAI,WAAW,SAAS,MAAM,CAAC;AAAA,EAC/C;AAAA,EAeA,sBAAsB,SAAS,UAAwB,cAAsB,OAAe,GAAqD;AAE7I,QAAI,CAAC,SAAS;AAAQ,aAAO,EAAC,cAAc,gBAAgB,EAAC;AAE7D,QAAI,SAAS,QAAQ;AAAG,aAAO,EAAC,cAAc,gBAAgB,EAAC;AAE/D,QAAI,QAAQ;AAAG,aAAO,SAAS;AAG/B,UAAM,SAAS,KAAK,IAAI,SAAS,OAAO,IAAI;AAE5C,UAAM,iBAAiB,KAAK,IAAI,eAAe,QAAQ,CAAC;AAExD,mBAAe,KAAK,IAAI,eAAe,QAAQ,CAAC;AAEhD,WAAO,EAAC,cAAc,eAAc;AAAA,EACxC;AAAA,EASA,oBAAoB,SAAU,mBAAmC,QAAiC;AAG9F,WAAO,IAAI,UACN,OAAO,cAAY,kBAAkB,SAAS,KAAK,EACnD,KAAK,CAAC,OAAO,UAAU;AAExB,UAAI,MAAM,SAAS,MAAM,MAAM;AAE3B,eAAO,MAAM,QAAQ,MAAM;AAAA,MAC/B;AAEA,YAAM,aAAa,IAAI,gBAAgB,QAAQ,MAAM,IAAI;AACzD,YAAM,aAAa,IAAI,gBAAgB,QAAQ,MAAM,IAAI;AACzD,aAAO,aAAa,aAAa,IAAI;AAAA,IACzC,CAAC;AAAA,EACL;AACJ;;;ACpDO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAI9C,aAAa,MAAM,SAA+B;AAC9C,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,YAAY,CAAC;AAClB,SAAK,WAAW,EAAC,OAAO,GAAG,SAAS,GAAG,OAAO,GAAE;AAChD,SAAK,SAAS,CAAC;AACf,SAAK,QAAQ;AACb,SAAK,eAAe,CAAC;AACrB,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,SAAS,KAAK,UAAU,cAAc,WAAW;AAEtD,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,mBAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,mBAAmB;AAjEvB;AAmEQ,UAAM,SAAS,KAAK,KAAK;AACzB,QAAI,CAAC;AAAQ;AAGb,SAAK,KAAK,YAAY,cAAc,mBAAmB,OAAO,OAAO,MAAM,KAAK;AAGhF,QAAI,KAAK,KAAK,UAAU,WAAW,GAAG;AAClC,WAAK,KAAK,UAAU,KAAK,IAAI,UAAU,EAAE;AACzC,eAAG,kBAAH,mBAAkB,KAAK,qCAAqC,EAAC,UAAU,KAAI;AAAA,IAC/E;AAGA,UAAM,eAAe,KAAK,KAAK,gBAAgB,KAAK,cAAc,aAAa;AAE/E,SAAK,KAAK,mBAAmB,KAAK,KAAK,UAAU,UAAU,eAAa,aAAa,UAAU,UAAU,KAAK;AAC9G,QAAI,KAAK,KAAK,oBAAoB;AAAI,WAAK,KAAK,mBAAmB;AACnE,SAAK,KAAK,WAAW,KAAK,KAAK,UAAU,KAAK,KAAK;AAAA,EACvD;AAAA,EAEM,uBAAuB;AAAA;AAvFjC;AAyFQ,YAAM,UAAS,UAAK,SAAL,mBAAW;AAC1B,UAAI,CAAC;AAAQ;AAGb,YAAM,EAAC,OAAM,IAAI,OAAO,OAAO;AAC/B,YAAM,EAAC,gBAAe,IAAI,GAAG,OAAO;AACpC,YAAM,YAAY,CAAC;AACnB,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC/C,cAAM,WAAW;AACjB,kBAAU,OAAO,QAAQ,uBAAuB,IAAI,aAAa,MAAM,UAAU,gBAAgB,IAAI;AAAA,MACzG;AACA,WAAK,KAAK,SAAS;AAGnB,YAAM,QAAQ,KAAK;AACnB,UAAI,CAAC;AAAO;AAEZ,YAAM,YAAY,MAAM,sBAAsB;AAE9C,WAAK,KAAK,QAAQ,UAAU,cAAc,QAAQ,OAAO,SAAS;AAAA,IACtE;AAAA;AAAA,EAKM,uBAAuB;AAAA;AAlHjC;AAoHQ,UAAI,QAAQ,MAAM,QAAQ,KAAK,KAAK,MAAM;AAAG;AAC7C,UAAI,CAAC,KAAK;AAAO;AACjB,UAAI,CAAC,KAAK;AAAY;AAEtB,YAAM,WAAW,KAAK,MAAM,SAAS;AAErC,UAAI,CAAC,UAAU;AACX,iBAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,kCAAkC;AAC5E,eAAO,CAAC;AAAA,MACZ;AAGA,WAAK,KAAK,eAAe,KAAK,QAAQ,IAAI,YAAU;AAChD,cAAM,WAAW,QAAQ,qBAAqB,UAAU,MAAM;AAC9D,cAAM,QAAQ,kBAAkB,0BAA0B,UAAU,KAAK,KAAK,MAAM;AACpF,eAAO;AAAA,UACH,MAAM,OAAO;AAAA,UACb,MAAM,OAAO,QAAQ;AAAA,UACrB,MAAM;AAAA,UACN;AAAA,UACA;AAAA,QACJ;AAAA,MACJ,CAAC;AAGD,WAAK,KAAK,eAAe,KAAK,KAAK,aAAa,KAAK,CAAC,GAAG,MAAM;AAC3D,YAAI,EAAE,WAAW,EAAE;AAAU,iBAAO;AACpC,YAAI,EAAE,WAAW,EAAE;AAAU,iBAAO;AACpC,eAAO;AAAA,MACX,CAAC;AAGD,YAAM,YAAY,KAAK,MAAM,sBAAsB;AACnD,WAAK,KAAK,QAAQ,UAAU,cAAc,QAAQ,OAAO,SAAS,KAAK,KAAK,aAAa,GAAG,MAAM;AAAA,IACtG;AAAA;AAAA,EAEA,6BAA6B;AAxJjC;AAyJQ,SAAK,KAAK,uBAAqB,UAAK,SAAL,mBAAW,sBAAsB,UAAS;AAAA,EAC7E;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,UAAU,eAAe;AAAA,EAC/C;AAAA,EAEM,sBAAqB;AAAA;AACvB,YAAM,KAAK,qBAAqB;AAChC,YAAM,KAAK,qBAAqB;AAChC,WAAK,iBAAiB;AACtB,WAAK,2BAA2B;AAEhC,YAAM,6CAAM,4BAAN,IAA0B;AAAA,IACpC;AAAA;AAAA,EAEA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,oBAAoB;AACpB,QAAI,KAAK,KAAK,SAAS;AAAa,aAAO,YAAY,cAAc,IAAI,qBAAqB;AAC9F,WAAO,MAAM;AAAA,EACjB;AAAA,EAEM,+BAA+B;AAAA;AACjC,UAAI,CAAC,KAAK;AAAM;AAGhB,YAAM,KAAK,KAAK,gBAAgB,KAAK,KAAK,QAAQ;AAMlD,UAAI,CAAC,KAAK;AAAO;AAEjB,YAAM,YAAY,MAAM,KAAK,MAAM,sBAAsB;AACzD,gBAAU,cAAc,UAAU,SAAS,KAAK,KAAK,KAAK;AAC1D,YAAM,KAAK,MAAM,sBAAsB,SAAS;AAAA,IACpD;AAAA;AAAA,EAEA,oBAAoB;AAChB,QAAI,CAAC,KAAK;AAAO;AACjB,QAAI,CAAC,KAAK;AAAM;AAEhB,UAAM,WAAW,IAAI,UAAU,KAAK,KAAK,UAAU,GAAG;AAItD,UAAM,EAAC,WAAW,kBAAkB,mBAAkB,IAAI,KAAK;AAI/D,SAAK,KAAK,WAAW,UAAU;AAG/B,SAAK,KAAK,SAAS,UAAU,cAAc,wBAAwB,KAAK,KAAK,UAAU,KAAK,KAAK,QAAQ;AAEzG,UAAM,EAAC,cAAc,eAAc,IAAI,cAAc,qBAAqB,KAAK,KAAK,UAAU,oBAAoB,KAAK,KAAK,QAAQ;AAEpI,aAAS,cAAc,cAAc,cAAc;AAGnD,QAAI,KAAK,YAAY;AAEjB,WAAK,KAAK,uBAAuB,OAAO,KAAK,KAAK,oBAAoB;AACtE,YAAM,SAAS,KAAK,KAAK,aAAa,KAAK,KAAK;AAChD,WAAK,KAAK,QAAQ,OAAO,MAAM;AAE/B,WAAK,KAAK,mBAAmB,KAAK,KAAK,iBAAiB,OAAO,UAAQ,SAAS,OAAO,IAAI;AAAA,IAC/F;AAGA,SAAK,KAAK,QAAQ,OAAO,KAAK,KAAK,KAAK;AAGxC,UAAM,QAAQ,KAAK,aAAa,KAAK,KAAK,aAAa,KAAK,KAAK,sBAAsB,MAAM,WAAW,KAAK,KAAK;AAClH,UAAM,YAAY,2BAA2B,qBAAqB,KAAK,KAAK;AAG5E,cAAU,cAAc,UAAU,SAAS,OAAO,KAAK,CAAC;AACxD,cAAU,cAAc,MAAM,EAAC,SAAS,KAAI,CAAC;AAE7C,aAAS,cAAc,IAAI,cAAc,eAAe,UAAU,cAAc,KAAK;AAErF,UAAM,kBAAkB;AAAA,EAC5B;AAAA,EAUA,+BAA+B;AA7PnC;AA8PQ,QAAI,CAAC,KAAK,KAAK;AAAgB,aAAO;AAGtC,UAAM,WAAW,KAAK,KAAK;AAC3B,QAAI,SAAS,UAAU;AAAG,aAAO;AAEjC,QAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,GAAG;AACvB,eAAG,kBAAH,mBAAkB,MAAM,6BAA6B,EAAC,UAAU,KAAI;AACpE,aAAO;AAAA,IACX;AAEA,WAAO,MAAM,6BAA6B;AAAA,EAC9C;AAAA,EAMM,4BAA4B;AAAA;AAC9B,UAAI,EAAC,MAAM,6CAAM,kCAAN,IAAgC;AAAG,eAAO;AACrD,UAAI,EAAC,MAAM,KAAK,kBAAkB;AAAG,eAAO;AAE5C,aAAO;AAAA,IACX;AAAA;AAAA,EAKM,oBAAsC;AAAA;AA1RhD;AA2RQ,UAAI,CAAC,KAAK;AAAM,eAAO;AACvB,UAAI,CAAC,KAAK,KAAK;AAAgB,eAAO;AAEtC,YAAM,WAAW,KAAK,KAAK;AAC3B,UAAI,SAAS,UAAU;AAAG,eAAO;AAGjC,UAAI,CAAC,KAAK,KAAK,QAAQ,SAAS,KAAK,GAAG;AACpC,iBAAG,kBAAH,mBAAkB,KAAK,iCAAiC,EAAC,UAAU,KAAI;AAAA,MAC3E;AAEA,YAAM,KAAK,KAAK,QAAQ,SAAS,KAAK;AAEtC,aAAO;AAAA,IACX;AAAA;AACJ;;;AC7RO,IAAM,wBAAN,MAA4B;AAAA,EAC/B,OAAa,oBAAoB,OAAiB,SAA6B,YAAkD;AAAA;AAC7H,YAAM,oBAAoB,sBAAsB,qBAAqB,OAAO,SAAS,UAAU;AAE/F,aAAO,IAAI,WAAW,iBAAiB;AAAA,IAC3C;AAAA;AAAA,EAEA,OAAa,iBAAiB,SAA0B,WAAmD;AAAA;AACvG,YAAM,iBAAiB,sBAAsB,kBAAkB,SAAS,SAAS;AACjF,aAAO,IAAI,WAAW,cAAc;AAAA,IACxC;AAAA;AAAA,EAEA,OAAa,kBAAkB,OAAiB,SAA6B,YAAoD;AAAA;AAC7H,YAAM,kBAAkB,sBAAsB,mBAAmB,OAAO,SAAS,UAAU;AAE3F,aAAO,IAAI,WAAW,eAAe;AAAA,IACzC;AAAA;AAAA,EAEA,OAAO,qBAAqB,OAAkB,SAA6B,YAA6C;AA/B5H;AAgCQ,UAAM,QAAQ,KAAK,KAAK,SAAS,aAAa;AAE9C,UAAM,iBAAiB;AAAA,MACnB,cAAc;AAAA,QACV,OAAO;AAAA,QACP,QAAO,WAAM,wBAAwB,MAA9B,mBAAiC;AAAA,QACxC,SAAS;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAO,WAAM,gBAAgB,YAAY,MAAlC,mBAAqC;AAAA,QAC5C,SAAS;AAAA,MACb;AAAA,MACA,OAAO;AAAA,QACH,OAAO;AAAA,QACP,QAAO,WAAM,gBAAgB,gBAAgB,MAAtC,mBAAyC;AAAA,QAChD,SAAS;AAAA,MACb;AAAA,IACJ;AAEA,UAAM,uBAAuB,MAAM,mBAAmB,EAAE,OAAO,CAAC,MAAM,EAAE,aAAa;AACrF,QAAI,eAAe;AACnB,yBAAqB,QAAQ,CAAC,WAAW;AAtDjD,UAAAC;AAuDY,qBAAe,SAAS,OAAO,UAAU;AAAA,QACrC,OAAO;AAAA,QACP,QAAQ,OAAO;AAAA,QACf,QAAOA,MAAA,MAAM,gBAAgB,OAAO,eAAe,CAAC,MAA7C,gBAAAA,IAAgD;AAAA,QACvD,MAAM;AAAA,MACV;AACA,qBAAe,KAAK,IAAI,cAAc,OAAO,SAAS,CAAC;AAAA,IAC3D,CAAC;AAED,UAAM,QAAQ,IAAI,UAAU,UAAU;AACtC,UAAM,iBAAiB,KAAK;AAG5B,SAAI,aAAQ,WAAR,mBAAgB,OAAO;AACvB,YAAM,gBAAgB,QAAQ,OAAO;AACrC,YAAM,WAAW,eAAe;AAChC,UAAI,aAAa,GAAG;AAChB,cAAM,cAAc,aAAa,QAAQ;AAAA,MAC7C;AAAA,IACJ;AAEA,UAAM,UAAU;AAAA,MACZ,UAAU;AAAA,QACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,QACxC,UAAU,MAAM;AAAA,QAAC;AAAA,MACrB;AAAA,IACJ;AAEA,UAAM,eAAe,CAAC,SAAS;AAC3B,YAAM,QAAQ,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,cAAc,EAAE,IAAI,CAAC;AAC3E,YAAM,UAAU,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,sBAAsB,EAAE,IAAI,CAAC;AAErF,YAAM,SAAqB,CAAC;AAE5B,UAAI,OAAO;AACP,cAAM,cAAc,aAAa,KAAK;AAAA,MAC1C;AACA,UAAI,SAAS;AAET,cAAM,UAAU,eAAe;AAC/B,cAAM,cAAc,QAAQ,OAAO,QAAQ,KAAK;AAGhD,eAAO,aAAa,QAAQ;AAAA,MAChC;AAEA,aAAO,EAAC,OAAO,SAAS,OAAO,OAAM;AAAA,IACzC;AAEA,UAAM,eAAe;AACrB,UAAM,eAAe;AAAA,MACjB,OAAO,MAAM,iBAAiB;AAAA,MAC9B,OAAO,QAAQ;AAAA,MACf;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAGA,OAAO,kBAAkB,iBAAkC,WAA+C;AACtG,UAAM,QAAQ,KAAK,KAAK,SAAS,0BAA0B;AAE3D,UAAM,eAAe;AACrB,UAAM,eAAe;AAAA,MACjB,QAAQ,mDAAiB;AAAA,MACzB,OAAO,UAAU,iBAAiB;AAAA,MAClC,cAAc,IAAI;AAAA,MAClB,aAAa,IAAI;AAAA,IACrB;AAEA,UAAM,UAAW;AAAA,MACb,UAAU;AAAA,QACN,OAAO,KAAK,KAAK,SAAS,cAAc;AAAA,QACxC,UAAU,MAAM;AAAA,QAAC;AAAA,MACrB;AAAA,IACJ;AAEA,UAAM,eAAe,CAAC,SAAiB;AACnC,YAAM,iBAAiB,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,uBAAuB,EAAE,IAAI,CAAC;AAC7F,YAAM,KAAK,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,WAAW,EAAE,IAAI,CAAC;AACrE,YAAM,UAAU,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,gBAAgB,EAAE,IAAI,CAAC;AAC/E,YAAM,aAAa,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,mBAAmB,EAAE,IAAI,CAAC;AAErF,aAAO,EAAC,gBAAgB,YAAY,IAAI,QAAO;AAAA,IACnD;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,OAAO,mBAAmB,OAAiB,SAA6B,YAA+C;AA7J3H;AA8JQ,UAAM,QAAQ,KAAK,KAAK,SAAS,QAAQ,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC1E,UAAM,eAAe;AAErB,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,YAAY,MAAM,aAAa,QAAQ,YAAY,QAAQ,YAAY,QAAQ,MAAM,SAAS;AACpG,UAAM,SAAS,MAAM,UAAU;AAE/B,UAAM,eAAe;AAAA,MACjB,WAAW,QAAQ,MAAM;AAAA,MACzB,YAAY,QAAQ,OAAO,YAAY,CAAC,CAAC,EAAE,KAAK,MAAM,MAAM,QAAQ,CAAC;AAAA,MACrE,OAAO,UAAU;AAAA,MACjB;AAAA,IACJ;AAGA,UAAM,UAAU;AAAA,MACZ,MAAM;AAAA,QACF,OAAO,KAAK,KAAK,SAAS,uBAAuB;AAAA,QACjD,UAAU,MAAM;AAAA,QAAC;AAAA,MACrB;AAAA,IACJ;AAEA,SAAI,aAAQ,MAAM,UAAd,mBAAqB,QAAQ;AAC7B,cAAQ,MAAM,MAAM;AAAA,QAChB,CAAC,SACI,QAAQ,QAAQ;AAAA,UACb,OAAO;AAAA,UACP,UAAU,MAAM;AAAA,UAAC;AAAA,QACrB;AAAA,MACR;AAAA,IACJ;AAEA,UAAM,eAAe,CAAC,MAAc,mBAAmB;AACnD,YAAM,SAAS,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,oBAAoB,EAAE,IAAI,CAAC;AAClF,YAAM,WAAW,QAAQ,mBAAmB,EAAE,IAAI,EAAE,KAAK,0BAA0B,EAAE,IAAI,CAAC;AAC1F,YAAMC,aAAY,MAAM,aAAa,MAAM;AAC3C,YAAM,QAAQ,MAAM,SAAS,QAAQ;AAErC,YAAM,aAAa,KAAK,KAAK,SAAS,QAAQ,MAAM,SAAS,QAAQ,MAAM,IAAI;AAC/E,YAAM,iBAAiB,KAAK,KAAK,SAAS,IAAI,WAAW,OAAO;AAChE,YAAM,YAAY,KAAK,KAAK,SAAS,UAAU;AAE/C,YAAM,iBAAiB,GAAG,gBAAgB,kBAAkB;AAE5D,iBAAW,cAAcA,WAAU,OAAOA,WAAU,KAAK;AAEzD,gBAAU,iBAAiB,QAAQ,OAAO,UAAU;AAGpD,YAAM,mBAAmB,QAAQ,MAAM,MAAM,SAAS,cAAc;AACpE,UAAI,kBAAkB;AAClB,mBAAW,cAAc,sBAAsB,CAAC;AAAA,MACpD;AAEA,aAAO;AAAA,QACH,OAAO;AAAA,QACP,WAAAA;AAAA,QACA;AAAA,QACA,OAAO,QAAQ;AAAA,QACf,OAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACzNO,IAAM,WAAN,MAAe;AAAA,EAQZ,YAAY,IAAiB,IAAmF;AAAA,+CAApG,OAAiB,iBAAkC,aAA8B,CAAC,GAAkB;AAAA,IA0CtH;AAAA;AAAA,EAGA,WAAW,QAAoB,OAAgB;AAE3C,UAAM,kBAAkB,KAAK,sBAAsB,MAAM,IAAI,KAAK;AAClE,UAAM,yBAAyB,KAAK,6BAA6B,MAAM,IAAI,KAAK;AAChF,UAAM,QAAQ,MAAM,SAAS,UAAU;AACvC,UAAM,iBAAiB,MAAM,QAAQ,kBAAkB;AAEvD,UAAM,cAAc,OAAO,QAAQ,kBAAkB,OAAO,SAAS;AAErE,YAAQ,IAAI,mCAAmC,MAAM,8BAA8B,eAAe,QAAQ,KAAK;AAE/G,WAAO;AAAA,EACX;AAAA,EAEA,sBAAsB,QAAoB;AA/E9C;AAgFQ,QAAI,OAAO,UAAU,OAAO,OAAO,WAAW,OAAO,OAAO,QAAQ;AAChE,YAAM,YAAW,UAAK,WAAL,mBAAa,KAAK,WAAM;AAjFrD,YAAAC;AAiFwD,qBAAM,QAAMA,MAAA,OAAO,WAAP,gBAAAA,IAAe;AAAA;AACvE,UAAI,UAAU;AACV,cAAM,OAAO,SAAS,MAAM,KAAK,CAAAC,UAAK;AAnFtD,cAAAD;AAmFyD,iBAAAC,MAAK,QAAMD,MAAA,OAAO,WAAP,gBAAAA,IAAe;AAAA,SAAM;AACzE,YAAI,MAAM;AACN,iBAAO,KAAK,MACP,OAAO,SAAI;AAtFpC,gBAAAA;AAsFuC,oBAAAA,MAAA,IAAI,kBAAkB,MAAtB,gBAAAA,IAAyB;AAAA,WAAQ,EAC/C,OAAO,UAAQ,KAAK,QAAQ,KAAK,KAAK,SAAS,mBAAmB,CAAC,EAAE,SAAS;AAAA,QACvF;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,6BAA6B,QAAoB;AAE7C,WAAO;AAAA,EACX;AAAA,EAEc,iBAAiB,iBAAkC,kBAC3B;AAAA;AAGlC,YAAM,mBAAmB,MAAM,sBAAsB,iBAAiB,iBAAiB,gBAAgB;AACvG,YAAM,WAAW,MAAM,iBAAiB,OAAO;AAC/C,UAAI,iBAAiB;AAAU;AAG/B,YAAM,qBAAgC,mDAAiB,UAC7C,gBAAgB,SAChB,cAAc,WAAW;AAEnC,aAAO,KAAK,yBAAyB,mBAAmB,SAAS,gBAAgB,SAAS,YAAY,SAAS,IAAI,SAAS,OAAO;AAAA,IACvI;AAAA;AAAA,EAEQ,yBAAyB,mBAA+B,gBAAyB,YAAyB,IAAY,SAAiB;AAC3I,UAAM,aAAa,UAAU,iBAAiB;AAG9C,UAAM,cAAc,QAAQ,UAAU,UAAU;AAChD,QAAI,gBAAgB,gBAAgB;AAChC,YAAM,OAAO,iBAAiB;AAC9B,iBAAW,MAAM,UAAU,cAAc,WAAW,KAAK,iBAAiB,IAAI;AAC9E,iBAAW,QAAQ,QAAQ,UAAU,UAAU;AAAA,IACnD;AAEA,QAAI,kBAAkB,KAAK,SAAS,YAAY;AAC5C,iBAAW,KAAK,OAAO;AACvB,iBAAW,KAAK,QAAQ;AAAA,IAC5B;AAGA,UAAM,UAAU,QAAQ,UAAU,WAAW,EAAE;AAC/C,QAAI,YAAY,IAAI;AAChB,YAAM,OAAO,KAAK;AAClB,iBAAW,GAAG,MAAM,UAAU,cAAc,WAAW,GAAG,KAAK,iBAAiB,IAAI;AACpF,iBAAW,GAAG,QAAQ,QAAQ,UAAU,WAAW,EAAE;AAAA,IACzD;AAEA,QAAI,SAAS;AACT,iBAAW,QAAQ,QAAQ;AAAA,IAC/B;AAEA,WAAO;AAAA,EACX;AACJ;;;ACpHO,IAAM,qBAAN,cAAiC,YAAY;AAAA,EAGhD,aAAa,MAAM,SAAc;AAhCrC;AAiCQ,WAAO,MAAM,aAAa,MAAM,OAAO;AAGvC,SAAK,iBAAiB,QAAQ,MAAM,YAAU,UAAK,cAAL,mBAAgB,mBAAkB,cAAc,WAAW,CAAC;AAC1G,SAAK,iBAAiB,UAAU,KAAK,cAAc;AAEnD,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,aAAa;AAAA,MACb,SAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,MAAM;AAAA,EAClB;AAAA,EAEA,qBAAqB;AACjB,UAAM,mBAAmB;AACzB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAKA,yBAAyB;AACrB,QAAI,KAAK,KAAK,OAAO,OAAO;AACxB,UAAI,KAAK,OAAO;AACZ,cAAM,QAAQ,KAAK,MAAM,SAAS,KAAK,KAAK,cAAc;AAC1D,aAAK,KAAK,KAAK,MAAM,UAAU,cAAc,KAAK,KAAK,KAAK,KAAI,aAAa,MAAM,KAAK;AAAA,MAC5F;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,sBAAsB;AAClB,UAAM,oBAAoB;AAG1B,YAAQ,UAAU,KAAK,KAAK,gBAAgB,EAAC,KAAK,EAAC,CAAC;AACpD,YAAQ,UAAU,KAAK,KAAK,eAAe,EAAE;AAG7C,SAAK,KAAK,iBAAiB,QAAQ,MAAM,UAAU,KAAK,KAAK,cAAc;AAC3E,SAAK,KAAK,eAAe,OAAO,KAAK,KAAK,eAAe;AACzD,SAAK,KAAK,eAAe,MAAM,CAAC;AAChC,WAAO,KAAK,KAAK,eAAe;AAChC,SAAK,KAAK,eAAe,GAAG,OAAO,KAAK,KAAK,eAAe,GAAG;AAC/D,SAAK,KAAK,eAAe,GAAG,MAAM,CAAC;AACnC,WAAO,KAAK,KAAK,eAAe,GAAG;AAEnC,YAAQ,UAAU,KAAK,KAAK,cAAc;AAC1C,YAAQ,UAAU,KAAK,KAAK,eAAe,EAAE;AAAA,EACjD;AAAA,EAEA,IAAI,aAAa;AACb,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,UAAU;AACV,WAAO,KAAK,KAAK,eAAe,SAAS,KAAK,KAAK;AAAA,EACvD;AAAA,EAEA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA,EAEM,iBAAiB;AAAA;AACnB,YAAM,+CAAM,uBAAN,IAAqB;AAE3B,UAAI,CAAC,KAAK;AAAO;AAGjB,WAAK,KAAK,iBAAiB,YAAY,wBAAwB,KAAK,OAAO,KAAK,KAAK,gBAAgB,KAAK,KAAK,KAAK;AAGpH,WAAK,KAAK,cAAc,IAAI,SAAS,EAAE,WAAW,KAAK,KAAK,gBAAgB,KAAK,KAAK;AAAA,IAC1F;AAAA;AACJ;;;AC5HO,IAAM,kBAAN,cAA8B,YAAY;AAAA,EAG7C,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,SAAS,KAAK,UAAU,cAAc,WAAW;AAEtD,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEC,IAAI,gBAAiC;AAClC,WAAO,CAAC,UAAU,UAAU,eAAe;AAAA,EAC/C;AAAA,EAEC,IAAI,kBAA0B;AAC3B,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,mBAA4B;AAC5B,WAAO,KAAK;AAAA,EAChB;AAAA,EAEM,sBAAsB;AAAA;AACxB,UAAI,CAAC,KAAK,QAAQ,CAAC,KAAK,KAAK;AAAe;AAE5C,WAAK,KAAK,QAAQ,KAAK,KAAK,SAAS;AAErC,YAAM,4CAAM,4BAAN,IAA0B;AAAA,IACpC;AAAA;AAAA,EAUO,qBAAqB,OAAiB,MAAgE;AAAA;AACzG,UAAI,SAAS;AAAiB,eAAO,MAAM,4CAAM,6BAAN,MAA2B,OAAO,IAAI;AAGjF,YAAM,YAAY,MAAM,sBAAsB;AAC9C,gBAAU,cAAc,MAAM,EAAC,YAAY,CAAC,SAAS,YAAY,EAAC,CAAC;AAEnE,YAAM,OAAO,KAAK,sBAAsB,IAAI;AAC5C,YAAM,QAAQ,UAAU,cAAc;AAEtC,aAAO,EAAC,MAAM,MAAK;AAAA,IACvB;AAAA;AACJ;;;AClEO,IAAM,oBAAN,MAAwB;AAAA,EAU3B,OAAO,eAAe,OAAe,eAAuB,WAAoB,OAAe;AAC3F,UAAM,mBAAmB,WAAW,KAAK,wBAAwB;AACjE,UAAM,QAAQ,QAAQ,gBAAgB;AACtC,WAAO,KAAK,IAAI,KAAK,cAAc,KAAK;AAAA,EAC5C;AAAA,EAKA,WAAW,eAAuB;AAC9B,WAAO;AAAA,EACX;AAAA,EAOA,WAAW,wBAAgC;AACvC,WAAO;AAAA,EACX;AAAA,EAMA,OAAO,sBAAsB,eAA+B;AACxD,WAAO,KAAK,IAAI,GAAG,KAAK,eAAe,aAAa;AAAA,EACxD;AAAA,EAUA,OAAO,eAAe,OAAuB;AACzC,WAAO;AAAA,EACX;AACJ;;;AC7CO,IAAM,aAAN,MAAiB;AAAA,EASpB,OAAO,gBAAgB,OAAe,OAAe,OAAe,MAA0B;AAC1F,QAAI,QAAQ;AAAG,cAAQ;AACvB,QAAI,QAAQ;AAAG,cAAQ;AACvB,QAAI,OAAO;AAAG,aAAO;AAErB,UAAM,SAAS,cAAc,WAAW;AACxC,WAAO,OAAO;AACd,YAAQ,UAAU,QAAQ,EAAC,KAAK,EAAC,CAAC;AAClC,WAAO,KAAK,OAAO,OAAO,KAAK,QAAQ,WAAW,oBAAoB,MAAM,KAAK;AAEjF,WAAO;AAAA,EACX;AAAA,EAOA,OAAO,oBAAoB,MAAc,OAA2B;AAChE,QAAI,OAAO;AAAG,aAAO;AACrB,QAAI,QAAQ;AAAG,cAAQ;AACvB,WAAO,OAAO,QAAQ,aAAa;AAAA,EACvC;AAAA,EAQA,OAAO,kBAAkB,aAAyB,MAAc;AAC5D,QAAI,OAAO;AAAG,aAAO;AAErB,kBAAc,QAAQ,MAAM,UAAU,WAAW;AAEjD,cAAU,cAAc,YAAY,KAAK,YAAY,CAAC,IAAI;AAC1D,YAAQ,UAAU,aAAa,EAAC,KAAK,EAAC,CAAC;AAEvC,WAAO;AAAA,EACX;AACJ;;;ACnCO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAG9C,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,QAAQ,KAAK,SAAS;AAC3B,SAAK,QAAQ,KAAK,SAAS;AAC3B,SAAK,WAAW,KAAK,YAAY;AACjC,SAAK,cAAc,KAAK,eAAe,cAAc,WAAW;AAEhE,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAAmB;AACnB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,OAAO;AAAA,MACP,WAAW;AAAA,IACf;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,UAAU,kBAAkB;AAAA,EAClD;AAAA,EAEM,sBAAsB;AAAA;AACxB,WAAK,yBAAyB;AAE9B,YAAM,6CAAM,4BAAN,IAA0B;AAAA,IACpC;AAAA;AAAA,EAKA,2BAA2B;AACvB,QAAI,CAAC,KAAK;AAAM;AAEhB,UAAM,gBAAgB,KAAK,KAAK,kBAAkB;AAClD,UAAM,iBAAiB,kBAAkB,sBAAsB,KAAK,KAAK,QAAQ;AACjF,SAAK,KAAK,QAAQ,cAAc,SAAS;AAAA,EAC7C;AAAA,EAEA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAEA,oBAAoB;AAChB,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,SAAK,KAAK,MAAM,MAAM,UAAU;AAAA,MAC5B,KAAK,KAAK,MAAM;AAAA,MAChB;AAAA,MACA,kBAAkB,eAAe,KAAK;AAAA,IAAC;AAAA,EAC/C;AAAA,EAcA,sBAAsB;AAClB,UAAM,oBAAoB;AAC1B,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EAKA,sBAAsB;AAjH1B;AAkHQ,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,UAAM,QAAQ,QAAO,UAAK,SAAL,mBAAW,QAAQ;AACxC,UAAM,WAAW,KAAK,KAAK;AAC3B,SAAK,KAAK,QAAQ,kBAAkB,eAAe,OAAO,OAAO,QAAQ;AAAA,EAC7E;AAAA,EAKA,kBAAkB;AACd,QAAI,CAAC,KAAK;AAAO,aAAO,cAAc,WAAW;AAEjD,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,UAAM,QAAQ,KAAK,MAAM,aAAa,OAAO,EAAE;AAE/C,SAAK,KAAK,cAAc,WAAW,gBAAgB,OAAO,OAAO,OAAO,KAAK,KAAK,KAAK;AAAA,EAC3F;AAAA,EAEM,iBAAiB;AAAA;AACnB,WAAK,gBAAgB;AAErB,YAAM,6CAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAKM,+BAA+B;AAAA;AACjC,UAAI,CAAC,KAAK;AAAM;AAEhB,YAAM,KAAK,KAAK,kBAAkB,EAAC,OAAO,KAAK,KAAK,OAAO,UAAU,MAAK,CAAC;AAAA,IAC/E;AAAA;AACJ;;;AC5HO,IAAM,YAAN,cAAwB,YAAY;AAAA,EAGvC,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,UAAU,KAAK,WAAW,IAAI,iBAAiB,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE;AAErE,SAAK,gBAAgB,QAAQ,MAAM,UAAU,KAAK,QAAQ,WAAW;AACrE,SAAK,gBAAgB,QAAQ,MAAM,UAAU,KAAK,aAAa;AAE/D,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAA0B;AAC1B,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,cAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,OAAO;AAAA,EAC7B;AAAA,EAEA,OAAa,uBAAuB,MAAM,OAAO;AAAA;AAC7C,YAAM,iBAAiB,MAAM,4BAAM,+BAAN,MAA6B,MAAM,KAAK;AAErE,UAAI,CAAC,MAAM,YAAY;AACnB,gBAAQ,MAAM,oBAAoB,KAAK,gDAAgD,KAAK;AAC5F,eAAO;AAAA,MACX;AAGA,YAAM,YAAY,MAAM,OAAO,MAAM;AACrC,cAAQ,MAAM,YAAY,gBAAgB,EAAC,UAAS,CAAC;AAGrD,aAAO;AAAA,IACX;AAAA;AAAA,EAKA,sBAAsB;AAClB,UAAM,oBAAoB;AAE1B,YAAQ,UAAoD,KAAK,KAAK,cAAc,IAAyB;AAG7G,SAAK,KAAK,gBAAgB,QAAQ,MAAM,UAAU,KAAK,KAAK,aAAa;AACzE,SAAK,KAAK,cAAc,OAAO,QAAQ,UAAU,KAAK,KAAK,eAAe,EAAC,KAAK,EAAC,CAAC;AAAA,EACtF;AAAA,EAKA,IAAI,UAAmB;AACnB,WAAO,KAAK,KAAK,cAAc,SAAS;AAAA,EAC5C;AAAA,EAEA,IAAI,eAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAEM,iBAAiB;AAAA;AAEnB,WAAK,KAAK,gBAAgB,WAAW,kBAAkB,KAAK,KAAK,eAAe,KAAK,KAAK,KAAK;AAE/F,YAAM,sCAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AACJ;;;ACtGO,IAAM,mBAAN,MAAuB;AAAA,EAQ1B,OAAO,sBAAsB,QAAgC;AACzD,WAAO,QAAQ,MAAM,UAAU,MAAM;AAAA,EACzC;AAAA,EAUA,OAAO,wBAAwB,QAAoB,OAA2B;AAC1E,aAAS,QAAQ,MAAM,UAAU,MAAM;AAEvC,UAAM,KAAK,CAAC;AACZ,WAAO,GAAG,MAAM,UAAU,cAAc,OAAO,GAAG,KAAK,aAAa,EAAE;AACtE,WAAO,MAAM,UAAU,cAAc,OAAO,KAAK,aAAa,KAAK;AAGnE,YAAQ,UAAU,OAAO,EAAE;AAC3B,YAAQ,UAAU,QAAQ,EAAC,KAAK,EAAC,CAAC;AAElC,WAAO;AAAA,EACX;AAAA,EAUA,OAAO,2BAA2B,UAAoB,QAAoB,cAAsB,cAAkC;AAC9H,WAAO,YAAY,qBAAqB,UAAU,cAAc,cAAc,MAAM;AAAA,EACxF;AAAA,EAEA,OAAO,6BAA6B,UAAoB,QAAoB,cAAsB,cAA0B;AACxH,WAAO,YAAY,qBAAqB,UAAU,cAAc,cAAc,MAAM;AAAA,EACxF;AAAA,EAEA,OAAO,sBAAsB,QAAgC;AACzD,WAAO,YAAY,sBAAsB,MAAM;AAAA,EACnD;AAAA,EAOA,OAAO,kBAAkB,MAAgC;AACrD,WAAO,SAAS;AAAA,EACpB;AAAA,EAYA,OAAO,oBAAoB,MAAuB,QAAoB,OAA2B;AAC7F,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,eAAO,iBAAiB,wBAAwB,QAAQ,KAAK;AAAA,MACjE,KAAK;AACD,eAAO,iBAAiB,sBAAsB,MAAM;AAAA,IAC5D;AAEA,WAAO,QAAQ,MAAM,UAAU,MAAM;AAAA,EACzC;AAAA,EAYA,OAAO,qBAAqB,UAAoB,WAAsB,YAA6B,QAAoB,cAAsB,cAAkC;AAE3K,QAAI,cAAc,UAAU,eAAe,UAAU;AACjD,aAAO,iBAAiB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAY;AAAA,IACpB;AACA,QAAI,cAAc,cAAc,eAAe,UAAU;AACrD,aAAO,iBAAiB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAY;AAAA,IACpB;AACA,QAAI,eAAe,YAAY;AAC3B,aAAO,iBAAiB;AAAA,QACpB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAY;AAAA,IACpB;AAEA,WAAO,QAAQ,MAAM,UAAU,MAAM;AAAA,EACzC;AAAA,EAQA,OAAO,kBAAkB,WAAsB,YAAgD;AAC3F,QAAI,cAAc,MAAM,eAAe;AACnC,cAAQ,KAAK,6GAA6G;AAE9H,UAAM,aAAa,cAAc,kBAAkB;AAEnD,QAAI,cAAc,UAAU,eAAe,UAAU;AACjD,iBAAW,YAAY;AAAA,IAC3B;AACA,QAAI,cAAc,cAAc,eAAe,UAAU;AACrD,iBAAW,YAAY;AAAA,IAC3B;AACA,QAAI,eAAe,YAAY;AAC3B,iBAAW,YAAY;AACvB,iBAAW,aAAa;AAAA,IAC5B;AAEA,WAAO;AAAA,EACX;AACJ;;;AC9IO,IAAM,yBAAN,cAAqC,YAAY;AAAA,EAUpD,OAAa,uBAAuB,MAAe,OAA6C;AAAA;AAC5F,YAAM,SAAS,cAAc,kBAAkB,MAAM,yCAAM,+BAAN,MAA6B,MAAM,KAAK,CAAC;AAE9F,YAAM,YAAY,KAAK;AACvB,UAAI,CAAC;AAAW,eAAO;AAEvB,YAAM,aAAa,iBAAiB,kBAAkB,UAAU,OAAO,MAAM,UAAU,OAAO,OAAO,IAAI;AACzG,aAAO,YAAY,+BAA+B,QAAQ,UAAU;AAAA,IACxE;AAAA;AAAA,EAEA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,2BAA2B;AAAA,EACpC;AAAA,EAEA,IAAI,gBAAiC;AAvCzC;AAwCQ,UAAM,SAAQ,UAAK,SAAL,mBAAW;AACzB,QAAI,CAAC;AAAO,aAAO,CAAC,QAAQ;AAE5B,QAAI,MAAM,OAAO,SAAS,UAAU,MAAM,OAAO,OAAO,SAAS,UAAU;AACvE,aAAO,CAAC,QAAQ;AAAA,IACpB;AACA,QAAI,MAAM,OAAO,SAAS,cAAc,MAAM,OAAO,OAAO,SAAS,UAAU;AAC3E,aAAO,CAAC,QAAQ;AAAA,IACpB;AACA,QAAI,MAAM,OAAO,OAAO,SAAS,YAAY;AACzC,aAAO,CAAC,UAAU,WAAW,QAAQ;AAAA,IACzC;AAEA,WAAO,CAAC,QAAQ;AAAA,EACpB;AAAA,EAKA,6BAA6B;AA3DjC;AA4DQ,UAAM,SAAQ,UAAK,SAAL,mBAAW;AACzB,QAAI,CAAC;AAAO;AAEZ,SAAK,KAAK,iBAAiB,iBAAiB,oBAAoB,MAAM,OAAO,OAAO,MAAM,KAAK,KAAK,gBAAgB,KAAK,KAAK,QAAQ,KAAK;AAAA,EAC/I;AAAA,EAMM,iBAAiB;AAAA;AACnB,WAAK,KAAK,iBAAiB,iBAAiB,sBAAsB,KAAK,KAAK,cAAc;AAE1F,YAAM,mDAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAKM,iBAAiB;AAAA;AA/E3B;AAgFQ,YAAM,SAAQ,UAAK,SAAL,mBAAW;AACzB,UAAI,CAAC;AAAO;AACZ,UAAI,CAAC,KAAK;AAAO;AAEjB,WAAK,KAAK,iBAAiB,iBAAiB;AAAA,QAAqB,KAAK;AAAA,QAAO,MAAM,OAAO;AAAA,QAAM,MAAM,OAAO,OAAO;AAAA,QAChH,KAAK,KAAK;AAAA,QAAgB,KAAK,QAAQ,KAAK;AAAA,QAAO,KAAK,KAAK;AAAA,MAAK;AAEtE,YAAM,mDAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAKM,eAAe;AAAA;AA7FzB;AA8FQ,YAAM,SAAQ,UAAK,SAAL,mBAAW;AACzB,UAAI,CAAC;AAAO;AAGZ,UAAI,iBAAiB,kBAAkB,MAAM,OAAO,OAAO,IAAI,GAAG;AAC9D,cAAM,OAAO,MAAM,YAAY,0BAA0B,MAAM,KAAK,KAAK,OAAO;AAChF,YAAI,CAAC;AAAM;AACX,cAAM,KAAK,QAAQ;AAAA,MACvB;AAAA,IAEJ;AAAA;AACJ;;;ACtGO,IAAM,mBAAmB;AAAA,EAI5B,aAAa;AAAA,EAKb,uBAAuB,SAAS,cAA8B;AAC1D,WAAO,KAAK,IAAI,GAAG,KAAK,cAAc,YAAY;AAAA,EACtD;AAAA,EAEA,gBAAgB,SAAS,OAAuB;AAC5C,WAAO,KAAK,IAAI,GAAG,KAAK;AAAA,EAC5B;AAAA,EAMA,gBAAgB,SAAS,OAAuB;AAC5C,WAAO;AAAA,EACX;AAAA,EAQA,eAAe,SAAS,OAAe,cAA8B;AACjE,UAAM,OAAO,QAAQ;AACrB,WAAO,KAAK,IAAI,KAAK,aAAa,IAAI;AAAA,EAC1C;AACJ;;;AChCO,IAAM,YAAY;AAAA,EASrB,gBAAgB,SAAU,MAAc,MAAc,WAA+B;AACjF,QAAI,OAAO;AAAG,aAAO;AACrB,QAAI,YAAY;AAAG,kBAAY;AAE/B,UAAM,SAAS,cAAc,WAAW;AACxC,WAAO,OAAO;AACd,YAAQ,UAAU,QAAQ,EAAC,KAAK,EAAC,CAAC;AAElC,WAAO,KAAK,OAAO,OAAO,KAAK,QAAQ,UAAU,mBAAmB,MAAM,SAAS;AAEnF,WAAO;AAAA,EACX;AAAA,EAOA,oBAAoB,SAAS,MAAc,WAA+B;AACtE,QAAI,OAAO;AAAG,aAAO;AACrB,QAAI,YAAY;AAAG,kBAAY;AAC/B,WAAO,OAAO,YAAY,aAAa;AAAA,EAC3C;AAAA,EAKA,kBAAkB,SAAS,YAAwB,MAAc;AAC7D,QAAI,OAAO;AAAG,aAAO;AAErB,iBAAa,QAAQ,MAAM,UAAU,UAAU;AAE/C,cAAU,cAAc,WAAW,KAAK,YAAY,CAAC,IAAI;AACzD,YAAQ,UAAU,YAAY,EAAC,KAAK,EAAC,CAAC;AAEtC,WAAO;AAAA,EACX;AACJ;;;AClCO,IAAM,kBAAN,cAA8B,YAAY;AAAA,EAG7C,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,QAAS,KAAK,SAAS;AAC5B,SAAK,OAAO,KAAK,QAAQ;AACzB,SAAK,aAAa,cAAc,WAAW;AAE3C,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAAmB;AACnB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,OAAO;AAAA,MACP,WAAW;AAAA,IACf;AAAA,EACJ;AAAA,EAGA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,UAAU,OAAO;AAAA,EACvC;AAAA,EAEM,sBAAsB;AAAA;AACxB,WAAK,yBAAyB;AAC9B,YAAM,4CAAM,4BAAN,IAA0B;AAAA,IACpC;AAAA;AAAA,EAKA,2BAA2B;AACvB,QAAI,CAAC,KAAK;AAAM;AAEhB,UAAM,gBAAgB,KAAK,KAAK,wBAAwB;AACxD,UAAM,iBAAiB,iBAAiB,sBAAsB,KAAK,KAAK,QAAQ,CAAC;AACjF,SAAK,KAAK,QAAQ,cAAc,SAAS;AAAA,EAC7C;AAAA,EAEA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EAKA,oBAAoB;AAChB,SAAK,KAAK,QAAQ,iBAAiB,eAAe,KAAK,KAAK,KAAK;AAAA,EACrE;AAAA,EAKA,oBAAoB;AAChB,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,SAAK,KAAK,MAAM,MAAM,UAAU;AAAA,MAC5B,KAAK,KAAK,MAAM;AAAA,MAChB;AAAA,MACA,iBAAiB,eAAe,KAAK;AAAA,IACzC;AAAA,EACJ;AAAA,EAEA,sBAAsB;AAClB,UAAM,oBAAoB;AAC1B,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EAEA,qBAAqB;AAxGzB;AAyGQ,UAAM,QAAQ,OAAO,KAAK,KAAK,KAAK;AACpC,UAAM,OAAO,SAAO,UAAK,SAAL,mBAAW,cAAa,CAAC;AAC7C,SAAK,KAAK,OAAO,iBAAiB,cAAc,OAAO,IAAI;AAAA,EAC/D;AAAA,EAEA,sBAAsB;AAClB,QAAI,CAAC,KAAK;AAAO,aAAO,cAAc,UAAU;AAEhD,UAAM,OAAO,OAAO,KAAK,KAAK,IAAI;AAClC,UAAM,YAAY,KAAK,MAAM,aAAa,WAAW,EAAE;AAEvD,SAAK,KAAK,aAAa,UAAU,eAAe,MAAM,KAAK,KAAK,OAAO,SAAS;AAAA,EACpF;AAAA,EAEM,iBAAiB;AAAA;AACnB,WAAK,oBAAoB;AAEzB,YAAM,4CAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AAAA,EAEM,oBAAoB;AAAA;AACtB,YAAM,KAAK,kBAAkB;AAE7B,YAAM,4CAAM,0BAAN,IAAwB;AAAA,IAClC;AAAA;AAAA,EAKM,oBAAoB;AAAA;AACtB,UAAI,CAAC,KAAK;AAAM;AAEhB,YAAM,KAAK,KAAK,wBAAwB,EAAC,OAAO,KAAK,KAAK,MAAK,CAAC;AAAA,IACpE;AAAA;AACJ;;;ACxIO,IAAM,0BAAN,cAAsC,YAAY;AAAA,EACrD,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAKA,mBAAmB;AACf,QAAI,CAAC,KAAK;AAAO;AAEjB,UAAM,QAAQ,KAAK,MAAM,aAAa;AACtC,UAAM,SAAQ,+BAAO,UAAS;AAE9B,UAAM,YAAY,IAAI,UAAU,KAAK,UAAU,GAAG;AAClD,cAAU,cAAc,iBAAiB,KAAK;AAAA,EAClD;AAAA,EAKM,iBAAiB;AAAA;AACnB,YAAM,oDAAM,uBAAN,IAAqB;AAG3B,UAAI,CAAC,KAAK;AAAO;AACjB,UAAI,CAAC,KAAK,MAAM;AAAoB;AAGpC,UAAI,KAAK,KAAK,UAAU;AAAG;AAE3B,YAAM,KAAK,MAAM,eAAe,KAAK,KAAK,KAAK;AAAA,IACnD;AAAA;AACJ;;;AClCO,IAAM,8BAAN,cAA0C,YAAY;AAAA,EACnD,UAAyB;AAAA;AAJnC;AAKQ,UAAI,CAAC,KAAK;AAAO,eAAO;AACxB,UAAI,CAAC,KAAK,MAAM,0BAA0B;AACtC,iBAAG,kBAAH,mBAAkB,KAAK,KAAK,KAAK,SAAS,gDAAgD;AAC1F,eAAO;AAAA,MACX;AAEA,aAAO,wDAAM,gBAAN,IAAc;AAAA,IACzB;AAAA;AAAA,EAEA,oBAAoB;AAChB,UAAM,kBAAkB;AACxB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EAKA,mBAAmB;AACf,QAAI,CAAC,KAAK;AAAO;AAEjB,UAAM,QAAQ,KAAK,MAAM,iBAAiB;AAC1C,UAAM,SAAQ,+BAAO,UAAS;AAE9B,UAAM,YAAY,IAAI,UAAU,KAAK,UAAU,GAAG;AAClD,cAAU,cAAc,qBAAqB,KAAK;AAAA,EACtD;AAAA,EAKM,iBAAiB;AAAA;AACnB,YAAM,wDAAM,uBAAN,IAAqB;AAG3B,UAAI,CAAC,KAAK;AAAO;AACjB,UAAI,CAAC,KAAK,MAAM;AAAoB;AAGpC,UAAI,KAAK,KAAK,UAAU;AAAG;AAE3B,YAAM,KAAK,MAAM,mBAAmB,KAAK,KAAK,KAAK;AAAA,IACvD;AAAA;AACJ;;;AChCO,IAAM,WAAN,cAAuB,YAAY;AAAA,EAItC,aAAa,MAAM,SAAc;AAC7B,WAAO,MAAM,aAAa,MAAM,OAAO;AAEvC,SAAK,UAAU,KAAK,WAAW,IAAI,gBAAgB,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE;AAEpE,SAAK,eAAe,QAAQ,MAAM,UAAU,KAAK,QAAQ,UAAU;AACnE,SAAK,eAAe,QAAQ,MAAM,UAAU,KAAK,YAAY;AAE7D,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,kBAAkB;AAClB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,uBAA+B;AAC/B,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,aAAa;AAAA,MACb,cAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EAEA,IAAI,gBAAiC;AACjC,WAAO,CAAC,UAAU,MAAM;AAAA,EAC5B;AAAA,EAEC,IAAI,gBAAgB;AACjB,WAAO;AAAA,EACX;AAAA,EAKA,IAAI,UAAmB;AACnB,WAAO,KAAK,KAAK,aAAa,SAAS;AAAA,EAC3C;AAAA,EAEA,IAAI,eAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAEA,IAAI,eAAuB;AACvB,WAAO;AAAA,EACX;AAAA,EAKA,sBAAsB;AAClB,UAAM,oBAAoB;AAG1B,SAAK,KAAK,aAAa,OAAO,QAAQ,UAAU,KAAK,KAAK,cAAc,EAAC,KAAK,EAAC,CAAC;AAAA,EACpF;AAAA,EAEM,iBAAiB;AAAA;AAEnB,WAAK,KAAK,eAAe,UAAU,iBAAiB,KAAK,KAAK,cAAc,KAAK,KAAK,KAAK;AAE3F,YAAM,qCAAM,uBAAN,IAAqB;AAAA,IAC/B;AAAA;AACJ;;;AC/EO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAC9C,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AACJ;;;ACPO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAO9C,OAAa,uBAAuB,MAAM,OAAO;AAAA;AATrD;AAWQ,UAAI,CAAC,QAAQ,CAAC;AAAO,eAAO,CAAC;AAE7B,YAAM,cAAc,MAAM,UAAU;AACpC,UAAI,CAAC,aAAa;AACd,eAAM,QAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,kCAAkC;AACnF,eAAO,CAAC;AAAA,MACZ;AAEA,cAAQ,YAAY,KAAK,aAAa;AAAA,QAClC,KAAK,aAAa;AACd,gBAAM,YAAY;AAClB,gBAAM,QAAQ,MAAM,wBAAwB;AAC5C,gBAAM,QAAQ,EAAC,WAAW,YAAY,KAAK,YAAW;AAEtD,iBAAO,EAAC,WAAW,OAAO,MAAK;AAAA,QACnC;AAAA,QAEA;AACI,gBAAM,UAAU,MAAM,wBAAwB;AAC9C,iBAAO,MAAM,gBAAgB,OAAO;AAAA,MAC5C;AAAA,IACJ;AAAA;AACJ;;;AC/BO,IAAM,sBAAN,cAAkC,YAAY;AAAA,EACjD,OAAa,uBAAuB,MAAM,OAAO;AAAA;AAHrD;AAKQ,UAAI,CAAC,QAAQ,CAAC;AAAO,eAAO,CAAC;AAE7B,YAAM,cAAc,MAAM,UAAU;AACpC,UAAI,CAAC,aAAa;AACd,eAAM,QAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,kCAAkC;AACnF,eAAO,CAAC;AAAA,MACZ;AAEA,cAAQ,YAAY,KAAK,aAAa;AAAA,QAClC,KAAK,aAAa;AACd,gBAAM,YAAY;AAClB,gBAAM,QAAQ;AACd,gBAAM,QAAQ;AAEd,iBAAO,EAAC,WAAW,OAAO,MAAK;AAAA,QACnC;AAAA,QAEA;AACI,iBAAO,MAAM,gBAAgB,YAAY;AAAA,MACjD;AAAA,IACJ;AAAA;AACJ;;;ACxBO,IAAM,wBAAN,cAAoC,YAAY;AAAA,EACnD,OAAa,uBAAuB,MAAM,OAAO;AAAA;AAHrD;AAKQ,UAAI,CAAC,QAAQ,CAAC;AAAO,eAAO,CAAC;AAE7B,YAAM,cAAc,MAAM,UAAU;AACpC,UAAI,CAAC,aAAa;AACd,eAAM,QAAG,kBAAH,mBAAkB,MAAM,KAAK,KAAK,SAAS,kCAAkC;AACnF,eAAO,CAAC;AAAA,MACZ;AAEA,cAAQ,YAAY,KAAK,aAAa;AAAA,QAClC,KAAK,aAAa;AACd,gBAAM,YAAY;AAClB,gBAAM,QAAQ;AACd,gBAAM,QAAQ;AAEd,iBAAO,EAAC,WAAW,OAAO,MAAK;AAAA,QACnC;AAAA,QAEA;AACI,iBAAO,MAAM,gBAAgB,YAAY;AAAA,MACjD;AAAA,IACJ;AAAA;AACJ;;;ACrBO,IAAM,wBAAN,cAAoC,oBAAoB;AAAA,EAG3D,OAAO,wBAAoD;AACvD,WAAO;AAAA,MACH,aAAa;AAAA,MACb,cAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EAEM,iBAAiB;AAAA;AACnB,WAAK,KAAK,iBAAiB,YAAY,+BAA+B,KAAK,KAAK,cAAc;AAAA,IAClG;AAAA;AACJ;;;ACdO,IAAM,yBAAyB,CAAC,YAAgC;AACnE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,SAAO,MAAY;AAAA,EAAC,EAAC;AACrB,QAAM,MAAY;AAAA,EAAC,EAAC;AAEpB,WAAS,mBAAmB,MAAM;AAC9B,OAAG,wCAAwC,MAAM;AAE7C,aAAO,YAAY,cAAc,wBAAwB;AAAA,QACrD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,GAAG,CAAC;AAEL,aAAO,YAAY,cAAc,wBAAwB;AAAA,QACrD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,GAAG,CAAC;AAEL,aAAO,YAAY,cAAc,wBAAwB;AAAA,QACrD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,GAAG,EAAE;AAAA,IACV,CAAC;AAED,OAAG,0DAA0D,MAAM;AAE/D,aAAO,YAAY,cAAc,wBAAwB;AAAA,QACrD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAE;AAGT,aAAO,YAAY,cAAc,wBAAwB;AAAA,QACrD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAE;AAAA,IACb,CAAC;AAED,OAAG,uCAAuC,MAAM;AAE5C,aAAO,UAAU,cAAc,qBAAqB;AAAA,QAChD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAC,cAAc,GAAG,gBAAgB,EAAC,CAAC;AAG3C,aAAO,UAAU,cAAc,qBAAqB;AAAA,QAChD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAC,cAAc,GAAG,gBAAgB,GAAE,CAAC;AAI5C,aAAO,UAAU,cAAc,qBAAqB;AAAA,QAChD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAC,cAAc,GAAG,gBAAgB,GAAE,CAAC;AAG5C,aAAO,UAAU,cAAc,qBAAqB;AAAA,QAChD,OAAO;AAAA,QACP,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,GAAG,CAAC,GAAG,EAAC,cAAc,GAAG,gBAAgB,EAAC,CAAC;AAAA,IAC/C,CAAC;AAED,OAAG,mCAAmC,MAAM;AACxC,aAAO,SAAS,cAAc,mBAAmB;AAAA,QAC7C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC,GAAG,IAAI,UAAU,MAAM;AAExB,aAAO,SAAS,cAAc,mBAAmB;AAAA,QAC7C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC,GAAG,CAAC;AAEL,aAAO,SAAS,cAAc,mBAAmB;AAAA,QAC7C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC,GAAG,CAAC;AAEL,aAAO,SAAS,cAAc,mBAAmB;AAAA,QAC7C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC,GAAG,CAAC;AAEL,aAAO,SAAS,cAAc,mBAAmB;AAAA,QAC7C,aAAa;AAAA,QACb,WAAW;AAAA,QACX,YAAY;AAAA,QACZ,WAAW;AAAA,MACf,CAAC,GAAG,CAAC;AAAA,IACT,CAAC;AAAA,EACL,CAAC;AACL;;;ACxJO,IAAM,sBAAN,MAAyE;AAAA,EAIxE,YAAY,eAAe;AAF3B,qBAA8C,CAAC;AAG3C,SAAK,gBAAgB;AAAA,EACzB;AAAA,EAEM,OAAO,MAAkB;AAAA;AAE3B,YAAME,YAAW,MAAM,KAAK,cAAc,OAAO,gCAAC,MAAM,oDAAqD,OAAS,EAAC,QAAQ,KAAK,OAAM,EAAE;AAC5I,WAAK,UAAU,KAAKA,SAAQ;AAC5B,aAAOA;AAAA,IACX;AAAA;AAAA,EAEM,WAAW;AAAA;AAEb,WAAK,UAAU,QAAQ,CAAAA,cAAYA,UAAS,OAAO,CAAC;AAAA,IACxD;AAAA;AACJ;;;ACRG,IAAM,0BAA0B,CAAC,YAAgC;AACpE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAC1C,gBAAY,IAAI,oBAAoB,KAAK;AAAA,EAC7C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AACxB,UAAM,UAAU,SAAS;AAAA,EAC7B,EAAC;AAED,QAAM,yBAAyB;AAAA,IAC3B,eAAe;AAAA,MACX,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,OAAO;AAAA,MACH,QAAQ,CAAC;AAAA,IACb;AAAA,IACA,kBAAkB;AAAA,MACd,QAAQ,CAAC;AAAA,IACb;AAAA,EACJ;AAEA,WAAS,iBAAiB,MAAM;AAE5B,aAAS,8BAA8B,MAAM;AACzC,SAAG,oDAAoD,MAAM;AACzD,cAAM,SAAS,IAAI,kBAAkB;AAErC,eAAO,UAAU,OAAO,QAAQ,EAAC,QAAQ,CAAC,EAAC,CAAC;AAC5C,eAAO,MAAM,OAAO,WAAW,KAAK;AACpC,eAAO,MAAM,OAAO,OAAO,CAAC;AAAA,MAChC,CAAC;AAED,SAAG,gDAAgD,MAAM;AACrD,eAAO,MAAM,IAAI,kBAAkB,EAAE,cAAc,KAAK;AACxD,eAAO,MAAM,IAAI,kBAAkB,QAAW,IAAI,2BAA2B,CAAC,EAAE,cAAc,IAAI;AAAA,MACtG,CAAC;AAED,SAAG,qCAAqC,MAAM;AAC1C,eAAO,MAAM,IAAI,kBAAkB,EAAC,QAAQ,EAAC,GAAG,EAAC,EAAC,CAAC,EAAE,WAAW,IAAI;AAAA,MACxE,CAAC;AAED,SAAG,+DAA+D,MAAM;AACpE,cAAM,SAAS,IAAI,kBAAkB;AAAA,UACjC,QAAQ;AAAA,YACJ,GAAG;AAAA,YACH,GAAG;AAAA,UACP;AAAA,QACJ,CAAC;AAGD,eAAO,MAAM,OAAO,OAAO,EAAE;AAAA,MACjC,CAAC;AAED,SAAG,uEAAuE,MAAM;AAC5E,cAAM,SAAS,IAAI,kBAAkB;AAAA,UACjC,QAAQ;AAAA,YACJ,GAAG;AAAA,YACH,GAAG;AAAA,UACP;AAAA,UACA,OAAO;AAAA,QACX,CAAC;AAGD,eAAO,MAAM,OAAO,OAAO,CAAC;AAC5B,eAAO,MAAM,OAAO,iBAAiB,GAAG,EAAE;AAAA,MAC9C,CAAC;AAED,SAAG,4DAA4D,MAAM;AACjE,cAAM,SAAS,IAAI,kBAAkB;AAAA,UACjC,QAAQ;AAAA,YACJ,GAAG;AAAA,UACP;AAAA,QACJ,CAAC;AAED,eAAO,MAAM,OAAO,SAAS,GAAG,GAAG,IAAI;AACvC,eAAO,MAAM,OAAO,SAAS,GAAG,GAAG,KAAK;AACxC,eAAO,MAAM,OAAO,SAAS,EAAE,GAAG,KAAK;AAAA,MAC3C,CAAC;AAED,SAAG,yCAAyC,MAAM;AAC9C,cAAM,SAAS,IAAI,kBAAkB;AACrC,eAAO,MAAM,OAAO,OAAO,OAAO,MAAM,MAAS;AAEjD,eAAO,UAAU,KAAK,CAAC;AACvB,eAAO,MAAM,OAAO,OAAO,OAAO,MAAM,CAAC;AAAA,MAC7C,CAAC;AAED,SAAG,2CAA2C,MAAM;AAChD,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,GAAG,GAAG,GAAG,EAAC,EAAC,CAAC;AAC3D,eAAO,MAAM,OAAO,SAAS,GAAG,GAAG,IAAI;AAEvC,eAAO,YAAY,GAAG;AACtB,eAAO,MAAM,OAAO,SAAS,GAAG,GAAG,KAAK;AACxC,eAAO,MAAM,OAAO,SAAS,GAAG,GAAG,IAAI;AAAA,MAC3C,CAAC;AAED,SAAG,kDAAkD,MAAM;AACvD,cAAM,SAAS,IAAI,kBAAkB;AACrC,eAAO,MAAM,EAAC,QAAQ,EAAC,OAAO,GAAG,QAAQ,CAAC,EAAC,EAAC,CAAC;AAC7C,eAAO,OAAO,OAAO,QAAQ;AAE7B,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,CAAC,EAAC,EAAC,CAAC;AACnC,eAAO,QAAQ,OAAO,QAAQ;AAAA,MAClC,CAAC;AAED,SAAG,+DAA+D,MAAM;AACpE,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,GAAG,GAAG,GAAG,EAAC,EAAC,CAAC;AAE3D,eAAO,MAAM;AAEb,eAAO,MAAM,OAAO,WAAW,KAAK,CAAC,GAAG,IAAI;AAC5C,eAAO,MAAM,OAAO,WAAW,KAAK,CAAC,GAAG,KAAK;AAC7C,eAAO,MAAM,OAAO,WAAW,KAAK,CAAC,GAAG,KAAK;AAAA,MACjD,CAAC;AAED,SAAG,+CAA+C,MAAM;AACpD,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,GAAG,GAAG,GAAG,EAAC,GAAG,OAAO,EAAC,CAAC;AACrE,eAAO,MAAM,OAAO,WAAW,IAAI;AAEnC,eAAO,MAAM;AACb,eAAO,MAAM,OAAO,WAAW,KAAK;AAAA,MACxC,CAAC;AAED,SAAG,mDAAmD,MAAM;AACxD,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,OAAO,GAAG,GAAG,GAAG,GAAG,EAAC,EAAC,CAAC;AACrE,eAAO,MAAM;AAEb,eAAO,MAAM,OAAO,OAAO,CAAC;AAAA,MAChC,CAAC;AAED,SAAG,iEAAiE,MAAM;AACtE,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,OAAO,GAAG,GAAG,GAAG,GAAG,EAAC,GAAG,OAAO,GAAE,CAAC;AAChF,eAAO,MAAM,OAAO,OAAO,EAAE;AAAA,MACjC,CAAC;AAED,SAAG,2CAA2C,MAAM;AAChD,cAAM,SAAS,IAAI,kBAAkB,EAAC,QAAQ,EAAC,GAAG,GAAG,GAAG,GAAG,GAAG,EAAC,EAAC,CAAC;AACjE,eAAO,MAAM,EAAC,YAAY,CAAC,KAAK,GAAG,EAAC,CAAC;AAErC,eAAO,MAAM,OAAO,OAAO,CAAC;AAAA,MAChC,CAAC;AAAA,IACL,CAAC;AAED,aAAS,+BAA+B,MAAM;AAC1C,SAAG,6DAA6D,MAAM;AAClE,cAAM,SAAS,IAAI,sBAAsB;AACzC,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,GAAG,MAAM,EAAC,EAAC,EAAC,CAAC;AACpD,eAAO,MAAM,OAAO,OAAO,CAAC;AAE5B,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,IAAI,MAAM,GAAE,EAAC,EAAC,CAAC;AACtD,eAAO,MAAM,OAAO,OAAO,EAAE;AAE7B,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,IAAI,MAAM,GAAE,EAAC,EAAC,CAAC;AACtD,eAAO,MAAM,OAAO,OAAO,EAAE;AAE7B,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,IAAI,MAAM,GAAE,EAAC,EAAC,CAAC;AACtD,eAAO,MAAM,OAAO,OAAO,GAAG;AAAA,MAClC,CAAC;AAED,SAAG,2DAA2D,MAAM;AAChE,cAAM,SAAS,IAAI,sBAAsB;AACzC,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,GAAG,MAAM,GAAG,OAAO,GAAE,EAAC,EAAC,CAAC;AAC/D,eAAO,MAAM,OAAO,OAAO,EAAE;AAE7B,eAAO,MAAM,EAAC,QAAQ,EAAC,QAAQ,EAAC,OAAO,IAAI,MAAM,IAAI,OAAO,GAAE,EAAC,EAAC,CAAC;AACjE,eAAO,MAAM,OAAO,OAAO,EAAE;AAAA,MACjC,CAAC;AAAA,IACL,CAAC;AAED,aAAS,oCAAoC,MAAM;AAC/C,SAAG,kCAAkC,MAAM;AACvC,cAAM,YAAY,2BAA2B;AAE7C,eAAO,UAAU,WAAW,sBAAsB;AAAA,MACtD,CAAC;AAED,SAAG,uDAAuD,MAAM;AAE5D,eAAO,UAAU,IAAI,2BAA2B,CAAC,CAAC,EAAE,QAAQ,sBAAsB;AAElF,eAAO,UAAU,IAAI,2BAA2B,MAAS,EAAE,QAAQ,sBAAsB;AAEzF,eAAO,UAAU,IAAI,2BAA2B,IAAI,EAAE,QAAQ,sBAAsB;AAEpF,eAAO,UAAU,IAAI,2BAA2B,CAAC,EAAE,QAAQ,sBAAsB;AAEjF,eAAO,UAAU,IAAI,2BAA2B,CAAC,EAAE,QAAQ,sBAAsB;AAEjF,eAAO,UAAU,IAAI,2BAA2B,EAAE,QAAQ,sBAAsB;AAAA,MACpF,CAAC;AAED,SAAG,yCAAyC,MAAY;AACpD,cAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,YAAI,YAAY,MAAM,sBAAsB;AAE5C,eAAO,UAAU,UAAU,QAAQ,2BAA2B,iBAAiB;AAE/E,kBAAU,OAAO,MAAM,QAAQ;AAC/B,cAAM,UAAU,eAAe;AAE/B,eAAO,MAAM,UAAU,OAAO,MAAM,OAAO,CAAC;AAE5C,cAAM,QAAQ,MAAM,UAAU,OAAO;AACrC,oBAAY,2BAA2B,aAAa,KAAK;AAEzD,eAAO,UAAU,UAAU,QAAQ,2BAA2B,iBAAiB;AAE/E,kBAAU,OAAO,MAAM,QAAQ;AAC/B,cAAM,UAAU,eAAe;AAE/B,eAAO,MAAM,UAAU,OAAO,MAAM,OAAO,CAAC;AAAA,MAChD,EAAC;AAED,SAAG,oCAAoC,MAAY;AAE/C,cAAM,QAAQ,MAAM,UAAU,OAAO;AAAA,UACjC,MAAM;AAAA,QAAW,CAAC;AAEtB,cAAM,YAAY,MAAM,sBAAsB;AAE9C,kBAAU,OAAO,MAAM,QAAQ;AAC/B,cAAM,UAAU,eAAe;AAC/B,eAAO,aAAa,UAAU,QAAQ,2BAA2B,iBAAiB;AAElF,cAAM,UAAU,SAAS;AACzB,eAAO,UAAU,UAAU,QAAQ,2BAA2B,iBAAiB;AAAA,MACnF,EAAC;AAAA,IACL,CAAC;AAAA,EACL,CAAC;AACL;;;ACtPO,IAAM,mBAAmB,CAAC,YAAgC;AAIzD,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAClD,MAAI;AAEJ,SAAO,MAAY;AACf,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAED,WAAS,YAAY,MAAM;AACvB,OAAG,mCAAmC,MAAY;AApB1D;AAqBY,YAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAGnD,aAAO,eAAe,KAAK,IAAI,EAAE;AACjC,aAAO,eAAe,KAAK,IAAI,MAAS;AACxC,aAAO,eAAe,KAAK,IAAI,IAAI;AAGnC,YAAM,sBAAqB,UAAK,UAAL,mBAAY,IAAI,KAAK;AAChD,aAAO,eAAe,oBAAoB,IAAI;AAC9C,aAAO,YAAY,KAAK,IAAI,yDAAoB,EAAE;AAAA,IACtD,EAAC;AAED,OAAG,8BAA8B,MAAY;AACzC,YAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAEnD,aAAO,YAAY,KAAK,KAAK,MAAM,MAAM;AACzC,YAAM,KAAK,OAAO,EAAC,aAAa,KAAI,CAAC;AAErC,aAAO,SAAS,KAAK,KAAK,MAAM,MAAM;AACtC,aAAO,YAAY,KAAK,KAAK,MAAM,QAAQ,IAAI;AAAA,IACnD,EAAC;AAED,OAAG,kEAAkE,MAAY;AA5CzF;AA6CY,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACrD,YAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,OAAM,CAAC;AAEjD,YAAM,OAAO,iBAAiB,KAAK,IAAI;AAEvC,YAAM,oBAAoB,OAAO,eAAe;AAChD,aAAO,WAAW,iBAAiB;AACnC,aAAO,SAAS,mBAAmB,CAAC;AAEpC,YAAM,mBAAmB,kBAAkB;AAC3C,aAAO,YAAY,iBAAiB,MAAM,KAAK,KAAK,IAAI;AAGxD,YAAM,4BAA2B,UAAK,UAAL,mBAAY,IAAI,iBAAiB;AAClE,aAAO,YAAY,0BAA0B,MAAS;AAAA,IAC1D,EAAC;AAED,OAAG,mCAAmC,MAAY;AAC9C,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACrD,YAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,OAAM,CAAC;AAGjD,YAAM,OAAO,iBAAiB,KAAK,IAAI;AACvC,YAAM,oBAAoB,OAAO,eAAe;AAChD,aAAO,SAAS,mBAAmB,CAAC;AACpC,YAAM,mBAAmB,kBAAkB;AAC3C,YAAM,eAAe,OAAO,aAAa,iBAAiB,GAAG;AAE7D,aAAO,eAAe,cAAc,MAAS;AAC7C,aAAO,WAAW,cAAc,OAAO;AACvC,UAAI,CAAC;AAAc;AAGnB,aAAO,YAAY,aAAa,QAAQ,MAAM;AAC9C,YAAM,aAAa,OAAO,EAAC,eAAe,KAAI,CAAC;AAC/C,aAAO,SAAS,aAAa,QAAQ,MAAM;AAC3C,aAAO,YAAY,aAAa,QAAQ,QAAQ,IAAI;AAAA,IACxD,EAAC;AAED,aAAS,kCAAkC,MAAM;AAC7C,SAAG,wCAAwC,MAAY;AAAA,MAMvD,EAAC;AAED,SAAG,yCAAyC,MAAY;AACpD,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,QAAO,CAAC;AAElD,cAAM,KAAK,OAAO,EAAC,mBAAmB,SAAQ,CAAC;AAC/C,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,kBAAkB;AACxD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,WAAW;AAC1D,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,wBAAwB;AACtE,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,oBAAoB;AAEzE,cAAM,KAAK,OAAO,EAAC,mBAAmB,YAAW,CAAC;AAClD,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,kBAAkB;AACxD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,WAAW;AAC1D,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,aAAa;AAC3D,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,EAAE;AAAA,MAC3D,EAAC;AACD,SAAG,gDAAgD,MAAY;AAC3D,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAEnD,cAAM,KAAK,OAAO,EAAC,mBAAmB,QAAO,CAAC;AAC9C,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,iBAAiB;AACvD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,EAAE;AACjD,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,qBAAqB;AACnE,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,oBAAoB;AAAA,MAC7E,EAAC;AACD,SAAG,gDAAgD,MAAY;AAC3D,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAEnD,cAAM,KAAK,OAAO,EAAC,mBAAmB,QAAO,CAAC;AAC9C,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,kBAAkB;AACxD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,EAAE;AACjD,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,qBAAqB;AACnE,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,oBAAoB;AAAA,MAC7E,EAAC;AACD,SAAG,gDAAgD,MAAY;AAC3D,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,eAAc,CAAC;AAEzD,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,iBAAiB;AACvD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,UAAU;AACzD,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,aAAa;AAC3D,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,EAAE;AAAA,MAC3D,EAAC;AACD,SAAG,4DAA4D,MAAY;AACvE,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAEnD,cAAM,KAAK,OAAO,EAAC,mBAAmB,QAAO,CAAC;AAC9C,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,kBAAkB;AACxD,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,EAAE;AACjD,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,qBAAqB;AACnE,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,oBAAoB;AAEzE,cAAM,KAAK,OAAO,EAAC,mBAAmB,GAAE,CAAC;AACzC,eAAO,MAAM,KAAK,OAAO,OAAO,MAAM,EAAE;AACxC,eAAO,MAAM,KAAK,OAAO,OAAO,SAAS,MAAM,EAAE;AACjD,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,MAAM,qBAAqB;AACnE,eAAO,MAAM,KAAK,OAAO,OAAO,QAAQ,OAAO,MAAM,oBAAoB;AAAA,MAC7E,EAAC;AACD,SAAG,iFAAiF,MAAY;AAW5F,cAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,eAAc,CAAC;AAEzD,cAAM,KAAK,OAAO,EAAC,QAAQ,OAAM,GAAG,EAAC,WAAW,MAAK,CAAC;AACtD,eAAO,MAAM,KAAK,OAAO,OAAO,OAAO,EAAE;AACzC,cAAM,KAAK,OAAO,EAAC,QAAQ,QAAO,GAAG,EAAC,MAAM,MAAK,CAAC;AAClD,eAAO,MAAM,KAAK,OAAO,OAAO,OAAO,EAAE;AACzC,cAAM,KAAK,OAAO,EAAC,QAAQ,OAAM,GAAG,EAAC,WAAW,KAAI,CAAC;AACrD,eAAO,MAAM,KAAK,OAAO,OAAO,OAAO,EAAE;AAAA,MAC7C,EAAC;AAAA,IACL,CAAC;AAAA,EACL,CAAC;AACL;;;ACxKO,IAAM,kBAAkB,CAAC,YAAgC;AAC5D,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,WAAS,gBAAgB,MAAM;AAC3B,OAAG,8BAA8B,MAAM;AACnC,UAAI,aAAa;AACjB,aAAO,YAAY,YAAY,kBAAkB,UAAU,GAAG,UAAU;AAExE,mBAAa;AACb,aAAO,YAAY,YAAY,kBAAkB,UAAU,GAAG,CAAC;AAAA,IACnE,CAAC;AAED,OAAG,kCAAkC,MAAM;AAEvC,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AAExD,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AAExD,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,EAAE;AAEzD,aAAO,YAAY,YAAY,oBAAoB,EAAE,GAAG,CAAC;AAAA,IAC7D,CAAC;AAED,OAAG,uCAAuC,MAAM;AAE5C,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AACxD,aAAO,YAAY,YAAY,oBAAoB,EAAE,GAAG,CAAC;AAEzD,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AACxD,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AACxD,aAAO,YAAY,YAAY,oBAAoB,CAAC,GAAG,CAAC;AACxD,aAAO,YAAY,YAAY,oBAAoB,EAAE,GAAG,EAAE;AAAA,IAC9D,CAAC;AAED,OAAG,uCAAuC,MAAM;AAE5C,aAAO,YAAY,YAAY,oBAAoB,GAAG,CAAC;AAAA,IAC3D,CAAC;AAED,OAAG,sDAAsD,MAAM;AAE3D,aAAO,YAAY,YAAY,uBAAuB,CAAC,GAAG,CAAC;AAC3D,aAAO,YAAY,YAAY,uBAAuB,EAAE,GAAG,CAAC;AAG5D,aAAO,YAAY,YAAY,uBAAuB,CAAC,GAAG,CAAC;AAC3D,aAAO,YAAY,YAAY,uBAAuB,EAAE,GAAG,EAAE;AAAA,IACjE,CAAC;AAED,OAAG,mCAAmC,MAAM;AACxC,aAAO,OAAO,YAAY,kBAAkB,CAAC,CAAC;AAC9C,aAAO,OAAO,YAAY,kBAAkB,CAAC,CAAC;AAC9C,aAAO,OAAO,YAAY,kBAAkB,CAAC,CAAC;AAC9C,aAAO,OAAO,YAAY,kBAAkB,CAAC,CAAC;AAE9C,aAAO,QAAQ,YAAY,kBAAkB,EAAE,CAAC;AAChD,aAAO,QAAQ,YAAY,kBAAkB,CAAC,CAAC;AAE/C,aAAO,QAAQ,YAAY,kBAAkB,GAAG,CAAC;AAAA,IACrD,CAAC;AAED,OAAG,6BAA6B,MAAM;AAClC,aAAO,YAAY,YAAY,mBAAmB,EAAE,GAAG,YAAY,cAAc,CAAC;AAClF,aAAO,YAAY,YAAY,mBAAmB,CAAC,GAAG,CAAC;AACvD,aAAO,YAAY,YAAY,mBAAmB,CAAC,GAAG,CAAC;AACvD,aAAO,YAAY,YAAY,mBAAmB,CAAC,GAAG,CAAC;AACvD,aAAO,YAAY,YAAY,mBAAmB,CAAC,GAAG,CAAC;AACvD,aAAO,YAAY,YAAY,mBAAmB,CAAC,GAAG,YAAY,cAAc,CAAC;AAAA,IACrF,CAAC;AAED,OAAG,iDAAiD,MAAM;AACtD,aAAO,UAAU,YAAY,2BAA2B,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AACxE,aAAO,UAAU,YAAY,2BAA2B,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;AACxE,aAAO,UAAU,YAAY,2BAA2B,EAAE,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;AAAA,IACjF,CAAC;AAAA,EACL,CAAC;AACL;;;AC1EO,IAAM,oBAAoB,CAAC,YAAgC;AAC9D,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAC9C,MAAK;AACL,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAED,WAAS,YAAY,MAAM;AACvB,OAAG,oCAAoC,MAAY;AArB3D;AAsBY,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAGxD,aAAO,eAAe,MAAM,IAAI,EAAE;AAClC,aAAO,eAAe,MAAM,IAAI,MAAS;AACzC,aAAO,eAAe,MAAM,IAAI,IAAI;AAGpC,YAAM,kBAAiB,UAAK,WAAL,mBAAa,IAAI,MAAM;AAC9C,aAAO,KAAK,cAAc;AAC1B,aAAO,YAAY,MAAM,IAAI,iDAAgB,EAAE;AAAA,IACnD,EAAC;AAED,OAAG,+BAA+B,MAAY;AAC1C,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,aAAO,YAAY,MAAM,QAAQ,MAAM;AACvC,YAAM,MAAM,OAAO,EAAC,aAAa,KAAI,CAAC;AAEtC,aAAO,SAAS,MAAM,QAAQ,MAAM;AACpC,aAAO,YAAY,MAAM,QAAQ,QAAQ,IAAI;AAAA,IACjD,EAAC;AAED,OAAG,mEAAmE,MAAY;AA7C1F;AA8CY,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,YAAM,MAAM,wBAAwB,QAAQ,CAAC,OAAO,IAAI,CAAC;AAEzD,YAAM,aAAa,MAAM,KAAK,MAAM,KAAK;AACzC,aAAO,WAAW,UAAU;AAC5B,aAAO,SAAS,YAAY,CAAC;AAE7B,YAAM,YAAY,WAAW;AAC7B,aAAO,YAAY,UAAU,MAAM,OAAO,KAAK,IAAI;AAGnD,YAAM,qBAAoB,UAAK,UAAL,mBAAY,IAAI,UAAU;AACpD,aAAO,QAAQ,iBAAiB;AAAA,IACpC,EAAC;AAAA,EACL,CAAC;AACL;;;ACpDO,IAAM,4BAA4B,CAAC,YAAgC;AACtE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAEG,WAAS,qBAAqB,MAAM;AAChC,OAAG,4BAA4B,MAAY;AACvC,YAAM,YAAY,MAAM,UAAU,OAAO,EAAC,MAAM,aAAa,mBAAmB,QAAO,CAAC;AAGxF,cAAQ,IAAI,qBAAqB;AACjC,aAAO,YAAY,UAAU,OAAO,WAAW,KAAK,OAAO,GAAG,WAAW,OAAO,QAAQ,GAAG;AAC3F,aAAO,YAAY,UAAU,OAAO,WAAW,QAAQ,OAAO,GAAG,WAAW,OAAO,WAAW,GAAG;AACjG,aAAO,YAAY,UAAU,OAAO,WAAW,SAAS,OAAO,GAAG,WAAW,OAAO,YAAY,GAAG;AACnG,aAAO,YAAY,UAAU,OAAO,WAAW,SAAS,OAAO,GAAG,WAAW,OAAO,YAAY,GAAG;AACnG,aAAO,YAAY,UAAU,OAAO,WAAW,UAAU,OAAO,GAAG,WAAW,OAAO,aAAa,GAAG;AACrG,aAAO,YAAY,UAAU,OAAO,WAAW,MAAM,OAAO,GAAG,WAAW,OAAO,SAAS,GAAG;AAC7F,aAAO,YAAY,UAAU,OAAO,WAAW,UAAU,OAAO,GAAG,WAAW,OAAO,aAAa,GAAG;AACrG,aAAO,YAAY,UAAU,OAAO,WAAW,SAAS,OAAO,GAAG,WAAW,OAAO,YAAY,GAAG;AAEnG,cAAQ,IAAI,0BAA0B;AACtC,aAAO,YAAY,UAAU,OAAO,WAAW,KAAK,OAAO,GAAG,WAAW,OAAO,QAAQ,GAAG;AAC3F,aAAO,YAAY,UAAU,OAAO,WAAW,QAAQ,OAAO,GAAG,WAAW,SAAS,UAAU;AAE/F,cAAQ,IAAI,4BAA4B;AACxC,aAAO,YAAY,UAAU,OAAO,WAAW,UAAU,OAAO,GAAG,WAAW,OAAO,aAAa,GAAG;AACrG,aAAO,YAAY,UAAU,OAAO,WAAW,MAAM,OAAO,GAAG,WAAW,OAAO,SAAS,GAAG;AAAA,IACjG,EAAC;AAED,OAAG,uBAAuB,MAAY;AAClC,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,UAAI,YAAY,MAAM,YAAY;AAGlC,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,KAAK,CAAC;AACrD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,KAAK,CAAC;AACzD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,SAAS,KAAK,GAAG,WAAW,OAAO,KAAK,GAAG;AAG9F,YAAM,MAAM,OAAO;AAAA,QACf,+BAA+B;AAAA,QAC/B,oCAAoC;AAAA,MACxC,CAAC;AAED,kBAAY,MAAM,YAAY;AAC9B,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,KAAK,EAAE;AACtD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,KAAK,EAAE;AAC1D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,IACtE,EAAC;AAED,OAAG,6DAA6D,MAAY;AACxE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,aAAa,iCAAiC,EAAC,CAAC;AAC5F,YAAM,MAAM,wBAAwB,QAAQ,CAAC;AAAA,QACzC,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,mBAAmB;AAAA,QACnB,8BAA8B;AAAA,MAClC,CAAC,CAAC;AAEF,YAAM,YAAY,MAAM,YAAY;AACpC,aAAO,MAAM,UAAU,OAAO,OAAO,kBAAkB,KAAK,EAAE;AAAA,IAClE,EAAC;AAED,OAAG,0BAA0B,MAAY;AACrC,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,UAAI,YAAY,MAAM,YAAY;AAGlC,cAAQ,IAAI,eAAe;AAC3B,aAAO,YAAY,UAAU,OAAO,WAAW,UAAU,KAAK,MAAM,CAAC;AACrE,aAAO,YAAY,UAAU,OAAO,WAAW,UAAU,KAAK,MAAM,CAAC;AACrE,cAAQ,IAAI,eAAe;AAC3B,aAAO,YAAY,UAAU,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAClE,aAAO,YAAY,UAAU,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAClE,cAAQ,IAAI,WAAW;AACvB,aAAO,YAAY,UAAU,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAClE,aAAO,YAAY,UAAU,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAAA,IACtE,EAAC;AAED,OAAG,qBAAqB,MAAY;AAChC,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,OAAO,SAAS,OAAO,CAAC;AAC5D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,OAAO,CAAC;AAC1D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,OAAO,CAAC;AAE1D,YAAM,MAAM,OAAO;AAAA,QACf,mCAAmC;AAAA,QACnC,+BAA+B;AAAA,QAC/B,mCAAmC;AAAA,QACnC,gCAAgC;AAAA,QAChC,oCAAoC;AAAA,QACpC,oCAAoC;AAAA,QACpC,mCAAmC;AAAA,QACnC,kCAAkC;AAAA,MACtC,CAAC;AAED,kBAAY,MAAM,YAAY;AAE9B,aAAO,YAAY,UAAU,OAAO,OAAO,SAAS,OAAO,CAAC;AAC5D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,OAAO,CAAC;AAC1D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,OAAO,CAAC;AAAA,IAC9D,EAAC;AAED,OAAG,wBAAwB,MAAY;AACnC,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,SAAS,KAAK,OAAO,CAAC;AAC1D,aAAO,YAAY,UAAU,OAAO,SAAS,IAAI,OAAO,CAAC;AAEzD,YAAM,MAAM,OAAO;AAAA,QACf,kCAAkC;AAAA,MACtC,CAAC;AAED,kBAAY,MAAM,YAAY;AAE9B,aAAO,YAAY,UAAU,OAAO,SAAS,KAAK,OAAO,EAAE;AAC3D,aAAO,YAAY,UAAU,OAAO,SAAS,IAAI,OAAO,EAAE;AAAA,IAC9D,EAAC;AAED,OAAG,qBAAqB,MAAY;AAChC,YAAM,QAAQ,MAAM,UAAU,OAAO;AAAA,QACjC,MAAM;AAAA,QACN,oCAAoC;AAAA,QACpC,qCAAqC,CAAC,EAAC,KAAK,QAAQ,OAAO,EAAC,CAAC;AAAA,QAC7D,qCAAqC,CAAC,MAAM;AAAA,MAChD,CAAC;AAED,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,OAAO,OAAO,CAAC;AAAA,IACrE,EAAC;AAED,OAAG,gCAAgC,MAAY;AAC3C,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,OAAO,CAAC;AACvD,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,QAAQ,CAAC;AACxD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,OAAO,CAAC;AAC3D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,QAAQ,CAAC;AAE5D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,CAAC;AAEnD,YAAM,MAAM,OAAO;AAAA,QACf,2BAA2B;AAAA,QAC3B,+BAA+B;AAAA,MACnC,CAAC;AAED,kBAAY,MAAM,YAAY;AAE9B,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,OAAO,CAAC;AACvD,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,QAAQ,CAAC;AACxD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,OAAO,CAAC;AAC3D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,QAAQ,CAAC;AAE5D,aAAO,YAAY,UAAU,OAAO,OAAO,OAAO,CAAC;AAAA,IACvD,EAAC;AAED,OAAG,oDAAoD,MAAY;AAC/D,YAAM,QAAQ,MAAM,UAAU,OAAO;AAAA,QACjC,MAAM;AAAA,QACN,2BAA2B;AAAA,QAC3B,+BAA+B;AAAA,QAC/B,oCAAoC;AAAA,MACxC,CAAC;AAED,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,OAAO,CAAC;AACvD,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,QAAQ,CAAC;AACxD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,OAAO,CAAC;AAC3D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,QAAQ,CAAC;AAAA,IAChE,EAAC;AAED,OAAG,qEAAqE,MAAY;AAChF,YAAM,QAAQ,MAAM,UAAU,OAAO;AAAA,QACjC,MAAM;AAAA,QACN,2BAA2B;AAAA,QAC3B,+BAA+B;AAAA,QAC/B,wCAAwC;AAAA,QACxC,4CAA4C;AAAA,MAChD,CAAC;AAED,UAAI,YAAY,MAAM,YAAY;AAElC,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,OAAO,CAAC;AACvD,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,QAAQ,CAAC;AACxD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,OAAO,CAAC;AAC3D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,QAAQ,CAAC;AAAA,IAChE,EAAC;AAED,OAAG,8EAA8E,MAAY;AACzF,YAAM,QAAQ,MAAM,UAAU,OAAO;AAAA,QACjC,MAAM;AAAA,QACN,2BAA2B;AAAA,QAC3B,+BAA+B;AAAA,QAC/B,wCAAwC;AAAA,QACxC,4CAA4C;AAAA,QAC5C,oCAAoC;AAAA,MAExC,CAAC;AAED,UAAI,YAAY,MAAM,YAAY;AAMlC,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,OAAO,CAAC;AACvD,aAAO,YAAY,UAAU,OAAO,MAAM,KAAK,QAAQ,CAAC;AACxD,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,OAAO,CAAC;AAC3D,aAAO,YAAY,UAAU,OAAO,MAAM,SAAS,QAAQ,CAAC;AAAA,IAChE,EAAC;AAAA,EACL,CAAC;AACD,WAAS,kBAAkB,MAAM;AAC7B,OAAG,8BAA8B,MAAY;AACzC,YAAM,YAAY,MAAM,UAAU,OAAO,EAAC,MAAM,SAAQ,CAAC;AAEzD,aAAO,YAAY,UAAU,OAAO,SAAS,OAAO;AAAA,IACxD,EAAC;AAED,OAAG,4CAA4C,MAAY;AACvD,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,UAAU,qBAAqB,MAAK,CAAC;AACjF,UAAI,SAAS,MAAM,SAAS;AAG5B,aAAO,YAAY,OAAO,OAAO,WAAW,KAAK,MAAM,EAAE;AACzD,aAAO,YAAY,OAAO,OAAO,WAAW,QAAQ,MAAM,CAAC;AAC3D,aAAO,YAAY,OAAO,OAAO,WAAW,SAAS,MAAM,CAAC;AAC5D,aAAO,YAAY,OAAO,OAAO,WAAW,SAAS,MAAM,EAAE;AAC7D,aAAO,YAAY,OAAO,OAAO,WAAW,UAAU,MAAM,CAAC;AAE7D,aAAO,YAAY,OAAO,OAAO,WAAW,UAAU,KAAK,MAAM,CAAC;AAElE,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,UAAU,MAAM,CAAC;AAEhE,YAAM,MAAM,OAAO;AAAA,QACf,gBAAgB;AAAA,MACpB,CAAC;AAED,eAAS,MAAM,SAAS;AAExB,aAAO,YAAY,OAAO,OAAO,WAAW,KAAK,MAAM,CAAC;AACxD,aAAO,YAAY,OAAO,OAAO,WAAW,QAAQ,MAAM,CAAC;AAC3D,aAAO,YAAY,OAAO,OAAO,WAAW,SAAS,MAAM,EAAE;AAC7D,aAAO,YAAY,OAAO,OAAO,WAAW,SAAS,MAAM,CAAC;AAC5D,aAAO,YAAY,OAAO,OAAO,WAAW,UAAU,MAAM,CAAC;AAE7D,aAAO,YAAY,OAAO,OAAO,WAAW,UAAU,KAAK,MAAM,EAAE;AAEnE,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,UAAU,MAAM,CAAC;AAChE,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAAA,IACjE,EAAC;AAAA,EACL,CAAC;AACD,WAAS,kBAAkB,MAAM;AAC7B,OAAG,8BAA8B,MAAY;AACzC,YAAM,SAAS,MAAM,UAAU,OAAO,EAAC,MAAM,SAAQ,CAAC;AACtD,aAAO,YAAY,OAAO,OAAO,SAAS,WAAW;AAAA,IACzD,EAAC;AAED,OAAG,mDAAmD,MAAY;AAC9D,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,UAAU,qBAAqB,UAAS,CAAC;AACrF,UAAI,SAAS,MAAM,SAAS;AAE5B,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AACtD,aAAO,YAAY,OAAO,OAAO,OAAO,gBAAgB,MAAM,CAAC;AAC/D,aAAO,YAAY,OAAO,OAAO,OAAO,SAAS,MAAM,CAAC;AACxD,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAEtD,aAAO,YAAY,OAAO,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAE/D,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,QAAQ,MAAM,CAAC;AAE9D,YAAM,MAAM,OAAO;AAAA,QACf,gBAAgB;AAAA,MACpB,CAAC;AAED,eAAS,MAAM,SAAS;AAExB,aAAO,YAAY,OAAO,OAAO,OAAO,CAAC;AAEzC,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AACtD,aAAO,YAAY,OAAO,OAAO,OAAO,gBAAgB,MAAM,CAAC;AAC/D,aAAO,YAAY,OAAO,OAAO,OAAO,SAAS,MAAM,CAAC;AACxD,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,MAAM,CAAC;AAEtD,aAAO,YAAY,OAAO,OAAO,WAAW,OAAO,KAAK,MAAM,EAAE;AAChE,aAAO,YAAY,OAAO,OAAO,WAAW,OAAO,KAAK,MAAM,CAAC;AAE/D,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,QAAQ,MAAM,CAAC;AAC9D,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,SAAS,MAAM,CAAC;AAC/D,aAAO,YAAY,OAAO,OAAO,OAAO,OAAO,mBAAmB,MAAM,CAAC;AAAA,IAC7E,EAAC;AAED,OAAG,6DAA6D,MAAY;AACxE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,UAAI,SAAS,MAAM,SAAS;AAC5B,aAAO,MAAM,OAAO,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAE1D,YAAM,MAAM,OAAO,EAAC,iCAAiC,EAAC,CAAC;AACvD,eAAS,MAAM,SAAS;AACxB,aAAO,MAAM,OAAO,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAAA,IAC9D,EAAC;AAAA,EACL,CAAC;AACD,WAAS,mBAAmB,MAAM;AAC1B,OAAG,6DAA6D,MAAY;AAC5E,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,UAAS,CAAC;AAEtD,UAAI,UAAU,MAAM,UAAU;AAC9B,aAAO,MAAM,QAAQ,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAE3D,YAAM,MAAM,OAAO,EAAC,iCAAiC,EAAC,CAAC;AACvD,gBAAU,MAAM,UAAU;AAC1B,aAAO,MAAM,QAAQ,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAAA,IAC/D,EAAC;AAAA,EACL,CAAC;AACD,WAAS,cAAc,MAAM;AACzB,OAAG,6DAA6D,MAAY;AACxE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,KAAI,CAAC;AAEjD,UAAI,KAAK,MAAM,KAAK;AACpB,aAAO,MAAM,GAAG,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAEtD,YAAM,MAAM,OAAO,EAAC,iCAAiC,EAAC,CAAC;AACvD,WAAK,MAAM,KAAK;AAChB,aAAO,MAAM,GAAG,OAAO,OAAO,kBAAkB,KAAK,CAAC;AAAA,IAC1D,EAAC;AAAA,EACL,CAAC;AACT;;;ACjWO,IAAM,2BAA2B,CAAC,YAAgC;AACrE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAED,WAAS,mBAAmB,MAAM;AAC9B,OAAG,gCAAgC,MAAY;AAC3C,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,YAAM,SAAS,MAAM,MAAM,wBAAwB,gBAAgB,CAAC;AAAA,QAChE,QAAQ,MAAM;AAAA,QACd,UAAU;AAAA,QACV,OAAO;AAAA,MACX,CAAC,CAAC;AAEF,YAAM,OAAO,GAAG,OAAO;AAAA,QACnB,WAAW;AAAA,UAAC,EAAC,KAAK,4BAA4B,OAAO,GAAG,MAAM,MAAM,oBAAoB,OAAM;AAAA,UAC1F,EAAC,KAAK,wBAAwB,OAAO,GAAG,MAAM,MAAM,oBAAoB,OAAM;AAAA,QAAC;AAAA,MACvF,CAAC;AAED,aAAO,UAAU,MAAM,OAAO,WAAW,KAAK,KAAK,CAAC;AAAA,QAChD,MAAM;AAAA,QACN,OAAO;AAAA,MACX,GAAG,EAAC,MAAM,eAAe,OAAO,EAAC,CAAC,CAAC;AACnC,aAAO,YAAY,MAAM,OAAO,WAAW,KAAK,OAAO,CAAC;AAExD,YAAM,OAAO,GAAG,OAAO;AAAA,QACnB,WAAW;AAAA,UAAC,EAAC,KAAK,4BAA4B,OAAO,GAAG,MAAM,MAAM,oBAAoB,OAAM;AAAA,UAC1F,EAAC,KAAK,4BAA4B,OAAO,GAAG,MAAM,MAAM,oBAAoB,OAAM;AAAA,QAAC;AAAA,MAC3F,CAAC;AAAA,IACL,EAAC;AAED,OAAG,8EAA8E,MAAY;AACzF,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,YAAM,SAAS,MAAM,MAAM,wBAAwB,gBAAgB,CAAC;AAAA,QAChE,QAAQ,MAAM;AAAA,QACd,UAAU;AAAA,QACV,OAAO;AAAA,MACX,CAAC,CAAC;AACF,YAAM,OAAO,GAAG,OAAO;AAAA,QACnB,WAAW,CAAC;AAAA,UACR,KAAK;AAAA,UACL,OAAO;AAAA,UACP,MAAM,MAAM,oBAAoB;AAAA,QACpC,CAAC;AAAA,MACL,CAAC;AAED,aAAO,YAAY,MAAM,OAAO,UAAU,QAAQ,CAAC;AACnD,aAAO,YAAY,MAAM,OAAO,UAAU,OAAO,KAAK,MAAS;AAC/D,aAAO,YAAY,MAAM,OAAO,UAAU,OAAO,UAAU,MAAS;AAGpE,SAAG,kCAAkC,MAAY;AAC7C,cAAMC,SAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,cAAMC,UAAS,MAAMD,OAAM,wBAAwB,gBAAgB,CAAC;AAAA,UAChE,QAAQA,OAAM;AAAA,UACd,UAAU;AAAA,UACV,OAAO;AAAA,QACX,CAAC,CAAC;AACF,cAAMC,QAAO,GAAG,OAAO;AAAA,UACnB,WAAW;AAAA,YAAC,EAAC,KAAK,wBAAwB,OAAO,GAAG,MAAM,MAAM,oBAAoB,SAAQ;AAAA,YACxF,EAAC,KAAK,8BAA8B,OAAO,GAAG,MAAM,MAAM,oBAAoB,SAAQ;AAAA,UAAC;AAAA,QAC/F,CAAC;AAED,eAAO,UAAUD,OAAM,OAAO,WAAW,KAAK,UAAU,EAAC,MAAM,eAAe,OAAO,EAAC,CAAC;AACvF,eAAO,UAAUA,OAAM,OAAO,WAAW,KAAK,KAAK,CAAC,CAAC;AACrD,eAAO,YAAYA,OAAM,OAAO,WAAW,KAAK,OAAO,CAAC;AAAA,MAC5D,EAAC;AAED,SAAG,wEAAwE,MAAY;AACnF,WAAG,kCAAkC,MAAY;AAC7C,gBAAMA,SAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,gBAAMC,UAAS,MAAMD,OAAM,wBAAwB,gBAAgB,CAAC;AAAA,YAChE,QAAQA,OAAM;AAAA,YACd,UAAU;AAAA,YACV,OAAO;AAAA,UACX,CAAC,CAAC;AACF,gBAAMC,QAAO,GAAG,OAAO;AAAA,YACnB,WAAW;AAAA,cAAC,EAAC,KAAK,4BAA4B,OAAO,GAAG,MAAM,MAAM,oBAAoB,IAAG;AAAA,cACvF,EAAC,KAAK,8BAA8B,OAAO,GAAG,MAAM,MAAM,oBAAoB,SAAQ;AAAA,YAAC;AAAA,UAC/F,CAAC;AAED,iBAAO,YAAYD,OAAM,OAAO,WAAW,KAAK,IAAI,QAAQ,CAAC;AAC7D,iBAAO,UAAUA,OAAM,OAAO,WAAW,KAAK,UAAU,EAAC,MAAM,eAAe,OAAO,EAAC,CAAC;AACvF,iBAAO,UAAUA,OAAM,OAAO,WAAW,KAAK,KAAK,CAAC,EAAC,MAAM,eAAe,OAAO,EAAC,CAAC,CAAC;AACpF,iBAAO,YAAYA,OAAM,OAAO,WAAW,KAAK,OAAO,CAAC;AAAA,QAC5D,EAAC;AAAA,MACL,EAAC;AAED,SAAG,0FAA0F,MAAY;AACrG,cAAMA,SAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AACxD,cAAMC,UAAS,MAAMD,OAAM,wBAAwB,gBAAgB,CAAC;AAAA,UAChE,QAAQA,OAAM;AAAA,UACd,UAAU;AAAA,UACV,OAAO;AAAA,QACX,CAAC,CAAC;AACF,cAAMC,QAAO,GAAG,OAAO;AAAA,UACnB,WAAW,CAAC;AAAA,YACR,KAAK;AAAA,YACL,OAAO;AAAA,YACP,MAAM,MAAM,oBAAoB;AAAA,UACpC,CAAC;AAAA,QACL,CAAC;AAED,eAAO,YAAYD,OAAM,OAAO,UAAU,QAAQ,CAAC;AACnD,eAAO,YAAYA,OAAM,OAAO,UAAU,OAAO,KAAK,MAAS;AAC/D,eAAO,YAAYA,OAAM,OAAO,UAAU,OAAO,UAAU,MAAS;AAAA,MACxE,EAAC;AAAA,IACL,EAAC;AAAA,EACL,CAAC;AACL;;;ACvHO,IAAM,0BAA0B,CAAC,YAAgC;AACpE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,QAAQ,MAAK,IAAI;AAEtD,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAC1C,gBAAY,IAAI,oBAAoB,KAAK;AAAA,EAC7C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AACxB,UAAM,UAAU,SAAS;AAAA,EAC7B,EAAC;AAED,WAAS,4BAA4B,MAAM;AAEvC,OAAG,+CAA+C,MAAY;AAC1D,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,QAAQ,YAAW,CAAC;AAC1D,YAAM,OAAO,kBAAkB,UAAU,KAAK;AAE9C,YAAM,QAAQ,KAAK,MAAM,GAAG;AAE5B,aAAO,YAAY,MAAM,IAAI,OAAO;AACpC,aAAO,YAAY,MAAM,QAAQ,CAAC;AAAA,IACtC,EAAC;AAED,OAAG,qDAAqD,MAAY;AAEhE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,QAAQ,YAAW,CAAC;AAE1D,YAAM,OAAO,kBAAkB,UAAU,KAAK;AAC9C,YAAM,gBAAgB,MAAM,kBAAkB,YAAY,IAAI;AAE9D,aAAO,UAAU,aAAa;AAC9B,aAAO,YAAY,+CAAe,IAAI,MAAM,EAAE;AAAA,IAClD,EAAC;AAED,OAAG,iEAAiE,MAAY;AAC5E,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,QAAQ,YAAW,CAAC;AAC1D,YAAM,OAAO,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACnD,YAAM,gBAAgB,MAAM,MAAM,wBAAwB,QAAQ,CAAC,KAAK,IAAI,CAAC;AAC7E,YAAM,eAAe,cAAc;AAEnC,YAAM,OAAO,kBAAkB,UAAU,YAAY;AACrD,YAAM,eAAe,MAAM,kBAAkB,YAAY,IAAI;AAE7D,aAAO,UAAU,YAAY;AAC7B,aAAO,YAAY,6CAAc,IAAI,6CAAc,EAAE;AAAA,IACzD,EAAC;AAED,OAAG,8DAA8D,MAAY;AAEzE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,OAAM,CAAC;AACnD,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,QAAQ,YAAW,CAAC;AAC1D,YAAM,QAAQ,MAAM,iBAAiB,OAAO,EAAE,OAAO,MAAM,MAAM,aAAa,EAAC,GAAG,GAAG,GAAG,EAAC,CAAC,GAAG,EAAC,QAAQ,MAAK,CAAC;AAG5G,YAAM,OAAO,kBAAkB,UAAU,KAAK;AAC9C,YAAM,gBAAgB,MAAM,kBAAkB,YAAY,IAAI;AAE9D,aAAO,UAAU,aAAa;AAC9B,aAAO,YAAY,+BAAO,IAAI,+CAAe,EAAE;AAAA,IACnD,EAAC;AAED,OAAG,mDAAmD,MAAY;AAC9D,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,YAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAE7D,aAAO,YAAY,OAAO,OAAO,WAAW,mBAAmB,WAAW,IAAI;AAC9E,aAAO,YAAY,MAAM,kBAAkB,YAAY,OAAO,OAAO,WAAW,iBAAiB,GAAG,UAAU;AAE9G,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,OAAO,IAAI,CAAC;AAAA,IACpE,EAAC;AAED,OAAG,iDAAiD,MAAY;AAC5D,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,OAAM,CAAC;AACvD,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,YAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAE7D,aAAO,YAAY,OAAO,OAAO,WAAW,mBAAmB,WAAW,IAAI;AAC9E,aAAO,YAAY,MAAM,kBAAkB,YAAY,OAAO,OAAO,WAAW,iBAAiB,GAAG,UAAU;AAE9G,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,OAAO,IAAI,CAAC;AAAA,IACpE,EAAC;AAED,OAAG,uEAAuE,MAAY;AAClF,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,UAAU;AAAA,QACZ,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAAA,MAC1C;AAEA,iBAAW,UAAU,SAAS;AAC1B,cAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAAA,MACjE;AAEA,YAAM,iBAAiB,kBAAkB,kBAAkB,UAAU;AAGrE,aAAO,YAAY,WAAW,OAAO,eAAe,QAAQ,CAAC;AAC7D,aAAO,YAAY,eAAe,QAAQ,CAAC;AAG3C,iBAAW,WAAW,gBAAgB;AAClC,eAAO,QAAQ,SAAS,OAAO;AAAA,MACnC;AAAA,IACJ,EAAC;AAED,OAAG,kCAAkC,MAAY;AAC7C,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,YAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAC7D,YAAM,kBAAkB,4BAA4B,YAAY,OAAO,IAAI;AAE3E,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,CAAC;AACrD,aAAO,YAAY,OAAO,OAAO,WAAW,mBAAmB,EAAE;AAAA,IACrE,EAAC;AAED,OAAG,gEAAgE,MAAY;AAC3E,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,gBAAgB,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAC5D,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAErD,YAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAC7D,YAAM,kBAAkB,mBAAmB,eAAe,MAAM;AAEhE,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,CAAC;AACrD,aAAO,UAAU,cAAc,OAAO,gBAAgB,CAAC,OAAO,IAAI,CAAC;AACnE,aAAO,YAAY,OAAO,OAAO,WAAW,mBAAmB,cAAc,IAAI;AAAA,IACrF,EAAC;AAED,OAAG,qDAAqD,MAAY;AAjJ5E;AAkJY,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,SAAS,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACrD,YAAM,WAAW,OAAO;AACxB,YAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAE7D,YAAM,OAAO,OAAO;AAGpB,YAAM,kBAAiB,UAAK,UAAL,mBAAY,IAAI;AACvC,aAAO,YAAY,gBAAgB,MAAS;AAG5C,aAAO,YAAY,WAAW,OAAO,eAAe,QAAQ,CAAC;AAC7D,YAAM,kBAAkB,4BAA4B,YAAY,WAAW,OAAO,eAAe,EAAE;AAEnG,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,CAAC;AAAA,IACzD,EAAC;AAED,OAAG,wCAAwC,MAAY;AACnD,YAAM,aAAa,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AACzD,YAAM,UAAU;AAAA,QACZ,MAAM,SAAS,OAAO,EAAC,MAAM,SAAQ,CAAC;AAAA,MAC1C;AAEA,iBAAW,UAAU,SAAS;AAC1B,cAAM,kBAAkB,mBAAmB,YAAY,MAAM;AAAA,MACjE;AAEA,YAAM,kBAAkB,4BAA4B,UAAU;AAE9D,aAAO,UAAU,WAAW,OAAO,gBAAgB,CAAC,CAAC;AACrD,iBAAW,UAAU,SAAS;AAC1B,eAAO,YAAY,OAAO,OAAO,WAAW,mBAAmB,EAAE;AAAA,MACrE;AAAA,IACJ,EAAC;AAAA,EACL,CAAC;AACL;;;AChLO,IAAM,mBAAmB,CAAC,YAAgC;AAC7D,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,MAAK,IAAI;AAE9C,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAED,WAAS,eAAe,MAAM;AAC1B,OAAG,oCAAoC,MAAY;AAChD,YAAM,aAAa;AAAA,QACd,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,2BAA2B;AAAA,QAC3B,uBAAuB;AAAA,QACvB,sBAAsB;AAAA,QACtB,uBAAuB;AAAA,UACnB,MAAM;AAAA,UACN,OAAO;AAAA,UACP,WAAW;AAAA,QACf;AAAA,QACA,2BAA2B;AAAA,UACvB,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,QACA,wBAAwB;AAAA,UACpB,IAAI,EAAC,OAAO,GAAG,MAAM,GAAG,KAAK,MAAM,CAAC,EAAC;AAAA,UACrC,WAAW;AAAA,UACX,MAAM;AAAA,UACN,uBAAuB;AAAA,UACvB,SAAS,EAAC,OAAO,IAAI,MAAM,GAAE;AAAA,UAC7B,YAAY,EAAC,SAAS,IAAI,QAAQ,IAAI,UAAU,IAAI,UAAU,GAAE;AAAA,UAChE,KAAK,CAAC;AAAA,UACN,MAAM,EAAC,OAAO,YAAY,MAAM,WAAU;AAAA,UAC1C,OAAO;AAAA,QACX;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,SAAS,OAAO,UAAU;AAE/C,YAAM,YAAY;AAAA,QAAC,QAAQ;AAAA,QACR,+BAA+B;AAAA,QAC/B,wCAAwC;AAAA,MAAE;AAC7D,YAAM,QAAQ,MAAM,UAAU,OAAO,SAAS;AAE9C,YAAM,OAAO,MAAM,YAAY,SAAS,QAAQ,OAAO,EAAC,aAAa,OAAO,YAAY,MAAK,CAAC;AAG9F,UAAI,CAAC;AAAM,eAAO,YAAY,MAAM,KAAK;AAGzC,UAAI,MAAM;AACN,cAAM,KAAK,SAAS;AAEpB,gBAAQ,MAAM,KAAK,IAAI;AAEvB,eAAO,YAAY,KAAK,KAAK,OAAO,EAAE;AACtC,eAAO,YAAY,KAAK,UAAU,OAAO,CAAC;AAC1C,eAAO,YAAY,KAAK,MAAM,OAAO,CAAC;AAAA,MAG1C;AAAA,IACJ,EAAC;AAED,OAAG,yCAAyC,MAAY;AACpD,YAAM,OAAO,YAAY,SAAS,EAAC,MAAM,GAAE,GAAG,EAAC,aAAa,OAAO,YAAY,MAAK,CAAC;AACrF,YAAM,KAAK,SAAS;AAEpB,aAAO,YAAY,KAAK,KAAK,OAAO,EAAE;AAAA,IAC1C,EAAC;AAED,OAAG,kDAAkD,MAAY;AAC7D,YAAM,aAAa;AAAA,QACf,QAAQ;AAAA,QACR,oBAAoB;AAAA,QAEpB,oBAAoB;AAAA,QACpB,yBAAyB;AAAA,QACzB,qBAAqB;AAAA,QACrB,oBAAoB;AAAA,QACpB,qBAAqB;AAAA,UACjB,MAAM;AAAA,UACN,OAAO;AAAA,UACP,WAAW;AAAA,QACf;AAAA,QACA,yBAAyB;AAAA,UACrB,MAAM;AAAA,UACN,OAAO;AAAA,QACX;AAAA,QACA,uBAAuB;AAAA,UACnB,QAAQ;AAAA,UAER,QAAQ;AAAA,UACR,aAAa;AAAA,UACb,cAAc;AAAA,UACd,SAAS;AAAA,UACT,OAAO;AAAA,UACP,eAAe;AAAA,QACnB;AAAA,MACJ;AAEA,YAAM,SAAS,MAAM,SAAS,OAAO,UAAU;AAC/C,YAAM,YAAY;AAAA,QAAC,QAAQ;AAAA,QACR,6BAA6B;AAAA,QAC7B,sCAAsC;AAAA,MAAE;AAC3D,YAAM,QAAQ,MAAM,UAAU,OAAO,SAAS;AAE9C,YAAM,OAAO,MAAM,YAAY,SAAS,QAAQ,OAAO,EAAC,aAAa,OAAO,YAAY,MAAK,CAAC;AAE9F,UAAI,MAAM;AACN,cAAM,KAAK,UAAU;AAAA,MACzB;AAAA,IACJ,EAAC;AAAA,EACL,CAAC;AAED,WAAS,eAAe,MAAM;AAAA,EAE9B,CAAC;AACL;;;AChIO,IAAM,yBAAyB,CAAC,YAAgC;AACnE,QAAM,EAAC,UAAU,IAAI,QAAQ,QAAQ,QAAQ,MAAK,IAAI;AAEtD,MAAI;AACJ,MAAI;AAEJ,SAAO,MAAY;AACf,gBAAY,IAAI,oBAAoB,QAAQ;AAC5C,eAAW,IAAI,oBAAoB,OAAO;AAAA,EAC9C,EAAC;AAED,QAAM,MAAY;AACd,UAAM,UAAU,SAAS;AACzB,UAAM,SAAS,SAAS;AAAA,EAC5B,EAAC;AAED,WAAS,yBAAyB,MAAM;AACpC,OAAG,oDAAoD,MAAY;AAC/D,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,YAAM,MAAM,UAAU,OAAO,MAAM;AAEnC,aAAO,UAAU,MAAM,OAAO,aAAa;AAAA,QACvC,QAAQ;AAAA,UACJ,MAAM;AAAA,UACN,OAAO;AAAA,UACP,SAAS,CAAC;AAAA,QACd;AAAA,MACJ,CAAC;AAED,aAAO,YAAY,MAAM,UAAU,OAAO,MAAM,GAAG,IAAI;AAAA,IAC3D,EAAC;AAED,OAAG,uBAAuB,MAAY;AAClC,YAAM,kBAAkB,EAAC,MAAM,EAAC,MAAM,QAAQ,OAAO,QAAQ,SAAS,CAAC,EAAC,EAAC;AACzE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,aAAa,oBAAoB,gBAAe,CAAC;AAE7F,YAAM,MAAM,UAAU,OAAO,MAAM;AAEnC,aAAO,UAAU,MAAM,OAAO,aAAa,CAAC,CAAC;AAAA,IACjD,EAAC;AAED,OAAG,mDAAmD,MAAY;AAC9D,YAAM,kBAAkB,EAAC,MAAM,EAAC,MAAM,QAAQ,OAAO,QAAQ,SAAS,CAAC,EAAC,EAAC;AACzE,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,aAAa,oBAAoB,gBAAe,CAAC;AAC7F,YAAM,OAAO,MAAM,MAAM,wBAAwB,QAAQ,CAAC,EAAC,MAAM,UAAU,MAAM,cAAa,CAAC,CAAC;AAEhG,YAAM,MAAM,UAAU,SAAS,QAAQ,IAAI;AAC3C,YAAM,UAAU,KAAK,IAAI,CAAAE,UAAQA,MAAK,EAAE;AACxC,aAAO,UAAU,MAAM,OAAO,YAAY,KAAK,SAAS,OAAO;AAE/D,YAAM,MAAM,UAAU,WAAW,KAAK,EAAE;AACxC,aAAO,UAAU,MAAM,OAAO,YAAY,KAAK,SAAS,CAAC,CAAC;AAAA,IAC9D,EAAC;AAED,OAAG,gCAAgC,MAAY;AAC3C,YAAM,kBAAkB,EAAC,MAAM,EAAC,MAAM,QAAQ,OAAO,QAAQ,SAAS,CAAC,KAAK,EAAC,EAAC;AAC9E,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,aAAa,oBAAoB,gBAAe,CAAC;AAE7F,YAAM,MAAM,UAAU,OAAO,QAAQ,YAAY;AAEjD,aAAO,UAAU,MAAM,OAAO,aAAa;AAAA,QACvC,cAAc;AAAA,UACV,MAAM;AAAA,UACN,OAAO;AAAA,UACP,SAAS,CAAC,KAAK;AAAA,QACnB;AAAA,MACJ,CAAC;AAAA,IACL,EAAC;AAED,OAAG,qEAAqE,MAAY;AAChF,YAAM,QAAQ,MAAM,UAAU,OAAO,EAAC,MAAM,YAAW,CAAC;AAExD,YAAM,MAAM,UAAU,OAAO,OAAO;AACpC,aAAO,UAAU,MAAM,OAAO,aAAa;AAAA,QACvC,QAAQ;AAAA,UACJ,MAAM;AAAA,UACN,OAAO;AAAA,UACP,SAAS,CAAC;AAAA,QACd;AAAA,MACJ,CAAC;AAED,YAAM,MAAM,UAAU,OAAO,QAAQ,OAAO;AAC5C,aAAO,UAAU,MAAM,OAAO,aAAa;AAAA,QACvC,QAAQ;AAAA,UACJ,MAAM;AAAA,UACN,OAAO;AAAA,UACP,SAAS,CAAC;AAAA,QACd;AAAA,MACJ,CAAC;AAED,YAAM,MAAM,UAAU,OAAO,MAAM;AACnC,YAAM,MAAM,UAAU,OAAO,UAAU;AACvC,aAAO,UAAU,MAAM,OAAO,aAAa;AAAA,QACvC,SAAS;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,UACP,SAAS,CAAC;AAAA,QACd;AAAA,MACJ,CAAC;AAAA,IACL,EAAC;AAAA,EACL,CAAC;AACL;;;ACxFO,IAAM,iBAAiB,CAAC,WAAmB;AAC9C,MAAI,CAAC;AAAQ;AAEb,UAAQ,KAAK,6CAA6C;AAC1D,UAAQ,KAAK,6RAA6R;AAE1S,SAAO,cAAc,4BAA4B,iBAAiB,EAAC,aAAa,2BAA0B,CAAC;AAC3G,SAAO,cAAc,+BAA+B,yBAAyB,EAAC,aAAa,8BAA6B,CAAC;AACzH,SAAO,cAAc,8BAA8B,kBAAkB,EAAC,aAAa,4BAA2B,CAAC;AAC/G,SAAO,cAAc,+BAA+B,mBAAmB,EAAC,aAAa,6BAA4B,CAAC;AAClH,SAAO,cAAc,gCAAgC,0BAA0B,EAAC,aAAa,oCAAmC,CAAC;AACjI,SAAO,cAAc,+BAA+B,2BAA2B,EAAC,aAAa,4CAA2C,CAAC;AACzI,SAAO,cAAc,mCAAmC,yBAAyB,EAAC,aAAa,2CAA0C,CAAC;AAC1I,SAAO,cAAc,8BAA8B,wBAAwB,EAAC,aAAa,kCAAiC,CAAC;AAC3H,SAAO,cAAc,0BAA0B,kBAAkB,EAAC,aAAa,gCAA+B,CAAC;AAC/G,SAAO,cAAc,iCAAiC,wBAAwB,EAAC,aAAa,2BAA0B,CAAC;AAC3H;;;ACjBA,SAAsB,gBAAgB,UAAU,MAAM;AAAA;AAlBtD;AAmBI,QAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ;AAE3B,UAAM,OAAO,MAAM,QAAQ,aAAa,QAAQ;AAChD,QAAI,EAAE,gBAAgB;AAAU,aAAO,QAAQ,MAAM,yFAAyF,IAAI;AAElJ,UAAM,UAAU,mCAAmC,KAAK;AACxD,QAAI,QAAQ,KAAK,OAAO,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,KAAK,IAAI;AACjE,QAAI,CAAC,OAAO;AACR,cAAQ,MAAM,MAAM;AAAA,QAChB;AAAA,UAEI,MAAM,KAAK;AAAA,UACX,MAAM;AAAA,UACN,KAAK,KAAK;AAAA,UACV;AAAA,UACA,OAAO,EAAE,yBAAyB,KAAK;AAAA,QAC3C;AAAA,QACA,EAAE,aAAa,MAAM;AAAA,MACzB;AAAA,IACJ;AAEA,QAAI;AAAO,iBAAK,SAAL,mBAAW,kBAAkB,OAAO;AAAA,EACnD;AAAA;AAQO,SAAS,cAAc,UAAU;AAjDxC;AAkDI,MAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ;AAE3B,QAAM,UAAU,YAAY,WAAW;AACvC,MAAI;AACJ,MAAI,QAAQ;AAAO,YAAQ,KAAK,OAAO,OAAO,QAAQ;AACtD,MAAI,CAAC,QAAQ;AAAO;AACpB,MAAI,CAAC;AAAO,YAAQ,KAAK,OAAO,IAAI,QAAQ,KAAK;AACjD,QAAM,OAAO,QAAQ,MAAM,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,QAAQ,IAAI;AACpE,MAAI,CAAC,MAAM;AACP,YAAO,QAAG,kBAAH,mBAAkB,KAAK,qDAAqD;AAAA,EACvF;AAEA,SAAO,KAAK,WAAW;AAC3B;AAQA,SAAsB,iBAAiB,MAA4C,MAAM;AAAA;AACrF,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAM;AAEhC,UAAM,EAAC,SAAS,MAAK,IAAI;AAGzB,UAAM,OAAO,QAAQ,oBAAoB,KAAK;AAE9C,UAAM,gBAAgB,KAAK,OAAO,SAAS,KAAK,CAAAC,WAASA,OAAM,SAAS,IAAI;AAC5E,QAAI;AAAe;AAGnB,UAAM,UAAU,oCAAoC;AACpD,UAAM,QAAQ,MAAM,MAAM,OAAO;AAAA,MAC7B;AAAA,MACA,MAAM;AAAA,MACN;AAAA,IAEJ,CAAC;AACD,QAAI;AAAO,YAAM,KAAK,KAAK,kBAAkB,OAAO,IAAI;AAAA,EAC5D;AAAA;AAOA,SAAsB,eAAe,YAAY;AAAA;AAC7C,QAAI,CAAC,QAAQ,CAAC,KAAK;AAAQ;AAC3B,QAAI,CAAC;AAAY;AAGjB,UAAM,UAAU,YAAY,WAAW;AACvC,QAAI,CAAC;AAAS;AACd,UAAM,QAAU,KAAK,OAAO,OAAO,QAAQ,UAAoB,KAAK,OAAO,IAAI,QAAQ,KAAe;AAEtG,QAAI,CAAC;AAAO;AACZ,UAAM,MAAM,UAAU,YAAY,EAAC,SAAS,KAAI,CAAC;AAAA,EAErD;AAAA;;;ACvGO,IAAM,4BAA4B,MAAM;AAC3C,OAAK,YAAY,SAAS,eAAe,+BAA+B;AAAA,IACpE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU,CAAC,EAAE,KAAK,QAAQ,WAAW,CAAC,EAAE,CAAC;AAAA,IACzC,QAAQ,MAAM,8BAA8B,kBAAkB;AAAA,EAClE,CAAC;AAED,OAAK,YAAY,SAAS,eAAe,8BAA8B;AAAA,IACnE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,UAAU,CAAC,EAAE,KAAK,QAAQ,WAAW,CAAC,EAAE,CAAC;AAAA,IACzC,QAAQ,MAAM,IAAI,sBAAsB,EAAE,OAAO,IAAI;AAAA,EACzD,CAAC;AACL;;;ACmCO,IAAM,eAAN,MAAmB;AAAA,EACtB,OAAO,gBAAgB;AACnB,YAAQ,IAAI,yCAAyC;AAGrD,UAAM,KAAK,QAAQ,aAAa,IAAI;AACpC,UAAM,KAAK,SAAS,aAAa,wCAAwC;AAEzE,UAAM,GAAG,cAAc,aAAa,UAAU;AAC9C,UAAM,GAAG,SAAS,aAAa,KAAK;AACpC,UAAM,GAAG,cAAc,aAAa,UAAU;AAC9C,UAAM,GAAG,uBAAuB,aAAa,mBAAmB;AAChE,UAAM,GAAG,0BAA0B,aAAa,sBAAsB;AACtE,UAAM,GAAG,gCAAgC,UAAU,8BAA8B;AACjF,UAAM,GAAG,uBAAuB,aAAa,mBAAmB;AAEhE,UAAM,GAAG,kBAAkB,8BAA8B,gBAAgB;AACzE,UAAM,GAAG,cAAc,aAAa,2BAA2B;AAC/D,UAAM,GAAG,cAAc,aAAa,8BAA8B;AAClE,UAAM,GAAG,0BAA0B,YAAY,yBAAyB;AAExE,UAAM,GAAG,iBAAiB,aAAa,gBAAgB;AACvD,UAAM,GAAG,sBAAsB,UAAU,oBAAoB;AAE7D,UAAM,GAAG,eAAe,cAAc;AAAA,EAC1C;AAAA,EAEA,OAAO,OAAO;AACV,YAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CASnB;AAEO,SAAK,iBAAiB;AAAA,MAIlB;AAAA,MACA;AAAA,MACA;AAAA,MAIA;AAAA,MACA;AAAA,MAKA;AAAA,MAMA,MAAM;AAAA,MAON,OAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MAMA,aAAa;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MAMA,cAAc;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,MAMA,aAAa;AAAA,QACT;AAAA,MACJ;AAAA,MAIA,eAAe;AAAA,QACX;AAAA,QACA;AAAA,MACJ;AAAA,MAOA,YAAY;AAAA,IAChB;AAGA,WAAO,MAAM,gBAAgB;AAC7B,WAAO,KAAK,gBAAgB;AAC5B,WAAO,OAAO,gBAAgB;AAE9B,WAAO,aAAa,gBAAgB;AAEpC,WAAO,MAAM,cAAc;AAG3B,WAAO,OAAO,WAAW,UAAW;AAEpC,cAAU,UAAU,wBAAwB;AAG5C,WAAO,KAAK,MAAM,KAAK,OAAO;AAE9B,WAAO,KAAK,SAAS;AAIrB,WAAO,MAAM;AAGb,2BAAuB;AACvB,8BAA0B;AAI1B,WAAO,gBAAgB,QAAQ,UAAU;AACzC,WAAO,cAAc,aAAa,mBAAmB;AAAA,MACjD,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO,CAAC,WAAW,WAAW;AAAA,IAClC,CAAC;AACD,WAAO,cAAc,aAAa,iBAAiB;AAAA,MAC/C,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO,CAAC,IAAI;AAAA,IAChB,CAAC;AACD,WAAO,cAAc,aAAa,sBAAsB;AAAA,MACpD,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO,CAAC,SAAS;AAAA,IACrB,CAAC;AACD,WAAO,cAAc,aAAa,qBAAqB;AAAA,MACnD,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO,CAAC,QAAQ;AAAA,IACpB,CAAC;AACD,WAAO,cAAc,aAAa,qBAAqB;AAAA,MACnD,OAAO;AAAA,MACP,aAAa;AAAA,MACb,OAAO,CAAC,QAAQ;AAAA,IACpB,CAAC;AAGD,UAAM,gBAAgB,QAAQ,SAAS;AACvC,UAAM,cAAc,aAAa,cAAc;AAAA,MAC3C,OAAO;AAAA,MACP,aAAa;AAAA,IACjB,CAAC;AAGD,wBAAoB,gBAAgB,cAAc,QAAQ,kBAAkB;AAC5E,wBAAoB,cAAc,cAAc,aAAa,uBAAuB;AAAA,MAChF,aAAa;AAAA,IACjB,CAAC;AAGD,qBAAiB,cAAc;AAAA,EACnC;AAAA,EAEA,OAAa,QAAQ;AAAA;AApRzB;AAqRQ,WAAI,UAAK,SAAL,mBAAW,MAAM;AAEjB,YAAI,SAAS,cAAc;AACvB,gBAAM,SAAS,sBAAsB;AACrC;AAAA,QACJ;AAGA,cAAM,SAAS,eAAe;AAE9B,YAAI,qBAAqB,iBAAiB;AACtC,gBAAM,IAAI,qBAAqB,EAAE,OAAO,IAAI;AAAA,QAChD;AAAA,MACJ;AAGA,YAAM,mBAAmB;AACzB,QAAE,QAAQ,EAAE,GAAG,SAAS,kBAAkB,MAAS;AAAG,qBAAM,YAAY,kBAAkB;AAAA,QAAC;AAC3F,YAAM,sBAAsB;AAC5B,QAAE,QAAQ,EAAE,GAAG,SAAS,qBAAqB,MAAS;AAAG,qBAAM,YAAY,kBAAkB;AAAA,QAAC;AAE9F,YAAM,GAAG,qBAAqB,aAAa,oBAAoB;AAC/D,mBAAa,wBAAwB;AAAA,IACzC;AAAA;AAAA,EAEA,OAAO,aAAa;AAChB,QAAI,EAAC,iCAAQ;AAAO;AAEpB,WAAO,KAAK,eAAe,KAAK,SAAS,IAAI,aAAa,kBAAkB;AAE5E,eAAW,UAAU,mBAAmB;AAAA,EAC5C;AAAA,EAaA,OAAO,WAAW,KAAK,UAAU,MAAM;AACnC,YAAQ,SAAS,MAAM;AAAA,MACnB,KAAK;AACD,wBAAgB,UAAU,IAAI;AAC9B,eAAO;AAAA,MACX,KAAK;AACD,yBAAiB,SAAS,MAAM,IAAI;AACpC,eAAO;AAAA,IACf;AAAA,EACJ;AAAA,EAEA,OAAO,oBAAoB,UAAU,MAAM;AACvC,SAAK,KAAK,uCAAuC,EAAE,GAAG,SAAS,CAAC,UAAU;AACtE,YAAM,eAAe;AACrB,UAAI,sBAAsB,EAAE,OAAO,IAAI;AAAA,IAC3C,CAAC;AAAA,EACL;AAAA,EAEA,OAAO,uBAAuB,UAAU;AAnV5C;AAoVQ,UAAM,gBAAgB,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,OAAO;AAE7D,SAAI,UAAK,SAAL,mBAAW,MAAM;AACjB,oBAAc,MAAM,KAAK;AAAA,QACrB,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ,CAAC;AAAA,IACL;AAEA,kBAAc,MAAM,KAAK,8BAA8B,WAAW,CAAC;AAAA,EACvE;AAAA,EASA,OAAO,oBAAoB;AACvB,YAAQ,MAAM,2DAA2D;AAAA,EAC7E;AAAA,EAEA,OAAO,oBAAoB,KAAkB,MAAc;AACvD,UAAM,SAAS,EAAE,wDAAwD;AACzE,SAAK,KAAK,QAAQ,EAAE,OAAO,MAAM;AACjC,WAAO,GAAG,SAAS,CAAC,UAAU;AAC1B,UAAI,OAAO,EAAE,OAAO,IAAI;AAAA,IAC5B,CAAC;AAAA,EACL;AAAA,EAQA,OAAa,4BAA4B,MAAe,MAA6B,IAAY;AAAA;AAC7F,UAAI,CAAC,OAAO,SAAS,CAAC,KAAK;AAAQ;AAEnC,UAAI,KAAK,QAAQ;AAEb,YAAI,cAAc;AAAA,UAEd,GAAG,KAAK,OAAO,OAAO,CAAC,UAAoB,MAAM,KAAK,KAAK,MAAM,QAAQ,CAAC;AAAA,UAG1E,GAAG,OAAO,MAAM,OAAO,OAAO,WAAM;AArYpD;AAqYuD,oBAAC,MAAM,eAAa,WAAM,UAAN,mBAAa,aAAU,WAAM,UAAN,mBAAa;AAAA,WAAS,EAAE,IAAI,OAAK,EAAE,KAAK;AAAA,QAC9H;AAGA,cAAM,OAAO,KAAK;AAClB,YAAI,CAAC;AAAM;AACX,mBAAW,MAAM,aAAa;AAC1B,cAAI,CAAC;AAAI;AACT,gBAAM,GAAG,kBAAkB,IAAI;AAAA,QACnC;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA,EAEA,OAAa,+BAA+B,MAAe,MAA6B,IAAY;AAAA;AAChG,YAAM,kBAAkB,mBAAmB,MAAM,MAAM,EAAE;AAAA,IAC7D;AAAA;AAAA,EAOA,OAAO,0BAA0B;AAC7B,QAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAM;AAChC,YAAQ,IAAI,mDAAmD;AAC/D,UAAM,QAA4B;AAAA,MAC9B,CAAC,MAAM,uBAAuB,CAAC,kBAAkB,wCAAwC;AAAA,MACzF,CAAC,MAAM,cAAc,CAAC,UAAU,+BAA+B;AAAA,MAC/D,CAAC,MAAM,aAAa,CAAC,UAAU,8BAA8B;AAAA,IACjE;AAEA,SAAK,OAAO,GAAG,eAAe,CAAO,YAA+B;AApa5E;AAqaY,cAAQ,IAAI,kDAAkD,OAAO;AAErE,YAAM,WAAW,MAAM,QAAQ;AAC/B,UAAI,CAAC,YAAY,SAAS,WAAW;AAAG,eAAO,QAAQ,KAAK,mEAAmE,OAAO;AAEtI,UAAI,QAAQ,YAAU,UAAK,SAAL,mBAAW,QAAO,QAAQ;AAAQ;AACxD,UAAI,QAAQ,YAAU,UAAK,SAAL,mBAAW;AAAI,gBAAQ,IAAI,qDAAqD;AAEtG,iBAAW,WAAW,UAAU;AAC5B,gBAAQ,IAAI,4DAA4D,OAAO;AAC/E,cAAM,QAAQ,OAAO;AAAA,MACzB;AAAA,IACJ,EAAC;AAAA,EACL;AAAA,EASA,OAAO,2CAA2C;AAE9C,UAAM,YAAY,KAAK,QAAQ,IAAI,gCAAgC;AACnE,QAAI,CAAC;AAAW;AAGhB,UAAM,MAAM,UAAU;AACtB,QAAI,CAAC;AAAK;AAEV,YAAQ,IAAI,uEAAuE;AAEnF,UAAM,YAAY,IAAI,MAAM;AAE5B,UAAM,SAAS;AAAA,MACX,aAAa;AAAA,MACb,cAAc,CAAC;AAAA,QACX,MAAM;AAAA,QACN,cAAc;AAAA,UACV,EAAE,UAAU,oDAAoD,aAAa,UAAU,YAAY,MAAM,aAAa,MAAM,UAAU,UAAU,kBAAkB;AAAA,QACtK;AAAA,MACJ,CAAC;AAAA,IACL;AAGA,QAAI,eAAe,KAAK,MAAM;AAAA,EAClC;AAAA,EAEA,OAAa,qBAAqB,SAAsB,MAAM,MAAM;AAAA;AAChE,YAAM,YAAY,qBAAqB,SAAS,MAAM,IAAI;AAC1D,YAAM,YAAY,qBAAqB,SAAS,MAAM,IAAI;AAAA,IAC9D;AAAA;AAAA,EAEA,OAAa,iBAAiB,SAAkB,MAAM,MAAM;AAAA;AACxD,YAAM,YAAY,iBAAiB,SAAS,MAAM,IAAI;AACtD,YAAM,YAAY,iBAAiB,SAAS,MAAM,IAAI;AAAA,IAC1D;AAAA;AAEJ;;;ACxdA,aAAa,cAAc;AAC3B,iBAAiB,gBAAgB;",
  "names": ["t", "e", "i", "s", "a", "n", "o", "r", "l", "d", "h", "g", "p", "c", "u", "m", "v", "f", "XMLDOMImplementation", "XMLDOMErrorHandler", "XMLDOMStringList", "XMLDOMConfiguration", "XMLAttribute", "XMLNamedNodeMap", "XMLElement", "XMLCharacterData", "XMLCData", "XMLComment", "XMLDeclaration", "XMLDTDAttList", "XMLDTDEntity", "XMLDTDElement", "XMLDTDNotation", "XMLDocType", "XMLRaw", "XMLText", "XMLProcessingInstruction", "XMLDummy", "XMLNodeList", "XMLNode", "XMLStringifier", "XMLWriterBase", "XMLStringWriter", "XMLDocument", "XMLDocumentCB", "XMLStreamWriter", "self", "len", "i", "len2", "Buffer", "i", "byteLength", "Buffer", "Buffer", "self", "s", "ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "once", "processors", "Parser", "err", "document", "_a", "document", "hits", "glitches", "_a", "_a", "marks", "entries", "document", "document", "document", "document", "changes", "skill", "marks", "document", "pack", "document", "game", "updateData", "document", "game", "Tagify", "itemData", "modifiers", "document", "partialDamageData", "item", "dataFile", "document", "CyberwareParser", "chummerLifestyle", "CyberwareParser", "document", "item", "_a", "attribute", "_a", "item", "document", "actor", "effect", "item", "macro"]
}
